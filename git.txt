1. 服务器安装ssh,git, python-setuptools
sudo apt-get install openssh-server openssh-client
sudo apt-get install git-core
sudo apt-get install python-setuptools

2. 服务器安装gitosis
cd /tmp
#git clone git://eagain.net/gitosis.git
git clone https://github.com/res0nat0r/gitosis.git
git clone git://github.com/res0nat0r/gitosis.git
cd gitosis
sudo python setup.py install
 
3. 客户端
sudo apt-get install openssh-server openssh-client
sudo apt-get install git-core
ssh-keygen -t rsa
scp .ssh/id_rsa.pub cjcheng@192.168.1.108:/tmp
 
4. 服务器配置 git服务器
创建git服务器管理用户
sudo useradd -m git
sudo passwd git
vim /etc/passwd //将git /bin/sh改为/bin/bash
sudo mkdir /home/git/repositories
sudo chown git:git /home/git/repositories
sudo chmod 755 /home/git/repositories
git config --global user.name "cjcheng"
git config --global user.email "caijicheng2006@163.com"
 
5. 服务器初始化gitosis
sudo -H -u git gitosis-init < /tmp/id_rsa.pub
sudo chmod 755 /home/git/repositories/gitosis-admin.git/hooks/post-update
 
6. 客户端clone gitosis
git clone git@192.168.1.108:gitosis-admin.git

7. 客户端创建test.git
sudo vim gitosis-admin/gitosis.conf
[group test]
members = cjcheng@cjcheng
writable = test
提交
git add .
git commit -m "add test project"
git push origin master
mkdir test
cd test
git init
echo "hello" > readme
git add .
git commit -m "readme"
git remote add origin git@192.168.1.108:test.git
git push origin master
 
8.另一个客户端git clone
su cjc
ssh-keygen -t rsa
exit
cp ~/.ssh/id_rsa.pub ~/gitosis-admin/keydir/cjc@cjcheng.pub
sudo sudo vim gitosis-admin/gitosis.conf
[group test]
members = cjcheng@cjcheng cjc@cjcheng
writable = test
git add .
git commit -m "add user cjc"
git push origin master
git clone git@192.168.1.108:test.git

================================================================================
常用的git命令
================================================================================
git diff --cached  比较暂存区内的文件与上次提交的差别。
git commit -a -m 'added new benchmarks' 一步部到位提交文件，只针对已经有跟踪的文件，对于新文件，还是要用add
git rm --cached readme.txt只是从暂存区内删除，用于已经添加了，但是文件不需要删除，
git rm log/\*.log  删除所有log/ 目录下扩展名为.log 的文件
git rm \*~      递归删除当前目录及其子目录中所有~ 结尾的文件。
git log --stat 显示简要的增改行数统计 列出每次更改 文件的列表
git log --pretty=oneline   列出版本 号与提交的备注
git log --pretty=format:"%h - %an, %ar : %s"可以定制要显示的记录格式
git log --pretty=format:"%h %s" --graph  查看出分支的情况
git commit --amend    当提交后还想提交文件，此时先add剩下的文件，然后执行此句，进行重新提交
git reset HEAD filename  取消已经放在暂缓区内的东西

有时候发现某个关键文件被改动了，需要跟踪查看对这个关键文件的所有commit的记录，以便理解其中的修改原因和过程
git log -p “file name”
git blame “file name" 可以显示这个文件的每一行的最后提交commit，方便定位commit

分支
git checkout -b iss53  新建分支，并转到分支
git merge hotfix  合并分支
git branch -d hotfix 合并完后删除某个分支
git branch  查看所有分支
git branch --merge 查看哪些分支已被并入当前分支
git branch --no-merged  还没有合并的分支
合并前也必须保证主分支也已经提交了合并时必须回到主分支，然后进行合并; 在进行分支切换时必须保证文件已经提交完如果合并有冲突则进行，解决并提交;
