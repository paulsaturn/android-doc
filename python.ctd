<?xml version="1.0" ?><cherrytree><node name="virtualenvwrapper" prog_lang="custom-colors" readonly="False" tags="" unique_id="1"><rich_text>    VirtualEnv 是什么
 VirtualEnv用于在一台机器上创建多个独立的python运行环境，VirtualEnvWrapper为前者提供了一些便利的命令行上的封装。
 为什么要用
 - 隔离项目之间的第三方包依赖，如A项目依赖django1.2.5，B项目依赖django1.3。
 - 为部署应用提供方便，把开发环境的虚拟环境打包到生产环境即可,不需要在服务器上再折腾一翻。
 怎么用
 安装
 - pip install virtualenvwrapper
 - 把下面这句加到~/.bash_profile里面，如不嫌麻烦，也可以每次都手动执行。
 source /usr/local/bin/virtualenvwrapper.sh
 常用命令
 创新的虚拟环境
 - mkvirtualenv [env1]
 该命令会帮我们创建一个新环境,默认情况下，环境的目录是.virtualenv/en1,创建过程中它会自动帮我们安装pip，以后我们要安装新依赖时可直接使用pip命令。
  创建完之后，自动切换到该环境下工作，可看到提示符变为：
 (env1)$
 在这个环境下安装的依赖不会影响到其他的环境
 - lssitepackages 显示该环境中所安装的包
 切换环境
 - workon [env]
 随时使用“workon 环境名”可以进行环境切换，如果不带环境名参数，则显示当前使用的环境
 - deactivate
 在某个环境中使用，切换到系统的python环境
 其他命令
 - showvirtualenv [env] 显示指定环境的详情。
 - rmvirtualenv [env] 移除指定的虚拟环境，移除的前提是当前没有在该环境中工作。如在该环境工作，先使用deactivate退出。
 - cpvirtualenv [source] [dest] 复制一份虚拟环境。
 - cdvirtualenv [subdir] 把当前工作目录设置为所在的环境目录。
 - cdsitepackages [subdir] 把当前工作目录设置为所在环境的sitepackages路径。
 - add2virtualenv [dir] [dir] 把指定的目录加入当前使用的环境的path中，这常使用于在多个project里面同时使用一个较大的库的情况。
 - toggleglobalsitepackages -q 控制当前的环境是否使用全局的sitepackages目录。


例子:
    source /usr/local/bin/virtualenvwrapper.sh
    mkvirtualenv --python=/usr/bin/python2.7 python2.7
    执行之后shell提示变为下面：
    (python2.7)paul@paul-desktop: </rich_text></node><node name="sqlite3" prog_lang="custom-colors" readonly="False" tags="" unique_id="5"><rich_text>    SQLite数据库是一款非常小巧的嵌入式开源数据库软件，也就是说没有独立的维护进程，所有的维护都来自于程序本身(而且可以完全内存模式运行）。它使 用一个文件存储整个数据库，操作十分方便。它的最大优点是使用方便，功能相比于其它大型数据库来说，确实有些差距。但是性能表现上，SQLITE并不逊 色。麻雀虽小，五脏俱全， sqlite 实现了多数 sql-92 的标准，比如说 transaction 、 trigger 和复杂的查询等。
python的数据库模块有统一的接口标准，所以数据库操作都有统一的模式，基本上都是下面几步（假设数据库模块名为db）：
1. 用db.connect创建数据库连接，假设连接对象为conn
2. 如果该数据库操作不需要返回结果，就直接用conn.execute查询，根据数据库事务隔离级别的不同，可能修改数据库需要conn.commit
3. 如果需要返回查询结果则用conn.cursor创建游标对象cur, 通过cur.execute查询数据库，用cur.fetchall/cur.fetchone/cur.fetchmany返回查询结果。根据数据库事 务隔离级别的不同，可能修改数据库需要conn.commit
4. 关闭cur, conn
 
下面让我们一步步走进Python中的SQLite吧。
</rich_text><rich_text scale="h3" weight="heavy">一，Python SQLITE数据库导入模块：</rich_text><rich_text>
import sqlite3
 
</rich_text><rich_text scale="h3" weight="heavy">二，创建数据库/打开数据库：</rich_text><rich_text>
cx = sqlite3.connect(&quot;～/test.db&quot;) 其实我们不需要显式的创建一个sqlite数据库，在调用connect函数的时候，指定库名称，如果指定的数据库存在就直接打开这个数据库，如果不存在就新创建一个再打开。这一点应用很好理解。
 
</rich_text><rich_text scale="h3" weight="heavy">三，数据库连接对象：</rich_text><rich_text>
打开数据库时返回的对象cx就是一个数据库连接对象，它可以有以下操作：
commit()--事务提交
rollback()--事务回滚
close()--关闭一个数据库连接
cursor()--创建一个游标
 
</rich_text><rich_text scale="h3" weight="heavy">四，Python SQLITE数据库游标的使用：</rich_text><rich_text>
 游标提供了一种对从表中检索出的数据进行操作的灵活手段，就本质而言，游标实际上是一种能从包括多条数据记录的结果集中每次提取一条记录的机制。游标总是与一条SQL  选择语句相关联。因为游标由结果集（可以是零条、一条或由相关的选择语句检索出的多条记录）和结果集中指向特定记录的游标位置组成。当决定对结果集进行处理时，必须声明一个指向该结果集的游标。
   我们知道关系数据库管理系统实质是面向集合的，在Sqlite中并没有一种描述表中单一记录的表达形式，除非使用where  子句来限制只有一条记录被选中。因此我们必须借助于游标来进行面向单条记录的数据处理。由此可见，游标允许应用程序对查询语句select  返回的行结果集中每一行进行相同或不同的操作，而不是一次对整个结果集进行同一种操作；它还提供对基于游标位置而对表中数据进行删除或更新的能力；正是游标把作为面向集合的数据库管理系统和面向行的程序设计两者联系起来，使两个数据处理方式能够进行沟通。
下面着重阐述cursor游标的使用。其实，所有sql语句的执行都要在游标对象下进行。
首先，定义一个游标：
cu = cx.cursor() 这样定义了一个游标。游标对象有以下的操作：
execute()--执行sql语句
executemany--执行多条sql语句
close()--关闭游标
fetchone()--从结果中取一条记录，并将游标指向下一条记录
fetchmany()--从结果中取多条记录
fetchall()--从结果中取出所有记录
scroll()--游标滚动
下面就使用Python SQLITE数据库中游标对我们上面建立的数据库作一些操作吧：
</rich_text><rich_text weight="heavy">1,建表：</rich_text><rich_text>
cu.execute(&quot;create table catalog (id integer primary key,pid integer,name varchar(10) UNIQUE)&quot;) 上面语句创建了一个叫catalog的表，它有一个主键id，一个pid，和一个name，name是不可以重复的。

</rich_text><rich_text weight="heavy">2,插入数据:</rich_text><rich_text>
cu.execute(&quot;insert into catalog values(0, 0, 'name1')&quot;)
cu.execute(&quot;insert into catalog values(1, 0, 'hello')&quot;)
 简单的插入两行数据,不过需要提醒的是,只有提交了之后,才能生效.我们使用数据库连接对象cx来进行提交commit和回滚rollback操作.
cx.commit()

</rich_text><rich_text weight="heavy">3,查询:</rich_text><rich_text>
cu.execute(&quot;select * from catalog&quot;) 要提取查询到的数据,使用游标的fetch***函数,如:
print cu.fetchall() 返回结果如下:
[(0, 0, u'name1'), (1, 0, u'hello')]
如果我们使用cu.fetchone(),则首先返回列表中的第一项,再次使用,则返回第二项,依次下去.
如果没有数据，cu.fetchone()返回None; cu.fetchall()返回[] 
    while True:
        r = c.fetchone()
        if not r:
            break
        print r 
 
</rich_text><rich_text weight="heavy">4,修改:</rich_text><rich_text>
cu.execute(&quot;update catalog set name='name2' where id = 0&quot;) 
cx.commit() 注意,修改数据以后提交
 
</rich_text><rich_text weight="heavy">5,删除:</rich_text><rich_text>
cu.execute(&quot;delete from catalog where id = 1&quot;)  cx.commit()
以上简单的操作反应的Python SQLITE数据库操作的基本要点,这里点到为止.然后,SQLite的强大,并不仅限于此,其对SQL高级特性的支持及其小巧灵活的特点,使得SQLite在众多领域受到开发者的青睐.
 ---------------------------------------------------------------------------
举例：
 Exemplary exemplar 1
import sqlite3
con = sqlite3.connect('d:/mydatabase.db3')
cur = con.cursor()
cur.execute('CREATE TABLE foo (o_id INTEGER PRIMARY KEY, fruit VARCHAR(20), veges VARCHAR(30))')
con.commit()
cur.execute('INSERT INTO foo (o_id, fruit, veges) VALUES(NULL, &quot;apple&quot;, &quot;broccoli&quot;)')
con.commit()
print cur.lastrowid
cur.execute('SELECT * FROM foo')
print cur.fetchall()
  Exemplary exemplar 2
#-*- encoding:gb2312 -*-
import sqlite3
conn = sqlite3.connect(&quot;D:/aaa.db&quot;)
conn.isolation_level = None #这个就是事务隔离级别，默认是需要自己commit才能修改数据库，置为None则自动每次修改都提交,否则为&quot;&quot;
# 下面就是创建一个表
conn.execute(&quot;create table if not exists t1(id integer primary key autoincrement, name varchar(128), info varchar(128))&quot;)
# 插入数据
conn.execute(&quot;insert into t1(name,info) values ('zhaowei', 'only a test')&quot;)
# 如果隔离级别不是自动提交就需要手动执行commit
conn.commit()
# 获取到游标对象
cur = conn.cursor()
# 用游标来查询就可以获取到结果
cur.execute(&quot;select * from t1&quot;)
# 获取所有结果
res = cur.fetchall()
print 'row:', cur.rowcount
# cur.description是对这个表结构的描述
print 'desc', cur.description
# 用fetchall返回的结果是一个二维的列表
for line in res:
    for f in line:
        print f,
    print
print '-'*60
cur.execute(&quot;select * from t1&quot;)
# 这次查询后只取一个结果，就是一维列表
res = cur.fetchone()
print 'row:', cur.rowcount
for f in res:
    print f,
print
# 再取一行
res = cur.fetchone()
print 'row:', cur.rowcount
for f in res:
    print f,
print
print '-'*60
 
cur.close()
conn.close()
 ---------------------------------------------------------------------------
         </rich_text></node><node name="文件操作" prog_lang="custom-colors" readonly="False" tags="" unique_id="3"><rich_text>总是记不住API。昨晚写的时候用到了这些，但是没记住，于是就索性整理一下吧：
python中对文件、文件夹（文件操作函数）的操作需要涉及到os模块和shutil模块。
得到当前工作目录，即当前Python脚本工作的目录路径: os.getcwd()
返回指定目录下的所有文件和目录名:os.listdir()
函数用来删除一个文件:os.remove()
删除多个目录：os.removedirs（r“c：\python”）
检验给出的路径是否是一个文件：os.path.isfile()
检验给出的路径是否是一个目录：os.path.isdir()
判断是否是绝对路径：os.path.isabs()
检验给出的路径是否真地存:os.path.exists()
返回一个路径的目录名和文件名:os.path.split()     eg os.path.split('/home/swaroop/byte/code/poem.txt') 结果：('/home/swaroop/byte/code', 'poem.txt') 

分离扩展名：os.path.splitext()
获取路径名：os.path.dirname()
获取文件名：os.path.basename()
运行shell命令: os.system()
读取和设置环境变量:os.getenv() 与os.putenv()
给出当前平台使用的行终止符:os.linesep    Windows使用'\r\n'，Linux使用'\n'而Mac使用'\r'
指示你正在使用的平台：os.name       对于Windows，它是'nt'，而对于Linux/Unix用户，它是'posix'
重命名：os.rename（old， new）
创建多级目录：os.makedirs（r“c：\python\test”）
创建单个目录：os.mkdir（“test”）
获取文件属性：os.stat（file）
修改文件权限与时间戳：os.chmod（file）
终止当前进程：os.exit（）
获取文件大小：os.path.getsize（filename）

文件操作：
os.mknod(&quot;test.txt&quot;)        创建空文件
fp = open(&quot;test.txt&quot;,w)     直接打开一个文件，如果文件不存在则创建文件
关于open 模式：
w     以写方式打开，
a     以追加模式打开 (从 EOF 开始, 必要时创建新文件)
r+     以读写模式打开
w+     以读写模式打开 (参见 w )
a+     以读写模式打开 (参见 a )
rb     以二进制读模式打开
wb     以二进制写模式打开 (参见 w )
ab     以二进制追加模式打开 (参见 a )
rb+    以二进制读写模式打开 (参见 r+ )
wb+    以二进制读写模式打开 (参见 w+ )
ab+    以二进制读写模式打开 (参见 a+ )
 
fp.read([size])                     #size为读取的长度，以byte为单位
fp.readline([size])                 #读一行，如果定义了size，有可能返回的只是一行的一部分
fp.readlines([size])                #把文件每一行作为一个list的一个成员，并返回这个list。其实它的内部是通过循环调用readline()来实现的。如果提供size参数，size是表示读取内容的总长，也就是说可能只读到文件的一部分。
fp.write(str)                      #把str写到文件中，write()并不会在str后加上一个换行符
fp.writelines(seq)            #把seq的内容全部写到文件中(多行一次性写入)。这个函数也只是忠实地写入，不会在每行后面加上任何东西。
fp.close()                        #关闭文件。python会在一个文件不用后自动关闭文件，不过这一功能没有保证，最好还是养成自己关闭的习惯。  如果一个文件在关闭后还对其进行操作会产生ValueError
fp.flush()                                      #把缓冲区的内容写入硬盘
fp.fileno()                                      #返回一个长整型的”文件标签“
fp.isatty()                                      #文件是否是一个终端设备文件（unix系统中的）
fp.tell()                                         #返回文件操作标记的当前位置，以文件的开头为原点
fp.next()                                       #返回下一行，并将文件操作标记位移到下一行。把一个file用于for … in file这样的语句时，就是调用next()函数来实现遍历的。
fp.seek(offset[,whence])               #将文件打操作标记移到offset的位置。这个offset一般是相对于文件的开头来计算的，一般为正数。但如果提供了whence参数就不一定 了，whence可以为0表示从头开始计算，1表示以当前位置为原点计算。2表示以文件末尾为原点进行计算。需要注意，如果文件以a或a+的模式打开，每 次进行写操作时，文件操作标记会自动返回到文件末尾。
fp.truncate([size])                       #把文件裁成规定的大小，默认的是裁到当前文件操作标记的位置。如果size比文件的大小还要大，依据系统的不同可能是不改变文件，也可能是用0把文件补到相应的大小，也可能是以一些随机的内容加上去。
 
目录操作：
os.mkdir(&quot;file&quot;)                   创建目录
复制文件：
shutil.copyfile(&quot;oldfile&quot;,&quot;newfile&quot;)       oldfile和newfile都只能是文件
shutil.copy(&quot;oldfile&quot;,&quot;newfile&quot;)            oldfile只能是文件夹，newfile可以是文件，也可以是目标目录
复制文件夹：
shutil.copytree(&quot;olddir&quot;,&quot;newdir&quot;)        olddir和newdir都只能是目录，且newdir必须不存在
重命名文件（目录）
os.rename(&quot;oldname&quot;,&quot;newname&quot;)       文件或目录都是使用这条命令
移动文件（目录）
shutil.move(&quot;oldpos&quot;,&quot;newpos&quot;)   
删除文件
os.remove(&quot;file&quot;)
删除目录
os.rmdir(&quot;dir&quot;)只能删除空目录
shutil.rmtree(&quot;dir&quot;)    空目录、有内容的目录都可以删
转换目录
os.chdir(&quot;path&quot;)   换路径
 
相关例子 
 1 将文件夹下所有图片名称加上'_fc'
python代码:
# -*- coding:utf-8 -*-
import re
import os
import time
#str.split(string)分割字符串
#'连接符'.join(list) 将列表组成字符串
def change_name(path):
    global i
    if not os.path.isdir(path) and not os.path.isfile(path):
        return False
    if os.path.isfile(path):
        file_path = os.path.split(path) #分割出目录与文件
        lists = file_path[1].split('.') #分割出文件与文件扩展名
        file_ext = lists[-1] #取出后缀名(列表切片操作)
        img_ext = ['bmp','jpeg','gif','psd','png','jpg']
        if file_ext in img_ext:
            os.rename(path,file_path[0]+'/'+lists[0]+'_fc.'+file_ext)
            i+=1 #注意这里的i是一个陷阱
        #或者
        #img_ext = 'bmp|jpeg|gif|psd|png|jpg'
        #if file_ext in img_ext:
        #    print('ok---'+file_ext)
    elif os.path.isdir(path):
        for x in os.listdir(path):
            change_name(os.path.join(path,x)) #os.path.join()在路径处理上很有用

img_dir = 'D:\\xx\\xx\\images'
img_dir = img_dir.replace('\\','/')
start = time.time()
i = 0
change_name(img_dir)
c = time.time() - start
print('程序运行耗时:%0.2f'%(c))
print('总共处理了 %s 张图片'%(i))
输出结果：
程序运行耗时:0.11
总共处理了 109 张图片


=====================================================
</rich_text><rich_text scale="h2">os 与 stat 在文件中获取相关的信息</rich_text><rich_text>
=====================================================
1.
import os,stat,time

    fileStats = os.stat('new.txt')
    print 'size:',fileStats[stat.ST_SIZE]/1024,'KB'
    if stat.S_ISDIR(fileStats[stat.ST_MODE]): #判断文件类型    
        print 'type:','DIRECTORY'
    if stat.S_ISREG(fileStats[stat.ST_MODE]):    
        print 'type:','REGULAR'
    if stat.S_ISLNK(fileStats[stat.ST_MODE]):    
        print 'type:','LINK'

    print 'atime:',time.ctime(fileStats[stat.ST_ATIME])
    print 'mtime:',time.ctime(fileStats[stat.ST_MTIME])
    print 'ctime:',time.ctime(fileStats[stat.ST_CTIME])

2.
import os,stat,time

    fileStats = os.stat('new.txt')
    print 'size:',os.path.getsize('new.txt')
    print 'atime:',os.path.getatime('new.txt')
    print 'mtime:',os.path.getmtime('new.txt')
    print 'ctime:',os.path.getctime('new.txt')

3.
import os,stat,time

    path = '../1/new.txt'
    print ''print os.path.abspath(path)    #返回绝对路径
    print os.path.split(path)           #将path分割成目录和文件名二元组返回
    print os.path.dirname(path)    #返回path的目录。其实就是os.path.split(path)的第一个元素。
    print os.path.basename(path)   #返回path最后的文件名。如何path以／或\结尾，那么就会返回空值。即os.path.split(path)的第二个元素。
    print os.path.exists(path)     #如果path存在，返回True；否则，返回False
    print os.path.isabs(path)      #如果path是绝对路径，返回True
    print os.path.isfile(path)     #如果path是一个存在的文件，返回True。否则返回False
    print os.path.isdir(path)      #如果path是一个存在的目录，则返回True。否则返回False
    print os.path.dirname(os.path.abspath(path))
    </rich_text></node><node name="类型转换" prog_lang="custom-colors" readonly="False" tags="" unique_id="2"><rich_text>int(x [,base ])         将x转换为一个整数    
long(x [,base ])        将x转换为一个长整数    
float(x )               将x转换到一个浮点数    
complex(real [,imag ])  创建一个复数    
str(x )                 将对象 x 转换为字符串    
repr(x )                将对象 x 转换为表达式字符串    
eval(str )              用来计算在字符串中的有效</rich_text><rich_text link="webs http://www.2cto.com/kf/web/Python/">Python</rich_text><rich_text>表达式,并返回一个对象    
tuple(s )               将序列 s 转换为一个元组    
list(s )                将序列 s 转换为一个列表    
chr(x )                 将一个整数转换为一个字符    
unichr(x )              将一个整数转换为Unicode字符    
ord(x )                 将一个字符转换为它的整数值    
hex(x )                 将一个整数转换为一个十六进制字符串    
oct(x )                 将一个整数转换为一个八进制字符串  </rich_text></node><node name="字符串操作" prog_lang="custom-colors" readonly="False" tags="" unique_id="4"><rich_text scale="h2">去空格及特殊符号</rich_text><rich_text>
s.strip().lstrip().rstrip(</rich_text><rich_text foreground="#800000">','</rich_text><rich_text>)

</rich_text><rich_text scale="h2">复制字符串</rich_text><rich_text>
</rich_text><rich_text foreground="#008000">#strcpy(sStr1,sStr2)</rich_text><rich_text>
sStr1 = </rich_text><rich_text foreground="#800000">'strcpy'</rich_text><rich_text foreground="#000000">
sStr2 </rich_text><rich_text>=</rich_text><rich_text foreground="#000000"> sStr1
sStr1 </rich_text><rich_text>= </rich_text><rich_text foreground="#800000">'strcpy2'</rich_text><rich_text>
</rich_text><rich_text foreground="#0000ff">print</rich_text><rich_text> sStr2

</rich_text><rich_text scale="h2">连接字符串</rich_text><rich_text>
</rich_text><rich_text foreground="#008000">#strcat(sStr1,sStr2)</rich_text><rich_text>
sStr1 = </rich_text><rich_text foreground="#800000">'strcat'</rich_text><rich_text foreground="#000000">
sStr2 </rich_text><rich_text>= </rich_text><rich_text foreground="#800000">'append'</rich_text><rich_text foreground="#000000">
sStr1 </rich_text><rich_text>+=</rich_text><rich_text foreground="#000000"> sStr2
</rich_text><rich_text foreground="#0000ff">print</rich_text><rich_text> sStr1

</rich_text><rich_text scale="h2">查找字符</rich_text><rich_text>
</rich_text><rich_text foreground="#008000">#strchr(sStr1,sStr2)
# &lt; 0 为未找到</rich_text><rich_text>
sStr1 = </rich_text><rich_text foreground="#800000">'strchr'</rich_text><rich_text foreground="#000000">
sStr2 </rich_text><rich_text>= </rich_text><rich_text foreground="#800000">'s'</rich_text><rich_text foreground="#000000">
nPos </rich_text><rich_text>=</rich_text><rich_text foreground="#000000"> sStr1.index(sStr2)
</rich_text><rich_text foreground="#0000ff">print</rich_text><rich_text> nPos

</rich_text><rich_text scale="h2">比较字符串</rich_text><rich_text>
</rich_text><rich_text foreground="#008000">#strcmp(sStr1,sStr2)</rich_text><rich_text>
sStr1 = </rich_text><rich_text foreground="#800000">'strchr'</rich_text><rich_text foreground="#000000">
sStr2 </rich_text><rich_text>= </rich_text><rich_text foreground="#800000">'strch'</rich_text><rich_text>
</rich_text><rich_text foreground="#0000ff">print</rich_text><rich_text> cmp(sStr1,sStr2)

</rich_text><rich_text scale="h2">扫描字符串是否包含指定的字符</rich_text><rich_text>
</rich_text><rich_text foreground="#008000">#strspn(sStr1,sStr2)</rich_text><rich_text>
sStr1 = </rich_text><rich_text foreground="#800000">'12345678'</rich_text><rich_text foreground="#000000">
sStr2 </rich_text><rich_text>= </rich_text><rich_text foreground="#800000">'456'</rich_text><rich_text>
</rich_text><rich_text foreground="#008000">#sStr1 and chars both in sStr1 and sStr2</rich_text><rich_text>
</rich_text><rich_text foreground="#0000ff">print</rich_text><rich_text> len(sStr1 </rich_text><rich_text foreground="#0000ff">and</rich_text><rich_text> sStr2)

</rich_text><rich_text scale="h2">字符串长度</rich_text><rich_text>
</rich_text><rich_text foreground="#008000">#strlen(sStr1)</rich_text><rich_text>
sStr1 = </rich_text><rich_text foreground="#800000">'strlen'</rich_text><rich_text>
</rich_text><rich_text foreground="#0000ff">print</rich_text><rich_text> len(sStr1)

</rich_text><rich_text scale="h2">将字符串中的大小写转换</rich_text><rich_text>
</rich_text><rich_text foreground="#008000">#strlwr(sStr1)</rich_text><rich_text>
sStr1 = </rich_text><rich_text foreground="#800000">'JCstrlwr'</rich_text><rich_text foreground="#000000">
sStr1 </rich_text><rich_text>=</rich_text><rich_text foreground="#000000"> sStr1.upper()
</rich_text><rich_text foreground="#008000">#sStr1 = sStr1.lower()</rich_text><rich_text>
</rich_text><rich_text foreground="#0000ff">print</rich_text><rich_text> sStr1

</rich_text><rich_text scale="h2">追加指定长度的字符串</rich_text><rich_text>
</rich_text><rich_text foreground="#008000">#strncat(sStr1,sStr2,n)</rich_text><rich_text>
sStr1 = </rich_text><rich_text foreground="#800000">'12345'</rich_text><rich_text foreground="#000000">
sStr2 </rich_text><rich_text>= </rich_text><rich_text foreground="#800000">'abcdef'</rich_text><rich_text foreground="#000000">
n </rich_text><rich_text>= 3</rich_text><rich_text foreground="#000000">
sStr1 </rich_text><rich_text>+=</rich_text><rich_text foreground="#000000"> sStr2[0:n]
</rich_text><rich_text foreground="#0000ff">print</rich_text><rich_text> sStr1
</rich_text><rich_text scale="h2">字符串指定长度比较</rich_text><rich_text>
</rich_text><rich_text foreground="#008000">#strncmp(sStr1,sStr2,n)</rich_text><rich_text>
sStr1 = </rich_text><rich_text foreground="#800000">'12345'</rich_text><rich_text foreground="#000000">
sStr2 </rich_text><rich_text>= </rich_text><rich_text foreground="#800000">'123bc'</rich_text><rich_text foreground="#000000">
n </rich_text><rich_text>= 3
</rich_text><rich_text foreground="#0000ff">print</rich_text><rich_text> cmp(sStr1[0:n],sStr2[0:n])

</rich_text><rich_text scale="h2">复制指定长度的字符</rich_text><rich_text>
</rich_text><rich_text foreground="#008000">#strncpy(sStr1,sStr2,n)</rich_text><rich_text>
sStr1 = </rich_text><rich_text foreground="#800000">''</rich_text><rich_text foreground="#000000">
sStr2 </rich_text><rich_text>= </rich_text><rich_text foreground="#800000">'12345'</rich_text><rich_text foreground="#000000">
n </rich_text><rich_text>= 3</rich_text><rich_text foreground="#000000">
sStr1 </rich_text><rich_text>=</rich_text><rich_text foreground="#000000"> sStr2[0:n]
</rich_text><rich_text foreground="#0000ff">print</rich_text><rich_text> sStr1

</rich_text><rich_text scale="h2">将字符串前n个字符替换为指定的字符</rich_text><rich_text>
</rich_text><rich_text foreground="#008000">#strnset(sStr1,ch,n)</rich_text><rich_text>
sStr1 = </rich_text><rich_text foreground="#800000">'12345'</rich_text><rich_text foreground="#000000">
ch </rich_text><rich_text>= </rich_text><rich_text foreground="#800000">'r'</rich_text><rich_text foreground="#000000">
n </rich_text><rich_text>= 3</rich_text><rich_text foreground="#000000">
sStr1 </rich_text><rich_text>= n * ch + sStr1[3</rich_text><rich_text foreground="#000000">:]
</rich_text><rich_text foreground="#0000ff">print</rich_text><rich_text> sStr1

</rich_text><rich_text scale="h2">扫描字符串</rich_text><rich_text>
</rich_text><rich_text foreground="#008000">#strpbrk(sStr1,sStr2)</rich_text><rich_text>
sStr1 = </rich_text><rich_text foreground="#800000">'cekjgdklab'</rich_text><rich_text foreground="#000000">
sStr2 </rich_text><rich_text>= </rich_text><rich_text foreground="#800000">'gka'</rich_text><rich_text foreground="#000000">
nPos </rich_text><rich_text>= -1
</rich_text><rich_text foreground="#0000ff">for</rich_text><rich_text> c </rich_text><rich_text foreground="#0000ff">in</rich_text><rich_text foreground="#000000"> sStr1:
    </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> c </rich_text><rich_text foreground="#0000ff">in</rich_text><rich_text foreground="#000000"> sStr2:
        nPos </rich_text><rich_text>=</rich_text><rich_text foreground="#000000"> sStr1.index(c)
        </rich_text><rich_text foreground="#0000ff">break</rich_text><rich_text>
</rich_text><rich_text foreground="#0000ff">print</rich_text><rich_text> nPos

</rich_text><rich_text scale="h2">翻转字符串</rich_text><rich_text>
</rich_text><rich_text foreground="#008000">#strrev(sStr1)</rich_text><rich_text>
sStr1 = </rich_text><rich_text foreground="#800000">'abcdefg'</rich_text><rich_text foreground="#000000">
sStr1 </rich_text><rich_text>= sStr1[::-1</rich_text><rich_text foreground="#000000">]
</rich_text><rich_text foreground="#0000ff">print</rich_text><rich_text> sStr1

</rich_text><rich_text scale="h2">查找字符串</rich_text><rich_text>
</rich_text><rich_text foreground="#008000">#strstr(sStr1,sStr2)</rich_text><rich_text>
sStr1 = </rich_text><rich_text foreground="#800000">'abcdefg'</rich_text><rich_text foreground="#000000">
sStr2 </rich_text><rich_text>= </rich_text><rich_text foreground="#800000">'cde'</rich_text><rich_text>
</rich_text><rich_text foreground="#0000ff">print</rich_text><rich_text> sStr1.find(sStr2)

</rich_text><rich_text scale="h2">分割字符串</rich_text><rich_text>
</rich_text><rich_text foreground="#008000">#strtok(sStr1,sStr2)</rich_text><rich_text>
sStr1 = </rich_text><rich_text foreground="#800000">'ab,cde,fgh,ijk'</rich_text><rich_text foreground="#000000">
sStr2 </rich_text><rich_text>= </rich_text><rich_text foreground="#800000">','</rich_text><rich_text foreground="#000000">
sStr1 </rich_text><rich_text>= sStr1[sStr1.find(sStr2) + 1</rich_text><rich_text foreground="#000000">:]
</rich_text><rich_text foreground="#0000ff">print</rich_text><rich_text foreground="#000000"> sStr1
</rich_text><rich_text foreground="#008000">#或者</rich_text><rich_text>
s = </rich_text><rich_text foreground="#800000">'ab,cde,fgh,ijk'</rich_text><rich_text>
</rich_text><rich_text foreground="#0000ff">print</rich_text><rich_text>(s.split(</rich_text><rich_text foreground="#800000">','</rich_text><rich_text>))

</rich_text><rich_text scale="h2">连接字符串</rich_text><rich_text>
delimiter = </rich_text><rich_text foreground="#800000">','</rich_text><rich_text foreground="#000000">
mylist </rich_text><rich_text>= [</rich_text><rich_text foreground="#800000">'Brazil'</rich_text><rich_text>, </rich_text><rich_text foreground="#800000">'Russia'</rich_text><rich_text>, </rich_text><rich_text foreground="#800000">'India'</rich_text><rich_text>, </rich_text><rich_text foreground="#800000">'China'</rich_text><rich_text foreground="#000000">]
</rich_text><rich_text foreground="#0000ff">print</rich_text><rich_text> delimiter.join(mylist)

</rich_text><rich_text scale="h2">PHP 中 addslashes 的实现</rich_text><rich_text>
</rich_text><rich_text foreground="#0000ff">def</rich_text><rich_text foreground="#000000"> addslashes(s):
    d </rich_text><rich_text>= {</rich_text><rich_text foreground="#800000">'&quot;'</rich_text><rich_text>:</rich_text><rich_text foreground="#800000">'\\&quot;'</rich_text><rich_text>, </rich_text><rich_text foreground="#800000">&quot;'&quot;</rich_text><rich_text>:</rich_text><rich_text foreground="#800000">&quot;\\'&quot;</rich_text><rich_text>, </rich_text><rich_text foreground="#800000">&quot;\0&quot;</rich_text><rich_text>:</rich_text><rich_text foreground="#800000">&quot;\\\0&quot;</rich_text><rich_text>, </rich_text><rich_text foreground="#800000">&quot;\\&quot;</rich_text><rich_text>:</rich_text><rich_text foreground="#800000">&quot;\\\\&quot;</rich_text><rich_text foreground="#000000">}
    </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text> </rich_text><rich_text foreground="#800000">''</rich_text><rich_text>.join(d.get(c, c) </rich_text><rich_text foreground="#0000ff">for</rich_text><rich_text> c </rich_text><rich_text foreground="#0000ff">in</rich_text><rich_text foreground="#000000"> s)
 
s </rich_text><rich_text>= </rich_text><rich_text foreground="#800000">&quot;John 'Johny' Doe (a.k.a. \&quot;Super Joe\&quot;)\\\0&quot;</rich_text><rich_text>
</rich_text><rich_text foreground="#0000ff">print</rich_text><rich_text foreground="#000000"> s
</rich_text><rich_text foreground="#0000ff">print</rich_text><rich_text> addslashes(s)

</rich_text><rich_text scale="h2">只显示字母与数字</rich_text><rich_text>
</rich_text><rich_text foreground="#0000ff">def</rich_text><rich_text> OnlyCharNum(s,oth=</rich_text><rich_text foreground="#800000">''</rich_text><rich_text foreground="#000000">):
    s2 </rich_text><rich_text>=</rich_text><rich_text foreground="#000000"> s.lower();
    fomart </rich_text><rich_text>= </rich_text><rich_text foreground="#800000">'abcdefghijklmnopqrstuvwxyz0123456789'</rich_text><rich_text>
    </rich_text><rich_text foreground="#0000ff">for</rich_text><rich_text> c </rich_text><rich_text foreground="#0000ff">in</rich_text><rich_text foreground="#000000"> s2:
        </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">not</rich_text><rich_text> c </rich_text><rich_text foreground="#0000ff">in</rich_text><rich_text foreground="#000000"> fomart:
            s </rich_text><rich_text>= s.replace(c,</rich_text><rich_text foreground="#800000">''</rich_text><rich_text foreground="#000000">);
    </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text foreground="#000000"> s;
 
</rich_text><rich_text foreground="#0000ff">print</rich_text><rich_text>(OnlyStr(</rich_text><rich_text foreground="#800000">&quot;a000 aa-b&quot;</rich_text><rich_text>)) 

</rich_text><rich_text scale="h2">截取字符串</rich_text><rich_text>
str = ’0123456789′
print str[0:3] #截取第一位到第三位的字符
print str[:] #截取字符串的全部字符
print str[6:] #截取第七个字符到结尾
print str[:-3] #截取从头开始到倒数第三个字符之前
print str[2] #截取第三个字符
print str[-1] #截取倒数第一个字符
print str[::-1] #创造一个与原字符串顺序相反的字符串
print str[-3:-1] #截取倒数第三位与倒数第一位之前的字符
print str[-3:] #截取倒数第三位到结尾
print str[:-5:-3] #逆序截取，具体啥意思没搞明白？</rich_text></node></cherrytree>