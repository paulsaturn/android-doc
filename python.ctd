<?xml version="1.0" ?><cherrytree><node name="virtualenvwrapper" prog_lang="custom-colors" readonly="False" tags="" unique_id="1"><rich_text>    VirtualEnv 是什么
 VirtualEnv用于在一台机器上创建多个独立的python运行环境，VirtualEnvWrapper为前者提供了一些便利的命令行上的封装。
 为什么要用
 - 隔离项目之间的第三方包依赖，如A项目依赖django1.2.5，B项目依赖django1.3。
 - 为部署应用提供方便，把开发环境的虚拟环境打包到生产环境即可,不需要在服务器上再折腾一翻。
 怎么用
 安装
 - pip install virtualenvwrapper
 - 把下面这句加到~/.bash_profile里面，如不嫌麻烦，也可以每次都手动执行。
 source /usr/local/bin/virtualenvwrapper.sh
 常用命令
 创新的虚拟环境
 - mkvirtualenv [env1]
 该命令会帮我们创建一个新环境,默认情况下，环境的目录是.virtualenv/en1,创建过程中它会自动帮我们安装pip，以后我们要安装新依赖时可直接使用pip命令。
  创建完之后，自动切换到该环境下工作，可看到提示符变为：
 (env1)$
 在这个环境下安装的依赖不会影响到其他的环境
 - lssitepackages 显示该环境中所安装的包
 切换环境
 - workon [env]
 随时使用“workon 环境名”可以进行环境切换，如果不带环境名参数，则显示当前使用的环境
 - deactivate
 在某个环境中使用，切换到系统的python环境
 其他命令
 - showvirtualenv [env] 显示指定环境的详情。
 - rmvirtualenv [env] 移除指定的虚拟环境，移除的前提是当前没有在该环境中工作。如在该环境工作，先使用deactivate退出。
 - cpvirtualenv [source] [dest] 复制一份虚拟环境。
 - cdvirtualenv [subdir] 把当前工作目录设置为所在的环境目录。
 - cdsitepackages [subdir] 把当前工作目录设置为所在环境的sitepackages路径。
 - add2virtualenv [dir] [dir] 把指定的目录加入当前使用的环境的path中，这常使用于在多个project里面同时使用一个较大的库的情况。
 - toggleglobalsitepackages -q 控制当前的环境是否使用全局的sitepackages目录。


例子:
    source /usr/local/bin/virtualenvwrapper.sh
    mkvirtualenv --python=/usr/bin/python2.7 python2.7
    执行之后shell提示变为下面：
    (python2.7)paul@paul-desktop: </rich_text></node><node name="文件操作" prog_lang="custom-colors" readonly="False" tags="" unique_id="3"><rich_text>总是记不住API。昨晚写的时候用到了这些，但是没记住，于是就索性整理一下吧：
python中对文件、文件夹（文件操作函数）的操作需要涉及到os模块和shutil模块。
得到当前工作目录，即当前Python脚本工作的目录路径: os.getcwd()
返回指定目录下的所有文件和目录名:os.listdir()
函数用来删除一个文件:os.remove()
删除多个目录：os.removedirs（r“c：\python”）
检验给出的路径是否是一个文件：os.path.isfile()
检验给出的路径是否是一个目录：os.path.isdir()
判断是否是绝对路径：os.path.isabs()
检验给出的路径是否真地存:os.path.exists()
返回一个路径的目录名和文件名:os.path.split()     eg os.path.split('/home/swaroop/byte/code/poem.txt') 结果：('/home/swaroop/byte/code', 'poem.txt') 

分离扩展名：os.path.splitext()
获取路径名：os.path.dirname()
获取文件名：os.path.basename()
运行shell命令: os.system()
读取和设置环境变量:os.getenv() 与os.putenv()
给出当前平台使用的行终止符:os.linesep    Windows使用'\r\n'，Linux使用'\n'而Mac使用'\r'
指示你正在使用的平台：os.name       对于Windows，它是'nt'，而对于Linux/Unix用户，它是'posix'
重命名：os.rename（old， new）
创建多级目录：os.makedirs（r“c：\python\test”）
创建单个目录：os.mkdir（“test”）
获取文件属性：os.stat（file）
修改文件权限与时间戳：os.chmod（file）
终止当前进程：os.exit（）
获取文件大小：os.path.getsize（filename）

文件操作：
os.mknod(&quot;test.txt&quot;)        创建空文件
fp = open(&quot;test.txt&quot;,w)     直接打开一个文件，如果文件不存在则创建文件
关于open 模式：
w     以写方式打开，
a     以追加模式打开 (从 EOF 开始, 必要时创建新文件)
r+     以读写模式打开
w+     以读写模式打开 (参见 w )
a+     以读写模式打开 (参见 a )
rb     以二进制读模式打开
wb     以二进制写模式打开 (参见 w )
ab     以二进制追加模式打开 (参见 a )
rb+    以二进制读写模式打开 (参见 r+ )
wb+    以二进制读写模式打开 (参见 w+ )
ab+    以二进制读写模式打开 (参见 a+ )
 
fp.read([size])                     #size为读取的长度，以byte为单位
fp.readline([size])                 #读一行，如果定义了size，有可能返回的只是一行的一部分
fp.readlines([size])                #把文件每一行作为一个list的一个成员，并返回这个list。其实它的内部是通过循环调用readline()来实现的。如果提供size参数，size是表示读取内容的总长，也就是说可能只读到文件的一部分。
fp.write(str)                      #把str写到文件中，write()并不会在str后加上一个换行符
fp.writelines(seq)            #把seq的内容全部写到文件中(多行一次性写入)。这个函数也只是忠实地写入，不会在每行后面加上任何东西。
fp.close()                        #关闭文件。python会在一个文件不用后自动关闭文件，不过这一功能没有保证，最好还是养成自己关闭的习惯。  如果一个文件在关闭后还对其进行操作会产生ValueError
fp.flush()                                      #把缓冲区的内容写入硬盘
fp.fileno()                                      #返回一个长整型的”文件标签“
fp.isatty()                                      #文件是否是一个终端设备文件（unix系统中的）
fp.tell()                                         #返回文件操作标记的当前位置，以文件的开头为原点
fp.next()                                       #返回下一行，并将文件操作标记位移到下一行。把一个file用于for … in file这样的语句时，就是调用next()函数来实现遍历的。
fp.seek(offset[,whence])               #将文件打操作标记移到offset的位置。这个offset一般是相对于文件的开头来计算的，一般为正数。但如果提供了whence参数就不一定 了，whence可以为0表示从头开始计算，1表示以当前位置为原点计算。2表示以文件末尾为原点进行计算。需要注意，如果文件以a或a+的模式打开，每 次进行写操作时，文件操作标记会自动返回到文件末尾。
fp.truncate([size])                       #把文件裁成规定的大小，默认的是裁到当前文件操作标记的位置。如果size比文件的大小还要大，依据系统的不同可能是不改变文件，也可能是用0把文件补到相应的大小，也可能是以一些随机的内容加上去。
 
目录操作：
os.mkdir(&quot;file&quot;)                   创建目录
复制文件：
shutil.copyfile(&quot;oldfile&quot;,&quot;newfile&quot;)       oldfile和newfile都只能是文件
shutil.copy(&quot;oldfile&quot;,&quot;newfile&quot;)            oldfile只能是文件夹，newfile可以是文件，也可以是目标目录
复制文件夹：
shutil.copytree(&quot;olddir&quot;,&quot;newdir&quot;)        olddir和newdir都只能是目录，且newdir必须不存在
重命名文件（目录）
os.rename(&quot;oldname&quot;,&quot;newname&quot;)       文件或目录都是使用这条命令
移动文件（目录）
shutil.move(&quot;oldpos&quot;,&quot;newpos&quot;)   
删除文件
os.remove(&quot;file&quot;)
删除目录
os.rmdir(&quot;dir&quot;)只能删除空目录
shutil.rmtree(&quot;dir&quot;)    空目录、有内容的目录都可以删
转换目录
os.chdir(&quot;path&quot;)   换路径
 
相关例子 
 1 将文件夹下所有图片名称加上'_fc'
python代码:
# -*- coding:utf-8 -*-
import re
import os
import time
#str.split(string)分割字符串
#'连接符'.join(list) 将列表组成字符串
def change_name(path):
    global i
    if not os.path.isdir(path) and not os.path.isfile(path):
        return False
    if os.path.isfile(path):
        file_path = os.path.split(path) #分割出目录与文件
        lists = file_path[1].split('.') #分割出文件与文件扩展名
        file_ext = lists[-1] #取出后缀名(列表切片操作)
        img_ext = ['bmp','jpeg','gif','psd','png','jpg']
        if file_ext in img_ext:
            os.rename(path,file_path[0]+'/'+lists[0]+'_fc.'+file_ext)
            i+=1 #注意这里的i是一个陷阱
        #或者
        #img_ext = 'bmp|jpeg|gif|psd|png|jpg'
        #if file_ext in img_ext:
        #    print('ok---'+file_ext)
    elif os.path.isdir(path):
        for x in os.listdir(path):
            change_name(os.path.join(path,x)) #os.path.join()在路径处理上很有用

img_dir = 'D:\\xx\\xx\\images'
img_dir = img_dir.replace('\\','/')
start = time.time()
i = 0
change_name(img_dir)
c = time.time() - start
print('程序运行耗时:%0.2f'%(c))
print('总共处理了 %s 张图片'%(i))
输出结果：
程序运行耗时:0.11
总共处理了 109 张图片


=====================================================
</rich_text><rich_text scale="h2">os 与 stat 在文件中获取相关的信息</rich_text><rich_text>
=====================================================
1.
import os,stat,time

    fileStats = os.stat('new.txt')
    print 'size:',fileStats[stat.ST_SIZE]/1024,'KB'
    if stat.S_ISDIR(fileStats[stat.ST_MODE]): #判断文件类型    
        print 'type:','DIRECTORY'
    if stat.S_ISREG(fileStats[stat.ST_MODE]):    
        print 'type:','REGULAR'
    if stat.S_ISLNK(fileStats[stat.ST_MODE]):    
        print 'type:','LINK'

    print 'atime:',time.ctime(fileStats[stat.ST_ATIME])
    print 'mtime:',time.ctime(fileStats[stat.ST_MTIME])
    print 'ctime:',time.ctime(fileStats[stat.ST_CTIME])

2.
import os,stat,time

    fileStats = os.stat('new.txt')
    print 'size:',os.path.getsize('new.txt')
    print 'atime:',os.path.getatime('new.txt')
    print 'mtime:',os.path.getmtime('new.txt')
    print 'ctime:',os.path.getctime('new.txt')

3.
import os,stat,time

    path = '../1/new.txt'
    print ''print os.path.abspath(path)    #返回绝对路径
    print os.path.split(path)           #将path分割成目录和文件名二元组返回
    print os.path.dirname(path)    #返回path的目录。其实就是os.path.split(path)的第一个元素。
    print os.path.basename(path)   #返回path最后的文件名。如何path以／或\结尾，那么就会返回空值。即os.path.split(path)的第二个元素。
    print os.path.exists(path)     #如果path存在，返回True；否则，返回False
    print os.path.isabs(path)      #如果path是绝对路径，返回True
    print os.path.isfile(path)     #如果path是一个存在的文件，返回True。否则返回False
    print os.path.isdir(path)      #如果path是一个存在的目录，则返回True。否则返回False
    print os.path.dirname(os.path.abspath(path))
    </rich_text></node><node name="类型转换" prog_lang="custom-colors" readonly="False" tags="" unique_id="2"><rich_text>int(x [,base ])         将x转换为一个整数    
long(x [,base ])        将x转换为一个长整数    
float(x )               将x转换到一个浮点数    
complex(real [,imag ])  创建一个复数    
str(x )                 将对象 x 转换为字符串    
repr(x )                将对象 x 转换为表达式字符串    
eval(str )              用来计算在字符串中的有效</rich_text><rich_text link="webs http://www.2cto.com/kf/web/Python/">Python</rich_text><rich_text>表达式,并返回一个对象    
tuple(s )               将序列 s 转换为一个元组    
list(s )                将序列 s 转换为一个列表    
chr(x )                 将一个整数转换为一个字符    
unichr(x )              将一个整数转换为Unicode字符    
ord(x )                 将一个字符转换为它的整数值    
hex(x )                 将一个整数转换为一个十六进制字符串    
oct(x )                 将一个整数转换为一个八进制字符串  </rich_text></node></cherrytree>