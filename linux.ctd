<?xml version="1.0" ?><cherrytree><node name="udhcpc" prog_lang="custom-colors" readonly="False" tags="" unique_id="1"><rich_text>就可以直接把simple.script拿来使用，改不改名字都可以，busybox里面默认的目录文件是/usr/share/udhcpc/default.script
 　　可以查看下帮助
 　　# udhcpc --help
 　　BusyBox v1.14.1 (2010-01-22 10:35:16 CST) multi-call binary
 　　Usage: udhcpc [-Cfbnqtvo] [-c CID] [-V VCLS] [-H HOSTNAME] [-i INTERFACE]
 　　[-p pidfile] [-r IP] [-s script] [-O dhcp-option]... [-P N]
 　　-V CLASSID      Vendor class identifier
 　　-i INTERFACE    Interface to use (default: eth0)
 　　-H,-h HOSTNAME  Client hostname
 　　-c CLIENTID     Client identifier
 　　-C              Suppress default client identifier
 　　-p file         Create pidfile
 　　-r IP           IP address to request
 　　-s file         Run file at DHCP events (default /usr/share/udhcpc/default.script)
 　　-t N            Send up to N request packets
 　　-T N            Try to get a lease for N seconds (default 3)
 　　-A N            Wait N seconds (default 20) after failure
 　　-O OPT          Request DHCP option OPT (cumulative)
 　　-o              Do not request any options (unless -O is also given)
 　　-f              Run in foreground
 　　-b              Background if lease is not immediately obtained
 　　-S              Log to syslog too
 　　-n              Exit with failure if lease is not immediately obtained
 　　-q              Quit after obtaining lease
 　　-R              Release IP on quit
 　　-P N            Use port N instead of default 68
 　　-a              Use arping to validate offered address
 　　#
 　　这样就很好理解了。
 　　下面就说说使用udhcpd，同样可以直接把busybox自带的udhcpd.conf作为参考，怎么设置该文件就不详述了，去参考相关文档即可。看看udhcpd怎么使用
 　　# udhcpd --help
 　　BusyBox v1.14.1 (2010-01-22 10:35:16 CST) multi-call binary
 　　Usage: udhcpd [-fS] [-P N] [configfile]
 　　DHCP server
 　　-f      Run in foreground
 　　-S      Log to syslog too
 　　-P N    Use port N instead of default 67
 　　帮助一目了然。
 　　我使用的时候直接
 　　#udhcpd /etc/udhcpd.conf
 　　即可。
 　　还有一个租约文件要简要说说，使用udhcpd时会要求建立一个租约文件，按照提示创建一个就行了，它起什么作用呢？就是为了记录客户端所获得的IP，如果没有租约文件，则会重新给客户端分配一个新IP，如果有，则使用原先分配的IP。


最近在做项目的时候卡在了dhcp处，当没有网络的时候，板子一直发送dhcp请求，导致程序不往下执行，解决的办法是把它切换到后台运行，可是如何切换到后台呢，有办法，它自带参数可以实现该功能。如下：
   udhcpc</rich_text><rich_text foreground="#ff0000"> -b</rich_text><rich_text> -i eth0 -p /var/run/udhcpc.pid -R
解释一下，-b就是切换到后台指令，-i是指定使用哪个网络接口，双网卡的时候一定要使用它来指定eth0  or  eth1。
业务不熟练害死人啊，所以只要多看看源码，一般问题都能搞定。
【最近新添加 -R】
对于 -R参数，其实也很重要，在关闭udhcpc时，可以向dhcpserver发送release取消租约。
</rich_text></node><node name="lirc" prog_lang="custom-colors" readonly="False" tags="" unique_id="35"><rich_text>1、红外通信协议
红外通信是传统的线缆通信方式的替代，被用来进行设备之间点对点的数据传输。目前作为一种广泛使用的无线连接技术，被众多的硬件和软件平台支 持。它具有小角度、短距离、传输速率高等特点。
红外通信技术发展的早期，存在有几种不同的通信标准，不同标准之间的通信设备并不能进行红外通信，为了统一红外通信标准，于1993年，一些厂商成立了IrDA（红外数据协会）。IrDA是目前红外无线通信的工业标准，你可以使用它 与打印机、传真机、modem、其它计算机进行通信。按照速率IrDA红外通信可以分为下面四种：
l         SIR：2.4 kbit/s 到 115.2 kbit/s，最基本的红外标准。串口连接时必定使用的是SIR。
l         MIR：576 kbit/s 到 1152 kbit/s
l         FIR：4 Mbit/s
l         VFIR：16 Mbit/s
2、红外通信装置
         为了进行红外通信，我们需要有发送和接收红外 信号的装置，笔记本一般都带有IrDA的红外接口，而台式机一般需要购买专门的红外适配器。目前市场上的红外适配器主要有串口红外适配器、USB红外适配器、主板接口红外适配器等。
         利用我们的计算机进行红外通信的方式主要有：
l         利用IrDA接口与其它具有红外通信接口的设备，如打印 机、传真机、计算机等通信。
l         使用专用的红外遥控器和接收器。
l         使用红外接收器再加上普通的电视、DVD等的遥控器。还需要专门的控制软件。
第一种主要是不同设备之间的红外数据传输，后两种是对计算机的红外遥控。Linux针对这两种使用方式有不同的驱动和软件包。
3、  Linux红外支持
Linux/IrDA  project于1997年开始，因为与IrDA协会的名称产生冲突，项目名称更改为Linux/IR，并从1999年开始成为IrDA的官方成员之一。相关的软件包主要有IrDA-Utils。
LIRC project（Linux Infrared Remote  Control）的主要目标是通过红外红外信号进行计算机的远程控制。LIRC包支持解码并发送最普通的IR远程控制信号。早期版本只支持串口和并口接口 的硬件，但是现在已经能够支持很多不同的硬件。LIRC包包括了针对不同接口硬件的设备驱动，不过最重要的还是 lircd 后台程序，它负责解码设备驱动接收到的IR信号并将解码后的信息通过 socket 进行发送，另外还有一个 lircmd 后台程序，负责连接 lircd  并将解码后的IR信号转换为鼠标移动信息。此外LIRC还包括了一些用户空间的应用程序，为我们使用IR来控制计算机提供方便。因为这里讨论的是红外 远程控制驱动，所以LIRC将是下面阐述的重点。的有关LIRC  project的详细信息可以浏览它的项目主页</rich_text><rich_text foreground="#800080" link="webs http://www.lirc.org/">http://www.lirc.org/</rich_text><rich_text> 

4、LIRC结构
下图是LIRC包的驱动模型（Driver  Model）
 
</rich_text><rich_text justification="left"></rich_text><rich_text>
 

主要涉及了三个devfs接口，/dev/lirc、/dev/lircd、/dev/lircmd。
l         /dev/lirc
依赖于使用的ioctl
</rich_text><rich_text style="italic">LIRC_MODE_MODE2  </rich_text><rich_text>输出的packet包括了描述IR信号的整型值。这个整型值的位0-23表示pulse/space的长度；位24为0时表示space，为1时表示pulse；所有剩余的位没有意义。
</rich_text><rich_text style="italic">LIRC_MODE_CODE</rich_text><rich_text>  outputs chars (8 bits)
</rich_text><rich_text style="italic">LIRC_MODE_LIRCCODE </rich_text><rich_text>outputs  codes of configurable length in big endian byte order
可参考文件drivers/lirc_serial/lirc_serial.c、drivers/lirc_parallel/lirc_parallel.c、tools/mode2.c（mode工具，将这个驱动的输出显示在终端上）。
l         /dev/lircd
输出包括了所有remote和pressed button信息的字符串。
l         /dev/lircm
鼠标后台。支持三种鼠标协议：MouseSystems, IntelliMouse 和 IMPS/2。可参考文件daemons/lircmd.c
4、LIRC配置
         LIRC的配置主要涉及到三个配置文件，lircd.conf、lircmd.conf、.lircrc。
l         lircd.conf
lircd.conf是lircd后台程序的配置文件。LIRC项目主页上已经有很多针对不同牌子遥控器的配 置文件，如果在上面找不到匹配自己遥控器的lircd.conf文件，则需要使用irrecord工具进行手工配置。配置过程在另一篇文章“</rich_text><rich_text link="webs http://blog.chinaunix.net/u1/34190/showart_275743.html">Linux下 遥控器的配置与使用</rich_text><rich_text>”里已经有所阐述，下面的示例是一个典型的配置文件，其中定 义了1~9，上、下、左、右和开关键的矩形脉冲信息。
begin remote
   name  test
   bits           16
   flags SPACE_ENC|CONST_LENGTH
   eps            30
   aeps          100
   header       9092  4460
   one           632  1628
   zero          632   496
   ptrail        630
   repeat       9118  2181
   pre_data_bits   16
   pre_data       0xFF
   gap          108483
   toggle_bit      0
 
       begin codes
           1                        0x906F
           2                        0xB847
           3                        0xF807
           4                        0x9867
           5                        0xD827
           6                        0x8877
           7                        0xE817
           8                        0x48B7
           9                        0x9A65
           up                     0x609F
           down                0x22DD
           left                    0xE21D
           right                  0x02FD
          power                0x28D7
          mute                  0x08F7
       end codes
end remote
l         lircmd.conf
lircmd后台程序的配置文件，主要配置了遥控按键与鼠标消息的对应关系。
l         .lircrc
LIRC的客户端应用使用的配置文件，应该位于你的用户目录下面。也可以命名为为/etc/lircrc，此时它为所有应用所共用。
begin
    prog  = lirckeyd
    remote  = new.conf
    button  = power
    repeat  = 0
    config  = power
end
begin~end表示一个独立的配置块。
prog域的值表示使用该配置块的程序名称。
Remote的值表示使用的遥控器名称（参见</rich_text><rich_text link="webs http://blog.chinaunix.net/article_new.php?FolderID=51444#lircd">lircd.conf</rich_text><rich_text>中的定义）。
Button  的值表示遥控器按键名称（参见</rich_text><rich_text link="webs http://blog.chinaunix.net/article_new.php?FolderID=51444#lircd">lircd.conf</rich_text><rich_text>中的定义）。
Repeat  的值表示按键的重复次数。
Config  的值表示该按键对应的字符串，该字符串可以被prog定义的应用程序获得。

5、编写LIRC的客户端应用
         有两种类型的LIRC应用，一种为发送IR命令的应用，比如</rich_text><rich_text style="italic">xrc、irsend</rich_text><rich_text>等，另一种为接收IR命令的应用，比如</rich_text><rich_text style="italic">irexec</rich_text><rich_text>,  </rich_text><rich_text style="italic">irxevent</rich_text><rich_text> 和 </rich_text><rich_text style="italic">irpty</rich_text><rich_text>等。它们都将通过位于/dev/lircd的socket连接到lircd后台，通信的数据为普通的可读格式。
         无论什么时候lircd接收到一个IR信号，它将广播下面的字符串到每个客户端（client）：
         &lt;code&gt; &lt; repeat count &gt; &lt;button  name&gt; &lt;remote control name&gt;
code是IR信号的64位编码。repeat count表示用户按下按键的时间，每当接收到一个新的IR信号时，它将增加1。button name和remote control name在lircd的配置文件里定义。
         如果你仅仅希望使自己的应用接收IR命令，可以使用lirc_client库，通常是/usr/lib/liblirc_client.a。可以使用它编写LIRC的客户端应用，要记得包含lirc/lirc_client.h文件。lirc_client库比较重要的函数有：
l         int lirc_init(char *prog,int verbose)</rich_text><rich_text underline="single">
</rich_text><rich_text>库的初始化，它连接lircd后台做一些内部的初始化。prog与.lircrc中的prog项对应，verbose表示是否打印错误信息 到stderr，0表示不打印，1表示打印。返回值为连接到lircd的socket描述符，有错误发生时 返回-1。
l          int  lirc_readconfig(char *file,struct lirc_config **config,int (check)(char  *s))</rich_text><rich_text underline="single">
</rich_text><rich_text>读取配置文件。file表示配置文件名称，NULL表示使用默认的.lircrc，也可以进行多次调用加载多个配置文件。config表示配置文件数据结构（struct config）的指针，将在函数内部 填充，lirc_code2char函数将需要它。check函数指针指向一个对file进行解析的用户自定义函数。
l          int  lirc_nextcode(char **code)
阻塞直到socket上有数据可用。可以在程序的主循环里使用。如果有错误发生返回-1，否则返回0和指向数据流里下一个 字符串的指针code，注意code必须使用free函数释放。此函数使得code中获得prog对应的配置信息，若无 按键信息则阻塞进程。
l          int  lirc_code2char(struct lirc_config *config,char *code,char **string)</rich_text><rich_text underline="single">
</rich_text><rich_text>获得配置文件里与按键 对应的配置字符串。config和code分别由是前面两个函数填充的，string中将被.lircrc中的config域值填充。
l          void  lirc_freeconfig(struct lirc_config *config)</rich_text><rich_text underline="single">
</rich_text><rich_text>释放config结构。
l          int  lirc_deinit()</rich_text><rich_text underline="single">
</rich_text><rich_text>lirc销毁函数。
下面是LIRC项目主页上的一个简单示例
/*   $Id: technical.html,v 1.26 2005/12/10 22:12:02 lirc  Exp $      */
 
/****************************************************************************
 ** irexec.c  ****************************************************************
 ****************************************************************************
 *
 * irexec  - execute programs  according to the pressed remote control buttons
 *
 * Copyright (C) 1998 Trent Piepho  &lt;xyzzy@u.washington.edu&gt;
 * Copyright (C) 1998 Christoph Bartelmus  &lt;lirc@bartelmus.de&gt;
 */
 
#ifdef  HAVE_CONFIG_H
#  include &lt;config.h&gt;
#endif
 
#include  &lt;errno.h&gt;
#include  &lt;unistd.h&gt;
#include  &lt;stdarg.h&gt;
#include  &lt;stdio.h&gt;
#include  &lt;stdlib.h&gt;
#include  &lt;string.h&gt;
#include  &quot;lirc_client.h&quot;
 
char  *progname;
 
int  main(int argc, char *argv[])
{
         struct lirc_config *config;
 
         progname=argv[0];
         if(argc&gt;2)
         {
                   fprintf(stderr,&quot;Usage: %s &lt;config  file&gt;\n&quot;,progname);
                   exit(EXIT_FAILURE);
         }
         if(lirc_init(&quot;irexec&quot;,1)==-1)  exit(EXIT_FAILURE);
 
         if(lirc_readconfig(argc==2 ?  argv[1]:NULL,&amp;config,NULL)==0)
         {
                   char *code;
                   char *c;
                   int ret;
 
                   while(lirc_nextcode(&amp;code)==0)
                   {
                            if(code==NULL) continue;
                            while((ret=lirc_code2char(config,code,&amp;c))==0  &amp;&amp;
                                  c!=NULL)
                            {
#ifdef  DEBUG
                                     printf(&quot;Execing  command \&quot;%s\&quot;\n&quot;,c);
#endif
                                     system(c);
                            }
                            free(code);
                            if(ret==-1) break;
                   }
                   lirc_freeconfig(config);
         }
 
         lirc_deinit();
         exit(EXIT_SUCCESS);
}
6、红外信号映射为X事件
         如果我们希望使用遥控器远程遥控进行视频、音频等播放操作，则需 要将上面解码后的红外信号映射为X事件（当然指的是针对基于X的图形应用时）。这个过程主要涉及到下面几个函数：
l         </rich_text><rich_text link="webs http://tronche.com/gui/x/xlib/input/keyboard-encoding.html">KeyCode</rich_text><rich_text> XKeysymToKeycode(</rich_text><rich_text link="webs http://tronche.com/gui/x/xlib/display/opening.html#Display">Display</rich_text><rich_text> *display, </rich_text><rich_text link="webs http://tronche.com/gui/x/xlib/input/keyboard-encoding.html#KeySym">KeySym</rich_text><rich_text> keysym)
将</rich_text><rich_text link="webs http://tronche.com/gui/x/xlib/input/keyboard-encoding.html#KeySym">KeySym</rich_text><rich_text>转换为</rich_text><rich_text link="webs http://tronche.com/gui/x/xlib/input/keyboard-encoding.html">KeyCode</rich_text><rich_text>。Display指定连接的X server。</rich_text><rich_text link="webs http://tronche.com/gui/x/xlib/input/keyboard-encoding.html#KeySym">KeySym</rich_text><rich_text>表示键盘按键的字符编码，如XK_Up、XK_Down等，定义的</rich_text><rich_text link="webs http://tronche.com/gui/x/xlib/input/keyboard-encoding.html#KeySym">KeySym</rich_text><rich_text>列表在X11/keysymdef.h文件里，多数应用通常 只包括X11/keysym.h文件。</rich_text><rich_text link="webs http://tronche.com/gui/x/xlib/input/keyboard-encoding.html">KeyCode</rich_text><rich_text>代表了物理按键。如果指定的</rich_text><rich_text link="webs http://tronche.com/gui/x/xlib/input/keyboard-encoding.html#KeySym">KeySym</rich_text><rich_text>没有对应任何</rich_text><rich_text link="webs http://tronche.com/gui/x/xlib/input/keyboard-encoding.html">KeyCode</rich_text><rich_text>，则返回0。
l         XTestFakeKeyEvent(display, keycode, True, 0);
使用XTEST扩展发送按键事件的接 口。第三个参数表示按键被按下或释放，如果按下，则发送KeyPress事件，否则发送KeyRelease。使用这个函数时，不能够指定事件发送的目的地，它将按照真实 键盘按键的事件传送机制来传送。
l         XSync(</rich_text><rich_text link="webs http://tronche.com/gui/x/xlib/display/opening.html#Display">Display</rich_text><rich_text> *display, Bool discard)
flush输出缓冲，并等待所有 的请求已经被X server接收和处理。对于X server接收到的每个协议错误，XSync将调用客户端应用的错误处理函数。server生成的都依次添加在xlib的事件队列里。如果设置discard为False，则XSync不丢弃这个事件队列里 的事件，否则，丢弃所有队列里的事件。
在前面示例里添加下面的定义：
static struct KeyMapEntry {
    char  *config;
    KeySym  keysym;
} keymap[] = {
    {&quot;Escape&quot;,     XK_Escape},
    {&quot;Backspace&quot;,   XK_BackSpace},
    {&quot;1&quot;,      XK_1},
    {&quot;2&quot;,      XK_2},
    {&quot;3&quot;,      XK_3},
    {&quot;4&quot;,      XK_4},
    {&quot;5&quot;,      XK_5},
    {&quot;6&quot;,      XK_6},
    {&quot;7&quot;,      XK_7},
    {&quot;8&quot;,      XK_8},
    {&quot;9&quot;,      XK_9},
    {&quot;0&quot;,      XK_0},
    {&quot;Up&quot;,            XK_Up},
    {&quot;Down&quot;,       XK_Down},
    {&quot;Left&quot;,          XK_Left},
    {&quot;Right&quot;,        XK_Right},
};
 
void
dispatchEvent(char *msg)
{
    struct  KeyMapEntry entry;
    KeyCode   keycode;
    int  i;
 
    for (  i = 0; keymap[i].config; i++) {
        entry  = keymap[i];
        if  (strcmp(entry.config, msg) == 0) {
            keycode  = XKeysymToKeycode(display, entry.keysym);
            XTestFakeKeyEvent(display,  keycode, True, 0);
            XTestFakeKeyEvent(display,  keycode, False, 0);
            XSync(display,  False);
 
            break;
        }
    }
    if  (!keymap[i].config)
        print(&quot;&lt;WARNING&gt;  Unknown config string: %s\n&quot;, msg);
}
然后将lirc_code2char循环里的语句
system(c);
         替换为
dispatchEvent(c);
</rich_text><encoded_png char_offset="1300"></encoded_png><node name="ir-lirc-codec" prog_lang="custom-colors" readonly="False" tags="" unique_id="36"><rich_text></rich_text></node></node><node name="关于UNIX和Linux系统下SUID、SGID的解析" prog_lang="custom-colors" readonly="False" tags="" unique_id="34"><rich_text>由于用户在UNIX下经常会遇到 SUID、SGID的概念，而且SUID和SGID涉及到系统安全，所以用户也比较关心这个问题。关于SUID、SGID的问题也经常有人提问，但回答的 人一般答得不够详细，加上曾经回答过两个网友的问题，还查了一些资料，决定整理成本文，以供大家参考。限于本人的水平问题，文章中如果有不当之处，请广大 网友指正。 
  
</rich_text><rich_text scale="h1" weight="heavy"> 一、UNIX下关于文件权限的表示方法和解析 </rich_text><rich_text>
  
 SUID 是 Set User ID, SGID 是 Set Group ID的意思。 
  
 UNIX下可以用ls -l 命令来看到文件的权限。用ls命令所得到的表示法的格式是类似这样的：-rwxr-xr-x 。下面解析一下格式所表示的意思。这种表示方法一共有十位： 
  
 9 8 7 6 5 4 3 2 1 0 
 - r w x r - x r - x 
 第9位表示文件类型,可以为p、d、l、s、c、b和-： 
 p表示命名管道文件 
 d表示目录文件 
 l表示符号连接文件 
 -表示普通文件 
 s表示socket文件 
 c表示字符设备文件 
 b表示块设备文件 
  
 第8-6位、5-3位、2-0位分别表示文件所有者的权限，同组用户的权限，其他用户的权限，其形式为rwx： 
  
 r表示可读，可以读出文件的内容 
 w表示可写，可以修改文件的内容 
 x表示可执行，可运行这个程序 
 没有权限的位置用-表示 
 例子： 
    ls -l myfile显示为： 
    -rwxr-x--- 1 foo staff 7734 Apr 05 17:07 myfile 
  
 表示文件myfile是普通文件，文件的所有者是foo用户，而foo用户属于staff组，文件只有1个硬连接，长度是7734个字节，最后修改时间4月5日17:07。 
  
 所有者foo对文件有读写执行权限，staff组的成员对文件有读和执行权限，其他的用户对这个文件没有权限。 
  
 如果一个文件被设置了SUID或SGID位，会分别表现在所有者或同组用户的权限的可执行位上。例如： 
 1、-rwsr-xr-x 表示SUID和所有者权限中可执行位被设置 
  
 2、-rwSr--r-- 表示SUID被设置，但所有者权限中可执行位没有被设置 
  
 3、-rwxr-sr-x 表示SGID和同组用户权限中可执行位被设置 
  
 4、-rw-r-Sr-- 表示SGID被设置，但同组用户权限中可执行位没有被社 
  
 其实在UNIX的实现中，文件权限用12个二进制位表示，如果该位置上的值是 
  
 1，表示有相应的权限： 
 11 10 9 8 7 6 5 4 3 2 1 0 
 S G T r w x r w x r w x 
 第11位为SUID位，第10位为SGID位，第9位为sticky位，第8-0位对应于上面的三组rwx位。 
 11 10 9 8 7 6 5 4 3 2 1 0 
 上面的-rwsr-xr-x的值为： 1 0 0 1 1 1 1 0 1 1 0 1 
             -rw-r-Sr--的值为： 0 1 0 1 1 0 1 0 0 1 0 0 
  
 给文件加SUID和SUID的命令如下： 
 chmod u+s filename 设置SUID位 
 chmod u-s filename 去掉SUID设置 
 chmod g+s filename 设置SGID位 
 chmod g-s filename 去掉SGID设置 
 另外一种方法是chmod命令用八进制表示方法的设置。如果明白了前面的12位权限表示法也很简单。 
  
</rich_text><rich_text scale="h1" weight="heavy"> 二、SUID和SGID的详细解析 </rich_text><rich_text>
    由于SUID和SGID是在执行程序（程序的可执行位被设置）时起作用，而可执行位只对普通文件和目录文件有意义，所以设置其他种类文件的SUID和SGID位是没有多大意义的。 
    首先讲普通文件的SUID和SGID的作用。例子： 
    如果普通文件myfile是属于foo用户的，是可执行的，现在没设SUID位，
    ls命令显示如下： 
    -rwxr-xr-x 1 foo staff 7734 Apr 05 17:07  myfile
    任何用户都可以执行这个程序。UNIX的内核是根据什么来确定一个进程对资源的访问权限的呢？是这个进程的运行用户的（有效）ID，包括 user id和group id。用户可以用id命令来查到自己的或其他用户的user id和group id。 
    除了一般的user id 和group id外，还有两个称之为effective 的id，就是有效id，上面的四个id表示为：uid，gid，euid，egid。内核主要是根据euid和egid来确定进程对资源的访问权限。 
    一个进程如果没有SUID或SGID位，则euid=uid  egid=gid，分别是运行这个程序的用户的uid和gid。例如kevin用户的uid和gid分别为204和202，foo用户的uid和gid为 200，201，kevin运行myfile程序形成的进程的euid=uid=204，egid=gid=202，内核根据这些值来判断进程对资源访问 的限制，其实就是kevin用户对资源访问的权限，和foo没关系。 
    如果一个程序设置了SUID，则euid和egid变成被运行的程序的所有者的uid和gid，例如kevin用户运行myfile，euid=200，egid=201，uid=204，gid=202，则这个进程具有它的属主foo的资源访问权限。 
    SUID的作用就是这样：让本来没有相应权限的用户运行这个程序时，可以访问他没有权限访问的资源。passwd就是一个很鲜明的例子。 
    SUID的优先级比SGID高，当一个可执行程序设置了SUID，则SGID会自动变成相应的egid。 
    下面讨论一个例子： 
    UNIX系统有一个/dev/kmem的设备文件，是一个字符设备文件，里面存储了核心程序要访问的数据，包括用户的口令。所以这个文件不能给一般的用户读写，权限设为：
    cr--r----- 1 root system 2, 1 May 25 1998 kmem 
    但ps等程序要读这个文件，而ps的权限设置如下： 
    -r-xr-sr-x 1 bin system 59346 Apr 05 1998 ps 
    这是一个设置了SGID的程序，而ps的用户是bin，不是root，所以不能设置SUID来 访问kmem，但大家注意了，bin和root都属于system组，而且ps设置了SGID，一般用户执行ps，就会获得system组用户的权限，而 文件kmem的同组用户的权限是可读，所以一般用户执行ps就没问题了。但有些人说，为什么不把ps程序设置为root用户的程序，然后设置SUID位， 不也行吗？这的确可以解决问题，但实际中为什么不这样做呢？因为SGID的风险比SUID小得多，所以出于系统安全的考虑，应该尽量用SGID代替 SUID的程序，如果可能的话。下面来说明一下SGID对目录的影响。SUID对目录没有影响。如果一个目录设置了SGID位，那么如果任何一个用户对这 个目录有写权限的话，他在这个目录所建立的文件的组都会自动转为这个目录的属主所在的组，而文件所有者不变，还是属于建立这个文件的用户。 
  
  
  
</rich_text><rich_text scale="h1" weight="heavy"> 三、关于SUID和SGID的编程 </rich_text><rich_text>
 和SUID和SGID编程比较密切相关的有以下的头文件和函数： 
  
 #include &lt;stdio.h&gt;
 #include &lt;unistd.h&gt;

  
 uid_t getuid(void); 
  
 uid_t geteuid(void); 
  
 gid_t getgid (void); 
  
 gid_t getegid (void); 
  
 int setuid (uid_t UID); 
  
 int setruid (uid_t RUID); 
  
 int seteuid (uid_t EUID); 
  
 int setreuid (uid_t RUID,uid_t EUID); 
  
 int setgid (gid_t GID); 
  
 int setrgid (gid_t RGID); 
  
 int setegid (git_t EGID); 
  
 int setregid (gid_t RGID, gid_t EGID); 
  
 具体这些函数的说明在这里就不详细列出来了,要用到的可以用man查。 
  
  
 SUID/SGID : 
 假如你有文件a.txt 
 #ls -l a.txt 
 -rwxrwxrwx 
 #chmod 4777 a.txt 
 -rwsrwxrwx ======&gt;注意s位置 
 #chmod 2777 a.txt 
 -rwxrwsrwx ======&gt;注意s位置 
 #chmod 7777 a.txt 
 -rwsrwxswt ======&gt;出现了t,t的作用在内存中尽量保存a.txt,节省系统再加载的时间. 
  
 现在再看前面设置 SUID/SGID作用: 
 #cd /sbin 
 #./lsusb 
 ... 
 #su aaa(普通用户) 
 $./lsusb 
 ... 
 是不是现在显示出错？ 
 $su 
 #chmod 4755 lsusb 
 #su aaa 
 $./lsusb 
  
 ... 现在明白了吗？本来是只有root用户才能执行的命令，加了SUID后,普通用户就可以像root一样的用，权限提升了。上面是对于文件来说的，对于目录也差不多！ 
 目录的S属性使得在该目录下创建的任何文件及子目录属于该目录所拥有的组，目录的T属性使得该目录的所有者及root才能删除该目录。还有对于s与S，设置SUID/SGID需要有运行权限，否则用ls -l后就会看到S,证明你所设置的SUID/SGID没有起作用。 
  
 Why we need suid,how do we use suid? 
          r -- 读访问 
 　　 w -- 写访问 
 　　 x -- 执行许可 
 　　 s -- SUID/SGID 
 　　 t -- sticky位 
  
 那么 suid/sgid是做什么的？ 为什么会有suid位呢？ 
 要想明白这个，先让我们看个问题：如果让每个用户更改自己的密码？ 
 用户修改密码，是通过运行命令passwd来实现的。最终必须要修改/etc/passwd文件，而passwd的文件的属性是： 
  
    #ls -l /etc/passwd 
        -rw-r--r-- 1 root root 2520 Jul 12 18:25 passwd 
  
 我们可以看到passwd文件只有对于root用户是可写的，而对于所有的他用户来说都是没有写权限的。 那么一个普通的用户如何能够通过运行passwd命令修改这个passwd文件呢？ 
  
 为了解决这个问题，SUID/SGID便应运而生。而且AT&amp;T对它申请了专利。 呵呵。 
  
</rich_text><rich_text scale="h2" weight="heavy"> SUID和SGID是如何解决这个问题呢？ </rich_text><rich_text>
 首先，我们要知道一点：进程在运行的时候，有一些属性，其中包括 实际用户ID,实际组ID,有效用户ID,有效组ID等。 实际用户ID和实际组ID标识我们是谁，谁在运行这个程序,一般这2个字段在登陆时决定，在一个登陆会话期间， 这些值基本上不改变。 
  
 而有效用户ID和有效组ID则决定了进程在运行时的权限。内核在决定进程是否有文件存取权限时，是采用了进程的有效用户ID来进行判断的。 
  
 知道了这点，我们来看看SUID的解决途径： 
  
 当一个程序设置了为SUID位时，内核就知道了运行这个程序的时候，应该认为是文件的所有者在运行这个程序。即该程序运行的时候，有效用户ID是该程序的所有者。举个例子： 
  
 [root@sgrid5 bin]# ls -l passwd 
  
 -r-s--s--x 1 root root 16336 Feb 14 2003 passwd 
  
 虽然你以test登陆系统，但是当你输入passwd命令来更改密码的时候，由于passwd 设置了SUID位，因此虽然进程的实际用户ID是test对应的ID，但是进程的有效用户ID则是passwd文件的所有者root的ID,因此可以修改 /etc/passwd文件。 
  
 让我们看另外一个例子。 
  
 ping命令应用广泛，可以测试网络是否连接正常。ping在运行中是采用了ICMP协议，需要发送ICMP报文。但是只有root用户才能建立ICMP报文，如何解决这个问题呢？同样，也是通过SUID位来解决。 
  
 [root@sgrid5 bin]# ls -l /bin/ping 
  
 -rwsr-sr-x 1 root root 28628 Jan 25 2003 /bin/ping 
  
 我们可以测试一下，如果去掉ping的SUID位，再用普通用户去运行命令，看会怎么样。 
  
 [root@sgrid5 bin]#chmod u-s /bin/ping 
  
 [root@sgrid5 bin]# ls -l ping 
  
 -rwxr-xr-x 1 root root 28628 Jan 25 2003 ping 
  
 [root@sgrid5 bin]#su test 
  
 [test@sgrid5 bin]$ ping byhh.net 
  
 ping: icmp open socket: Operation not permitted 
  
 SUID虽然很好了解决了一些问题，但是同时也会带来一些安全隐患。 
  
 因为设置了 SUID 位的程序如果被攻击(通过缓冲区溢出等方面),那么hacker就可以拿到root权限。 
  
 因此在安全方面特别要注意那些设置了SUID的程序。 
  
 通过以下的命令可以找到系统上所有的设置了suid的文件： 
  
 [root@sgrid5 /]# find / -perm -04000 -type f -ls 
  
 对于这里为什么是4000，大家可以看一下前面的st_mode的各bit的意义就明白了。 
  
 在这些设置了suid的程序里，如果用不上的，就最好取消该程序的suid位。
</rich_text></node><node name="从 2.4 到 2.6：Linux 内核可装载模块机制的改变对设备驱动的影响" prog_lang="custom-colors" readonly="False" tags="" unique_id="27"><rich_text>
</rich_text><rich_text scale="h1">从 2.4 到 2.6：Linux 内核可装载模块机制的改变对设备驱动的影响</rich_text><rich_text>
        从 2.4 到 2.6，Linux 内核在可装载模块机制、设备模型、一些核心 API  等方面发生较大改变，设备驱动开发人员面临着将驱动从 2.4 移植到 2.6 内核，或是使驱动同时支持2.4 与 2.6  内核的任务。站在设备驱动开发人员的角度，驱动由一个或几个外部可加载内核模块组成，本文针对 2.6  内核里模块机制的改变对编写设备驱动程序的影响，从内核模块的编译、装载时的版本检查、初始化与退出、模块使用计数、输出内核符号、命令行输入参数、许可 证声明等方面比较了 2.4 与 2.6 内核的区别；并总结了使设备驱动同时支持 2.4 与 2.6 

</rich_text><rich_text scale="h2">1． 获取内核版本</rich_text><rich_text>
当设备驱动需要同时支持不同版本内核时，在编译阶段，内核模块需要知道当前使用的内核源码的版本，从而使用相应的内核 API。2.4 与 2.6 内核下，源码头文件 linux/version.h  定义有：
LINUX_VERSION_CODE ― 内核版本的二进制表示，主、从、修订版本号各对应一个字节；
KERNEL_VERSION(major, minor, release) － 由主、从、修订版本号构造二进制版本号。
在同时支持2.4与2.6 内核的设备驱动程序中，经常可以看到以下代码段：
清单1：判断内核版本的代码段。
    #include &lt;linux/version.h&gt;
    #if LINUX_VERSION_CODE &gt;= KERNEL_VERSION(2, 6, 0)
    #define LINUX26
    #endif
    #ifdef LINUX26
    /*code in 2.6 kernel*/
    #else
    /*code in 2.4 kernel */
    #endif

</rich_text><rich_text scale="h2">2．内核模块机制的改变</rich_text><rich_text>

</rich_text><rich_text scale="h3">2.1模块编译</rich_text><rich_text>
从2.4到2.6，外部可装载内核模块的编译、连接过程以及Makefile的书写都发生了改变。
2.4内核中，模块的编译只需内核源码头文件；需要在包含linux/modules.h之前定义MODULE；编译、连接后生成的内核模块后缀为.o。
2.6内核中，模块的编译需要配置过的内核源码；编译、连接后生成的内核模块后缀为.ko；编译过程首先会到内核源码目录下，读取顶层的Makefile文件，然后再返回模块源码所在目录。
清单2：2.4 内核模块的Makefile模板 
    #Makefile2.4
    KVER=$(shell uname -r)
    KDIR=/lib/modules/$(KVER)/build
    OBJS=mymodule.o
    CFLAGS=-D__KERNEL__ -I$(KDIR)/include -DMODULE 
        -D__KERNEL_SYSCALLS__ -DEXPORT_SYMTAB
      -O2 -fomit-frame-pointer  -Wall  -DMODVERSIONS 
              -include $(KDIR)/include/linux/modversions.h
    all: $(OBJS)
    mymodule.o: file1.o file2.o
	    ld -r -o $@ $^
    clean:
	    rm -f *.o
	在2.4  内核下，内核模块的Makefile与普通用户程序的Makefile在结构和语法上都相同，但是必须在CFLAGS中定义-D__KERNEL__ -DMODULE，指定内核头文件目录-I$(KDIR)/include。  有一点需注意，之所以在CFLAGS中定义变量，而不是在模块源码文件中定义，一方面这些预定义变量可以被模块中所有源码文件可见，另一方面等价于将这些 预定义变量定义在源码文件的起始位置。在模块编译中，对于这些全局的预定义变量，一般在CFLAGS中定义。
清单3：2.6 内核模块的Makefile模板
    # Makefile2.6
    ifneq ($(KERNELRELEASE),)
    #kbuild syntax. dependency relationshsip of files and target modules are listed here.
    mymodule-objs := file1.o file2.o
    obj-m := mymodule.o 
    else
    PWD  := $(shell pwd)
    KVER ?= $(shell uname -r)
    KDIR := /lib/modules/$(KVER)/build
    all:
	    $(MAKE) -C $(KDIR) M=$(PWD) 
    clean:
    rm -rf .*.cmd *.o *.mod.c *.ko .tmp_versions
    endif
    KERNELRELEASE是在内核源码的顶层Makefile中定义的一个变量，在第一次读取执行此 Makefile时，KERNELRELEASE没有被定义，  所以make将读取执行else之后的内容。如果make的目标是clean，直接执行clean操作，然后结束。当make的目标为all时，-C  $(KDIR) 指明跳转到内核源码目录下读取那里的Makefile；M=$(PWD)  表明然后返回到当前目录继续读入、执行当前的Makefile。当从内核源码目录返回时，KERNELRELEASE已被被定义，kbuild也被启动去 解析kbuild语法的语句，make将继续读取else之前的内容。else之前的内容为kbuild语法的语句,  指明模块源码中各文件的依赖关系，以及要生成的目标模块名。
    mymodule-objs := file1.o  file2.o表示mymoudule.o 由file1.o与file2.o 连接生成。obj-m :=  mymodule.o表示编译连接后将生成mymodule.o模块。
    补充一点，&quot;$(MAKE) -C $(KDIR) M=$(PWD)&quot;与&quot;$(MAKE) -C $(KDIR) SUBDIRS =$(PWD)&quot;的作用是等效的，后者是较老的使用方法。推荐使用M而不是SUBDIRS，前者更明确。    
通过以上比较可以看到，从Makefile编写来看，在2.6内核下，内核模块编译不必定义复杂的CFLAGS，而且模块中各文件依赖关系的表示简洁清晰。

清单4： 可同时在2.4 与 2.6 内核下工作的Makefile
＃Makefile for 2.4 &amp; 2.6
VERS26=$(findstring 2.6,$(shell uname -r))
MAKEDIR?=$(shell pwd)
ifeq ($(VERS26),2.6)
include $(MAKEDIR)/Makefile2.6
else
include $(MAKEDIR)/Makefile2.4
endif

</rich_text><rich_text scale="h3">2.2模块装载时的版本检查</rich_text><rich_text>
    Linux内核一直在更新、完善，在a版本内核源码下编译的模块在b版本内核下通常不能运行，所以必须有一种机制，限制在a版本内核下编译生成的模块在b版本内核下被加载。
2.4与2.6内核在可装载内核模块的版本检查机制方面发生了根本性的改变，不过这些改变对设备驱动开发人员而言基本是透明的。为了使模块装载时的版本检查机制生效，2.4 内核下，只需在CFLAGS中定义
    -DMODVERSIONS -include $(KDIR)/include/linux/modversions.h；
    2.6内核下，开发人员无须采用任何操作。
    不过，在此仍有必要阐明2.4与2.6内核对可加载模块的版本检查机制。
    2.4 内核下， 执行`cat  /proc/ksyms`可看到内核符号在名字后还跟随着一串校验字符串，此校验字符串与内核版本有关。在内核源码头文件linux/modules  目录下存在许多*.ver文件，这些文件起着为内核符号添加校验后缀的作用，如ksyms.ver 文件里有一行 #define printk _set_ver(printk)。linux/modversions.h 文件会包含全部的 ver文件  。所以当模块包含linux/modversions.h文件后，编译时，模块里使用的内核符号实质是带有校验后缀的内核符号。在加载模块时，如果模块中 所使用内核符号的校验字符串与当前运行内核所导出的相应的内核符号的校验字符串不一致，即当前内核空间并不存在模块所使用的内核符号，就会出 现&quot;Invalid module format &quot;的错误。
为内核符号添加校验字符串来验证模块的版本与内核的版本是否匹配是繁杂和浪费 内核空间的；而且随着SMP（对称多处理器）、PREEMPT（可抢占内核）等机制在2.6内核的引入和完善，模块运行时对内核的依赖不仅取决于内核版 本，还取决于内核的配置，此时内核符号的校验码是否一致不能成为判断模块可否被加载的充分条件。2.6  内核下，在linux/vermagic.h中定义有VERMAGIC_STRING，VERMAGIC_STRING不仅包含内核版本号，还包含有内核 使用的gcc版本，SMP与PREEMPT等配置信息。模块在编译时，我们可以看到屏幕上会显示&quot;MODPOST&quot;。在此阶段，  VERMAGIC_STRING会添加到模块的modinfo段。  在内核源码目录下scripts\mod\modpost.c文件中可以看到模块后续处理部分的代码。模块编译生成后，通过`modinfo  mymodule.ko`命令可以查看此模块的vermagic等信息。2.6  内核下的模块装载器里保存有内核的版本信息，在装载模块时，装载器会比较所保存的内核vermagic与此模块的modinfo段里保存的 vermagic信息是否一致，两者一致时，模块才能被装载。譬如Fedora core 4 与core 2 使用的都是2.6 版本内核，  在Fedore Core 2下去加载Fedora Core4下编译生成的hello.ko，会出现&quot;invalid module format&quot;  错误。
    ＃insmod hello.ko
    Invalid module format 
    hello: version magic '2.6.11-1.1369_FC4 686 REGPARM 4KSTACKS gcc-4.0' 
    should be '2.6.5-1.358 686 REGPARM 4KSTACKS gcc-3.3'
    
</rich_text><rich_text scale="h3">2.3模块的初始化与退出</rich_text><rich_text>
在 2.6内核中，内核模块必须调用宏module_init 与module_exit() 去注册初始化与退出函数。在2.4  内核中，如果初始化函数命名为init_module()、退出函数命名为cleanup_module()，可以不必使用module_init  与module_exit 宏。推荐使用module_init 与module_exit宏，使代码在2.4与2.6内核中都能工作。
清单5：适用于2.4与2.6内核的模块的初始化与退出模板
    #include &lt;linux/module.h&gt;  /* Needed by all modules */
    #include &lt;linux/init.h&gt;    /* Needed for init&amp;exit macros */
    static int mod_init_func(void)
    {
        /*code here*/
        return 0;
    }
    static void mod_exit_func(void)
    {
        /*code here*/
    }
    module_init(mod_init_func);
    module_exit(mod_exit_func);
    需要注意的是初始化与退出函数必须在宏module_init和module_exit使用前定义，否则会出现编译错误。

</rich_text><rich_text scale="h3">2.4 模块使用计数</rich_text><rich_text>
模 块在被使用时，是不允许被卸载的。2.4内核中，模块自身通过MOD_INC_USE_COUNT、MOD_DEC_USE_COUNT宏来管理自己被使 用的计数。2.6内核提供了更健壮、灵活的模块计数管理接口try_module_get(&amp;module)及 module_put(&amp;module)取代2.4中的模块使用计数管理宏；模块的使用计数不必由自身管理，而且在管理模块使用计数时考虑到 SMP与PREEMPT机制的影响。
    int try_module_get(struct module *module)：用于增加模块使用计数；若返回为0，表示调用失败，希望使用的模块没有被加载或正在被卸载中。
    void module_put(struct module *module)：减少模块使用计数。
    
    try_module_get 与module_put的引入与使用与2.6内核下的设备模型密切相关。模块是用来管理硬件设备的，2.6 内核为不同类型的设备定义了struct module *owner 域，用来指向管理此设备的模块。如字符设备的定义：
    struct cdev {
	    struct kobject kobj;
	    struct module *owner;
	    struct file_operations *ops;
	    struct list_head list;
	    dev_t dev;
	    unsigned int count;
    };
    从设备使用的角度出发，当需要打开、开始使用某个设备时，使用 try_module_get(dev-&gt;owner)去增加管理此设备的owner模块的使用计数；当关闭、不再使用此设备时，使用 module_put(dev-&gt;owner)减少对管理此设备的owner模块的使用计数。这样，当设备在使用时，管理此设备的模块就不能被卸 载；只有设备不再使用时模块才能被卸载。
2.6内核下，对于为具体设备写驱动的开发人员而言，基本无需使用try_module_get与 module_put，因为此时开发人员所写的驱动通常为支持某具体设备的owner模块，对此设备owner模块的计数管理由内核里更底层的代码如总线 驱动或是此类设备共用的核心模块来实现，从而简化了设备驱动开发。

</rich_text><rich_text scale="h2">2.5 模块输出的内核符号</rich_text><rich_text>
2.4 内核下，缺省情况时模块中的非静态全局变量及函数在模块加载后会输出到内核空间。
2.6  内核下，缺省情况时模块中的非静态全局变量及函数在模块加载后不会输出到内核空间，需要显式调用宏EXPORT_SYMBOL才能输出。所以在2.6  内核的模块下，EXPORT_NO_SYMBOLS宏的调用没有意义，是空操作。在同时支持2.4与2.6内核的设备驱动中，可以通过以下代码段来输出模 块的内核符号
清单6： 同时支持2.4与2.6的输出内核符号代码段
    #include &lt;linux/module.h&gt;
    #ifndef LINUX26
    EXPORT_NO_SYMBOLS;
    #endif	
    EXPORT_SYMBOL(var);
    EXPORT_SYMBOL(func);
    需要注意的是如需在2.4内核下使用 EXPORT_SYMBOL，必须在 CFLAGS中定义 EXPORT_SYMTAB，否则编译将会失败。
从良好的代码风格角度出发，模块中不需要输出到内核空间且不需为模块中其它文件所用的全局变量及函数最好显式申明为static类型，需要输出的内核符号以模块名为前缀。
模块加载后，2.4内核下可通过 /proc/ksyms、 2.6 内核下可通过/proc/kallsyms查看模块输出的内核符号

</rich_text><rich_text scale="h2">2.6 模块的命令行输入参数</rich_text><rich_text>
    在装载内核模块时，用户可以向模块传递一些参数，如`modprobe modname var=value`，否则，var将使用模块内定义的缺省值。

    2.4 内核下，linux/module.h中定义有宏MODULE_PARM(var,type)  用于向模块传递命令行参数。var为接受参数值的变量名，type为采取如下格式的字符串[min[-max]]{b,h,i,l,s}。min及max 用于表示当参数为数组类型时，允许输入的数组元素的个数范围；b：byte；h：short；i：int；l：long；s：string。 
    2.6内核下，宏MODULE_PARM(var,type)不再被支持。在头文件linux/moduleparam.h里定义了如下宏：
    module_param(name, type, perm)	
    module_param_array(name, type, nump, perm)
    type  类型可以是byte、short,、ushort、 int、 uint、long、ulong、charp, bool or invbool,  不再采用2.4内核中的字符串形式，而且在模块编译时会将此处申明的type与变量定义的类型进行比较，判断是否一致。
    perm表示此参数 在sysfs文件系统中所对应的文件节点的属性。2.6内核使用sysfs文件系统，这是一个建立在内存中比proc更强大的文件系统。sysfs文件系 统可以动态、实时，有组织层次地反应当前系统中的硬件、驱动等状态。当perm为0时，表示此参数不存在sysfs文件系统下对应的文件节点。  模块被加载后，在/sys/module/  目录下将出现以此模块名命名的目录。如果此模块存在perm不为0的命令行参数，在此模块的目录下将出现parameters目录，包含一系列以参数名命 名的文件节点，这些文件的权限值等于perm，文件的内容为参数的值。
    nump为保存输入的数组元素个数的变量的指针。当不需保存实际输入的数组元素个数时，可以设为NULL。从2.6.0至2.6.10  版本，须将变量名赋给nump；从2.6.10  版本开始，须将变量的引用赋给nump，这更易为开发人员理解。加载模块时，使用逗号分隔输入的数组元素。
    
清单7： 适用于2.4与2.6内核的模块输入参数模板
    #include &lt;linux/module.h&gt;
    #ifdef LINUX26
    #include &lt;linux/moduleparam.h&gt;
    #endif 
    int debug = 0;
    char *mode = &quot;800x600&quot;;
    int tuner[4] = {1, 1, 1, 1};
    #ifdef LINUX26
    int tuner_c = 1;  
    #endif 
    #ifdef LINUX26
    MODULE_PARM(debug, &quot;i&quot;);
    MODULE_PARM(mode, &quot;s&quot;);
    MODULE_PARM(tuner,&quot;1-4i&quot;);
    #else
    module_param(debug, int, 0644);
    module_param(mode, charp, 0644);
    #if LINUX_VERSION_CODE &gt;= KERNEL_VERSION(2, 6, 10)
    module_param_array(tuner, int, &amp;tuner_c, 0644);
    #else
    module_param_array(tuner, int, tuner_c, 0644);
    #endif 
    #endif
    模块编译生成后，加载模块时可以输入：`modprobe  my_module   mode=1024x768 debug=1 tuner=22,33`。 
    在linux/moduleparam.h还定义有：
    module_param_array_named(name, array, type, nump, perm)		
    module_param_call(name, set, get, arg, perm)	
    module_param_named(name, value, type, perm)
    读者可以参阅linux/moduleparam.h查看这些宏的详细描述，有一点需注意，在2.6内核里，module_param这一系列宏使用的都是小写名字。

</rich_text><rich_text scale="h3">2.7 模块的许可证声明</rich_text><rich_text>
    从 2.4.10版本内核开始，模块必须通过MODULE_LICENSE宏声明此模块的许可证，否则在加载此模块时，会收到内核被污染&quot;kernel  tainted&quot; 的警告。从linux/module.h文件中可以看到，被内核接受的有意义的许可证有 &quot;GPL&quot;，&quot;GPL v2&quot;，&quot;GPL  and additional rights&quot;，&quot;Dual BSD/GPL&quot;，&quot;Dual MPL/GPL&quot;，&quot;Proprietary&quot;。
在同时支持2.4与2.6内核的设备驱动中，模块可按如下方式声明自己的许可证。
    清单8： 适用于2.4与2.6内核的模块许可证声明模板
    #if LINUX_VERSION_CODE &gt;= KERNEL_VERSION(2,4,10)
    MODULE_LICENSE(&quot;GPL&quot;);
    #endif
    
</rich_text><rich_text scale="h3">2.8 小结</rich_text><rich_text>
    此外，2.6内核里还有一些模块机制的改变，不常为 驱动开发人员用到。如加载内核模块的接口request_module在2.4 下为request_module(const char *  module_name)；在2.6内核下为request_module(const char *fmt, ...)。在2.6  内核下，驱动开发人员可以通过调用
    request_module(&quot;msp3400&quot;);
    request_module(&quot;char-major-%d-%d&quot;, MAJOR(dev), MINOR(dev))；
    这种更灵活的方式加载其它内核模块。

2.6内核在linux/module.h中还提供了MODULE_ALIAS(alias)宏，模块可以通过调用此宏为自己定义一或若干个别称。而在2.4内核下，用户只能在/etc/modules.conf中为模块定义别称。
通过以上比较可以看到，从2.4到2.6内核，可装载模块管理机制的改变使设备驱动的开发变得更加简洁、灵活、健壮

</rich_text></node><node name="Linux 内核的同步机制" prog_lang="custom-colors" readonly="False" tags="" unique_id="29"><rich_text></rich_text><node name="第1部分" prog_lang="custom-colors" readonly="False" tags="" unique_id="31"><rich_text scale="h1">一、 引言</rich_text><rich_text>
在现代操作系统里，同一时间可能有多个内核执行流在执行，因此内核其实象多进程多线程编程一样也需要一些同步机制来同步各执行单元对共享数据的访 问。尤其是在多处理器系统上，更需要一些同步机制来同步不同处理器上的执行单元对共享的数据的访问。在主流的Linux内核中包含了几乎所有现代的操作系 统具有的同步机制，这些同步机制包括：原子操作、信号量（semaphore）、读写信号量（rw_semaphore）、spinlock、 BKL(Big Kernel  Lock)、rwlock、brlock（只包含在2.4内核中）、RCU（只包含在2.6内核中）和seqlock（只包含在2.6内核中）。
本文的下面各章节将详细讲述每一种同步机制的原理、用途、API以及典型应用示例。

</rich_text><rich_text scale="h1">二、原子操作</rich_text><rich_text>
所谓原子操作，就是该操作绝不会在执行完毕前被任何其他任务或事件打断，也就说，它的最小的执行单位，不可能有比它更小的执行单位，因此这里的原子实际是使用了物理学里的物质微粒的概念。
原子操作需要硬件的支持，因此是架构相关的，其API和原子类型的定义都定义在内核源码树的include/asm/atomic.h文件中，它们都使用汇编语言实现，因为C语言并不能实现这样的操作。
原子操作主要用于实现资源计数，很多引用计数(refcnt)就是通过原子操作实现的。
原子类型定义如下：

typedef struct { volatile int counter; } atomic_t;
volatile修饰字段告诉gcc不要对该类型的数据做优化处理，对它的访问都是对内存的访问，而不是对寄存器的访问。

</rich_text><rich_text scale="h2">原子操作API包括：</rich_text><rich_text>

atomic_read(atomic_t * v);
该函数对原子类型的变量进行原子读操作，它返回原子类型的变量v的值。

atomic_set(atomic_t * v, int i);
该函数设置原子类型的变量v的值为i。

void atomic_add(int i, atomic_t *v);
该函数给原子类型的变量v增加值i。

atomic_sub(int i, atomic_t *v);
该函数从原子类型的变量v中减去i。

int atomic_sub_and_test(int i, atomic_t *v);
该函数从原子类型的变量v中减去i，并判断结果是否为0，如果为0，返回真，否则返回假。

void atomic_inc(atomic_t *v);
该函数对原子类型变量v原子地增加1。

void atomic_dec(atomic_t *v);
该函数对原子类型的变量v原子地减1。

int atomic_dec_and_test(atomic_t *v);
该函数对原子类型的变量v原子地减1，并判断结果是否为0，如果为0，返回真，否则返回假。

int atomic_inc_and_test(atomic_t *v);
该函数对原子类型的变量v原子地增加1，并判断结果是否为0，如果为0，返回真，否则返回假。

int atomic_add_negative(int i, atomic_t *v);
该函数对原子类型的变量v原子地增加I，并判断结果是否为负数，如果是，返回真，否则返回假。

int atomic_add_return(int i, atomic_t *v);
该函数对原子类型的变量v原子地增加i，并且返回指向v的指针。

int atomic_sub_return(int i, atomic_t *v);
该函数从原子类型的变量v中减去i，并且返回指向v的指针。

int atomic_inc_return(atomic_t * v);
该函数对原子类型的变量v原子地增加1并且返回指向v的指针。

int atomic_dec_return(atomic_t * v);
该函数对原子类型的变量v原子地减1并且返回指向v的指针。

    原子操作通常用于实现资源的引用计数，在TCP/IP协议栈的IP碎片处理中，就使用了引用计数，碎片队列结构struct  ipq描述了一个IP碎片，字段refcnt就是引用计数器，它的类型为atomic_t，当创建IP碎片时（在函数ip_frag_create中）， 使用atomic_set函数把它设置为1，当引用该IP碎片时，就使用函数atomic_inc把引用计数加1，当不需要引用该IP碎片时，就使用函数 ipq_put来释放该IP碎片，ipq_put使用函数atomic_dec_and_test把引用计数减1并判断引用计数是否为0，如果是, 就释放IP碎片。函数ipq_kill把IP碎片从ipq队列中删除，并把该删除的IP碎片的引用计数减1（通过使用函数atomic_dec实现）。

</rich_text><rich_text scale="h1">三、信号量（semaphore）</rich_text><rich_text>
    Linux内核的信号量在概念和原理上与用户态的System V的IPC机制信号量是一样的，但是它绝不可能在内核之外使用，因此它与System V的IPC机制信号量毫不相干。
信号量在创建时需要设置一个初始值，表示同时可以有几个任务可以访问该信号量保护的共享资源，初始值为1就变成互斥锁（Mutex），即同时只能有一个任务可以访问信号量保护的共享资源。一个任务要想访问共享资源，首先必须得到信号量，获取信号量的操作将把信号量的值减1，若当前信号量的值为负数， 表明无法获得信号量，该任务必须挂起在该信号量的等待队列等待该信号量可用；若当前信号量的值为非负数，表示可以获得信号量，因而可以立刻访问被该信号量 保护的共享资源。当任务访问完被信号量保护的共享资源后，必须释放信号量，释放信号量通过把信号量的值加1实现，如果信号量的值为非正数，表明有任务等待 当前信号量，因此它也唤醒所有等待该信号量的任务。

</rich_text><rich_text scale="h2">信号量的API有：</rich_text><rich_text>

DECLARE_MUTEX(name)
该宏声明一个信号量name并初始化它的值为0，即声明一个互斥锁。

DECLARE_MUTEX_LOCKED(name)
该宏声明一个互斥锁name，但把它的初始值设置为0，即锁在创建时就处在已锁状态。因此对于这种锁，一般是先释放后获得。

void sema_init (struct semaphore *sem, int val);
该函用于数初始化设置信号量的初值，它设置信号量sem的值为val。

void init_MUTEX (struct semaphore *sem);
该函数用于初始化一个互斥锁，即它把信号量sem的值设置为1。

void init_MUTEX_LOCKED (struct semaphore *sem);
该函数也用于初始化一个互斥锁，但它把信号量sem的值设置为0，即一开始就处在已锁状态。

void down(struct semaphore * sem);
该函数用于获得信号量sem，它会导致睡眠，因此不能在中断上下文（包括IRQ上下文和softirq上下文）使用该函数。该函数将把sem的值减1，如果信号量sem的值非负，就直接返回，否则调用者将被挂起，直到别的任务释放该信号量才能继续运行。

int down_interruptible(struct semaphore * sem);
该函数功能与down类似，不同之处为，down不会被信号（signal）打断，但down_interruptible能被信号打断，因此该函数有返回值来区分是正常返回还是被信号中断，如果返回0，表示获得信号量正常返回，如果被信号打断，返回-EINTR。

int down_trylock(struct semaphore * sem);
该函数试着获得信号量sem，如果能够立刻获得，它就获得该信号量并返回0，否则，表示不能获得信号量sem，返回值为非0值。因此，它不会导致调用者睡眠，可以在中断上下文使用。

void up(struct semaphore * sem);
该函数释放信号量sem，即把sem的值加1，如果sem的值为非正数，表明有任务等待该信号量，因此唤醒这些等待者。

    信号量在绝大部分情况下作为互斥锁使用，下面以console驱动系统为例说明信号量的使用。
    在内核源码树的kernel/printk.c中，使用宏DECLARE_MUTEX声明了一个互斥锁console_sem，它用于保护console驱动列表console_drivers以及同步对整个console驱动系统的访问，其中定义了函数 acquire_console_sem来获得互斥锁console_sem，定义了release_console_sem来释放互斥锁 console_sem，定义了函数try_acquire_console_sem来尽力得到互斥锁console_sem。这三个函数实际上是分别对函数down，up和down_trylock的简单包装。需要访问console_drivers驱动列表时就需要使用 acquire_console_sem来保护console_drivers列表，当访问完该列表后，就调用release_console_sem释 放信号量console_sem。函数 console_unblank，console_device，console_stop，console_start，register_console 和unregister_console都需要访问console_drivers，因此它们都使用函数对acquire_console_sem和 release_console_sem来对console_drivers进行保护。

</rich_text><rich_text scale="h1">四、读写信号量（rw_semaphore）</rich_text><rich_text>
    读写信号量对访问者进行了细分，或者为读者，或者为写者，读者在保持读写信号量期间只能对该读写信号量保护的共享资源进行读访问，如果一个任务除了需要读，可能还需要写，那么它必须被归类为写者，它在对共享资源访问之前必须先获得写者身份，写者在发现自己不需要写访问的情况下可以降级为读者。读写信号量同时拥有的读者数不受限制，也就说可以有任意多个读者同时拥有一个读写信号量。如果一个读写信号量当前没有被写者拥有并且也没有写者等待读者释放信号 量，那么任何读者都可以成功获得该读写信号量；否则，读者必须被挂起直到写者释放该信号量。如果一个读写信号量当前没有被读者或写者拥有并且也没有写者等待该信号量，那么一个写者可以成功获得该读写信号量，否则写者将被挂起，直到没有任何访问者。因此，写者是排他性的，独占性的。
    读写信号量有两种实现，一种是通用的，不依赖于硬件架构，因此，增加新的架构不需要重新实现它，但缺点是性能低，获得和释放读写信号量的开销大；另一种是架构相关的，因此性能高，获取和释放读写信号量的开销小，但增加新的架构需要重新实现。在内核配置时，可以通过选项去控制使用哪一种实现。
    
</rich_text><rich_text scale="h2">读写信号量的相关API有：</rich_text><rich_text>

DECLARE_RWSEM(name)
该宏声明一个读写信号量name并对其进行初始化。

void init_rwsem(struct rw_semaphore *sem);
该函数对读写信号量sem进行初始化。

void down_read(struct rw_semaphore *sem);
读者调用该函数来得到读写信号量sem。该函数会导致调用者睡眠，因此只能在进程上下文使用。

int down_read_trylock(struct rw_semaphore *sem);
该函数类似于down_read，只是它不会导致调用者睡眠。它尽力得到读写信号量sem，如果能够立即得到，它就得到该读写信号量，并且返回1，否则表示不能立刻得到该信号量，返回0。因此，它也可以在中断上下文使用。

void down_write(struct rw_semaphore *sem);
写者使用该函数来得到读写信号量sem，它也会导致调用者睡眠，因此只能在进程上下文使用。

int down_write_trylock(struct rw_semaphore *sem);
该函数类似于down_write，只是它不会导致调用者睡眠。该函数尽力得到读写信号量，如果能够立刻获得，就获得该读写信号量并且返回1，否则表示无法立刻获得，返回0。它可以在中断上下文使用。

void up_read(struct rw_semaphore *sem);
读者使用该函数释放读写信号量sem。它与down_read或down_read_trylock配对使用。如果down_read_trylock返回0，不需要调用up_read来释放读写信号量，因为根本就没有获得信号量。

void up_write(struct rw_semaphore *sem);
写者调用该函数释放信号量sem。它与down_write或down_write_trylock配对使用。如果down_write_trylock返回0，不需要调用up_write，因为返回0表示没有获得该读写信号量。

void downgrade_write(struct rw_semaphore *sem);
该函数用于把写者降级为读者，这有时是必要的。因为写者是排他性的，因此在写者保持读写信号量期间，任何读者或写者都将无法访问该读写信号量保护的 共享资源，对于那些当前条件下不需要写访问的写者，降级为读者将，使得等待访问的读者能够立刻访问，从而增加了并发性，提高了效率。
    读写信号量适于在读多写少的情况下使用，在linux内核中对进程的内存映像描述结构的访问就使用了读写信号量进行保护。在Linux中，每一个进程都用一个类型为task_t或struct task_struct的结构来描述，该结构的类型为struct  mm_struct的字段mm描述了进程的内存映像，特别是mm_struct结构的mmap字段维护了整个进程的内存块列表，该列表将在进程生存期间被大量地遍历或修改，因此mm_struct结构就有一个字段mmap_sem来对mmap的访问进行保护，mmap_sem就是一个读写信号量，在 proc文件系统里有很多进程内存使用情况的接口，通过它们能够查看某一进程的内存使用情况，命令free、ps和top都是通过proc来得到内存使用信息的，proc接口就使用down_read和up_read来读取进程的mmap信息。当进程动态地分配或释放内存时，需要修改mmap来反映分配或释放后的内存映像，因此动态内存分配或释放操作需要以写者身份获得读写信号量mmap_sem来对mmap进行更新。系统调用brk和munmap就使用了down_write和up_write来保护对mmap的访问。

</rich_text><rich_text scale="h1">五、自旋锁（spinlock）</rich_text><rich_text>
    自旋锁与互斥锁有点类似，只是自旋锁不会引起调用者睡眠，如果自旋锁已经被别的执行单元保持，调用者就一直循环在那里看是否该自旋锁的保持者已经释放了锁，&quot;自旋&quot;一词就是因此而得名。由于自旋锁使用者一般保持锁时间非常短，因此选择自旋而不是睡眠是非常必要的，自旋锁的效率远高于互斥锁。
    信号量和读写信号量适合于保持时间较长的情况，它们会导致调用者睡眠，因此只能在进程上下文使用（_trylock的变种能够在中断上下文使用）， 而自旋锁适合于保持时间非常短的情况，它可以在任何上下文使用。如果被保护的共享资源只在进程上下文访问，使用信号量保护该共享资源非常合适，如果对共享资源的访问时间非常短，自旋锁也可以。但是如果被保护的共享资源需要在中断上下文访问（包括底半部即中断处理句柄和顶半部即软中断），就必须使用自旋锁。
    自旋锁保持期间是抢占失效的，而信号量和读写信号量保持期间是可以被抢占的。自旋锁只有在内核可抢占或SMP的情况下才真正需要，在单CPU且不可抢占的内核下，自旋锁的所有操作都是空操作。
    跟互斥锁一样，一个执行单元要想访问被自旋锁保护的共享资源，必须先得到锁，在访问完共享资源后，必须释放锁。如果在获取自旋锁时，没有任何执行单元保持该锁，那么将立即得到锁；如果在获取自旋锁时锁已经有保持者，那么获取锁操作将自旋在那里，直到该自旋锁的保持者释放了锁。
    无论是互斥锁，还是自旋锁，在任何时刻，最多只能有一个保持者，也就说，在任何时刻最多只能有一个执行单元获得锁。

</rich_text><rich_text scale="h2">自旋锁的API有：</rich_text><rich_text>

spin_lock_init(x)
该宏用于初始化自旋锁x。自旋锁在真正使用前必须先初始化。该宏用于动态初始化。

DEFINE_SPINLOCK(x)
该宏声明一个自旋锁x并初始化它。该宏在2.6.11中第一次被定义，在先前的内核中并没有该宏。

SPIN_LOCK_UNLOCKED
该宏用于静态初始化一个自旋锁。

DEFINE_SPINLOCK(x)等同于spinlock_t x = SPIN_LOCK_UNLOCKED; spin_is_locked(x)
该宏用于判断自旋锁x是否已经被某执行单元保持（即被锁），如果是，返回真，否则返回假。

spin_unlock_wait(x)
该宏用于等待自旋锁x变得没有被任何执行单元保持，如果没有任何执行单元保持该自旋锁，该宏立即返回，否则将循环在那里，直到该自旋锁被保持者释放。

spin_trylock(lock)
该宏尽力获得自旋锁lock，如果能立即获得锁，它获得锁并返回真，否则不能立即获得锁，立即返回假。它不会自旋等待lock被释放。

spin_lock(lock)
该宏用于获得自旋锁lock，如果能够立即获得锁，它就马上返回，否则，它将自旋在那里，直到该自旋锁的保持者释放，这时，它获得锁并返回。总之，只有它获得锁才返回。

spin_lock_irqsave(lock, flags)
该宏获得自旋锁的同时把标志寄存器的值保存到变量flags中并失效本地中断。

spin_lock_irq(lock)
该宏类似于spin_lock_irqsave，只是该宏不保存标志寄存器的值。

spin_lock_bh(lock)
该宏在得到自旋锁的同时失效本地软中断。

spin_unlock(lock)
该宏释放自旋锁lock，它与spin_trylock或spin_lock配对使用。如果spin_trylock返回假，表明没有获得自旋锁，因此不必使用spin_unlock释放。

spin_unlock_irqrestore(lock, flags)
该宏释放自旋锁lock的同时，也恢复标志寄存器的值为变量flags保存的值。它与spin_lock_irqsave配对使用。

spin_unlock_irq(lock)
该宏释放自旋锁lock的同时，也使能本地中断。它与spin_lock_irq配对应用。

spin_unlock_bh(lock)
该宏释放自旋锁lock的同时，也使能本地的软中断。它与spin_lock_bh配对使用。

spin_trylock_irqsave(lock, flags)
该宏如果获得自旋锁lock，它也将保存标志寄存器的值到变量flags中，并且失效本地中断，如果没有获得锁，它什么也不做。因此如果能够立即获 得锁，它等同于spin_lock_irqsave，如果不能获得锁，它等同于spin_trylock。如果该宏获得自旋锁lock，那需要使用 spin_unlock_irqrestore来释放。

spin_trylock_irq(lock)
该宏类似于spin_trylock_irqsave，只是该宏不保存标志寄存器。如果该宏获得自旋锁lock，需要使用spin_unlock_irq来释放。

spin_trylock_bh(lock)
该宏如果获得了自旋锁，它也将失效本地软中断。如果得不到锁，它什么也不做。因此，如果得到了锁，它等同于spin_lock_bh，如果得不到锁，它等同于spin_trylock。如果该宏得到了自旋锁，需要使用spin_unlock_bh来释放。

spin_can_lock(lock)
该宏用于判断自旋锁lock是否能够被锁，它实际是spin_is_locked取反。如果lock没有被锁，它返回真，否则，返回假。该宏在2.6.11中第一次被定义，在先前的内核中并没有该宏。
    获得自旋锁和释放自旋锁有好几个版本，因此让读者知道在什么样的情况下使用什么版本的获得和释放锁的宏是非常必要的。
    如果被保护的共享资源只在进程上下文访问和软中断上下文访问，那么当在进程上下文访问共享资源时，可能被软中断打断，从而可能进入软中断上下文来对被保护的共享资源访问，因此对于这种情况，对共享资源的访问必须使用spin_lock_bh和spin_unlock_bh来保护。当然使用 spin_lock_irq和spin_unlock_irq以及spin_lock_irqsave和spin_unlock_irqrestore也可以，它们失效了本地硬中断，失效硬中断隐式地也失效了软中断。但是使用spin_lock_bh和spin_unlock_bh是最恰当的，它比其他两个快。
    如果被保护的共享资源只在进程上下文和tasklet或timer上下文访问，那么应该使用与上面情况相同的获得和释放锁的宏，因为tasklet和timer是用软中断实现的。
如果被保护的共享资源只在一个tasklet或timer上下文访问，那么不需要任何自旋锁保护，</rich_text><rich_text foreground="#00000000ffff">因为同一个tasklet或timer只能在一个 CPU上运行，即使是在SMP环境下也是如此。实际上tasklet在调用tasklet_schedule标记其需要被调度时已经把该tasklet绑定到当前CPU，因此同一个tasklet决不可能同时在其他CPU上运行。timer也是在其被使用add_timer添加到timer队列中时已经被帮定到当前CPU，所以同一个timer绝不可能运行在其他CPU上。当然同一个tasklet有两个实例同时运行在同一个CPU就更不可能了</rich_text><rich_text>。
    如果被保护的共享资源只在两个或多个tasklet或timer上下文访问，那么对共享资源的访问仅需要用spin_lock和 spin_unlock来保护，不必使用_bh版本，因为当tasklet或timer运行时，不可能有其他tasklet或timer在当前CPU上运行。 如果被保护的共享资源只在一个软中断（tasklet和timer除外）上下文访问，那么这个共享资源需要用spin_lock和spin_unlock 来保护，因为同样的软中断可以同时在不同的CPU上运行。
    如果被保护的共享资源在两个或多个软中断上下文访问，那么这个共享资源当然更需要用spin_lock和spin_unlock来保护，不同的软中断能够同时在不同的CPU上运行。
    如果被保护的共享资源在软中断（包括tasklet和timer）或进程上下文和硬中断上下文访问，那么在软中断或进程上下文访问期间，可能被硬中断打断，从而进入硬中断上下文对共享资源进行访问，因此，在进程或软中断上下文需要使用spin_lock_irq和spin_unlock_irq来保护对共享资源的访问。而在中断处理句柄中使用什么版本，需依情况而定，如果只有一个中断处理句柄访问该共享资源，那么在中断处理句柄中仅需要spin_lock和spin_unlock来保护对共享资源的访问就可以了。因为在执行中断处理句柄期间，不可能被同一CPU上的软中断或进程打断。但是如果有不同的中断处理句柄访问该共享资源，那么需要在中断处理句柄中使用spin_lock_irq和spin_unlock_irq来保护对共享资源的访问。
    在使用spin_lock_irq和spin_unlock_irq的情况下，完全可以用spin_lock_irqsave和 spin_unlock_irqrestore取代，那具体应该使用哪一个也需要依情况而定，如果可以确信在对共享资源访问前中断是使能的，那么使用spin_lock_irq更好一些，因为它比spin_lock_irqsave要快一些，但是如果你不能确定是否中断使能，那么使用 spin_lock_irqsave和spin_unlock_irqrestore更好，因为它将恢复访问共享资源前的中断标志而不是直接使能中断。当然，有些情况下需要在访问共享资源时必须中断失效，而访问完后必须中断使能，这样的情形使用spin_lock_irq和spin_unlock_irq最好。
    需要特别提醒读者，spin_lock用于阻止在不同CPU上的执行单元对共享资源的同时访问以及不同进程上下文互相抢占导致的对共享资源的非同步访问，而中断失效和软中断失效却是为了阻止在同一CPU上软中断或中断对共享资源的非同步访问。
    本系列文章的第二部分将详细介绍Linux内核中的其他一些同步机制，包括大内核锁、读写锁、大读者锁、RCU和顺序锁。
    </rich_text></node><node name="第2部分" prog_lang="custom-colors" readonly="False" tags="" unique_id="30"><rich_text scale="h1">六、大内核锁（BKL--Big Kernel Lock）</rich_text><rich_text>
    大内核锁本质上也是自旋锁，但是它又不同于自旋锁，自旋锁是不可以递归获得锁的，因为那样会导致死锁。但大内核锁可以递归获得锁。大内核锁用于保护 整个内核，而自旋锁用于保护非常特定的某一共享资源。进程保持大内核锁时可以发生调度，具体实现是：在执行schedule时，schedule将检查进 程是否拥有大内核锁，如果有，它将被释放，以致于其它的进程能够获得该锁，而当轮到该进程运行时，再让它重新获得大内核锁。注意在保持自旋锁期间是不运行 发生调度的。
需要特别指出，整个内核只有一个大内核锁，其实不难理解，内核只有一个，而大内核锁是保护整个内核的，当然有且只有一个就足够了。
还需要特别指出的是，大内核锁是历史遗留，内核中用的非常少，一般保持该锁的时间较长，因此不提倡使用它。从2.6.11内核起，大内核锁可以通过配置内核使其变得可抢占（自旋锁是不可抢占的），这时它实质上是一个互斥锁，使用信号量实现。

</rich_text><rich_text scale="h2">大内核锁的API包括：</rich_text><rich_text>

void lock_kernel(void);
该函数用于得到大内核锁。它可以递归调用而不会导致死锁。

void unlock_kernel(void);
该函数用于释放大内核锁。当然必须与lock_kernel配对使用，调用了多少次lock_kernel，就需要调用多少次unlock_kernel。
大内核锁的API使用非常简单，按照以下方式使用就可以了：

lock_kernel();
//对被保护的共享资源的访问
…
unlock_kernel()；

</rich_text><rich_text scale="h1">七、读写锁（rwlock）</rich_text><rich_text>
    读写锁实际是一种特殊的自旋锁，它把对共享资源的访问者划分成读者和写者，读者只对共享资源进行读访问，写者则需要对共享资源进行写操作。这种锁相 对于自旋锁而言，能提高并发性，因为在多处理器系统中，它允许同时有多个读者来访问共享资源，最大可能的读者数为实际的逻辑CPU数。写者是排他性的，一 个读写锁同时只能有一个写者或多个读者（与CPU数相关），但不能同时既有读者又有写者。
在读写锁保持期间也是抢占失效的。
    如果读写锁当前没有读者，也没有写者，那么写者可以立刻获得读写锁，否则它必须自旋在那里，直到没有任何写者或读者。如果读写锁没有写者，那么读者可以立即获得该读写锁，否则读者必须自旋在那里，直到写者释放该读写锁。
读写锁的API看上去与自旋锁很象，只是读者和写者需要不同的获得和释放锁的API。下面是读写锁API清单：

rwlock_init(x)
该宏用于动态初始化读写锁x。

DEFINE_RWLOCK(x)
该宏声明一个读写锁并对其进行初始化。它用于静态初始化。

RW_LOCK_UNLOCKED
它用于静态初始化一个读写锁。

DEFINE_RWLOCK(x)等同于rwlock_t x = RW_LOCK_UNLOCKED

read_trylock(lock)
读者用它来尽力获得读写锁lock，如果能够立即获得读写锁，它就获得锁并返回真，否则不能获得锁，返回假。无论是否能够获得锁，它都将立即返回，绝不自旋在那里。

write_trylock(lock)
写者用它来尽力获得读写锁lock，如果能够立即获得读写锁，它就获得锁并返回真，否则不能获得锁，返回假。无论是否能够获得锁，它都将立即返回，绝不自旋在那里。

read_lock(lock)
读者要访问被读写锁lock保护的共享资源，需要使用该宏来得到读写锁lock。如果能够立即获得，它将立即获得读写锁并返回，否则，将自旋在那里，直到获得该读写锁。

write_lock(lock)
写者要想访问被读写锁lock保护的共享资源，需要使用该宏来得到读写锁lock。如果能够立即获得，它将立即获得读写锁并返回，否则，将自旋在那里，直到获得该读写锁。

read_lock_irqsave(lock, flags)
读者也可以使用该宏来获得读写锁，与read_lock不同的是，该宏还同时把标志寄存器的值保存到了变量flags中，并失效了本地中断。

write_lock_irqsave(lock, flags)
写者可以用它来获得读写锁，与write_lock不同的是，该宏还同时把标志寄存器的值保存到了变量flags中，并失效了本地中断。

read_lock_irq(lock)
读者也可以用它来获得读写锁，与read_lock不同的是，该宏还同时失效了本地中断。该宏与read_lock_irqsave的不同之处是，它没有保存标志寄存器。

write_lock_irq(lock)
写者也可以用它来获得锁，与write_lock不同的是，该宏还同时失效了本地中断。该宏与write_lock_irqsave的不同之处是，它没有保存标志寄存器。

read_lock_bh(lock)
读者也可以用它来获得读写锁，与与read_lock不同的是，该宏还同时失效了本地的软中断。

write_lock_bh(lock)
写者也可以用它来获得读写锁，与write_lock不同的是，该宏还同时失效了本地的软中断。

read_unlock(lock)
读者使用该宏来释放读写锁lock。它必须与read_lock配对使用。

write_unlock(lock)
写者使用该宏来释放读写锁lock。它必须与write_lock配对使用。

read_unlock_irqrestore(lock, flags)
读者也可以使用该宏来释放读写锁，与read_unlock不同的是，该宏还同时把标志寄存器的值恢复为变量flags的值。它必须与read_lock_irqsave配对使用。

write_unlock_irqrestore(lock, flags)
写者也可以使用该宏来释放读写锁，与write_unlock不同的是，该宏还同时把标志寄存器的值恢复为变量flags的值，并使能本地中断。它必须与write_lock_irqsave配对使用。

read_unlock_irq(lock)
读者也可以使用该宏来释放读写锁，与read_unlock不同的是，该宏还同时使能本地中断。它必须与read_lock_irq配对使用。

write_unlock_irq(lock)
写者也可以使用该宏来释放读写锁，与write_unlock不同的是，该宏还同时使能本地中断。它必须与write_lock_irq配对使用。

read_unlock_bh(lock)
读者也可以使用该宏来释放读写锁，与read_unlock不同的是，该宏还同时使能本地软中断。它必须与read_lock_bh配对使用。

write_unlock_bh(lock)
写者也可以使用该宏来释放读写锁，与write_unlock不同的是，该宏还同时使能本地软中断。它必须与write_lock_bh配对使用。
    读写锁的获得和释放锁的方法也有许多版本，具体用哪个与自旋锁一样，因此参考自旋锁部分就可以了。只是需要区分读者与写者，读者要用读者版本，而写者必须用写者版本。
    
</rich_text><rich_text scale="h1">八、大读者锁（brlock-Big Reader Lock）</rich_text><rich_text>
    大读者锁是读写锁的高性能版，读者可以非常快地获得锁，但写者获得锁的开销比较大。大读者锁只存在于2.4内核中，在2.6中已经没有这种锁（提醒 读者特别注意）。它们的使用与读写锁的使用类似，只是所有的大读者锁都是事先已经定义好的。这种锁适合于读多写少的情况，它在这种情况下远好于读写锁。
大读者锁的实现机制是：每一个大读者锁在所有CPU上都有一个本地读者写者锁，一个读者仅需要获得本地CPU的读者锁，而写者必须获得所有CPU上的锁。
    大读者锁的API非常类似于读写锁，只是锁变量为预定义的锁ID。

void br_read_lock (enum brlock_indices idx);
读者使用该函数来获得大读者锁idx，在2.4内核中，预定义的idx允许的值有两个：BR_GLOBALIRQ_LOCK和BR_NETPROTO_LOCK，当然，用户可以添加自己定义的大读者锁ID 。

void br_read_unlock (enum brlock_indices idx);
读者使用该函数释放大读者锁idx。

void br_write_lock (enum brlock_indices idx);
写者使用它来获得大读者锁idx。

void br_write_unlock (enum brlock_indices idx);
写者使用它来释放大读者锁idx。

br_read_lock_irqsave(idx, flags)
读者也可以使用该宏来获得大读者锁idx，与br_read_lock不同的是，该宏还同时把寄存器的值保存到变量flags中，并且失效本地中断。

br_read_lock_irq(idx)
读者也可以使用该宏来获得大读者锁idx，与br_read_lock不同的是，该宏还同时失效本地中断。与br_read_lock_irqsave不同的是，该宏不保存标志寄存器。

br_read_lock_bh(idx)
读者也可以使用该宏来获得大读者锁idx，与br_read_lock不同的是，该宏还同时失效本地软中断。

br_write_lock_irqsave(idx, flags)
写者也可以使用该宏来获得大读者锁idx，与br_write_lock不同的是，该宏还同时把寄存器的值保存到变量flags中，并且失效本地中断。

br_write_lock_irq(idx)
写者也可以使用该宏来获得大读者锁idx，与br_write_lock不同的是，该宏还同时失效本地中断。与br_write_lock_irqsave不同的是，该宏不保存标志寄存器。

br_write_lock_bh(idx)
写者也可以使用该宏来获得大读者锁idx，与br_write_lock不同的是，该宏还同时失效本地软中断。

br_read_unlock_irqrestore(idx, flags)
读者也使用该宏来释放大读者锁idx，它与br_read_unlock不同之处是，该宏还同时把变量flags的值恢复到标志寄存器。

br_read_unlock_irq(idx)
读者也使用该宏来释放大读者锁idx，它与br_read_unlock不同之处是，该宏还同时使能本地中断。

br_read_unlock_bh(idx)
读者也使用该宏来释放大读者锁idx，它与br_read_unlock不同之处是，该宏还同时使能本地软中断。

br_write_unlock_irqrestore(idx, flags)
写者也使用该宏来释放大读者锁idx，它与br_write_unlock不同之处是，该宏还同时把变量flags的值恢复到标志寄存器。

br_write_unlock_irq(idx)
写者也使用该宏来释放大读者锁idx，它与br_write_unlock不同之处是，该宏还同时使能本地中断。

br_write_unlock_bh(idx)
写者也使用该宏来释放大读者锁idx，它与br_write_unlock不同之处是，该宏还同时使能本地软中断。
这些API的使用与读写锁完全一致。

</rich_text><rich_text scale="h1">九、RCU(Read-Copy Update)</rich_text><rich_text>
    RCU(Read-Copy  Update)，顾名思义就是读-拷贝修改，它是基于其原理命名的。对于被RCU保护的共享数据结构，读者不需要获得任何锁就可以访问它，但写者在访问它 时首先拷贝一个副本，然后对副本进行修改，最后使用一个回调（callback）机制在适当的时机把指向原来数据的指针重新指向新的被修改的数据。这个时 机就是所有引用该数据的CPU都退出对共享数据的操作。
RCU也是读写锁的高性能版本，但是它比大读者锁具有更好的扩展性和性能。 RCU既允许多个读者同时访问被保护的数据，又允许多个读者和多个写者同时访问被保护的数据（注意：是否可以有多个写者并行访问取决于写者之间使用的同步 机制），读者没有任何同步开销，而写者的同步开销则取决于使用的写者间同步机制。但RCU不能替代读写锁，因为如果写比较多时，对读者的性能提高不能弥补 写者导致的损失。

RCU的API如下；

rcu_read_lock()
读者在读取由RCU保护的共享数据时使用该函数标记它进入读端临界区。

rcu_read_unlock()
该函数与rcu_read_lock配对使用，用以标记读者退出读端临界区。

synchronize_rcu()
该函数由RCU写端调用，它将阻塞写者，直到经过grace period后，即所有的读者已经完成读端临界区，写者才可以继续下一步操作。如果有多个RCU写端调用该函数，他们将在一个grace period之后全部被唤醒。

synchronize_kernel()
其他非RCU的内核代码使用该函数来等待所有CPU处在可抢占状态，目前功能等同于synchronize_rcu，但现在已经不建议使用，而使用synchronize_sched。

synchronize_sched()
该函数用于等待所有CPU都处在可抢占状态，它能保证正在运行的中断处理函数处理完毕，但不能保证正在运行的softirq处理完毕。注意，synchronize_rcu只保证所有CPU都处理完正在运行的读端临界区。

void fastcall call_rcu(struct rcu_head *head,                                
        void (*func)(struct rcu_head *rcu))
    struct rcu_head {        
        struct rcu_head *next;        
        void (*func)(struct rcu_head *head);
    };
函数call_rcu也由RCU写端调用，它不会使写者阻塞，因而可以在中断上下文或softirq使用。该函数将把函数func挂接到RCU回调 函数链上，然后立即返回。一旦所有的CPU都已经完成端临界区操作，该函数将被调用来释放删除的将绝不在被应用的数据。参数head用于记录回调函数 func，一般该结构会作为被RCU保护的数据结构的一个字段，以便省去单独为该结构分配内存的操作。需要指出的是，函数synchronize_rcu 的实现实际上使用函数call_rcu。

void fastcall call_rcu_bh(struct rcu_head *head,                                
        void (*func)(struct rcu_head *rcu))
函数call_ruc_bh功能几乎与call_rcu完全相同，唯一差别就是它把softirq的完成也当作经历一个quiescent state，因此如果写端使用了该函数，在进程上下文的读端必须使用rcu_read_lock_bh。

#define rcu_dereference(p)     ({ \                                
    typeof(p) _________p1 = p; \                                
    smp_read_barrier_depends(); \                                
    (_________p1);
该宏用于在RCU读端临界区获得一个RCU保护的指针，该指针可以在以后安全地引用，内存栅只在alpha架构上才使用。
除了这些API，RCU还增加了链表操作的RCU版本，因为对于RCU，对共享数据的操作必须保证能够被没有使用同步机制的读者看到，所以内存栅是非常必要的。

static inline void list_add_rcu(struct list_head *new, struct list_head *head)
该函数把链表项new插入到RCU保护的链表head的开头。使用内存栅保证了在引用这个新插入的链表项之前，新链表项的链接指针的修改对所有读者是可见的。

static inline void list_add_tail_rcu(struct list_head *new,                                        
        struct list_head *head)
该函数类似于list_add_rcu，它将把新的链表项new添加到被RCU保护的链表的末尾。

static inline void list_del_rcu(struct list_head *entry)
该函数从RCU保护的链表中移走指定的链表项entry，并且把entry的prev指针设置为LIST_POISON2，但是并没有把entry的next指针设置为LIST_POISON1，因为该指针可能仍然在被读者用于便利该链表。

static inline void list_replace_rcu(struct list_head *old, struct list_head *new)
该函数是RCU新添加的函数，并不存在非RCU版本。它使用新的链表项new取代旧的链表项old，内存栅保证在引用新的链表项之前，它的链接指针的修正对所有读者可见。

list_for_each_rcu(pos, head)
该宏用于遍历由RCU保护的链表head，只要在读端临界区使用该函数，它就可以安全地和其它_rcu链表操作函数（如list_add_rcu）并发运行。

list_for_each_safe_rcu(pos, n, head)
该宏类似于list_for_each_rcu，但不同之处在于它允许安全地删除当前链表项pos。

list_for_each_entry_rcu(pos, head, member)
该宏类似于list_for_each_rcu，不同之处在于它用于遍历指定类型的数据结构链表，当前链表项pos为一包含struct list_head结构的特定的数据结构。

list_for_each_continue_rcu(pos, head)
该宏用于在退出点之后继续遍历由RCU保护的链表head。

static inline void hlist_del_rcu(struct hlist_node *n)
它从由RCU保护的哈希链表中移走链表项n，并设置n的ppre指针为LIST_POISON2，但并没有设置next为LIST_POISON1,因为该指针可能被读者使用用于遍利链表。

static inline void hlist_add_head_rcu(struct hlist_node *n,                                        
        struct hlist_head *h)
该函数用于把链表项n插入到被RCU保护的哈希链表的开头，但同时允许读者对该哈希链表的遍历。内存栅确保在引用新链表项之前，它的指针修正对所有读者可见。

hlist_for_each_rcu(pos, head)
该宏用于遍历由RCU保护的哈希链表head，只要在读端临界区使用该函数，它就可以安全地和其它_rcu哈希链表操作函数（如hlist_add_rcu）并发运行。

hlist_for_each_entry_rcu(tpos, pos, head, member)
类似于hlist_for_each_rcu，不同之处在于它用于遍历指定类型的数据结构哈希链表，当前链表项pos为一包含struct list_head结构的特定的数据结构。
    对于RCU更详细的原理、实现机制以及应用请参看作者专门针对RCU发表的一篇文章,&quot;Linux 2.6内核中新的锁机制--RCU(Read-Copy Update)&quot;。

</rich_text><rich_text scale="h1">十、顺序锁（seqlock）</rich_text><rich_text>
    顺序锁也是对读写锁的一种优化，对于顺序锁，读者绝不会被写者阻塞，也就说，读者可以在写者对被顺序锁保护的共享资源进行写操作时仍然可以继续读， 而不必等待写者完成写操作，写者也不需要等待所有读者完成读操作才去进行写操作。但是，写者与写者之间仍然是互斥的，即如果有写者在进行写操作，其他写者 必须自旋在那里，直到写者释放了顺序锁。
    这种锁有一个限制，它必须要求被保护的共享资源不含有指针，因为写者可能使得指针失效，但读者如果正要访问该指针，将导致OOPs。
如果读者在读操作期间，写者已经发生了写操作，那么，读者必须重新读取数据，以便确保得到的数据是完整的。
这种锁对于读写同时进行的概率比较小的情况，性能是非常好的，而且它允许读写同时进行，因而更大地提高了并发性。
顺序锁的API如下：

void write_seqlock(seqlock_t *sl);
写者在访问被顺序锁s1保护的共享资源前需要调用该函数来获得顺序锁s1。它实际功能上等同于spin_lock，只是增加了一个对顺序锁顺序号的加1操作，以便读者能够检查出是否在读期间有写者访问过。

void write_sequnlock(seqlock_t *sl);
写者在访问完被顺序锁s1保护的共享资源后需要调用该函数来释放顺序锁s1。它实际功能上等同于spin_unlock，只是增加了一个对顺序锁顺序号的加1操作，以便读者能够检查出是否在读期间有写者访问过。
写者使用顺序锁的模式如下：

write_seqlock(&amp;seqlock_a);
//写操作代码块
…
write_sequnlock(&amp;seqlock_a);

因此，对写者而言，它的使用与spinlock相同。

int write_tryseqlock(seqlock_t *sl);
写者在访问被顺序锁s1保护的共享资源前也可以调用该函数来获得顺序锁s1。它实际功能上等同于spin_trylock，只是如果成功获得锁后，该函数增加了一个对顺序锁顺序号的加1操作，以便读者能够检查出是否在读期间有写者访问过。

unsigned read_seqbegin(const seqlock_t *sl);
读者在对被顺序锁s1保护的共享资源进行访问前需要调用该函数。读者实际没有任何得到锁和释放锁的开销，该函数只是返回顺序锁s1的当前顺序号。

int read_seqretry(const seqlock_t *sl, unsigned iv);
读者在访问完被顺序锁s1保护的共享资源后需要调用该函数来检查，在读访问期间是否有写者访问了该共享资源，如果是，读者就需要重新进行读操作，否则，读者成功完成了读操作。
因此，读者使用顺序锁的模式如下：

do {   
    seqnum = read_seqbegin(&amp;seqlock_a);
    //读操作代码块
    ...
} while (read_seqretry(&amp;seqlock_a, seqnum));

write_seqlock_irqsave(lock, flags)
写者也可以用该宏来获得顺序锁lock，与write_seqlock不同的是，该宏同时还把标志寄存器的值保存到变量flags中，并且失效了本地中断。

write_seqlock_irq(lock)
写者也可以用该宏来获得顺序锁lock，与write_seqlock不同的是，该宏同时还失效了本地中断。与write_seqlock_irqsave不同的是，该宏不保存标志寄存器。

write_seqlock_bh(lock)
写者也可以用该宏来获得顺序锁lock，与write_seqlock不同的是，该宏同时还失效了本地软中断。

write_sequnlock_irqrestore(lock, flags)
写者也可以用该宏来释放顺序锁lock，与write_sequnlock不同的是，该宏同时还把标志寄存器的值恢复为变量flags的值。它必须与write_seqlock_irqsave配对使用。

write_sequnlock_irq(lock)
写者也可以用该宏来释放顺序锁lock，与write_sequnlock不同的是，该宏同时还使能本地中断。它必须与write_seqlock_irq配对使用。

write_sequnlock_bh(lock)
写者也可以用该宏来释放顺序锁lock，与write_sequnlock不同的是，该宏同时还使能本地软中断。它必须与write_seqlock_bh配对使用。

read_seqbegin_irqsave(lock, flags)
读者在对被顺序锁lock保护的共享资源进行访问前也可以使用该宏来获得顺序锁lock的当前顺序号，与read_seqbegin不同的是，它同 时还把标志寄存器的值保存到变量flags中，并且失效了本地中断。注意，它必须与read_seqretry_irqrestore配对使用。

read_seqretry_irqrestore(lock, iv, flags)
读者在访问完被顺序锁lock保护的共享资源进行访问后也可以使用该宏来检查，在读访问期间是否有写者访问了该共享资源，如果是，读者就需要重新进 行读操作，否则，读者成功完成了读操作。它与read_seqretry不同的是，该宏同时还把标志寄存器的值恢复为变量flags的值。注意，它必须与 read_seqbegin_irqsave配对使用。
因此，读者使用顺序锁的模式也可以为：

do {   
    seqnum = read_seqbegin_irqsave(&amp;seqlock_a, flags);
    //读操作代码块
    ...
} while (read_seqretry_irqrestore(&amp;seqlock_a, seqnum, flags));

读者和写者所使用的API的几个版本应该如何使用与自旋锁的类似。
如果写者在操作被顺序锁保护的共享资源时已经保持了互斥锁保护对共享数据的写操作，即写者与写者之间已经是互斥的，但读者仍然可以与写者同时访问，那么这种情况仅需要使用顺序计数（seqcount），而不必要spinlock。
顺序计数的API如下：

unsigned read_seqcount_begin(const seqcount_t *s);
读者在对被顺序计数保护的共享资源进行读访问前需要使用该函数来获得当前的顺序号。

int read_seqcount_retry(const seqcount_t *s, unsigned iv);
读者在访问完被顺序计数s保护的共享资源后需要调用该函数来检查，在读访问期间是否有写者访问了该共享资源，如果是，读者就需要重新进行读操作，否则，读者成功完成了读操作。
因此，读者使用顺序计数的模式如下：

do {   
seqnum = read_seqbegin_count(&amp;seqcount_a);
//读操作代码块
...
} while (read_seqretry(&amp;seqcount_a, seqnum));

void write_seqcount_begin(seqcount_t *s);
写者在访问被顺序计数保护的共享资源前需要调用该函数来对顺序计数的顺序号加1，以便读者能够检查出是否在读期间有写者访问过。

void write_seqcount_end(seqcount_t *s);
写者在访问完被顺序计数保护的共享资源后需要调用该函数来对顺序计数的顺序号加1，以便读者能够检查出是否在读期间有写者访问过。
写者使用顺序计数的模式为：

write_seqcount_begin(&amp;seqcount_a);
//写操作代码块
…
write_seqcount_end(&amp;seqcount_a);

需要特别提醒，顺序计数的使用必须非常谨慎，只有确定在访问共享数据时已经保持了互斥锁才可以使用。

</rich_text><rich_text scale="h1">小结</rich_text><rich_text>
自linux 2.4以来，内核对SMP的支持越来越好，很大程度上，对SMP的支持，这些锁机制是非常必要和重要的。基本上，内核开发者在开发中都会需要使用一些同步机制，本文通过详细地讲解内核中所有的同步机制，使得读者能够对内核锁机制有全面的了解和把握。
</rich_text><rich_text scale="h1">
参考资料 </rich_text><rich_text>
    1. Kernel Locking Techniques,</rich_text><rich_text link="webs http://www.linuxjournal.com/article/5833">http://www.linuxjournal.com/article/5833</rich_text><rich_text>    
    2. Redhat 9.0 kernel source tree
    3. kernel.org 2.6.12 source tree
    4. Linux 2.6内核中新的锁机制--RCU(Read-Copy Update), </rich_text><rich_text link="webs http://www.ibm.com/developerworks/cn/linux/l-rcu/">http://www.ibm.com/developerworks/cn/linux/l-rcu/</rich_text><rich_text>    
    5. Unreliable Guide To Locking.
    
</rich_text><rich_text scale="h1">关于作者</rich_text><rich_text>
 杨燚，计算机科学硕士，毕业于中科院计算技术研究所，有4年的Linux内核编程经验，目前从事嵌入式实时Linux的开发与性能测试。您可以通过</rich_text><rich_text link="webs http://mailto:yang.yi@bmrtech.com?cc=">yang.yi@bmrtech.com</rich_text><rich_text>或</rich_text><rich_text link="webs http://mailto:yyang@ch.mvista.com?cc=">yyang@ch.mvista.com</rich_text><rich_text>与作者联系。
</rich_text></node></node><node name="file system" prog_lang="custom-colors" readonly="False" tags="" unique_id="21"><rich_text></rich_text><node name="VFS" prog_lang="custom-colors" readonly="False" tags="" unique_id="25"><rich_text>先说明一下，linux内核中各种数据结构也不停的在变，所以不同版本的内核各个数据结构的定义可能会差别很大，这一组关于linux 文件系统的文章中的代码都摘自linux-2.6.34.1。


VFS依赖于数据结构来保存其对于一个文件系统的一般表示。
超级块结构：存放已安装的文件系统的相关信息
索引节点结构：对于文件信息的完全的描述
文件结构：存放一个被进程打开的文件的相关信息
目录项结构：存放有关路径名及路径名所指向的文件的信息
组成VFS的结构与一些操作相关联，这些操作可应用于有这些结构所表示的对象。这些操作在每个对象的操作表中定义。操作表示函数指针的集合。
  
2.1超级块结构
当文件系统被挂载时，所有有关它的信息均被存放在super_block结构体中。每个安装好的文件系统都有一个超级块结构。这个结构体定义如下：
---------------------------------------------------------------------
</rich_text><rich_text foreground="#ffff00000000" weight="heavy">include/linux/fs.h</rich_text><rich_text weight="heavy">
struct super_block {
	struct list_head	s_list;		/* Keep this first */
	dev_t			s_dev;		/* search index; _not_ kdev_t */
	unsigned char		s_dirt;
	unsigned char		s_blocksize_bits;
	unsigned long		s_blocksize;
	loff_t			s_maxbytes;	/* Max file size */
	struct file_system_type	*s_type;
	const struct super_operations	*s_op;
	const struct dquot_operations	*dq_op;
	const struct quotactl_ops	*s_qcop;
	const struct export_operations *s_export_op;
	unsigned long		s_flags;
	unsigned long		s_magic;
	struct dentry		*s_root;
	struct rw_semaphore	s_umount;
	struct mutex		s_lock;
	int			s_count;
	atomic_t		s_active;
#ifdef CONFIG_SECURITY
	void                    *s_security;
#endif
	const struct xattr_handler **s_xattr;

	struct list_head	s_inodes;	/* all inodes */
	struct hlist_bl_head	s_anon;		/* anonymous dentries for (nfs) exporting */
#ifdef CONFIG_SMP
	struct list_head __percpu *s_files;
#else
	struct list_head	s_files;
#endif
	struct list_head	s_mounts;	/* list of mounts; _not_ for fs use */
	/* s_dentry_lru, s_nr_dentry_unused protected by dcache.c lru locks */
	struct list_head	s_dentry_lru;	/* unused dentry lru */
	int			s_nr_dentry_unused;	/* # of dentry on lru */

	/* s_inode_lru_lock protects s_inode_lru and s_nr_inodes_unused */
	spinlock_t		s_inode_lru_lock ____cacheline_aligned_in_smp;
	struct list_head	s_inode_lru;		/* unused inode lru */
	int			s_nr_inodes_unused;	/* # of inodes on lru */

	struct block_device	*s_bdev;
	struct backing_dev_info *s_bdi;
	struct mtd_info		*s_mtd;
	struct hlist_node	s_instances;
	struct quota_info	s_dquot;	/* Diskquota specific options */

	int			s_frozen;
	wait_queue_head_t	s_wait_unfrozen;

	char s_id[32];				/* Informational name */
	u8 s_uuid[16];				/* UUID */

	void 			*s_fs_info;	/* Filesystem private info */
	fmode_t			s_mode;

	/* Granularity of c/m/atime in ns.
	   Cannot be worse than a second */
	u32		   s_time_gran;

	/*
	 * The next field is for VFS *only*. No filesystems have any business
	 * even looking at it. You had been warned.
	 */
	struct mutex s_vfs_rename_mutex;	/* Kludge */

	/*
	 * Filesystem subtype.  If non-empty the filesystem type field
	 * in /proc/mounts will be &quot;type.subtype&quot;
	 */
	char *s_subtype;

	/*
	 * Saved mount options for lazy filesystems using
	 * generic_show_options()
	 */
	char __rcu *s_options;
	const struct dentry_operations *s_d_op; /* default d_op for dentries */

	/*
	 * Saved pool identifier for cleancache (-1 means none)
	 */
	int cleancache_poolid;

	struct shrinker s_shrink;	/* per-sb shrinker handle */

	/* Number of inodes with nlink == 0 but still referenced */
	atomic_long_t s_remove_count;

	/* Being remounted read-only */
	int s_readonly_remount;
};</rich_text><rich_text>
---------------------------------------------------------------------
一些重要成员的说明：
s_list：指向双向循环链表中前一个和下一个元素的指针。如同linux内核中的许多其他结构一样，super_block也用双向循环链表维护，而正是这个成员将系统中安装的文件系统的super_block相互链接起来。全局变量super_blocks（fs/super.c，LIST_HEAD(super_blocks);）指向链表中的第一个元素。
 
s_dirt：在基于磁盘的文件系统中，用最初存放于磁盘上特定扇区中的数据会被用来填充超级块结构的一些字段。VFS允许对super_block进行修改，而这个成员正是用于说明超级块结构是否被修改，也即是否与磁盘上的数据一致。以便于在适当的时候将超级块数据写回磁盘。
 
s_maxbytes：这个成员用于说明文件系统支持的文件的最大长度。
 
s_type：超级块结构包含文件系统通用的信息，而这个成员则使超级块与特定的文件系统类型（如ext2，NFS等）关联起来。file_system_type结构体保存具体文件系统的信息。这个成员指向适当具体文件系统的结构体，VFS利用它可管理从一般请求到具体文件系统操作的交互。
下图显示了file_system_type和超级块之间的关系：
</rich_text><rich_text justification="left"></rich_text><rich_text> 
s_op：super_operations结构体类型的指针，这个结构体保存超级块的操作函数表。super_operations结构体由一些函数指针组成，这些函数指针用特定文件系统的超级块操作函数来初始化。
 
s_root：这个成员是一个dentry结构体指针，dentry结构体用于保存目录项。这个成员指向该文件系统安装目录对应的目录项。
 
s_inodes：是一个list_head结构体，指向属于该文件系统的索引节点的双向链表。
 
s_files：这个成员文件结构体链表，这个文件结构体不但正在使用，而且已分配给超级块。
 
s_instances：指向相同的文件系统类型的超级块链表中相邻的超级块元素。
 
s_fs_info：指向特定文件系统的超级块信息的指针。
 
2.2超级块操作结构
超级块的s_op成员指向文件系统的超级块操作结构，他描述了VFS能够如何管理特定的文件系统的超级块。每个具体的文件系统都可以定义自己的超级快操作，因为它直接针对文件系统的实现进行操作。
</rich_text><rich_text foreground="#cc3300">---------------------------------------------------------------------
</rich_text><rich_text foreground="#ffff00000000" weight="heavy">include/linux/fs.h</rich_text><rich_text weight="heavy">
struct super_operations {
   	struct inode *(*alloc_inode)(struct super_block *sb);
	void (*destroy_inode)(struct inode *);

   	void (*dirty_inode) (struct inode *, int flags);
	int (*write_inode) (struct inode *, struct writeback_control *wbc);
	int (*drop_inode) (struct inode *);
	void (*evict_inode) (struct inode *);
	void (*put_super) (struct super_block *);
	void (*write_super) (struct super_block *);
	int (*sync_fs)(struct super_block *sb, int wait);
	int (*freeze_fs) (struct super_block *);
	int (*unfreeze_fs) (struct super_block *);
	int (*statfs) (struct dentry *, struct kstatfs *);
	int (*remount_fs) (struct super_block *, int *, char *);
	void (*umount_begin) (struct super_block *);

	int (*show_options)(struct seq_file *, struct dentry *);
	int (*show_devname)(struct seq_file *, struct dentry *);
	int (*show_path)(struct seq_file *, struct dentry *);
	int (*show_stats)(struct seq_file *, struct dentry *);
#ifdef CONFIG_QUOTA
	ssize_t (*quota_read)(struct super_block *, int, char *, size_t, loff_t);
	ssize_t (*quota_write)(struct super_block *, int, const char *, size_t, loff_t);
#endif
	int (*bdev_try_to_free_page)(struct super_block*, struct page*, gfp_t);
	int (*nr_cached_objects)(struct super_block *);
	void (*free_cached_objects)(struct super_block *, int);
};</rich_text><rich_text>
</rich_text><rich_text foreground="#cc3300">---------------------------------------------------------------------</rich_text><rich_text>
超级快操作的说明：
  alloc_inode: 这个方法由alloc_inode()函数调用来为struct inode 分配内存并初始化它。如果这个函数没有定义，则会简单的从inode slab缓存中分配一个struct inode。通常alloc_inode 被用来分配一个更大的但内嵌有struct inode的结构体，即特定文件系统的索引节点，会包含文件指针等信息。
 
  destroy_inode: 这个方法由destroy_inode()函数调用，以释放分配的struct inode。只有当-&gt;alloc_inode 有定义的时候才需要它，它只是简单的撤销-&gt;alloc_inode 所做的一切。
 
  dirty_inode: 这个方法被VFS调用，以标记一个inode为dirty，即标记文件的管理元数据被修改过了，在适当的时候要将inode写回磁盘。
 
  write_inode: 当VFS需要将一个inode 写回磁盘的时候调用这个方法。第二个参数用以说明写回是否为同步的，并不是所有的文件系统都会检查这个标志。
 
  drop_inode: 在即将撤销索引节点时调用，即，当最后一个用户释放该索引节点时。实现该方法的文件系统通常使用generic_delete_inode函数。该函数从VFS数据结构中移走对索引节点的每一个引用，如果索引节点不再出现在任何目录中，则调用超级快方法delete_inode将它从文件系统中删除。调用时要持有inode_lock自旋锁。
 
  delete_inode: 当VFS想要删除（delete）一个inode 时调用，删除内存中的VFS索引节点和磁盘上的文件数据及元数据。
 
  put_super: 当VFS想要释放superblock 时调用（比如unmount）。在持有superblock 锁时调用。
 
  write_super: 当VFS 要向磁盘写回superblock时调用。
 
  sync_fs: 当VFS写完所有的与superblock 相关的“脏”的数据之后调用。第二个参数用以说明这个方法是否需要等待直到写回操作完成。（由日志文件系统使用）。
 
  freeze_fs: 当VFS锁定一个文件系统并强制它进入一致性状态时调用。这个方法现在由Logical Volume Manager (LVM)使用。
 
  unfreeze_fs: 当VFS解除锁定一个文件系统并再次使它可写是调用。
 
  statfs: 当VFS需要获得文件系统统计量时调用。
 
  remount_fs: 当文件系统需要被重新挂载时调用。持有内核锁时调用。
 
  clear_inode: 当VFS清除（clear）inode 时调用。可选。
 
  umount_begin: 当VFS卸载一个文件系统时调用。
 
  show_options:被VFS调用来为/proc/&lt;pid&gt;/mounts显示挂载选项 。 (参考 &quot;挂载选项&quot; 部分)
 
  quota_read: 限额系统使用该方法从文件中读取数据，该文件详细说明了所在文件系统的限制。
 
  quota_write: 限额系统使用该方法将数据写入文件中，该文件详细说明了所在文件系统的限制。
 
这些方法对所有的文件系统类型均是可用的。但是，对于特定的文件系统而言，则只使用其中的一个子集。未实现的方法对应的字段置为NULL。
 
2.3索引节点对象
文件系统处理文件所需要的信息都放在一个名为索引节点的数据结构中。具体文件系统的索引节点则根据文件系统类型的不同不同，inode节点有在磁盘上存在的静态节点，为UNIX-like系统开发的文件系统大多使用的是静态inode节点，比如ext2，ext3。还有仅仅存在于内存中的动态节点的文件系统，比如为windows系统开发的文件系统，FAT32，MSDOS，NTFS等。linux下文件系统的实现根据相关的文件系统协议，利用磁盘上存储的文件管理元数据来实现inode节点对象。内核中使用的众多的伪文件系统自然也是用的动态inode节点，因为整个文件系统就仅仅存在于内存而已。内存中的索引节点对象由一个inode结构体来表示，其定义如下
</rich_text><rich_text foreground="#cc3300">---------------------------------------------------------------------
include/linux/fs.h</rich_text><rich_text>
</rich_text><rich_text weight="heavy">struct inode {</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   struct hlist_node  i_hash;</rich_text><rich_text> /* 用于散列链表的指针 */
    /* 用于描述索引节点当前状态的链表的指针 */
</rich_text><rich_text weight="heavy">   struct list_head   i_list;     </rich_text><rich_text>/* backing dev IO list */
</rich_text><rich_text weight="heavy">    struct list_head  i_sb_list; </rich_text><rich_text>/* 用于超级块的索引节点链表的指针 */
</rich_text><rich_text weight="heavy">   struct list_head   i_dentry; </rich_text><rich_text>/* 引用索引节点的目录项对象链表的头 */
</rich_text><rich_text weight="heavy">   unsigned long      i_ino;   </rich_text><rich_text> /* 索引节点号 */
</rich_text><rich_text weight="heavy">   atomic_t    i_count;    </rich_text><rich_text>  /* 索引节点引用计数 */
</rich_text><rich_text weight="heavy">   unsigned int    i_nlink;  </rich_text><rich_text> /* 硬链接数目*/
</rich_text><rich_text weight="heavy">   uid_t       i_uid;</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   gid_t       i_gid;</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   dev_t       i_rdev;</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   unsigned int    i_blkbits; </rich_text><rich_text>/* 块的位数 */
</rich_text><rich_text weight="heavy">   u64         i_version; </rich_text><rich_text>
</rich_text><rich_text weight="heavy">   loff_t      i_size;</rich_text><rich_text> /* 文件的字节数 */
</rich_text><rich_text weight="heavy">#ifdef __NEED_I_SIZE_ORDERED</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   seqcount_t      i_size_seqcount;</rich_text><rich_text>
</rich_text><rich_text weight="heavy">#endif</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   struct timespec    i_atime;</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   struct timespec    i_mtime;</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   struct timespec    i_ctime;</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   blkcnt_t    i_blocks; </rich_text><rich_text> /* 文件的块数*/
</rich_text><rich_text weight="heavy">   unsigned short          i_bytes;</rich_text><rich_text> /* 文件中最后一个块的字节数*/
</rich_text><rich_text weight="heavy">   umode_t         i_mode;</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   spinlock_t      i_lock;  </rich_text><rich_text>/* i_blocks, i_bytes, maybe i_size */
</rich_text><rich_text weight="heavy">   struct mutex    i_mutex;</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   struct rw_semaphore   i_alloc_sem;</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   const struct inode_operations  *i_op;</rich_text><rich_text>
</rich_text><rich_text weight="heavy">/* former -&gt;i_op-&gt;default_file_ops */</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   const struct file_operations *i_fop; </rich_text><rich_text>
</rich_text><rich_text weight="heavy">   struct super_block *i_sb;</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   struct file_lock   *i_flock;</rich_text><rich_text> /* 指向文件锁链表的指针 */
</rich_text><rich_text weight="heavy">   struct address_space  *i_mapping;</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   struct address_space  i_data;</rich_text><rich_text>
</rich_text><rich_text weight="heavy">#ifdef CONFIG_QUOTA</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   struct dquot    *i_dquot[MAXQUOTAS];</rich_text><rich_text>
</rich_text><rich_text weight="heavy">#endif</rich_text><rich_text>
/* 用于具体的字符或块设备索引节点链表的指针，针对于设备文件 */
</rich_text><rich_text weight="heavy">   struct list_head   i_devices;</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   union { </rich_text><rich_text>   /* 特殊文件专用 */
</rich_text><rich_text weight="heavy">      struct pipe_inode_info   *i_pipe;</rich_text><rich_text>
</rich_text><rich_text weight="heavy">      struct block_device   *i_bdev;</rich_text><rich_text>
</rich_text><rich_text weight="heavy">      struct cdev     *i_cdev;</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   };</rich_text><rich_text>
 
</rich_text><rich_text weight="heavy">   __u32 i_generation;</rich_text><rich_text>   /*索引节点版本号（由某些文件系统使用）*/
 
</rich_text><rich_text weight="heavy">#ifdef CONFIG_FSNOTIFY</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   __u32 i_fsnotify_mask; /* all events this inode cares about */</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   struct hlist_head  i_fsnotify_mark_entries; /* fsnotify mark entries */</rich_text><rich_text>
</rich_text><rich_text weight="heavy">#endif</rich_text><rich_text>
</rich_text><rich_text weight="heavy"> </rich_text><rich_text>
</rich_text><rich_text weight="heavy">#ifdef CONFIG_INOTIFY</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   struct list_head   inotify_watches; /* watches on this inode */</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   struct mutex    inotify_mutex;  /* protects the watches list */</rich_text><rich_text>
</rich_text><rich_text weight="heavy">#endif</rich_text><rich_text>
</rich_text><rich_text weight="heavy"> </rich_text><rich_text>
</rich_text><rich_text weight="heavy">   unsigned long      i_state;</rich_text><rich_text>  /* 索引节点的状态标志，如dirty等 */
</rich_text><rich_text weight="heavy">   unsigned long      dirtied_when;   /* jiffies of first dirtying */</rich_text><rich_text>
</rich_text><rich_text weight="heavy"> </rich_text><rich_text>
</rich_text><rich_text weight="heavy">   unsigned int    i_flags;</rich_text><rich_text> /* 文件系统的安装标志*/
 
</rich_text><rich_text weight="heavy">   atomic_t    i_writecount;</rich_text><rich_text> /* 用于写进程的引用计数 */
</rich_text><rich_text weight="heavy">#ifdef CONFIG_SECURITY</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   void        *i_security;</rich_text><rich_text>
</rich_text><rich_text weight="heavy">#endif</rich_text><rich_text>
</rich_text><rich_text weight="heavy">#ifdef CONFIG_FS_POSIX_ACL</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   struct posix_acl   *i_acl;</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   struct posix_acl   *i_default_acl;</rich_text><rich_text>
</rich_text><rich_text weight="heavy">#endif</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   void        *i_private; /* fs or device private pointer */</rich_text><rich_text>
</rich_text><rich_text weight="heavy">};</rich_text><rich_text>
</rich_text><rich_text foreground="#cc3300">---------------------------------------------------------------------</rich_text><rich_text>
这是通用的inode结构，它主要是将索引节点的通用部分组织起来，这个结构会被嵌入到特定的文件系统的索引节点结构中，而后者则会包含一些具体文件系统数据组织的信息，比如文件的块指针等。
 
每个索引节点对象都会复制磁盘索引节点中包含的一些数据，比如分配给文件的磁盘块数，访问时间、修改时间，文件拥有者的UID、GID等。如果i_state字段的值等于I_DIRTY_SYNC 、 I_DIRTY_DATASYNC 或 I_DIRTY_PAGES，则该索引节点是“脏”的，也就是说，索引节点被修改，对应的磁盘索引节点必须被更新。I_DIRTY宏可以用来检查这三个标志的值。i_state字段的其他值有I_NEW（索引节点对象已经分配但还没有用从磁盘索引节点读取来的数据进行填充）、I_WILL_FREE、I_FREEING（索引节点对象正在被释放）、I_CLEAR（索引节点对象的内容不再有意义）、I_SYNC
 
 
每个索引节点对象总是出现在两个不同的索引节点表中。首先，是inode的哈希表，这主要是为了快速查询，前提是系统内核要知道索引节点号及文件系统对应的超级块对象的地址。inode.c文件中的hlist_head类型指针静态变量inode_hashtable为哈希表的表头，哈希表的元素也同样为hlist_head类型， inode结构的hlist_node类型的i_hash字段用来将inode和哈希表链接起来。
 
它还会出现在另外两个“类型”双向循环链表中的某个链表里（使用i_list与相应的链表链接起来）：
有效但未使用的索引节点链表，该链表中的索引节点未被任何进程使用。它们的i_count字段值为0。链表中的首元素和尾元素是由全局变量inode_unused（</rich_text><rich_text weight="heavy">fs/inode.c中, LIST_HEAD(inode_unused);</rich_text><rich_text>）的next字段和prev字段分别指向的。这个链表用作磁盘高速缓存。
 
正在使用的索引节点链表，该链表里的索引节点当前被某些进程使用。它们的i_count字段大于零，i_nlink字段大于零。链表中的首元素和尾元素是由全局变量inode_in_use （</rich_text><rich_text weight="heavy">fs/inode.c, LIST_HEAD(inode_in_use);</rich_text><rich_text>）引用的。
最后，它还会出现在特定文件系统，也就是特定super_block的双向循环索引节点表中，由super_block的s_inodes字段和inode结构的i_sb_list字段连接。
 
索引节点结构与超级块之间的关系如下图：
</rich_text><rich_text justification="left"></rich_text><rich_text>2.4索引节点操作
与索引节点对象相关联的方法也叫索引节点操作。由inode_operations来描述，该结构的地址存放在索引节点的i_op字段中。定义如下：
---------------------------------------------------------------------
include/linux/fs.h
</rich_text><rich_text weight="heavy">struct inode_operations {</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   int (*create) (struct inode *,struct dentry *,int, struct nameidata *);</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   struct dentry * (*lookup) (struct inode *,struct dentry *, struct nameidata *);</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   int (*link) (struct dentry *,struct inode *,struct dentry *);</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   int (*unlink) (struct inode *,struct dentry *);</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   int (*symlink) (struct inode *,struct dentry *,const char *);</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   int (*mkdir) (struct inode *,struct dentry *,int);</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   int (*rmdir) (struct inode *,struct dentry *);</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   int (*mknod) (struct inode *,struct dentry *,int,dev_t);</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   int (*rename) (struct inode *, struct dentry *,</rich_text><rich_text>
</rich_text><rich_text weight="heavy">         struct inode *, struct dentry *);</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   int (*readlink) (struct dentry *, char __user *,int);</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   void * (*follow_link) (struct dentry *, struct nameidata *);</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   void (*put_link) (struct dentry *, struct nameidata *, void *);</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   void (*truncate) (struct inode *);</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   int (*permission) (struct inode *, int);</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   int (*check_acl)(struct inode *, int);</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   int (*setattr) (struct dentry *, struct iattr *);</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   int (*getattr) (struct vfsmount *mnt, struct dentry *, struct kstat *);</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   int (*setxattr) (struct dentry *, const char *,const void *,size_t,int);</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   ssize_t (*getxattr) (struct dentry *, const char *, void *, size_t);</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   ssize_t (*listxattr) (struct dentry *, char *, size_t);</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   int (*removexattr) (struct dentry *, const char *);</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   void (*truncate_range)(struct inode *, loff_t, loff_t);</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   long (*fallocate)(struct inode *inode, int mode, loff_t offset,</rich_text><rich_text>
</rich_text><rich_text weight="heavy">           loff_t len);</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   int (*fiemap)(struct inode *, struct fiemap_extent_info *, u64 start,</rich_text><rich_text>
</rich_text><rich_text weight="heavy">            u64 len);</rich_text><rich_text>
</rich_text><rich_text weight="heavy">};</rich_text><rich_text>
---------------------------------------------------------------------
  create(dir, dentry, mode, nameidata): 被open(2) and creat(2)系统调用所调用。在某一个目录下，为与目录项对象相关的普通文件创建一个新的磁盘索引节点。
 
  lookup(dir, dentry, nameidata): 为包含在一个目录项对象中的文件名对应的索引节点查找目录项。
 
  link(old_dentry, dir, new_dentry): 创建一个新的名为new_dentry的硬链接，它指向dir目录下名为old_dentry的文件
 
  unlink(dir, dentry): unlink(2)系统调用调用。从一个目录中删除目录项对象所指定的文件的硬链接。
 
  symlink(dir, dentry, symname): symlink(2)系统调用调用。在某个目录下，为与目录项对象相关的文件创建一个新的索引节点及目录项。
 
  mkdir(dir, dentry, mode):系统调用 mkdir(2)调用。在某个目录下，为与目录项对象相关的目录创建一个新的索引节点。
 
  rmdir(dir, dentry): 从一个目录中删除子目录，子目录的名称包含在目录项对象中。
 
  mknod(dir, dentry, mode, rdev): 在某个目录中，为与目录项对象相关的特定设备文件创建一个新的磁盘索引节点。其中参数mode和rdev分别表示文件的类型和设备号。
 
  rename(old_dir, old_dentry, new_dir, new_dentry): 系统调用rename(2)调用来重命名对象，将old_dir目录下由old_dentry标识的文件移到new_dir目录下。新文件名包含在new_dentry指向的目录项对象中。
 
  readlink(dentry, buffer, buflen): 系统调用readlink(2)调用。将目录项所指定的符号链接指向的文件的路径名拷贝到buffer所指定的用户态内存缓冲区中。
 
  follow_link(inode, nameidata): 解析索引节点对象所指定的符号链接；如果该符号链接是一个相对路径名，则从第二个参数所指定的目录开始进行查找。
 
  put_link(dentry, nameidata): 释放由follow_link方法分配的用于解析符号链接的所有临时数据结构。
 
  truncate(inode): 修改与索引节点相关的文件的文件大小。在调用该方法之前，必须将inode对象的i_size字段设置为需要的新长度值
 
  permission(inode, mask, nameidata): 在一个POSIX-like 文件系统上由VFS调用来检查访问权限。
 
  setattr(dentry, iattr): 由VFS调用来为一个文件设置属性。这个方法由chmod(2)及相关的系统调用来调用。
 
  getattr(mnt, dentry, kstat): 由VFS调用来获得一个文件的属性。这个方法由stat(2)及相关的系统调用来调用。
 
  setxattr(dentry, name, value, size, flags): 由VFS调用来设置一个文件的扩展属性。扩展属性是一个与一个inode关联的name:value对，存放在任何索引节点之外的磁盘块中。这个方法由系统调用setxattr(2)调用。
 
  getxattr(dentry, name,buffer, size): 由VFS调用来检索一个扩展属性名的值。这个方法由getxattr(2)函数调用。
 
  listxattr(dentry, buffer, size): 由VFS调用来列出给定文件的所有的扩展属性。这个方法由系统调用listxattr(2)调用。
 
  removexattr(dentry, name): 由VFS调用来从一个文件移除（remove）一个扩展属性。这个方法由系统调用removexattr(2)调用。
 
  truncate_range: 一个由底层文件系统提供来截断块的范围的方法，比如在一个文件的某些地方打洞。
 
上面的方法对所有可能的索引节点和文件系统类型都是可用的。不过，只有其中的一个子集应用到某一个特定单位文件系统的索引节点和文件系统；为实现的方法对应的字段应被设置为NULL。
 
inode_operations中对inode操作的方法和super_operations中队inode操作的方法相比则要更高级一些，而后者则更靠近底层，即更接近对磁盘硬件设备的操作。
 
2.5 目录项对象
对于进程查找的路径名中的每个分量，内核都为其创建一个目录项对象；目录项对象将每个分量与其对应的索引节点相联系。目录项对象在磁盘上没有对应的映像，它们存放在目录项缓存中。它们是一些根据目录文件的内容，填充的一些内存中的结构。其定义如下：
</rich_text><rich_text foreground="#cc0000">---------------------------------------------------------------------</rich_text><rich_text>
include/linux/dcache.h 
</rich_text><rich_text weight="heavy">struct dentry {</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   atomic_t d_count;</rich_text><rich_text>
    /* 目录项高速缓存标志 */
</rich_text><rich_text weight="heavy">   unsigned int d_flags;    /* protected by d_lock */</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   spinlock_t d_lock;    /* per dentry lock */</rich_text><rich_text>
/* 对于目录而言，用于记录安装该目录项的文件系统的计数器*/
</rich_text><rich_text weight="heavy">   int d_mounted; </rich_text><rich_text>
</rich_text><rich_text weight="heavy">   struct inode *d_inode;      /* Where the name belongs to - NULL is</rich_text><rich_text>
</rich_text><rich_text weight="heavy">                 * negative */</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   /*</rich_text><rich_text>
</rich_text><rich_text weight="heavy">    * The next three fields are touched by __d_lookup.  Place them here</rich_text><rich_text>
</rich_text><rich_text weight="heavy">    * so they all fit in a cache line.</rich_text><rich_text>
</rich_text><rich_text weight="heavy">    */</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   struct hlist_node d_hash;   /* lookup hash list */</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   struct dentry *d_parent; /* parent directory */</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   struct qstr d_name;</rich_text><rich_text>  /* 文件名 */
    /* 用于未使用目录项链表的指针 */
</rich_text><rich_text weight="heavy">   struct list_head d_lru;     /* LRU list */</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   /*</rich_text><rich_text>
</rich_text><rich_text weight="heavy">    * d_child and d_rcu can share memory</rich_text><rich_text>
</rich_text><rich_text weight="heavy">    */</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   union {</rich_text><rich_text>
        /* 对于目录而言，用于同一父目录中的目录项链表的指针 */
</rich_text><rich_text weight="heavy">      struct list_head d_child;   /* child of parent list */</rich_text><rich_text>
        /* 回收目录项对象时，有RCU描述符使用 */
</rich_text><rich_text weight="heavy">      struct rcu_head d_rcu;</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   } d_u;</rich_text><rich_text>
    /* 对于目录而言，子目录项链表的头 */
</rich_text><rich_text weight="heavy">   struct list_head d_subdirs; /* our children */</rich_text><rich_text>
    /* 用于与同一索引节点相关的目录项链表指针 */
</rich_text><rich_text weight="heavy">   struct list_head d_alias;   /* inode alias list */</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   unsigned long d_time;    /* used by d_revalidate */</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   const struct dentry_operations *d_op;</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   struct super_block *d_sb;   /* The root of the dentry tree */</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   void *d_fsdata;       /* fs-specific data */</rich_text><rich_text>
</rich_text><rich_text weight="heavy"> </rich_text><rich_text>
</rich_text><rich_text weight="heavy">   unsigned char d_iname[DNAME_INLINE_LEN_MIN];   /* small names */</rich_text><rich_text>
</rich_text><rich_text weight="heavy">};</rich_text><rich_text>
</rich_text><rich_text foreground="#cc0000">---------------------------------------------------------------------</rich_text><rich_text>
每个目录项对象可以处于以下四种状态之一：
空闲状态（free）
    处于该状态的目录项对象不包括有效的信息，且还没有被VFS使用。对应的内存区由slab分配器进行处理。
未使用状态（unused）
    处于该状态的目录项对象当前还没有被内核使用。该对象的引用计数器d_count的值为0，但其d_inode字段仍然指向关联的索引节点。该目录项对象包含有效的信息，但为了在必要时回收内存，它的内容可能被丢弃。
正在使用状态（in use）
    处于该状态的目录项对象当前正在被内核使用。该对象的引用计数器d_count的值为正数，其d_inode字段指向关联的索引节点对象。该目录项对象包含有效的信息，并且不能丢弃。
负状态（negative）
    与目录项关联的索引节点不存在，那是因为相应的磁盘索引节点已被删除，或者因为目录项对象是通过解析一个不存在的路径名创建的。目录项对象的d_inode字段被置为NULL，但该对象仍然被保存在目录项高速缓存中，以便后续对同一文件目录名的查找操作能够快速完成。
 
与目录项关联的方法称为目录项操作，它描述了一个文件系统是如何重载一个标准的dentry operations。这些方法由dentry_operations结构体描述，该结构的地址存放在目录项对象的d_op字段中。由于他们是可选的或者VFS使用默认的例程，这些方法可能被设为NULL。其定义如下：
</rich_text><rich_text foreground="#cc0000">---------------------------------------------------------------------</rich_text><rich_text>
include/linux/dcache.h 
</rich_text><rich_text weight="heavy">struct dentry_operations {</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   int (*d_revalidate)(struct dentry *, struct nameidata *);</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   int (*d_hash) (struct dentry *, struct qstr *);</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   int (*d_compare) (struct dentry *, struct qstr *, struct qstr *);</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   int (*d_delete)(struct dentry *);</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   void (*d_release)(struct dentry *);</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   void (*d_iput)(struct dentry *, struct inode *);</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   char *(*d_dname)(struct dentry *, char *, int);</rich_text><rich_text>
</rich_text><rich_text weight="heavy">};</rich_text><rich_text>
</rich_text><rich_text foreground="#cc0000">---------------------------------------------------------------------</rich_text><rich_text>
  d_revalidate:在把目录项对象转换为一个文件路径名之前，判定该目录项对象是否仍然有效。大多数文件系统将它设置为NULL，而网络文件系统可以指定自己的函数。
 
  d_hash: 生成一个散列值，用于目录项散列表的、特定于具体文件系统的散列函数。参数dentry标识包含路径分量的目录。第二个参数包含要查找的路径名分量以及由散列函数生成的散列值。
 
  d_compare: 比较两个文件名。name1应该属于dir所指的目录。
 
  d_delete: 对于一个dentry的最后的引用解除（delete）时调用。这意味着没有人正在使用这个dentry，但依然是有效的，并依然在dcache中。
 
  d_release: 当要释放一个目录项对象时（放入slab分配器），调用该方法。
 
  d_iput: 当一个目录项对象变为“负”状态时调用该方法。缺省的VFS函数调用iput（）释放索引节点对象。
 
  d_dname: 当需要产生一个dentry的路径名的时候调用。对于某些想要延迟路径名的产生的伪文件系统（sockfs, pipefs, ...）很有用。（不是在dentry创建的时候，而是在需要路径名的时候才产生）。真实的文件系统可能不会使用它，因为它们的dentries 出现在全局的dcache哈希表中，它们的哈希应该是不变量。除非使用适当的SMP安全措施，否则由于没有持有锁，则d_dname()不应该试着自己去修改dentry 。注意：d_path()逻辑是相当复杂的。正确的返回，比如&quot;Hello&quot;的方法是将其放在缓冲区的结尾处，然后返回指向第一个字符的指针。dynamic_dname()辅助函数可被用来处理这一点。
2.6 文件对象
文件对象描述进程怎样与一个打开的文件进行交互。文件对象是在文件被打开的时候创建的，由一个file结构来描述，文件结构也仅仅存在于内存中。其定义如下：
</rich_text><rich_text foreground="#cc3300">---------------------------------------------------------------------
include/linux/fs.h</rich_text><rich_text>
</rich_text><rich_text weight="heavy">struct file {</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   /*</rich_text><rich_text>
</rich_text><rich_text weight="heavy">    * fu_list becomes invalid after file_free is called and queued via</rich_text><rich_text>
</rich_text><rich_text weight="heavy">    * fu_rcuhead for RCU freeing</rich_text><rich_text>
</rich_text><rich_text weight="heavy">    */</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   union {</rich_text><rich_text>
</rich_text><rich_text weight="heavy">      struct list_head   fu_list;</rich_text><rich_text>
</rich_text><rich_text weight="heavy">      struct rcu_head    fu_rcuhead;</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   } f_u;</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   struct path     f_path;</rich_text><rich_text>
</rich_text><rich_text weight="heavy">#define f_dentry   f_path.dentry </rich_text><rich_text>/* 与文件相关的目录项 */
</rich_text><rich_text weight="heavy">#define f_vfsmnt   f_path.mnt </rich_text><rich_text>/* 含有该文件的已安装文件系统 */
</rich_text><rich_text weight="heavy">   const struct file_operations   *f_op; </rich_text><rich_text>/* 指向文件操作表的指针 */
</rich_text><rich_text weight="heavy">   spinlock_t      f_lock;  /* f_ep_links, f_flags, no IRQ */</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   atomic_long_t      f_count;</rich_text><rich_text> /* 文件对象的引用计数 */
</rich_text><rich_text weight="heavy">   unsigned int       f_flags; </rich_text><rich_text>/* 打开文件时所制定的标志 */
</rich_text><rich_text weight="heavy">   fmode_t         f_mode;</rich_text><rich_text> /* 进程的访问模式 */
</rich_text><rich_text weight="heavy">   loff_t      f_pos;</rich_text><rich_text> /* 文件指针 */
</rich_text><rich_text weight="heavy">   struct fown_struct f_owner;</rich_text><rich_text> /* 通过信号进行I/O时间通知的数据 */
</rich_text><rich_text weight="heavy">   const struct cred  *f_cred;</rich_text><rich_text> /* 进程环境相关信息 */
</rich_text><rich_text weight="heavy">   struct file_ra_state  f_ra;</rich_text><rich_text> /* 文件预读状态 */
 
</rich_text><rich_text weight="heavy">   u64         f_version; /* 版本号，每次使用后自动递增 */</rich_text><rich_text>
</rich_text><rich_text weight="heavy">#ifdef CONFIG_SECURITY</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   void        *f_security; </rich_text><rich_text>
</rich_text><rich_text weight="heavy">#endif</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   /* needed for tty driver, and maybe others */</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   void        *private_data;</rich_text><rich_text>
</rich_text><rich_text weight="heavy"> </rich_text><rich_text>
</rich_text><rich_text weight="heavy">#ifdef CONFIG_EPOLL</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   /* Used by fs/eventpoll.c to link all the hooks to this file */</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   struct list_head   f_ep_links;</rich_text><rich_text>
</rich_text><rich_text weight="heavy">#endif /* #ifdef CONFIG_EPOLL */</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   struct address_space  *f_mapping;</rich_text><rich_text> /* 指向文件地址空间对象的指针 */
</rich_text><rich_text weight="heavy">#ifdef CONFIG_DEBUG_WRITECOUNT</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   unsigned long f_mnt_write_state;</rich_text><rich_text>
</rich_text><rich_text weight="heavy">#endif</rich_text><rich_text>
</rich_text><rich_text weight="heavy">};</rich_text><rich_text>
 
从Linux kernel 2.6.29开始，task_struct新增cred结构体描述进程环境，这些信息都是特定于进程的，而不是特定于打开的文件的，所以不把这些信息嵌入在file对象中自是也合情合理。file结构的cred结构体指针类型的f_cred成员指向cred结构。cred结构体其定义如下：
</rich_text><rich_text foreground="#cc3300">---------------------------------------------------------------------
include/linux/cred.h</rich_text><rich_text>
</rich_text><rich_text weight="heavy">struct cred {</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   atomic_t usage;</rich_text><rich_text>
</rich_text><rich_text weight="heavy">#ifdef CONFIG_DEBUG_CREDENTIALS</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   atomic_t subscribers; /* number of processes subscribed */</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   void     *put_addr;</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   unsigned magic;</rich_text><rich_text>
</rich_text><rich_text weight="heavy">#define CRED_MAGIC 0x43736564</rich_text><rich_text>
</rich_text><rich_text weight="heavy">#define CRED_MAGIC_DEAD  0x44656144</rich_text><rich_text>
</rich_text><rich_text weight="heavy">#endif</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   uid_t    uid;     /* real UID of the task */</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   gid_t    gid;     /* real GID of the task */</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   uid_t    suid;    /* saved UID of the task */</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   gid_t    sgid;    /* saved GID of the task */</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   uid_t    euid;    /* effective UID of the task */</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   gid_t    egid;    /* effective GID of the task */</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   uid_t    fsuid;   /* UID for VFS ops */</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   gid_t    fsgid;   /* GID for VFS ops */</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   unsigned securebits; /* SUID-less security management */</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   kernel_cap_t cap_inheritable; /* caps our children can inherit */</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   kernel_cap_t cap_permitted;  /* caps we're permitted */</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   kernel_cap_t cap_effective;  /* caps we can actually use */</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   kernel_cap_t cap_bset; /* capability bounding set */</rich_text><rich_text>
</rich_text><rich_text weight="heavy">#ifdef CONFIG_KEYS</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   unsigned char   jit_keyring; /* default keyring to attach requested</rich_text><rich_text>
</rich_text><rich_text weight="heavy">                 * keys to */</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   struct key  *thread_keyring; /* keyring private to this thread */</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   struct key  *request_key_auth; /* assumed request_key authority */</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   struct thread_group_cred *tgcred; /* thread-group shared credentials */</rich_text><rich_text>
</rich_text><rich_text weight="heavy">#endif</rich_text><rich_text>
</rich_text><rich_text weight="heavy">#ifdef CONFIG_SECURITY</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   void     *security;  /* subjective LSM security */</rich_text><rich_text>
</rich_text><rich_text weight="heavy">#endif</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   struct user_struct *user;   /* real user ID subscription */</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   struct group_info *group_info; /* supplementary groups for euid/fsgid */</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   struct rcu_head rcu;     /* RCU deletion hook */</rich_text><rich_text>
</rich_text><rich_text weight="heavy">};</rich_text><rich_text>
</rich_text><rich_text foreground="#cc3300">---------------------------------------------------------------------</rich_text><rich_text>
文件指针说明当前的文件偏移位置，即下一个操作（读或写等）将在该位置发生。由于几个文件可能同时访问同一个文件，因此文件指针必须存放在file对象而不是索引节点对象中。
 
文件对象包含在具体文件系统的超级块的几个链表中。每个超级快对象把文件对象链表的表头存放在s_files字段中。链表中分别指向前一个元素和后一个元素的指针都存放在文件对象的fu_list字段中。
 
文件对象的f_count字段是一个引用计数器：它记录使用文件对象的进程数（以CLONE_FILES标志创建的轻量级进程共享文件描述符表，因此他们可以使用相同的文件对象）。当内核本身要使用该文件对象时也要增加计数器的值。
 
每个文件系统都有自己的文件操作集合，执行诸如读写文件这样的操作。当内核将一个索引节点从磁盘装入内核时，就会把指向这些文件操作的指针存放在file_operations结构中，而该结构的地址存放在该索引节点的i_fop字段中。当进程打开文件时，VFS就用存放在索引节点中的这个地址初始化新文件对象的f_op字段，使得对文件操作的后续调用能够使用这些函数。如果需要，VFS随后也可以通过在f_op字段存放一个新值而修改文件操作的集合。file_operations定义如下：
</rich_text><rich_text foreground="#cc3300">---------------------------------------------------------------------
include/linux/fs.h</rich_text><rich_text>
</rich_text><rich_text weight="heavy">struct file_operations {</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   struct module *owner;</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   loff_t (*llseek) (struct file *, loff_t, int);</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   ssize_t (*read) (struct file *, char __user *, size_t, loff_t *);</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   ssize_t (*write) (struct file *, const char __user *, size_t, loff_t *);</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   ssize_t (*aio_read) (struct kiocb *, const struct iovec *, unsigned long, loff_t);</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   ssize_t (*aio_write) (struct kiocb *, const struct iovec *, unsigned long, loff_t);</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   int (*readdir) (struct file *, void *, filldir_t);</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   unsigned int (*poll) (struct file *, struct poll_table_struct *);</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   int (*ioctl) (struct inode *, struct file *, unsigned int, unsigned long);</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   long (*unlocked_ioctl) (struct file *, unsigned int, unsigned long);</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   long (*compat_ioctl) (struct file *, unsigned int, unsigned long);</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   int (*mmap) (struct file *, struct vm_area_struct *);</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   int (*open) (struct inode *, struct file *);</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   int (*flush) (struct file *, fl_owner_t id);</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   int (*release) (struct inode *, struct file *);</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   int (*fsync) (struct file *, struct dentry *, int datasync);</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   int (*aio_fsync) (struct kiocb *, int datasync);</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   int (*fasync) (int, struct file *, int);</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   int (*lock) (struct file *, int, struct file_lock *);</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   ssize_t (*sendpage) (struct file *, struct page *, int, size_t, loff_t *, int);</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   unsigned long (*get_unmapped_area)(struct file *, unsigned long, unsigned long, unsigned long, unsigned long);</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   int (*check_flags)(int);</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   int (*flock) (struct file *, int, struct file_lock *);</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   ssize_t (*splice_write)(struct pipe_inode_info *, struct file *, loff_t *, size_t, unsigned int);</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   ssize_t (*splice_read)(struct file *, loff_t *, struct pipe_inode_info *, size_t, unsigned int);</rich_text><rich_text>
</rich_text><rich_text weight="heavy">   int (*setlease)(struct file *, long, struct file_lock **);</rich_text><rich_text>
</rich_text><rich_text weight="heavy">};</rich_text><rich_text>
</rich_text><rich_text foreground="#cc3300">---------------------------------------------------------------------</rich_text><rich_text>
该结构的各成员，与同名的系统调用有着相同的语义，包括参数和返回值，这里也就不再做过多的解释了。
</rich_text><encoded_png char_offset="3744"></encoded_png><encoded_png char_offset="10998"></encoded_png></node><node name="rootfs" prog_lang="custom-colors" readonly="False" tags="" unique_id="23"><rich_text>    </rich_text><rich_text foreground="#ffff00000000">驱动加载过程中就可以在操作如上sysfs，但记住此时sysfs、dev等文件系统并没有和系统current根文件系统和根目录有任何关联、这时用户空间程序是访问不到这些文件系统的</rich_text><rich_text>
    </rich_text><rich_text foreground="#ffff00000000">sysfs文件系统挂载到系统current目录树是在用户空间init进程中完成的；如下代码片段：</rich_text><rich_text>
</rich_text><rich_text foreground="#00000000ffff">    int main(int argc, char **argv)
    {
      mkdir(&quot;/dev&quot;, 0755);
      mkdir(&quot;/proc&quot;, 0755);
      mkdir(&quot;/sys&quot;, 0755);
      //设备文件系统的挂载
      mount(&quot;tmpfs&quot;, &quot;/dev&quot;, &quot;tmpfs&quot;, 0, &quot;mode=0755&quot;);
      mkdir(&quot;/dev/pts&quot;, 0755);
      mkdir(&quot;/dev/socket&quot;, 0755);
      mount(&quot;devpts&quot;, &quot;/dev/pts&quot;, &quot;devpts&quot;, 0, NULL);
      //proc文件系统的挂载
      mount(&quot;proc&quot;, &quot;/proc&quot;, &quot;proc&quot;, 0, NULL);
      //sysfs文件系统的挂载
      mount(&quot;sysfs&quot;, &quot;/sys&quot;, &quot;sysfs&quot;, 0, NULL);
    }
</rich_text><rich_text>
1).初始化rootfs文件系统
   初始化rootfs文件系统流程：
    start_kernel                    #(init/main.c)
    -&gt;vfs_caches_init           #(fs/dcache.c)
        -&gt;mnt_init                  #(fs/namespace.c)

    void __init vfs_caches_init(unsigned long mempages)
    {
	    unsigned long reserve;

	    /* Base hash sizes on available memory, with a reserve equal to
               150% of current kernel size */

	    reserve = min((mempages - nr_free_pages()) * 3/2, mempages - 1);
	    mempages -= reserve;

	    names_cachep = kmem_cache_create(&quot;names_cache&quot;, PATH_MAX, 0,
			    SLAB_HWCACHE_ALIGN|SLAB_PANIC, NULL);

	    dcache_init();                 //创建dentry结构对象的cache
	    inode_init();                   //创建inode结构对象的cache
	    files_init(mempages);   //初始化struct file_stat_struct files_stat
	    mnt_init();                     //初始化挂载点 全局变量链表
	    bdev_cache_init();        //注册块设备文件系统
	    chrdev_init();                //注册字符设备文件系统
    }
        
   mnt_init函数如
    void __init mnt_init(void)
    {
	    unsigned u;
	    int err;

	    init_rwsem(&amp;namespace_sem);

	    mnt_cache = kmem_cache_create(&quot;mnt_cache&quot;, sizeof(struct mount),
			    0, SLAB_HWCACHE_ALIGN | SLAB_PANIC, NULL);

	    mount_hashtable = (struct list_head *)__get_free_page(GFP_ATOMIC);

	    if (!mount_hashtable)
		    panic(&quot;Failed to allocate mount hash table\n&quot;);

	    printk(KERN_INFO &quot;Mount-cache hash table entries: %lu\n&quot;, HASH_SIZE);

	    for (u = 0; u &lt; HASH_SIZE; u++)
		    INIT_LIST_HEAD(&amp;mount_hashtable[u]);

	    br_lock_init(vfsmount_lock);

	    err = sysfs_init();
	    if (err)
		    printk(KERN_WARNING &quot;%s: sysfs_init error: %d\n&quot;,
			    __func__, err);
	    fs_kobj = kobject_create_and_add(&quot;fs&quot;, NULL);       //在sysfs根目录下创建fs目录
	    if (!fs_kobj)
		    printk(KERN_WARNING &quot;%s: kobj create error\n&quot;, __func__);

	    init_rootfs();                  /*注册rootfs文件系统*/
	    init_mount_tree();        /*这步执行结束后，文件系统中存在目录‘/’，以后的文件系统，会挂载在这个目录下*/
    }
     
    struct kobject *fs_kobj;            
    EXPORT_SYMBOL_GPL(fs_kobj);

   init_rootfs: #(fs/./ramfs/inode.c)
    int __init init_rootfs(void)
    {
	    int err;

	    err = bdi_init(&amp;ramfs_backing_dev_info);
	    if (err)
		    return err;

	    err = register_filesystem(&amp;rootfs_fs_type);              /*rootfs 结构体*/
	    if (err)
		    bdi_destroy(&amp;ramfs_backing_dev_info);

	    return err;
    } 

    static struct backing_dev_info ramfs_backing_dev_info = {
	    .name		= &quot;ramfs&quot;,
	    .ra_pages	= 0,	/* No readahead */
	    .capabilities	= BDI_CAP_NO_ACCT_AND_WRITEBACK |
			      BDI_CAP_MAP_DIRECT | BDI_CAP_MAP_COPY |
			      BDI_CAP_READ_MAP | BDI_CAP_WRITE_MAP | BDI_CAP_EXEC_MAP,
    };
    
    rootfs结构体：
    static struct file_system_type rootfs_fs_type = {
	    .name		= &quot;rootfs&quot;,
	    .mount		= rootfs_mount,
	    .kill_sb	= kill_litter_super,
    };

    struct inode *ramfs_get_inode(struct super_block *sb,
				    const struct inode *dir, umode_t mode, dev_t dev)
    {
	    struct inode * inode = new_inode(sb);

	    if (inode) {
		    inode-&gt;i_ino = get_next_ino();
		    inode_init_owner(inode, dir, mode);
		    inode-&gt;i_mapping-&gt;a_ops = &amp;ramfs_aops;
		    inode-&gt;i_mapping-&gt;backing_dev_info = &amp;ramfs_backing_dev_info;
		    mapping_set_gfp_mask(inode-&gt;i_mapping, GFP_HIGHUSER);
		    mapping_set_unevictable(inode-&gt;i_mapping);
		    inode-&gt;i_atime = inode-&gt;i_mtime = inode-&gt;i_ctime = CURRENT_TIME;
		    switch (mode &amp; S_IFMT) {
		    default:
			    init_special_inode(inode, mode, dev);
			    break;
		    case S_IFREG:
			    inode-&gt;i_op = &amp;ramfs_file_inode_operations;
			    inode-&gt;i_fop = &amp;ramfs_file_operations;
			    break;
		    case S_IFDIR:
			    inode-&gt;i_op = &amp;ramfs_dir_inode_operations;
			    inode-&gt;i_fop = &amp;simple_dir_operations;

			    /* directory inodes start off with i_nlink == 2 (for &quot;.&quot; entry) */
			    inc_nlink(inode);
			    break;
		    case S_IFLNK:
			    inode-&gt;i_op = &amp;page_symlink_inode_operations;
			    break;
		    }
	    }
	    return inode;
    }

    int ramfs_fill_super(struct super_block *sb, void *data, int silent)
    {
	    struct ramfs_fs_info *fsi;
	    struct inode *inode = NULL;
	    struct dentry *root;
	    int err;

	    save_mount_options(sb, data);

	    fsi = kzalloc(sizeof(struct ramfs_fs_info), GFP_KERNEL);
	    sb-&gt;s_fs_info = fsi;
	    if (!fsi) {
		    err = -ENOMEM;
		    goto fail;
	    }

	    err = ramfs_parse_options(data, &amp;fsi-&gt;mount_opts);
	    if (err)
		    goto fail;

	    sb-&gt;s_maxbytes		= MAX_LFS_FILESIZE;
	    sb-&gt;s_blocksize		= PAGE_CACHE_SIZE;
	    sb-&gt;s_blocksize_bits	= PAGE_CACHE_SHIFT;
	    sb-&gt;s_magic		= RAMFS_MAGIC;
	    sb-&gt;s_op		= &amp;ramfs_ops;
	    sb-&gt;s_time_gran		= 1;

	    inode = ramfs_get_inode(sb, NULL, S_IFDIR | fsi-&gt;mount_opts.mode, 0);
	    if (!inode) {
		    err = -ENOMEM;
		    goto fail;
	    }

	    root = d_alloc_root(inode);
	    sb-&gt;s_root = root;
	    if (!root) {
		    err = -ENOMEM;
		    goto fail;
	    }

	    return 0;
    fail:
	    kfree(fsi);
	    sb-&gt;s_fs_info = NULL;
	    iput(inode);
	    return err;
    }

    static struct dentry *rootfs_mount(struct file_system_type *fs_type,
	    int flags, const char *dev_name, void *data)
    {
	    return mount_nodev(fs_type, flags|MS_NOUSER, data, ramfs_fill_super);
    }

    //(fs/super.c)    
    struct dentry *mount_nodev(struct file_system_type *fs_type,
	    int flags, void *data,
	    int (*fill_super)(struct super_block *, void *, int))
    {
	    int error;
	    struct super_block *s = sget(fs_type, NULL, set_anon_super, NULL);  //分配一个超级块结构

	    if (IS_ERR(s))
		    return ERR_CAST(s);

	    s-&gt;s_flags = flags;

	    error = fill_super(s, data, flags &amp; MS_SILENT ? 1 : 0); //ramfs_fill_super填充超级块
	    if (error) {
		    deactivate_locked_super(s);
		    return ERR_PTR(error);
	    }
	    s-&gt;s_flags |= MS_ACTIVE;
	    return dget(s-&gt;s_root);
    }
    EXPORT_SYMBOL(mount_nodev);
    
    执行完init_rootfs后，完成了系统中的kobject以及filesystem中rootfs相关的注册
    init_mount_tree函数执行流程：  
        init_mount_tree
        -&gt;do_kern_mount
            -&gt;vfs_kern_mount
                -&gt;rootfs_get_sb(type-&gt;get_sb)
                    -&gt;ramfs_fill_super
                        -&gt;d_alloc_root
    d_alloc_root函数：
    /**
     * d_alloc_root - allocate root dentry
     * @root_inode: inode to allocate the root for
     *
     * Allocate a root (&quot;/&quot;) dentry for the inode given. The inode is
     * instantiated and returned. %NULL is returned if there is insufficient
     * memory or the inode passed is %NULL.
     */
     
    struct dentry * d_alloc_root(struct inode * root_inode)
    {
	    struct dentry *res = NULL;

	    if (root_inode) {
		    static const struct qstr name = { .name = &quot;/&quot;, .len = 1 };

		    res = d_alloc(NULL, &amp;name);
		    if (res) {
			    res-&gt;d_sb = root_inode-&gt;i_sb;
			    res-&gt;d_parent = res;
			    d_instantiate(res, root_inode);
		    }
	    }
	    return res;
    }
    
static void __init init_mount_tree(void)
{
	struct vfsmount *mnt;
	struct mnt_namespace *ns;
	struct path root;

	mnt = do_kern_mount(&quot;rootfs&quot;, 0, &quot;rootfs&quot;, NULL);
	if (IS_ERR(mnt))
		panic(&quot;Can't create rootfs&quot;);

	ns = create_mnt_ns(mnt);
	if (IS_ERR(ns))
		panic(&quot;Can't allocate initial namespace&quot;);

	init_task.nsproxy-&gt;mnt_ns = ns;
	get_mnt_ns(ns);

	root.mnt = mnt;
	root.dentry = mnt-&gt;mnt_root;

	set_fs_pwd(current-&gt;fs, &amp;root);
	set_fs_root(current-&gt;fs, &amp;root);
}

/*
 * Replace the fs-&gt;{pwdmnt,pwd} with {mnt,dentry}. Put the old values.
 * It can block.
 */
void set_fs_pwd(struct fs_struct *fs, struct path *path)
{
	struct path old_pwd;

	spin_lock(&amp;fs-&gt;lock);
	write_seqcount_begin(&amp;fs-&gt;seq);
	old_pwd = fs-&gt;pwd;
	fs-&gt;pwd = *path;
	path_get_longterm(path);
	write_seqcount_end(&amp;fs-&gt;seq);
	spin_unlock(&amp;fs-&gt;lock);

	if (old_pwd.dentry)
		path_put_longterm(&amp;old_pwd);
}

/*
 * Replace the fs-&gt;{rootmnt,root} with {mnt,dentry}. Put the old values.
 * It can block.
 */
void set_fs_root(struct fs_struct *fs, struct path *path)
{
	struct path old_root;

	spin_lock(&amp;fs-&gt;lock);
	write_seqcount_begin(&amp;fs-&gt;seq);
	old_root = fs-&gt;root;
	fs-&gt;root = *path;
	path_get_longterm(path);
	write_seqcount_end(&amp;fs-&gt;seq);
	spin_unlock(&amp;fs-&gt;lock);
	if (old_root.dentry)
		path_put_longterm(&amp;old_root);
}


到这里do_kern_mount函数就执行完了，总结一下这个函数主要做了：
1、分配了一个vfsmnt结构
2、分配了一个super_block结构，并将赋值给了前面 了vfsmnt结构
3、分配一个inode
4、分配一个dentry结构作为根目录并将前面的inode赋值给它，最后将它赋值给前面分配的super_block结构

    do_kern_mount函数完后，我们调用create_mnt_ns来分本一个命令空间，这里介绍一个命名空间：
    在传统的Unix系统中，只有一个已安装文件系统树：从系统的根文件系统开始，每个进程通过指定合适的路径名可以访问已安装文件系统中的任何文件。 从这个方面考虑，Linux 2.6更加的精确：每个进程可拥有自己的已安装文件系统树——叫做进程的命名空间（namespace）。
    一般来说，整个系统的命名空间只有一个，被大多数进程共享，即位于系统的根文件系统且被init进程使用的已安装文件系统树。不过，如果clone()系统调用以CLONE_NEWNS标志创建一个新进程，那么进程将获取一个新的命名空间。换句话说，如果父进程没有以CLONE_NEWNS标志创建这些子进程，命名空间将由随后的子进程继承。当进程安装或卸载一个文件系统时，仅修改它的命名空间。因此，所做的修改对共享同一命名空间的所有进程都是可见的，并且也只对它们可见。进程甚至可通过使用Linux特有的pivot_root()系统调用来改变它的命名空间的根文件系统。
进程的命名空间由进程描述符的namespace字段指向的namespace结构描述：

struct namespace {
 atomic_t  count;                           /* 引用计数器（共享命名空间的进程数） */
 struct vfsmount * root;                /* 命名空间根目录的已安装文件系统描述符 */
 struct list_head list;                     /* 所有已安装文件系统描述符(vfsmount)链表的头 */
 wait_queue_head_t poll;            /* 命名空间等待队列 */
 int event;                                    /* 事件 */
}; 
list字段是双向循环链表的头，该表聚集了属于命名空间的所有已安装文件系统。
root字段表示已安装文件系统，它是这个命名空间的已安装文件系统树的根。接下来我们将看到的，已安装文件系统由vfsmount结构描述。 

我们看一下create_mnt_ns函数
/**
 * create_mnt_ns - creates a private namespace and adds a root filesystem
 * @mnt: pointer to the new root filesystem mountpoint
 */
static struct mnt_namespace *create_mnt_ns(struct vfsmount *m)
{
	struct mnt_namespace *new_ns = alloc_mnt_ns();
	if (!IS_ERR(new_ns)) {
		struct mount *mnt = real_mount(m);
		mnt-&gt;mnt_ns = new_ns;
		__mnt_make_longterm(mnt);
		new_ns-&gt;root = mnt;
		list_add(&amp;new_ns-&gt;list, &amp;mnt-&gt;mnt_list);
	} else {
		mntput(m);
	}
	return new_ns;
}

调用alloc_mnt_ns分配mnt_namespace结构，然后将前面返回的vfsmount结构的mnt_ns指向新分配的命名空间，将命令空间的根目录指向mnt.
static struct mnt_namespace *alloc_mnt_ns(void)
{
	struct mnt_namespace *new_ns;

	new_ns = kmalloc(sizeof(struct mnt_namespace), GFP_KERNEL);
	if (!new_ns)
		return ERR_PTR(-ENOMEM);
	atomic_set(&amp;new_ns-&gt;count, 1);
	new_ns-&gt;root = NULL;
	INIT_LIST_HEAD(&amp;new_ns-&gt;list);
	init_waitqueue_head(&amp;new_ns-&gt;poll);
	new_ns-&gt;event = 0;
	return new_ns;
}

    回到init_mount_tree函数，随后将 do_kern_mount() 函数中建立的 mnt 和 dentry 信息记录在了init_task 进程的进程数据块中，这样所有以后从 init_task 进程 fork 出来的进程也都先天地继承了这一信息，最后便是将 do_kern_mount() 函数中建立的 mnt 和 dentry 信息记录在了当前进程的 fs结构中。
这样init_mount_tree函数就执行完了，这里要文件系统安装的第一步也就完成了。

</rich_text></node><node name="sysfs" prog_lang="custom-colors" readonly="False" tags="" unique_id="24"><rich_text>sysfs_init: #(fs/sysfs/mount.c)
    static void free_sysfs_super_info(struct sysfs_super_info *info)
    {
	    int type;
	    for (type = KOBJ_NS_TYPE_NONE; type &lt; KOBJ_NS_TYPES; type++)
		    kobj_ns_drop(type, info-&gt;ns[type]);
	    kfree(info);
    }
    
    static struct dentry *sysfs_mount(struct file_system_type *fs_type,
	    int flags, const char *dev_name, void *data)
    {
	    struct sysfs_super_info *info;
	    enum kobj_ns_type type;
	    struct super_block *sb;
	    int error;

	    info = kzalloc(sizeof(*info), GFP_KERNEL);
	    if (!info)
		    return ERR_PTR(-ENOMEM);

	    for (type = KOBJ_NS_TYPE_NONE; type &lt; KOBJ_NS_TYPES; type++)
		    info-&gt;ns[type] = kobj_ns_grab_current(type);

	    sb = sget(fs_type, sysfs_test_super, sysfs_set_super, info);
	    if (IS_ERR(sb) || sb-&gt;s_fs_info != info)
		    free_sysfs_super_info(info);
	    if (IS_ERR(sb))
		    return ERR_CAST(sb);
	    if (!sb-&gt;s_root) {
		    sb-&gt;s_flags = flags;
		    error = sysfs_fill_super(sb, data, flags &amp; MS_SILENT ? 1 : 0);
		    if (error) {
			    deactivate_locked_super(sb);
			    return ERR_PTR(error);
		    }
		    sb-&gt;s_flags |= MS_ACTIVE;
	    }

	    return dget(sb-&gt;s_root);
    }

    static void sysfs_kill_sb(struct super_block *sb)
    {
	    struct sysfs_super_info *info = sysfs_info(sb);
	    /* Remove the superblock from fs_supers/s_instances
	     * so we can't find it, before freeing sysfs_super_info.
	     */
	    kill_anon_super(sb);
	    free_sysfs_super_info(info);
    }
    
    static struct file_system_type sysfs_fs_type = {
	    .name		= &quot;sysfs&quot;,
	    .mount		= sysfs_mount,
	    .kill_sb	  = sysfs_kill_sb,
    };

    int __init sysfs_init(void)
    {
	    int err = -ENOMEM;
        //创建一个分配sysfs_dirent的cache 
	    sysfs_dir_cachep = kmem_cache_create(&quot;sysfs_dir_cache&quot;,
					          sizeof(struct sysfs_dirent),
					          0, 0, NULL);
	    if (!sysfs_dir_cachep)
		    goto out;

	    err = sysfs_inode_init();
	    if (err)
		    goto out_err;

	    err = register_filesystem(&amp;sysfs_fs_type);
	    if (!err) {
		    sysfs_mnt = kern_mount(&amp;sysfs_fs_type);
		    if (IS_ERR(sysfs_mnt)) {
			    printk(KERN_ERR &quot;sysfs: could not mount!\n&quot;);
			    err = PTR_ERR(sysfs_mnt);
			    sysfs_mnt = NULL;
			    unregister_filesystem(&amp;sysfs_fs_type);
			    goto out_err;
		    }
	    } else
		    goto out_err;
    out:
	    return err;
    out_err:
	    kmem_cache_destroy(sysfs_dir_cachep);
	    sysfs_dir_cachep = NULL;
	    goto out;
    }

    #(fs/sysfs/inode.c)
    static const struct address_space_operations sysfs_aops = {
	    .readpage	= simple_readpage,
	    .write_begin	= simple_write_begin,
	    .write_end	= simple_write_end,
    };

    static struct backing_dev_info sysfs_backing_dev_info = {
	    .name		= &quot;sysfs&quot;,
	    .ra_pages	= 0,	/* No readahead */
	    .capabilities	= BDI_CAP_NO_ACCT_AND_WRITEBACK,
    };

    static const struct inode_operations sysfs_inode_operations ={
	    .permission	= sysfs_permission,
	    .setattr	= sysfs_setattr,
	    .getattr	= sysfs_getattr,
	    .setxattr	= sysfs_setxattr,
    };

    int __init sysfs_inode_init(void)
    {
	    return bdi_init(&amp;sysfs_backing_dev_info);
    }

    在sysfs_init()-&gt;kern_mount()-&gt;vfs_kern_mount()中会有：
    #define kern_mount(type) kern_mount_data(type, NULL)
    
    error = type-&gt;mount(type, flags, name, data); 
        -&gt;sysfs_mount(struct file_system_type *fs_type, int flags, const char *dev_name, void *data)
            -&gt;sysfs_fill_super( )
    在函数sysfs_fill_super( )中会有：
    root = d_alloc_root(inode);
    会创建一个dentry&quot;/&quot;, 然后文件系统sysfs_fs_type文件系统会挂载在目录&quot;/&quot;下。

    static const struct super_operations sysfs_ops = {
	    .statfs		= simple_statfs,
	    .drop_inode	= generic_delete_inode,
	    .evict_inode	= sysfs_evict_inode,
    };

    struct sysfs_dirent sysfs_root = {
	    .s_name		= &quot;&quot;,
	    .s_count	= ATOMIC_INIT(1),
	    .s_flags	= SYSFS_DIR | (KOBJ_NS_TYPE_NONE &lt;&lt; SYSFS_NS_TYPE_SHIFT),
	    .s_mode		= S_IFDIR | S_IRWXU | S_IRUGO | S_IXUGO,
	    .s_ino		= 1,
    };

    sysfs_get_inode(&amp;sysfs_root)用来将sysfs_root导出相应的inode
    struct inode * sysfs_get_inode(struct super_block *sb, struct sysfs_dirent *sd)
    {
	    struct inode *inode;

        //以super_block和sd-&gt;s_ino为哈希值,到哈希表中寻找相应的inode.如果不存在,则新建
	    inode = iget_locked(sb, sd-&gt;s_ino);	    
	    //对新生成的inode进行初始化
	    if (inode &amp;&amp; (inode-&gt;i_state &amp; I_NEW))
		    sysfs_init_inode(sd, inode);

	    return inode;
    }
         
     首 先,它以sysfs文件系统的super_block和struct  sysfs_dirent.的s_ino成员的值做为哈希值到哈希表中寻找相应的inode.如果在哈希表中不存在这个inode,那就新建一个,并将它 
     链入到哈希表.之后,调用sysfs_init_inode()对生成的inode进行初始化.显然.在mount的时候是不会生成inode的.必定会 进入sysfs_init_inode()函数.代码如下:  
     static void sysfs_init_inode(struct sysfs_dirent *sd, struct inode *inode)
    {
	    struct bin_attribute *bin_attr;

	    inode-&gt;i_private = sysfs_get(sd);
	    inode-&gt;i_mapping-&gt;a_ops = &amp;sysfs_aops;
	    inode-&gt;i_mapping-&gt;backing_dev_info = &amp;sysfs_backing_dev_info;
	    inode-&gt;i_op = &amp;sysfs_inode_operations;

	    set_default_inode_attr(inode, sd-&gt;s_mode);
	    sysfs_refresh_inode(sd, inode);

	    /* initialize inode according to type */
	    switch (sysfs_type(sd)) {
	    case SYSFS_DIR:
		    inode-&gt;i_op = &amp;sysfs_dir_inode_operations;
		    inode-&gt;i_fop = &amp;sysfs_dir_operations;
		    break;
	    case SYSFS_KOBJ_ATTR:
		    inode-&gt;i_size = PAGE_SIZE;
		    inode-&gt;i_fop = &amp;sysfs_file_operations;
		    break;
	    case SYSFS_KOBJ_BIN_ATTR:
		    bin_attr = sd-&gt;s_bin_attr.bin_attr;
		    inode-&gt;i_size = bin_attr-&gt;size;
		    inode-&gt;i_fop = &amp;bin_fops;
		    break;
	    case SYSFS_KOBJ_LINK:
		    inode-&gt;i_op = &amp;sysfs_symlink_inode_operations;
		    break;
	    default:
		    BUG();
	    }

	    unlock_new_inode(inode);
    }

    static int sysfs_fill_super(struct super_block *sb, void *data, int silent)
    {
	    struct inode *inode;
	    struct dentry *root;

	    sb-&gt;s_blocksize = PAGE_CACHE_SIZE;
	    sb-&gt;s_blocksize_bits = PAGE_CACHE_SHIFT;
	    sb-&gt;s_magic = SYSFS_MAGIC;
	    sb-&gt;s_op = &amp;sysfs_ops;
	    sb-&gt;s_time_gran = 1;

	    /* get root inode, initialize and unlock it */
	    mutex_lock(&amp;sysfs_mutex);
	    inode = sysfs_get_inode(sb, &amp;sysfs_root);
	    mutex_unlock(&amp;sysfs_mutex);
	    if (!inode) {
		    pr_debug(&quot;sysfs: could not get root inode\n&quot;);
		    return -ENOMEM;
	    }

	    /* instantiate and link root dentry */
	    root = d_alloc_root(inode);
	    if (!root) {
		    pr_debug(&quot;%s: could not get root dentry!\n&quot;,__func__);
		    iput(inode);
		    return -ENOMEM;
	    }
	    //将sysfs_root关联到root 
	    root-&gt;d_fsdata = &amp;sysfs_root;
	    sb-&gt;s_root = root;
	    return 0;
    }

    static int sysfs_test_super(struct super_block *sb, void *data)
    {
	    struct sysfs_super_info *sb_info = sysfs_info(sb);
	    struct sysfs_super_info *info = data;
	    enum kobj_ns_type type;
	    int found = 1;

	    for (type = KOBJ_NS_TYPE_NONE; type &lt; KOBJ_NS_TYPES; type++) {
		    if (sb_info-&gt;ns[type] != info-&gt;ns[type])
			    found = 0;
	    }
	    return found;
    }

    static int sysfs_set_super(struct super_block *sb, void *data)
    {
	    int error;
	    error = set_anon_super(sb, data);
	    if (!error)
		    sb-&gt;s_fs_info = data;
	    return error;
    }


</rich_text></node><node name="mount系统调用" prog_lang="custom-colors" readonly="False" tags="" unique_id="26"><rich_text>mount命令常用于挂载文件系统，它调用的内核函数是sys_mount，sys_mount主要功能是将用户的命令行参数从用户空间传递到内核空间，并调用do_mount解析参数，完成mount过程。其实现源码如下：
SYSCALL_DEFINE5(mount, char __user *, dev_name, char __user *, dir_name,
		char __user *, type, unsigned long, flags, void __user *, data)
{
	int ret;
	char *kernel_type;
	char *kernel_dir;
	char *kernel_dev;
	unsigned long data_page;

	ret = copy_mount_string(type, &amp;kernel_type);
	if (ret &lt; 0)
		goto out_type;

	kernel_dir = getname(dir_name);
	if (IS_ERR(kernel_dir)) {
		ret = PTR_ERR(kernel_dir);
		goto out_dir;
	}

	ret = copy_mount_string(dev_name, &amp;kernel_dev);
	if (ret &lt; 0)
		goto out_dev;

	ret = copy_mount_options(data, &amp;data_page);
	if (ret &lt; 0)
		goto out_data;

	ret = do_mount(kernel_dev, kernel_dir, kernel_type, flags,
		(void *) data_page);

	free_page(data_page);
out_data:
	kfree(kernel_dev);
out_dev:
	putname(kernel_dir);
out_dir:
	kfree(kernel_type);
out_type:
	return ret;
}

这里主要调用了do_mount来执行具体的挂载操作
/*
 * Flags is a 32-bit value that allows up to 31 non-fs dependent flags to
 * be given to the mount() call (ie: read-only, no-dev, no-suid etc).
 *
 * data is a (void *) that can point to any structure up to
 * PAGE_SIZE-1 bytes, which can contain arbitrary fs-dependent
 * information (or be NULL).
 *
 * Pre-0.97 versions of mount() didn't have a flags word.
 * When the flags word was introduced its top half was required
 * to have the magic value 0xC0ED, and this remained so until 2.4.0-test9.
 * Therefore, if this magic number is present, it carries no information
 * and must be discarded.
 */
long do_mount(char *dev_name, char *dir_name, char *type_page,
		  unsigned long flags, void *data_page)
{
	struct path path;
	int retval = 0;
	int mnt_flags = 0;

	/* Discard magic */
	if ((flags &amp; MS_MGC_MSK) == MS_MGC_VAL)
		flags &amp;= ~MS_MGC_MSK;

	/* Basic sanity checks */

	if (!dir_name || !*dir_name || !memchr(dir_name, 0, PAGE_SIZE))
		return -EINVAL;

	if (data_page)
		((char *)data_page)[PAGE_SIZE - 1] = 0;

	/* ... and get the mountpoint */
	retval = kern_path(dir_name, LOOKUP_FOLLOW, &amp;path);
	if (retval)
		return retval;

	retval = security_sb_mount(dev_name, &amp;path,
				   type_page, flags, data_page);
	if (retval)
		goto dput_out;

	/* Default to relatime unless overriden */
	if (!(flags &amp; MS_NOATIME))
		mnt_flags |= MNT_RELATIME;

	/* Separate the per-mountpoint flags */
	if (flags &amp; MS_NOSUID)
		mnt_flags |= MNT_NOSUID;
	if (flags &amp; MS_NODEV)
		mnt_flags |= MNT_NODEV;
	if (flags &amp; MS_NOEXEC)
		mnt_flags |= MNT_NOEXEC;
	if (flags &amp; MS_NOATIME)
		mnt_flags |= MNT_NOATIME;
	if (flags &amp; MS_NODIRATIME)
		mnt_flags |= MNT_NODIRATIME;
	if (flags &amp; MS_STRICTATIME)
		mnt_flags &amp;= ~(MNT_RELATIME | MNT_NOATIME);
	if (flags &amp; MS_RDONLY)
		mnt_flags |= MNT_READONLY;

	flags &amp;= ~(MS_NOSUID | MS_NOEXEC | MS_NODEV | MS_ACTIVE | MS_BORN |
		   MS_NOATIME | MS_NODIRATIME | MS_RELATIME| MS_KERNMOUNT |
		   MS_STRICTATIME);

	if (flags &amp; MS_REMOUNT)
		retval = do_remount(&amp;path, flags &amp; ~MS_REMOUNT, mnt_flags,
				    data_page);
	else if (flags &amp; MS_BIND)
		retval = do_loopback(&amp;path, dev_name, flags &amp; MS_REC);
	else if (flags &amp; (MS_SHARED | MS_PRIVATE | MS_SLAVE | MS_UNBINDABLE))
		retval = do_change_type(&amp;path, flags);
	else if (flags &amp; MS_MOVE)
		retval = do_move_mount(&amp;path, dev_name);
	else
		retval = do_new_mount(&amp;path, type_page, flags, mnt_flags,
				      dev_name, data_page);
dput_out:
	path_put(&amp;path);
	return retval;
}

struct vfsmount {
	struct dentry *mnt_root;	/* root of the mounted tree */
	struct super_block *mnt_sb;	/* pointer to superblock */
	int mnt_flags;
};

struct path {
	struct vfsmount *mnt;
	struct dentry *dentry;
};

struct mount {
	struct list_head mnt_hash;
	struct mount *mnt_parent;
	struct dentry *mnt_mountpoint;
	struct vfsmount mnt;
#ifdef CONFIG_SMP
	struct mnt_pcp __percpu *mnt_pcp;
	atomic_t mnt_longterm;		/* how many of the refs are longterm */
#else
	int mnt_count;
	int mnt_writers;
#endif
	struct list_head mnt_mounts;	/* list of children, anchored here */
	struct list_head mnt_child;	/* and going through their mnt_child */
	struct list_head mnt_instance;	/* mount instance on sb-&gt;s_mounts */
	const char *mnt_devname;	/* Name of device e.g. /dev/dsk/hda1 */
	struct list_head mnt_list;
	struct list_head mnt_expire;	/* link in fs-specific expiry list */
	struct list_head mnt_share;	/* circular list of shared mounts */
	struct list_head mnt_slave_list;/* list of slave mounts */
	struct list_head mnt_slave;	/* slave list entry */
	struct mount *mnt_master;	/* slave is on master-&gt;mnt_slave_list */
	struct mnt_namespace *mnt_ns;	/* containing namespace */
#ifdef CONFIG_FSNOTIFY
	struct hlist_head mnt_fsnotify_marks;
	__u32 mnt_fsnotify_mask;
#endif
	int mnt_id;			/* mount identifier */
	int mnt_group_id;		/* peer group identifier */
	int mnt_expiry_mark;		/* true if marked for expiry */
	int mnt_pinned;
	int mnt_ghosts;
};

在do_mount执行一些参数的检查，以及挂载标志的设置，函数会根据调用参数 flags 来决定调用以下四个函数之一：do_remount()、 do_loopback()、do_move_mount()、do_add_mount()。这里调用do_new_mount来执行一新的挂载操作：
/*
 * create a new mount for userspace and request it to be added into the
 * namespace's tree
 */
static int do_new_mount(struct path *path, char *type, int flags,
			int mnt_flags, char *name, void *data)
{
	struct vfsmount *mnt;
	int err;

	if (!type)
		return -EINVAL;

	/* we need capabilities... */
	if (!capable(CAP_SYS_ADMIN))
		return -EPERM;

	mnt = do_kern_mount(type, flags, name, data);
	if (IS_ERR(mnt))
		return PTR_ERR(mnt);

	err = do_add_mount(real_mount(mnt), path, mnt_flags);
	if (err)
		mntput(mnt);
	return err;
}

static struct vfsmount *
do_kern_mount(const char *fstype, int flags, const char *name, void *data)
{
	struct file_system_type *type = get_fs_type(fstype);
	struct vfsmount *mnt;
	if (!type)
		return ERR_PTR(-ENODEV);
	mnt = vfs_kern_mount(type, flags, name, data);
	if (!IS_ERR(mnt) &amp;&amp; (type-&gt;fs_flags &amp; FS_HAS_SUBTYPE) &amp;&amp;
	    !mnt-&gt;mnt_sb-&gt;s_subtype)
		mnt = fs_set_subtype(mnt, fstype);
	put_filesystem(type);
	return mnt;
}
do_kern_mount()处理实际的安装操作并返回一个新安装文件系统描述符的地址, 这里定义了一脸上vfsmount指针，vfsmount结构描述的是一个独立文件系统的挂载信息，每个不同挂载点对应一个独立的vfsmount结构，属于同一文件系统的所有目录和文件隶属于同一个vfsmount，该vfsmount结构对应于该文件系统顶层目录，即挂载目录。
主要工作有二：一是获得一个新的安装区域块，二是将该新的安装区域块加入了安装系统链表
看一下vfs_kern_mount：
struct vfsmount *
vfs_kern_mount(struct file_system_type *type, int flags, const char *name, void *data)
{
	struct mount *mnt;
	struct dentry *root;

	if (!type)
		return ERR_PTR(-ENODEV);

	mnt = alloc_vfsmnt(name);
	if (!mnt)
		return ERR_PTR(-ENOMEM);

	if (flags &amp; MS_KERNMOUNT)
		mnt-&gt;mnt.mnt_flags = MNT_INTERNAL;

	root = mount_fs(type, flags, name, data);
	if (IS_ERR(root)) {
		free_vfsmnt(mnt);
		return ERR_CAST(root);
	}

	mnt-&gt;mnt.mnt_root = root;
	mnt-&gt;mnt.mnt_sb = root-&gt;d_sb;
	mnt-&gt;mnt_mountpoint = mnt-&gt;mnt.mnt_root;
	mnt-&gt;mnt_parent = mnt;
	br_write_lock(vfsmount_lock);
	list_add_tail(&amp;mnt-&gt;mnt_instance, &amp;root-&gt;d_sb-&gt;s_mounts);   //把mnt_instance连接到s_mounts尾
	br_write_unlock(vfsmount_lock);
	return &amp;mnt-&gt;mnt;
}
EXPORT_SYMBOL_GPL(vfs_kern_mount);

struct dentry *
mount_fs(struct file_system_type *type, int flags, const char *name, void *data)
{
	struct dentry *root;
	struct super_block *sb;
	char *secdata = NULL;
	int error = -ENOMEM;

	if (data &amp;&amp; !(type-&gt;fs_flags &amp; FS_BINARY_MOUNTDATA)) {
		secdata = alloc_secdata();
		if (!secdata)
			goto out;

		error = security_sb_copy_data(data, secdata);
		if (error)
			goto out_free_secdata;
	}

	root = type-&gt;mount(type, flags, name, data);
	if (IS_ERR(root)) {
		error = PTR_ERR(root);
		goto out_free_secdata;
	}
	sb = root-&gt;d_sb;
	BUG_ON(!sb);
	WARN_ON(!sb-&gt;s_bdi);
	WARN_ON(sb-&gt;s_bdi == &amp;default_backing_dev_info);
	sb-&gt;s_flags |= MS_BORN;

	error = security_sb_kern_mount(sb, flags, secdata);
	if (error)
		goto out_sb;

	/*
	 * filesystems should never set s_maxbytes larger than MAX_LFS_FILESIZE
	 * but s_maxbytes was an unsigned long long for many releases. Throw
	 * this warning for a little while to try and catch filesystems that
	 * violate this rule.
	 */
	WARN((sb-&gt;s_maxbytes &lt; 0), &quot;%s set sb-&gt;s_maxbytes to &quot;
		&quot;negative value (%lld)\n&quot;, type-&gt;name, sb-&gt;s_maxbytes);

	up_write(&amp;sb-&gt;s_umount);
	free_secdata(secdata);
	return root;
out_sb:
	dput(root);
	deactivate_locked_super(sb);
out_free_secdata:
	free_secdata(secdata);
out:
	return ERR_PTR(error);
}

回到do_new_mount函数，接着调用do_add_mount添加到命令空间挂载树上去
/*
 * add a mount into a namespace's mount tree
 */
static int do_add_mount(struct mount *newmnt, struct path *path, int mnt_flags)
{
	int err;

	mnt_flags &amp;= ~(MNT_SHARED | MNT_WRITE_HOLD | MNT_INTERNAL);

	err = lock_mount(path);
	if (err)
		return err;

	err = -EINVAL;
	if (!(mnt_flags &amp; MNT_SHRINKABLE) &amp;&amp; !check_mnt(real_mount(path-&gt;mnt)))
		goto unlock;

	/* Refuse the same filesystem on the same mount point */
	err = -EBUSY;
	if (path-&gt;mnt-&gt;mnt_sb == newmnt-&gt;mnt.mnt_sb &amp;&amp;
	    path-&gt;mnt-&gt;mnt_root == path-&gt;dentry)
		goto unlock;

	err = -EINVAL;
	if (S_ISLNK(newmnt-&gt;mnt.mnt_root-&gt;d_inode-&gt;i_mode))
		goto unlock;

	newmnt-&gt;mnt.mnt_flags = mnt_flags;
	err = graft_tree(newmnt, path);

unlock:
	unlock_mount(path);
	return err;
}

/*
 * lookup_mnt increments the ref count before returning
 * the vfsmount struct.
 */
struct vfsmount *lookup_mnt(struct path *path)
{
	struct mount *child_mnt;

	br_read_lock(vfsmount_lock);
	child_mnt = __lookup_mnt(path-&gt;mnt, path-&gt;dentry, 1);
	if (child_mnt) {
		mnt_add_count(child_mnt, 1);
		br_read_unlock(vfsmount_lock);
		return &amp;child_mnt-&gt;mnt;
	} else {
		br_read_unlock(vfsmount_lock);
		return NULL;
	}
}

static inline int check_mnt(struct mount *mnt)
{
	return mnt-&gt;mnt_ns == current-&gt;nsproxy-&gt;mnt_ns;
}

/*
 * vfsmount lock must be held for write
 */
static void touch_mnt_namespace(struct mnt_namespace *ns)
{
	if (ns) {
		ns-&gt;event = ++event;
		wake_up_interruptible(&amp;ns-&gt;poll);
	}
}

/*
 * vfsmount lock must be held for write
 */
static void __touch_mnt_namespace(struct mnt_namespace *ns)
{
	if (ns &amp;&amp; ns-&gt;event != event) {
		ns-&gt;event = event;
		wake_up_interruptible(&amp;ns-&gt;poll);
	}
}

static int lock_mount(struct path *path)
{
	struct vfsmount *mnt;
retry:
	mutex_lock(&amp;path-&gt;dentry-&gt;d_inode-&gt;i_mutex);
	if (unlikely(cant_mount(path-&gt;dentry))) {
		mutex_unlock(&amp;path-&gt;dentry-&gt;d_inode-&gt;i_mutex);
		return -ENOENT;
	}
	down_write(&amp;namespace_sem);
	mnt = lookup_mnt(path);
	if (likely(!mnt))
		return 0;
	up_write(&amp;namespace_sem);
	mutex_unlock(&amp;path-&gt;dentry-&gt;d_inode-&gt;i_mutex);
	path_put(path);
	path-&gt;mnt = mnt;
	path-&gt;dentry = dget(mnt-&gt;mnt_root);
	goto retry;
}

static void unlock_mount(struct path *path)
{
	up_write(&amp;namespace_sem);
	mutex_unlock(&amp;path-&gt;dentry-&gt;d_inode-&gt;i_mutex);
}

这里主要调用graft_tree()把vfsmnt结构加入到安装系统链表中，同时 graft_tree() 还要将新分配的 struct vfsmount 类型的变量加入到一个hash表中
static int graft_tree(struct mount *mnt, struct path *path)
{
	if (mnt-&gt;mnt.mnt_sb-&gt;s_flags &amp; MS_NOUSER)
		return -EINVAL;

	if (S_ISDIR(path-&gt;dentry-&gt;d_inode-&gt;i_mode) !=
	      S_ISDIR(mnt-&gt;mnt.mnt_root-&gt;d_inode-&gt;i_mode))
		return -ENOTDIR;

	if (d_unlinked(path-&gt;dentry))
		return -ENOENT;

	return attach_recursive_mnt(mnt, path, NULL);
}

/*
 *  @source_mnt : mount tree to be attached
 *  @nd         : place the mount tree @source_mnt is attached
 *  @parent_nd  : if non-null, detach the source_mnt from its parent and
 *  		   store the parent mount and mountpoint dentry.
 *  		   (done when source_mnt is moved)
 *
 *  NOTE: in the table below explains the semantics when a source mount
 *  of a given type is attached to a destination mount of a given type.
 * ---------------------------------------------------------------------------
 * |         BIND MOUNT OPERATION                                            |
 * |**************************************************************************
 * | source--&gt;| shared        |       private  |       slave    | unbindable |
 * | dest     |               |                |                |            |
 * |   |      |               |                |                |            |
 * |   v      |               |                |                |            |
 * |**************************************************************************
 * |  shared  | shared (++)   |     shared (+) |     shared(+++)|  invalid   |
 * |          |               |                |                |            |
 * |non-shared| shared (+)    |      private   |      slave (*) |  invalid   |
 * ***************************************************************************
 * A bind operation clones the source mount and mounts the clone on the
 * destination mount.
 *
 * (++)  the cloned mount is propagated to all the mounts in the propagation
 * 	 tree of the destination mount and the cloned mount is added to
 * 	 the peer group of the source mount.
 * (+)   the cloned mount is created under the destination mount and is marked
 *       as shared. The cloned mount is added to the peer group of the source
 *       mount.
 * (+++) the mount is propagated to all the mounts in the propagation tree
 *       of the destination mount and the cloned mount is made slave
 *       of the same master as that of the source mount. The cloned mount
 *       is marked as 'shared and slave'.
 * (*)   the cloned mount is made a slave of the same master as that of the
 * 	 source mount.
 *
 * ---------------------------------------------------------------------------
 * |         		MOVE MOUNT OPERATION                                 |
 * |**************************************************************************
 * | source--&gt;| shared        |       private  |       slave    | unbindable |
 * | dest     |               |                |                |            |
 * |   |      |               |                |                |            |
 * |   v      |               |                |                |            |
 * |**************************************************************************
 * |  shared  | shared (+)    |     shared (+) |    shared(+++) |  invalid   |
 * |          |               |                |                |            |
 * |non-shared| shared (+*)   |      private   |    slave (*)   | unbindable |
 * ***************************************************************************
 *
 * (+)  the mount is moved to the destination. And is then propagated to
 * 	all the mounts in the propagation tree of the destination mount.
 * (+*)  the mount is moved to the destination.
 * (+++)  the mount is moved to the destination and is then propagated to
 * 	all the mounts belonging to the destination mount's propagation tree.
 * 	the mount is marked as 'shared and slave'.
 * (*)	the mount continues to be a slave at the new location.
 *
 * if the source mount is a tree, the operations explained above is
 * applied to each mount in the tree.
 * Must be called without spinlocks held, since this function can sleep
 * in allocations.
 */
static int attach_recursive_mnt(struct mount *source_mnt,
			struct path *path, struct path *parent_path)
{
	LIST_HEAD(tree_list);
	struct mount *dest_mnt = real_mount(path-&gt;mnt);
	struct dentry *dest_dentry = path-&gt;dentry;
	struct mount *child, *p;
	int err;

	if (IS_MNT_SHARED(dest_mnt)) {
		err = invent_group_ids(source_mnt, true);
		if (err)
			goto out;
	}
	err = propagate_mnt(dest_mnt, dest_dentry, source_mnt, &amp;tree_list);
	if (err)
		goto out_cleanup_ids;

	br_write_lock(vfsmount_lock);

	if (IS_MNT_SHARED(dest_mnt)) {
		for (p = source_mnt; p; p = next_mnt(p, source_mnt))
			set_mnt_shared(p);
	}
	if (parent_path) {
		detach_mnt(source_mnt, parent_path);
		attach_mnt(source_mnt, path);
		touch_mnt_namespace(source_mnt-&gt;mnt_ns);
	} else {
		mnt_set_mountpoint(dest_mnt, dest_dentry, source_mnt);
		commit_tree(source_mnt);
	}

	list_for_each_entry_safe(child, p, &amp;tree_list, mnt_hash) {
		list_del_init(&amp;child-&gt;mnt_hash);
		commit_tree(child);
	}
	br_write_unlock(vfsmount_lock);

	return 0;

 out_cleanup_ids:
	if (IS_MNT_SHARED(dest_mnt))
		cleanup_group_ids(source_mnt, NULL);
 out:
	return err;
}

/*
 * vfsmount lock must be held for write
 */
void mnt_set_mountpoint(struct mount *mnt, struct dentry *dentry,
			struct mount *child_mnt)
{
	mnt_add_count(mnt, 1);	/* essentially, that's mntget */
	child_mnt-&gt;mnt_mountpoint = dget(dentry);
	child_mnt-&gt;mnt_parent = mnt;
	spin_lock(&amp;dentry-&gt;d_lock);
	dentry-&gt;d_flags |= DCACHE_MOUNTED;
	spin_unlock(&amp;dentry-&gt;d_lock);
}
这里关系到我们在进行路径名查找了，参考一下</rich_text><rich_text link="webs http://blog.csdn.net/new_abc/article/details/7688880">http://blog.csdn.net/new_abc/article/details/7688880</rich_text><rich_text>。在文章的最后，如果找到的某个path是安装点就会找到其最近一次被安装文件系统的指针。当找到该指针后，便将 nd 中的 mnt 成员换成该安装区域块指针，同时将 nd 中的 dentry 成员换成安装区域块中的 dentry 指针。再来看一 下commit_tree
/*
 * vfsmount lock must be held for write
 */
static void commit_tree(struct mount *mnt)
{
	struct mount *parent = mnt-&gt;mnt_parent;
	struct mount *m;
	LIST_HEAD(head);
	struct mnt_namespace *n = parent-&gt;mnt_ns;

	BUG_ON(parent == mnt);

	list_add_tail(&amp;head, &amp;mnt-&gt;mnt_list);
	list_for_each_entry(m, &amp;head, mnt_list) {
		m-&gt;mnt_ns = n;
		__mnt_make_longterm(m);
	}

	list_splice(&amp;head, n-&gt;list.prev);

	list_add_tail(&amp;mnt-&gt;mnt_hash, mount_hashtable +
				hash(&amp;parent-&gt;mnt, mnt-&gt;mnt_mountpoint));       //添加到父节点链表末
	list_add_tail(&amp;mnt-&gt;mnt_child, &amp;parent-&gt;mnt_mounts);    //添加到父节点mnt_mounts链表末
	touch_mnt_namespace(n);
}
这里会把它添加到一个全局的mount_hashtable,这里的插入点是通过hash(parent, mnt-&gt;mnt_mountpoint)，即挂载目录先前的vfsmount结构和dentry结构

 
到这里，文件系统就已经挂载完成了，当下次再次访问到这个挂载点时，就会使用这个新的安装的文件系统指针。

 

</rich_text></node></node><node name="linux boot" prog_lang="custom-colors" readonly="False" tags="" unique_id="14"><rich_text></rich_text><node name="从ramdisk根文件系统启动Linux" prog_lang="custom-colors" readonly="False" tags="" unique_id="15"><rich_text>今天做了个试验，让Linux2.6.29.4从ramdisk根文件系统启动成功，总结一下。
其中涉及的内容较多，很多东西不再详述，如需深入研究请查阅相关资料（百度或谷歌一下一大堆）。


开发环境：Fedora 9
交叉编译工具链：arm-linux-gcc 4.3.2 with EABI
嵌入式Linux内核版本：2.6.29.4-FriendlyARM。昨天写贴子的时候具体记不清了，今天起来启动开发板用uname -r查一下，就是叫做2.6.29.4-FriendlyARM，帖子已经改好了。本文就是友善之臂的2.6.29.4-FriendlyARM的那个版本的内核的基础上改的。其它版本的应该也类似，仅供参考。
开发板：mini2440-128M Nand Flash
Bootloader：u-boot-2009.11

具体步骤如下：
</rich_text><rich_text scale="h2">1.解压内核源码树</rich_text><rich_text>
解压linux-2.6.29-mini2440-20090708.tgz到自己的工作目录，会生成一个友善之臂修改过的并且有几个mini2440默认配置文件的内核源码目录linux-2.6.29。具体步骤参照友善之臂mini2440开发板用户手册，具体不详述了。

</rich_text><rich_text scale="h2">2.修改内核配置选项</rich_text><rich_text>
进入内核源码目录linux-2.6.29目录
#cp config_mini2440_t35 .config
#make menuconfig ARCH=arm
打开配置菜单，修改两个配置项，分别是：
    a）：General setup--&gt;选择 Initial RAM filesystem and RAM disk...... 项
    b）：Device Drivers--&gt;Block devices--&gt;选择 RAM block device support 项

并检查Optimize for size是否被选中，如果没有则选中，此项优化内核大小，根据需要进行配置。
修改（8192）Default RAM disk size kbytes选项为（4096）Default RAM disk size kbytes，之所以修改是因为我之后制作的ramdisk是4096KB大小的。当然如果你想制作8192KB大小的ramdisk，这里就要对应为8192了，以此类推。但是最小系统嘛，是不用那么大的ramdisk的。此项的默认配置就是（4096），以前我改过这个配置，所以是（8192）了。如果这个大小和你做的ramdisk不匹配，则启动时仍然会出现kernel panic内核恐慌，提示ramdisk格式不正确，挂载不上ramdisk。
然后特别要注意的一点是，ramdisk是一种内存虚拟磁盘技术，实质上并不是一种文件系统，它使用的文件系统时ext2文件系统。所以一定要在make menuconfig ARCH=arm的时候进入File systems菜单，选上&lt;*&gt; Second extended fs support。以提供内核对ext2文件系统的支持。我以前添加过了ext2文件系统了，所以开始的时候在此没有说明，在此为了说明为什么有的人照着我的方法做了，但是仍然kernel panic，特别把这一步也加上。
然后保存配置退出。
这样就为内核添加好了ramdisk启动功能和ramdisk的驱动支持了。

</rich_text><rich_text scale="h2">3.修改内核启动参数</rich_text><rich_text>
    方法有二：
    a）：修改.config的第310行，修改CONFIG_CMDLINE=&quot;&quot;的定义
        修改为CONFIG_CMDLINE=&quot;initrd=0x31000000,0x200000 root=/dev/ram rw init=/linuxrc console=ttySAC0 mem=64&quot;
        保存。
        意思为从ramdisk启动，ramdisk压缩文件起始地址在内存地址0x31000000处，文件大小为0x200000。
        此参数也可以在make menuconfig ARCH=arm时进入Boot options菜单，然后在Default kernel command string里修改。效果是一样的。
     
    b）：或者不修改.config的的第310行CMDLINE定义,而是用u-boot的bootargs环境变量来传递启动参数。
        同样也是修改该环境变量为bootargs=initrd=0x31000000,0x200000 root=/dev/ram rw init=/linuxrc console=ttySAC0 mem=64
        并saveenv保存u-boot环境变量
        以上a），b）的效果是一样的。

</rich_text><rich_text scale="h2">4.编译内核</rich_text><rich_text>
#make zImage ARCH=arm CROSS_COMPILE=arm-linux-
然后是二十分钟左右的等待。
编译完成后在当前目录下就出现了zImage内核映像了。
好像友善之臂把内核源码目录里的uImage目标给注释了，以前在论坛里看到过有人说，直接make uImage好像提示没有uImage的目标。所以我就先制作zImage，然后再用u-boot的mkimage工具转化为uImage。其实uImage就是在zImage的开头部分增加了一个64字节的内核映像说明。

</rich_text><rich_text scale="h2">5.制作uImage内核映像</rich_text><rich_text>
由于我使用的Bootloader是u-boot，所以要将zImage转化为uImage，方法如下：
#mkimage -A arm -O linux -T kernel -C none -a 0x30008000 -e 0x30008000 -n &quot;Linux kernel Image&quot; -d zImage uImage-ramdisk
说明：mkimage工具是u-boot格式uImage内核映像制作工具。如果成功编译u-boot之后，它会在u-boot源码树下的tools目录之下。建议将其拷贝到宿主机的/sbin/目录下，以方便使用。mkimage使用时的具体参数不再详述，不清楚的请自己查阅。

</rich_text><rich_text scale="h2">6.制作ramdisk根文件系统</rich_text><rich_text>
    该过程是制作ramdisk根文件系统的核心步骤，方法如下：
    a）创建根文件系统目录：
    #cd转入到你的工作目录。
    #mkdir rootfs
    #cd rootfs
    #mkdir bin dev etc lib proc sbin sys usr mnt tmp var
    #mkdir usr/bin usr/lib usr/sbin lib/modules

    b）创建最基本的设备文件：
    #cd dev
    #mknod -m 666 console c 5 1
    #mknod -m 666 null c 1 3
    #cd ..

    c）安装/etc配置文件：
    这里可以直接把友善之臂的root_qtopia里的几个基本的配置文件拷贝过来，只拷贝必要的即可，并对其内容进行删减，因为我做的ramdisk并不包含Qtopia等，全拷贝过来也没有用。
    我是从网上找的最小系统的etc配置文件直接解压到我制作的根文件系统里了，并做参照友善之臂的root_qtopia添加了一些内容，见最后的说明。
    操作如下：
    #tar etc.tar.gz -C /xxx/rootfs
    xxx表示你要制作的rootfs所在的目录。

    d）编译内核模块：
    方法是如下：
    进入Linux内核源码目录（linux-2.6.29）
    #make modules ARCH=arm CROSS_COMPILE=arm-linux-

    e）安装内核模块：
    #make modules_install ARCH=arm INSTALL_MOD_PATH=/xxx/rootfs
        xxx表示你要制作的rootfs所在的目录。

    f）配置busybox
    进入busybox目录执行#make menuconfig
　　进入Busybox Settings -&gt; build Options -&gt;选中&quot;Build busybox as a static binary“，即静态链接，免去拷贝大量的库文件。
　　Installation Options -&gt; 选中&quot;Don't use /usr&quot;，以免busybox不慎被安装到宿主机系统的相应目录下，破坏宿主机系统。
　　Busybox Installation Prefix （/xxx/rootfs），修改该选项表明编译后的busybox将安装到该位置。

    g）编译、安装busybox
    #make ARCH=arm CROSS_COMPILE=arm-linux-
        几分钟编译完成后
    #make install
        安装到Busybox Installation Prefix （/xxx/rootfs）设定的目录里。当前为我要制作的根文件系统目录（/xxx/rootfs）。

    h）制作ramdisk根文件系统镜像
    方法如下：
    上</rich_text><rich_text foreground="#0070af">http://genext2fs.sourceforge.net/</rich_text><rich_text>下载可以简单方便的制作ramdisk文件系统的工具genext2fs，这样就不用像网上大多数说的那样繁琐的制作ramdisk映像了，当前最新版本为genext2fs-1.4.1.tar.gz 。
    编译生成该工具genext2fs，并将其放入宿主机的/sbin/目录下以方便使用。
    跳转到要制作的rootfs的上一级目录
    #genext2fs -b 4096 -d rootfs ramdisk
    -b是指制作的ramdisk大小为4096K字节
    -d是指要制作成ramdisk的根文件系统目录
    最后的ramdisk是制作出来的ramdisk的名字，当然可以改名了。
    #gzip -9 -f ramdisk
    将该ramdisk以最优方式压缩为ramdisk.gz

</rich_text><rich_text scale="h2">7.下载内核映像和ramdisk映像</rich_text><rich_text>
    启动u-boot，暂停u-boot自动启动，在u-boot命令行中键入如下命令下载内核和ramdisk映像：
    [u-boot@MINI2440]# tftp 0x32000000 uImage-ramdisk
    dm9000 i/o: 0x20000300, id: 0x90000a46
    DM9000: running in 16 bit mode
    MAC: 08:08:11:18:12:27
    operating at 100M full duplex mode
    Using dm9000 device
    TFTP from server 192.168.31.117; our IP address is 192.168.31.230
    Filename 'uImage-ramdisk'.
    Load address: 0x32000000
    Loading: T T #################################################################
             #################################################################
             #
    done
    Bytes transferred = 1917752 (1d4338 hex)
    [u-boot@MINI2440]# tftp 0x31000000 ramdisk.gz
    dm9000 i/o: 0x20000300, id: 0x90000a46
    DM9000: running in 16 bit mode
    MAC: 08:08:11:18:12:27
    operating at 100M full duplex mode
    Using dm9000 device
    TFTP from server 192.168.31.117; our IP address is 192.168.31.230
    Filename 'ramdisk.gz'.
    Load address: 0x31000000
    Loading: T T #################################################################
             ####
    done
    Bytes transferred = 1002594 (f4c62 hex)

</rich_text><rich_text scale="h2">8）使用ramdisk根文件系统启动内核</rich_text><rich_text>
    在u-boot命令行下键入如下命令启动系统：
    bootm 0x32000000
    ## Booting kernel from Legacy Image at 32000000 ...
       Image Name:   Linux-2.6.29.4-FriendlyARM
       Created:      2010-04-09  15:13:52 UTC
       Image Type:   ARM Linux Kernel Image (uncompressed)
       Data Size:    1917688 Bytes =  1.8 MB
       Load Address: 30008000
       Entry Point:  30008000
       Verifying Checksum ... OK
       Loading Kernel Image ... OK
    OK

    Starting kernel ...

    Uncompressing Linux.............................................................
    ................................................................ done, booting t
    he kernel.
    Linux version 2.6.29.4-FriendlyARM (</rich_text><rich_text foreground="#0070af" link="webs http://mailto:root@localhost.loca">root@localhost.loca</rich_text><rich_text>ldomain) (gcc version 4.3
    .2 (Sourcery G++ Lite 2008q3-72) ) #3 Fri Apr 9 23:13:36 CST 2010
    CPU: ARM920T [41129200] revision 0 (ARMv4T), cr=c0007177
    CPU: VIVT data cache, VIVT instruction cache
    Machine: FriendlyARM Mini2440 development board
    Memory policy: ECC disabled, Data cache writeback
    ……中间过长的内容在此省略了……
    RAMDISK: Compressed image found at block 0
    VFS: Mounted root (ext2 filesystem) on device 1:0.
    Freeing init memory: 136K
    eth0: link down

    Processing /etc/profile... Done

    # eth0: link up, 100Mbps, full-duplex, lpa 0x45E1

至此系统启动成功。

----------------------------------------------------------------------------------
后记：由于友善之臂mini2440默认的配置文件是将驱动等直接编译到内核里去了，并没有使用内核模块。所以上述第6步制作根文件系统中的d）编译和e）安装内核模块的步骤可以不做。我就没有编译内核模块。因为参照友善之臂的root_qtopia根文件系统发现/lib/modules/`uname -r`里根本没有东西。而且以前用友善之臂的config_mini2440_t35默认配置编译内核模块的时候。发现友善只做了个hello_modules的内核模块示例。在此我们不需要使用这个hello_modules，所以这两步就略过去了。

说明：由于最小系统里的etc配置文件没有写自动启动网卡的脚本，所以我做的ramdisk开始时并不能自动启动网卡。后来参照友善之臂的root_qtopia根文件系统里的脚本做如下修改，即可自动启动脚本。
修改如下：
修改要制作的ramdisk根文件系统的rootfs下的/etc/init.d/rcS文件
在最下边添加如下两行命令即可自动启动网卡：
/sbin/ifconfig lo 127.0.0.1
/sbin/ifconfig eth0 192.168.31.230 netmask 255.255.255.0 up

这个方法是通过分析友善之臂的root_qtopia根文件系统的启动流程时发现的。
通过分析友善之臂的root_qtopia根文件系统，我们还能发现更多的内容。在此不在详述。
锻炼一下自己分析解决问题的能力吧。呵呵。


</rich_text><rich_text foreground="#ff0000" scale="h1">android 的boot.img 包括 boot header，kernel， ramdisk</rich_text><rich_text>
</rich_text><rich_text foreground="#000000">首先来看看Makefile是如何产生我们的boot.img的：</rich_text><rich_text> 
boot镜像不是普通意义上的文件系统，而是一种特殊的Android定制格式，由boot header，压缩的内核，ramdisk以及second stage loader（可选）组成，可以从</rich_text><rich_text foreground="#0063dc" link="webs http://git.source.android.com/?p=platform/system/core.git;a=blob;f=mkbootimg/bootimg.h">mkbootimg.h</rich_text><rich_text>文件中看到。
boot,img文件跳过4k的文件头之后，包括两个 gz包，一个是boot.img-kernel.gz：Linux内核，一个是boot.img-ramdisk.cpio.gz
</rich_text><rich_text foreground="#ff0000">大概的组成结构如下</rich_text><rich_text>
 
*</rich_text><rich_text foreground="#008000">
 ** +-----------------+ 
 ** | boot header     | 1 page
 ** +-----------------+
 ** | kernel              | n pages  
 ** +-----------------+
 ** | ramdisk           | m pages  
 ** +-----------------+
 ** | second stage    | o pages
 ** +-----------------+
 </rich_text><rich_text>
</rich_text><rich_text foreground="#008000">boot header为包括命令行参数等等,地址为000-----0xFFF</rich_text><rich_text>
</rich_text><rich_text foreground="#008000">ramdisk为 1F8B0800000000开头</rich_text><rich_text>
</rich_text><rich_text foreground="#008000">kernel为 0000A0E1 重复8遍开头</rich_text><rich_text>
 

关于boot  header这个数据结构我们需要重点注意，在这里我们关注其中几个比较重要的值，这些值定义在boot/boardconfig.h里面，不同的芯片对 应vendor下不同的boardconfig，在这里我们的值分别是（分别是kernel/ramdis/tags载入ram的物理地址）：
#define PHYSICAL_DRAM_BASE   0x00200000 
 #define KERNEL_ADDR          (PHYSICAL_DRAM_BASE + 0x00008000)
 #define RAMDISK_ADDR         (PHYSICAL_DRAM_BASE + 0x01000000)
 #define TAGS_ADDR            (PHYSICAL_DRAM_BASE + 0x00000100)
 #define NEWTAGS_ADDR         (PHYSICAL_DRAM_BASE + 0x00004000)
上面这些值分别和我们开篇时候提到的那几个名词相对应，比如kernel_addr就是ZTEXTADDR，RAMDISK_ADDR就是 INITRD_PHYS,而TAGS_ADDR就是PARAMS_PHYS。bootloader会从boot.img的分区中将kernel和 ramdisk分别读入RAM上面定义的地址中，然后就会跳到ZTEXTADDR开始执行。
</rich_text><rich_text foreground="#008000">ramdisk映像是一个最基础的小型文件系统，它包括了初始化系统所需要的全部核心文件，例如:初始化init进程以及init.rc（可以用于设置很多系统的参数）等文件。</rich_text><rich_text>以下是一个典型的ramdisk中包含的文件列表：
 </rich_text><rich_text foreground="#000000">./init.trout.rc
 ./default.prop
 ./proc
 ./dev
 ./init.rc
 ./init
 ./sys
 ./init.goldfish.rc
 ./sbin
 ./sbin/adbd
 ./system
 ./data</rich_text><rich_text>
 
 
 
</rich_text><rich_text foreground="#008000">如果要分离可以用winhex将boot。img打开</rich_text><rich_text>
</rich_text><rich_text foreground="#008000">找到0000A0E1 到1F8B0800000000的前面的数据块保持为kernel</rich_text><rich_text>
</rich_text><rich_text foreground="#008000">找到1F8B0800000000到文件尾部的数据块保持为ramdisk.img</rich_text><rich_text> 
 out/host/linux-x86/bin/mkbootimg   --kernel out/target/product/msm7630_surf/kernel --ramdisk  out/target/product/msm7630_surf/ramdisk.img --cmdline  &quot;console=ttyMSM1,115200n8 androidboot.hardware=qcom&quot; --base 0x00200000  --pagesize  4096 --output out/target/product/msm7630_surf/boot.img
 
        根据上面的命令我们可以首先看看mkbootimg 这个工具的源文件：system/core/mkbootimg.c。看完之 后我们就能很清晰地看到boot.img的内部构造，它是由boot header /kernel  /ramdisk /second  stage构成的，其中前3项是必须的，最后一项是可选的。
header + padding + kernel + padding + ramdisk + padding + ...
 4 * 2, magic，固定为&quot;ANDROID!&quot;
 4 * 1, kernel长度，小端unsigned
 4 * 1, kernel地址，应为base + 0x00008000 (base为0x200000)
 4 * 1, ramdisk长度，小端unsigned
 4 * 1, ramdisk地址，应为base + 0x01000000
 4 * 1, second stage长度，小端unsigned，为0
 4 * 1, second stage地址，应为base + 0x00f00000
 4 * 1, tags地址，应为base + 0x00000100
 4 * 1, page大小，小端unsigned, 为2048或者4096
4 * 2, 未使用，固定为0x00
 4 * 4, 板子名字，一般为空
 4 * 128, 内核命令参数，为mem=211M console=ttyMSM2,115200n8 androidboot.hardware=qcom console=ttyUSBCONSOLE0 androidboot.console=ttyUSBCONSOLE0
 4 * 8, id, 为sha之类，实际写0x00就可
 padding, 以上header为608字节，把这部分补齐到page_size * 2大小 
 kernel_size, kernel内容
 padding，把kernel_size补齐到page_size * 2
 ramdisk_size, ramdisk内容
 padding, 把ramdisk补齐到page_size * 2
 second_size, second内容，一般为0
 padding, 补齐second_sise为page_size，一般为0
 
配合 boot.img 来看会比较好理解.
</rich_text><rich_text justification="left"></rich_text><rich_text>
由此可知 boot_img_hdr 中各成员值为：
 </rich_text><rich_text justification="left"></rich_text><rich_text>
 </rich_text><rich_text justification="left"></rich_text><rich_text>
TAGS_ADDR 如上 target/&lt;your-platform&gt;/rules.mk 所定义的 : 0x40200100, 所以 boot_linux(), 就是传入TAGS_ADDR, 
 
然后将资料写入 tag, tag 的结构如下所示.
 </rich_text><rich_text justification="left"></rich_text><rich_text>

然后进入到 kernel 的入口函数: entry(0, machtype, tags)

</rich_text><encoded_png char_offset="10438"></encoded_png><encoded_png char_offset="10467"></encoded_png><encoded_png char_offset="10470"></encoded_png><encoded_png char_offset="10598"></encoded_png></node><node name="linux启动分析" prog_lang="custom-colors" readonly="False" tags="" unique_id="16"><rich_text>
</rich_text><rich_text link="webs http://www.cnblogs.com/QLinux/articles/2540304.html" scale="h1">Linux开机启动过程分析</rich_text><rich_text scale="h1">   </rich_text><rich_text>
开机过程指的是从打开计算机电源直到LINUX显示用户登录画面的全过程。分析LINUX开机过程也是深入了解LINUX核心工作原理的一个很好的途径。

</rich_text><rich_text scale="h2">启动第一步－－加载BIOS</rich_text><rich_text>
当 你打开计算机电源，计算机会首先加载BIOS信息，BIOS信息是如此的重要，以至于计算机必须在最开始就找到它。这是因为BIOS中包含了CPU的相关 信息、设备启动顺序信息、硬盘信息、内存信息、时钟信息、PnP特性等等。在此之后，计算机心里就有谱了，知道应该去读取哪个硬件设备了。在BIOS将系 统的控制权交给硬盘第一个扇区之后，就开始由Linux来控制系统了。

</rich_text><rich_text scale="h2">启动第二步－－读取MBR</rich_text><rich_text>
硬 盘上第0磁道第一个扇区被称为MBR，也就是Master Boot  Record，即主引导记录，它的大小是512字节，可里面却存放了预启动信息、分区表信息。可分为两部分：第一部分为引导（PRE-BOOT）区，占了 446个字节；第二部分为分区表（PARTITION  PABLE），共有66个字节，记录硬盘的分区信息。预引导区的作用之一是找到标记为活动（ACTIVE）的分区，并将活动分区的引导区读入内存。
系统找到BIOS所指定的硬盘的MBR后，就会将其复制到0×7c00地址所在的物理内存中。其实被复制到物理内存的内容就是Boot Loader，而具体到你的电脑，那就是lilo或者grub了。

</rich_text><rich_text scale="h2">启动第三步－－Boot Loader</rich_text><rich_text>
Boot  Loader  就是在操作系统内核运行之前运行的一段小程序。通过这段小程序，我们可以初始化硬件设备、建立内存空间的映射图，从而将系统的软硬件环境带到一个合适的状 态，以便为最终调用操作系统内核做好一切准备。通常，BootL oade:是严重地依赖于硬件而实现的，不同体系结构的系统存在着不同的Boot  Loader。
Linux的引导扇区内容是采用汇编语言编写的程序，其源代码在arch/i386/boot中(不同体系的CPU有其各自的boot目录)，有4个程序文件:
◎bootsect.S，引导扇区的主程序，汇编后的代码不超过512字节，即一个扇区的 大 小
◎setup.S， 引导辅助程序
◎edd.S,辅助程序的一部分，用于支持BIOS增强磁盘设备服务
◎video.S,辅助程序的另一部分，用于引导时的屏幕显示
Boot Loader有若干种，其中Grub、Lilo和spfdisk是常见的Loader，这里以Grub为例来讲解吧。
系统读取内存中的grub配置信息（一般为menu.lst或grub.lst），并依照此配置信息来启动不同的操作系统。

</rich_text><rich_text scale="h2">启动第四步－－加载内核</rich_text><rich_text>
根据grub设定的内核映像所在路径，系统读取内存映像，并进行解压缩操作。此时，屏幕一般会输出“Uncompressing Linux”的提示。当解压缩内核完成后，屏幕输出“OK, booting the kernel”。
系统将解压后的内核放置在内存之中，并调用start_kernel()函数来启动一系列的初始化函数并初始化各种设备，完成Linux核心环境的建立。至此，Linux内核已经建立起来了，基于Linux的程序应该可以正常运行了。
start_kenrel() 定义在init/main.c中，它就类似于一般可执行程序中的main()函数，系统在此之前所做的仅仅是一些能让内核程序最低限度执行的初始化操作， 真正的内核初始化过程是从这里才开始。函数start_kerenl()将会调用一系列的初始化函数，用来完成内核本身的各方面设置，目的是最终建立起基 本完整的Linux核心环境。
start_kernel()中主要执行了以下操作:
(1) 在屏幕上打印出当前的内核版本信息。
(2) 执行setup_arch()，对系统结构进行设置。
(3) 执行sched_init()，对系统的调度机制进行初始化。先是对每个可用CPU上的runqueque进行初始化;然后初始化0号进程(其task  struct和系统空M堆栈在startup_32()中己经被分配)为系统idle进程，即系统空闲时占据CPU的进程。
(4)执行parse_early_param()和parsees_args()解析系统启动参数。
(5)执行trap_in itQ，先设置了系统中断向量表。0－19号的陷阱门用于CPU异常处理;然后初始化系统调用向量;最后调用cpu_init()完善对CPU的初始化，用于支持进程调度机制，包括设定标志位寄存器、任务寄存器、初始化程序调试相关寄存器等等。
(6)执行rcu_init()，初始化系统中的Read-Copy Update互斥机制。
(7)执行init_IRQ()函数，初始化用于外设的中断，完成对IDT的最终初始化过程。
(8)执行init_timers(), softirq_init()和time_init()函数，分别初始系统的定时器机制，软中断机制以及系统日期和时间。
(9)执行mem_init()函数，初始化物理内存页面的page数据结构描述符，完成对物理内存管理机制的创建。
(10)执行kmem_cache_init(),完成对通用slab缓冲区管理机制的初始化工作。
(11)执行fork_init()，计算出当前系统的物理内存容量能够允许创建的进程(线程)数量。
(12)执行proc_caches_init() , bufer_init(), unnamed_dev_init() ,vfs_caches_init(), signals_init()等函数对各种管理机制建立起专用的slab缓冲区队列。
(13 )执行proc_root_init()Wl数，对虚拟文件系统/proc进行初始化。
在   start_kenrel()的结尾，内核通过kenrel_thread()创建出第一个系统内核线程(即1号进程)，该线程执行的是内核中的 init()函数，负责的是下一阶段的启动任务。最后调用cpues_idle()函数:进入了系统主循环体口默认将一直执行 default_idle()函数中的指令，即CPU的halt指令，直到就绪队列中存在其他进程需要被调度时才会转向执行其他函数。此时，系统中唯一存 在就绪状态的进程就是由kerne_hread()创建的init进程(内核线程)，所以内核并不进入default_idle()函数，而是转向 init()函数继续启动过程。

</rich_text><rich_text scale="h2">启动第五步－－用户层init依据inittab文件来设定运行等级</rich_text><rich_text>
内核被加载后，第一个运行的程序便是/sbin/init，该文件会读取/etc/inittab文件，并依据此文件来进行初始化工作。
其实/etc/inittab文件最主要的作用就是设定Linux的运行等级，其设定形式是“：id:5:initdefault:”，这就表明Linux需要运行在等级5上。Linux的运行等级设定如下：
0：关机
1：单用户模式
2：无网络支持的多用户模式
3：有网络支持的多用户模式
4：保留，未使用
5：有网络支持有X-Window支持的多用户模式
6：重新引导系统，即重启

</rich_text><rich_text scale="h2">启动第六步－－init进程执行rc.sysinit</rich_text><rich_text>
在 设定了运行等级后，Linux系统执行的第一个用户层文件就是/etc/rc.d/rc.sysinit脚本程序，它做的工作非常多，包括设定PATH、 设定网络配置（/etc/sysconfig/network）、启动swap分区、设定/proc等等。如果你有兴趣，可以到/etc/rc.d中查看 一下rc.sysinit文件。
线程init的最终完成状态是能够使得一般的用户程序可以正常地被执行，从而真正完成可供应用程序运行的系统环境。它主要进行的操作有:
(1) 执行函数do_basic_setup()，它会对外部设备进行全面地初始化。
(2) 构建系统的虚拟文件系统目录树，挂接系统中作为根目录的设备(其具体的文 件系统已经在上一步骤中注册)。
(3)  打开设备/dev/console，并通过函数sys_dup()打开的连接复制两次，使得文件号0,1 ,2  全部指向控制台。这三个文件连接就是通常所说的“标准输入”stdin,“标准输出”stdout和“标准出错信息”stderr这三个标准I/O通道。
(4)   准备好以上一切之后，系统开始进入用户层的初始化阶段。内核通过系统调用execve()加载执T子相应的用户层初始化程序，依次尝试加载程 序&quot;/sbin/initl&quot;,&quot; /etc/init&quot;,&quot;  /bin/init'，和“/bin/sh。只要其中有一个程序加载获得成功，那么系统就将开始用户层的初始化，而不会再回到init()函数段中。至 此，init()函数结束，Linux内核的引导 部分也到此结束。

</rich_text><rich_text scale="h2">启动第七步－－启动内核模块</rich_text><rich_text>
具体是依据/etc/modules.conf文件或/etc/modules.d目录下的文件来装载内核模块。

</rich_text><rich_text scale="h2">启动第八步－－执行不同运行级别的脚本程序</rich_text><rich_text>
根据运行级别的不同，系统会运行rc0.d到rc6.d中的相应的脚本程序，来完成相应的初始化工作和启动相应的服务。

</rich_text><rich_text scale="h2">启动第九步－－执行/etc/rc.d/rc.local</rich_text><rich_text>
你如果打开了此文件，里面有一句话，读过之后，你就会对此命令的作用一目了然：
# This script will be executed *after* all the other init scripts.
# You can put your own initialization stuff in here if you don’t
# want to do the full Sys V style init stuff.
rc.local就是在一切初始化工作后，Linux留给用户进行个性化的地方。你可以把你想设置和启动的东西放到这里。
启动第十步－－执行/bin/login程序，进入登录状态
此时，系统已经进入到了等待用户输入username和password的时候了，你已经可以用自己的帐号登入系统了。


</rich_text></node><node name="linux initrd机制分析" prog_lang="custom-colors" readonly="False" tags="" unique_id="17"><rich_text scale="h2">1．什么是 Initrd</rich_text><rich_text>
initrd 的英文含义是 boot loader  initialized RAM disk，就是由 boot loader 初始化的内存盘。在 linux内核启动前， boot loader  会将存储介质中的 initrd 文件加载到内存，内核启动时会在访问真正的根文件系统前先访问该内存中的 initrd 文件系统。在 boot  loader 配置了 initrd 的情况下，内核启动被分成了两个阶段，第一阶段先执行 initrd  文件系统中的&quot;某个文件&quot;，完成加载驱动模块等任务，第二阶段才会执行真正的根文件系统中的 /sbin/init  进程。这里提到的&quot;某个文件&quot;，Linux2.6  内核会同以前版本内核的不同，所以这里暂时使用了&quot;某个文件&quot;这个称呼，后面会详细讲到。第一阶段启动的目的是为第二阶段的启动扫清一切障爱，最主要的是 加载根文件系统存储介质的驱动模块。我们知道根文件系统可以存储在包括IDE、SCSI、USB在内的多种介质上，如果将这些设备的驱动都编译进内核，可 以想象内核会多么庞大、臃肿。
Initrd 的用途主要有以下四种：
1. linux 发行版的必备部件
linux  发行版必须适应各种不同的硬件架构，将所有的驱动编译进内核是不现实的，initrd 技术是解决该问题的关键技术。Linux  发行版在内核中只编译了基本的硬件驱动，在安装过程中通过检测系统硬件，生成包含安装系统硬件驱动的 initrd，无非是一种即可行又灵活的解决方案。
2. livecd 的必备部件
同 linux 发行版相比，livecd 可能会面对更加复杂的硬件环境，所以也必须使用 initrd。
3. 制作 Linux usb 启动盘必须使用 initrd
usb  设备是启动比较慢的设备，从驱动加载到设备真正可用大概需要几秒钟时间。如果将 usb 驱动编译进内核，内核通常不能成功访问 usb  设备中的文件系统。因为在内核访问 usb 设备时， usb 设备通常没有初始化完毕。所以常规的做法是，在 initrd 中加载 usb  驱动，然后休眠几秒中，等待 usb设备初始化完毕后再挂载 usb 设备中的文件系统。
4. 在 linuxrc 脚本中可以很方便地启用个性化 bootsplash。

</rich_text><rich_text scale="h2">2．Linux2.4内核对 Initrd 的处理流程</rich_text><rich_text>
为 了使读者清晰的了解Linux2.6内核initrd机制的变化，在重点介绍Linux2.6内核initrd之前，先对linux2.4内核的 initrd进行一个简单的介绍。Linux2.4内核的initrd的格式是文件系统镜像文件，本文将其称为image-initrd，以区别后面介绍 的linux2.6内核的cpio格式的initrd。 linux2.4内核对initrd的处理流程如下：
1. boot loader把内核以及/dev/initrd的内容加载到内存，/dev/initrd是由boot loader初始化的设备，存储着initrd。
2. 在内核初始化过程中，内核把 /dev/initrd 设备的内容解压缩并拷贝到 /dev/ram0 设备上。
3. 内核以可读写的方式把 /dev/ram0 设备挂载为原始的根文件系统。
4. 如果 /dev/ram0 被指定为真正的根文件系统，那么内核跳至最后一步正常启动。
5. 执行 initrd 上的 /linuxrc 文件，linuxrc 通常是一个脚本文件，负责加载内核访问根文件系统必须的驱动， 以及加载根文件系统。
6. /linuxrc 执行完毕，真正的根文件系统被挂载。
7. 如果真正的根文件系统存在 /initrd 目录，那么 /dev/ram0 将从 / 移动到 /initrd。否则如果 /initrd 目录不存在， /dev/ram0 将被卸载。
8.  在真正的根文件系统上进行正常启动过程 ，执行 /sbin/init。 linux2.4 内核的 initrd 的执行是作为内核启动的一个中间阶段，也就是说 initrd 的 /linuxrc  执行以后，内核会继续执行初始化代码，我们后面会看到这是 linux2.4 内核同 2.6 内核的 initrd 处理流程的一个显著区别。

</rich_text><rich_text scale="h2">3．Linux2.6 内核对 Initrd 的处理流程</rich_text><rich_text>
linux2.6  内核支持两种格式的 initrd，一种是前面第 3 部分介绍的 linux2.4  内核那种传统格式的文件系统镜像－image-initrd，它的制作方法同 Linux2.4 内核的 initrd 一样，其核心文件就是  /linuxrc。另外一种格式的 initrd 是 cpio 格式的，这种格式的 initrd 从 linux2.5 起开始引入，使用 cpio  工具生成，其核心文件不再是 /linuxrc，而是 /init，本文将这种 initrd 称为 cpio-initrd。尽管 linux2.6  内核对 cpio-initrd和 image-initrd 这两种格式的 initrd 均支持，但对其处理流程有着显著的区别，下面分别介绍  linux2.6 内核对这两种 initrd 的处理流程。

</rich_text><rich_text scale="h3">cpio-initrd 的处理流程</rich_text><rich_text>
1． boot loader 把内核以及 initrd 文件加载到内存的特定位置。
2． 内核判断initrd的文件格式，如果是cpio格式。
3． 将initrd的内容释放到rootfs中。
4． 执行initrd中的/init文件，执行到这一点，内核的工作全部结束，完全交给/init文件处理。

</rich_text><rich_text scale="h3">image-initrd的处理流程</rich_text><rich_text>
1． boot loader把内核以及initrd文件加载到内存的特定位置。
2． 内核判断initrd的文件格式，如果不是cpio格式，将其作为image-initrd处理。
3． 内核将initrd的内容保存在rootfs下的/initrd.image文件中。
4． 内核将/initrd.image的内容读入/dev/ram0设备中，也就是读入了一个内存盘中。
5． 接着内核以可读写的方式把/dev/ram0设备挂载为原始的根文件系统。
6． 如果/dev/ram0被指定为真正的根文件系统，那么内核跳至最后一步正常启动。
7． 执行initrd上的/linuxrc文件，linuxrc通常是一个脚本文件，负责加载内核访问根文件系统必须的驱动， 以及加载根文件系统。
8． /linuxrc执行完毕，常规根文件系统被挂载
9． 如果常规根文件系统存在/initrd目录，那么/dev/ram0将从/移动到/initrd。否则如果/initrd目录不存在， /dev/ram0将被卸载。
10． 在常规根文件系统上进行正常启动过程 ，执行/sbin/init。
通 过上面的流程介绍可知，Linux2.6内核对image-initrd的处理流程同linux2.4内核相比并没有显著的变化，  cpio-initrd的处理流程相比于image-initrd的处理流程却有很大的区别，流程非常简单，在后面的源代码分析中，读者更能体会到处理的 简捷。

</rich_text><rich_text scale="h3">4．cpio-initrd同image-initrd的区别与优势</rich_text><rich_text>
没有找到正式的关于cpio-initrd同image-initrd对比的文献，根据笔者的使用体验以及内核代码的分析，总结出如下三方面的区别，这些区别也正是cpio-initrd的优势所在：

</rich_text><rich_text scale="h3">cpio-initrd的制作方法更加简单</rich_text><rich_text>
cpio-initrd的制作非常简单，通过两个命令就可以完成整个制作过程
#假设当前目录位于准备好的initrd文件系统的根目录下
bash# find . | cpio -c -o &gt; ../initrd.img
bash# gzip ../initrd.img而传统initrd的制作过程比较繁琐，需要如下六个步骤
#假设当前目录位于准备好的initrd文件系统的根目录下
bash# dd if=/dev/zero of=../initrd.img bs=512k count=5
bash# mkfs.ext2 -F -m0 ../initrd.img
bash# mount -t ext2 -o loop ../initrd.img  /mnt
bash# cp -r  * /mnt
bash# umount /mnt
bash# gzip -9 ../initrd.img
本文不对上面命令的含义作细节的解释，因为本文主要介绍的是linux内核对initrd的处理，对上面命令不理解的读者可以参考相关文档。

</rich_text><rich_text scale="h3">cpio-initrd的内核处理流程更加简化</rich_text><rich_text>
通过上面initrd处理流程的介绍，cpio-initrd的处理流程显得格外简单，通过对比可知cpio-initrd的处理流程在如下两个方面得到了简化：
1． cpio-initrd并没有使用额外的ramdisk,而是将其内容输入到rootfs中，其实rootfs本身也是一个基于内存的文件系统。这样就省掉了ramdisk的挂载、卸载等步骤。
2． cpio-initrd启动完/init进程，内核的任务就结束了，剩下的工作完全交给/init处理；而对于image-initrd，内核在执行完 /linuxrc进程后，还要进行一些收尾工作，并且要负责执行真正的根文件系统的/sbin/init。通过图1可以更加清晰的看出处理流程的区别：
图1内核对cpio-initrd和image-initrd处理流程示意图
</rich_text><rich_text justification="left"></rich_text><rich_text>

</rich_text><rich_text scale="h3">cpio-initrd的职责更加重要</rich_text><rich_text>
如 图1所示，cpio-initrd不再象image-initrd那样作为linux内核启动的一个中间步骤，而是作为内核启动的终点，内核将控制权交给 cpio-initrd的/init文件后，内核的任务就结束了，所以在/init文件中，我们可以做更多的工作，而不比担心同内核后续处理的衔接问题。 当然目前linux发行版的cpio-initrd的/init文件的内容还没有本质的改变，但是相信initrd职责的增加一定是一个趋势。

</rich_text><rich_text scale="h2">5．linux2.6内核initrd处理的源代码分析</rich_text><rich_text>
上 面简要介绍了Linux2.4内核和2.6内核的initrd的处理流程，为了使读者对于Linux2.6内核的initrd的处理有一个更加深入的认 识，下面将对Linuxe2.6内核初始化部分同initrd密切相关的代码给予一个比较细致的分析，为了讲述方便，进一步明确几个代码分析中使用的概 念：
rootfs: 一个基于内存的文件系统，是linux在初始化时加载的第一个文件系统,关于它的进一步介绍可以参考文献[4]。
initramfs:    initramfs同本文的主题关系不是很大，但是代码中涉及到了initramfs，为了更好的理解代码，这里对其进行简单的介绍。Initramfs 是在 kernel  2.5中引入的技术，实际上它的含义就是：在内核镜像中附加一个cpio包，这个cpio包中包含了一个小型的文件系统，当内核启动时，内核将这个 cpio包解开，并且将其中包含的文件系统释放到rootfs中，内核中的一部分初始化代码会放到这个文件系统中，作为用户层进程来执行。这样带来的明显 的好处是精简了内核的初始化代码，而且使得内核的初始化过程更容易定制。Linux 2.6.12内核的  initramfs还没有什么实质性的东西，一个包含完整功能的initramfs的实现可能还需要一个缓慢的过程。对于initramfs的进一步了解 可以参考文献[1][2][3]。
cpio-initrd: 前面已经定义过，指linux2.6内核使用的cpio格式的initrd。
image-initrd: 前面已经定义过，专指传统的文件镜像格式的initrd。
realfs: 用户最终使用的真正的文件系统。
内 核的初始化代码位于 init/main.c 中的 static int init(void *  unused)函数中。同initrd的处理相关部分函数调用层次如下图，笔者按照这个层次对每一个函数都给予了比较详细的分析，为了更好的说明，下面列 出的代码中删除了同本文主题不相关的部分：
图2 initrd相关代码的调用层次关系图init函数是内核所有初始化代码的入口，

</rich_text><rich_text justification="left"></rich_text><rich_text>
代码如下，其中只保留了同initrd相关部分的代码。
static int init(void * unused){
[1]	populate_rootfs();
	
[2]	if (sys_access((const char __user *) &quot;/init&quot;, 0) == 0)
		execute_command = &quot;/init&quot;;
	else
		prepare_namespace();        //不存在/init, 才调用prepare_namespace()
[3]	if (sys_open((const char __user *) &quot;/dev/console&quot;, O_RDWR, 0) &lt; 0)
		printk(KERN_WARNING &quot;Warning: unable to open an initial console.\n&quot;);
	(void) sys_dup(0);
	(void) sys_dup(0);
[4]	if (execute_command)
		run_init_process(execute_command);
	run_init_process(&quot;/sbin/init&quot;);
	run_init_process(&quot;/etc/init&quot;);
	run_init_process(&quot;/bin/init&quot;);
	run_init_process(&quot;/bin/sh&quot;);
	panic(&quot;No init found.  Try passing init= option to kernel.&quot;);
}代码[1]：populate_rootfs函数负责加载initramfs和cpio-initrd，对于populate_rootfs函数的细节后面会讲到。
代码[2]：如果rootfs的根目录下中包含/init进程，则赋予execute_command,在init函数的末尾会被执行。否则执行prepare_namespace函数，initrd是在该函数中被加载的。
代码[3]：将控制台设置为标准输入，后续的两个sys_dup(0),则复制标准输入为标准输出和标准错误输出。
代 码[4]：如果rootfs中存在init进程，就将后续的处理工作交给该init进程。其实这段代码的含义是如果加载了cpio-initrd则交给 cpio-initrd中的/init处理，否则会执行realfs中的init。读者可能会问：如果加载了cpio-initrd,  那么realfs中的init进程不是没有机会运行了吗？确实，如果加载了cpio-initrd,那么内核就不负责执行realfs的init进程了， 而是将这个执行任务交给了cpio-initrd的init进程。解开fedora  core4的initrd文件，会发现根目录的下的init文件是一个脚本，在该脚本的最后一行有这样一段代码： 
………..
switchroot --movedev /sysroot就是switchroot语句负责加载realfs,以及执行realfs的init进程。

</rich_text><rich_text scale="h3">对cpio-initrd的处理</rich_text><rich_text>
对cpio-initrd的处理位于populate_rootfs函数中。
void __init populate_rootfs(void){
[1]  char *err = unpack_to_rootfs(__initramfs_start,
			 __initramfs_end - __initramfs_start, 0);
[2]	if (initrd_start) {
[3]		err = unpack_to_rootfs((char *)initrd_start,
			initrd_end - initrd_start, 1);
	
[4]		if (!err) {
			printk(&quot; it is\n&quot;);
			unpack_to_rootfs((char *)initrd_start,
				initrd_end - initrd_start, 0);
			free_initrd_mem(initrd_start, initrd_end);
			return;
		}
[5]		fd = sys_open(&quot;/initrd.image&quot;, O_WRONLY|O_CREAT, 700);
		if (fd &gt;= 0) {
			sys_write(fd, (char *)initrd_start,
					initrd_end - initrd_start);
			sys_close(fd);
			free_initrd_mem(initrd_start, initrd_end);
		}
}代码[1]：加载initramfs，  initramfs位于地址__initramfs_start处，是内核在编译过程中生成的，initramfs的是作为内核的一部分而存在的，不是  boot loader加载的。前面提到了现在initramfs没有任何实质内容。
代码[2]：判断是否加载了initrd。无论哪种格式的initrd，都会被boot loader加载到地址initrd_start处。
代码[3]：判断加载的是不是cpio-initrd。实际上 unpack_to_rootfs有两个功能一个是释放cpio包，另一个就是判断是不是cpio包， 这是通过最后一个参数来区分的， 0：释放 1：查看。
代码[4]：如果是cpio-initrd则将其内容释放出来到rootfs中。
代码[5]：如果不是cpio-initrd,则认为是一个image-initrd，将其内容保存到/initrd.image中。在后面的image-initrd的处理代码中会读取/initrd.image。
对image-initrd的处理 在prepare_namespace函数里，包含了对image-initrd进行处理的代码，相关代码如下：
void __init prepare_namespace(void){
[1]	if (initrd_load())
		goto out;
out:
		umount_devfs(&quot;/dev&quot;);
[2]		sys_mount(&quot;.&quot;, &quot;/&quot;, NULL, MS_MOVE, NULL);
		sys_chroot(&quot;.&quot;);
		security_sb_post_mountroot();
		mount_devfs_fs ();
}代码[1]：执行initrd_load函数，将initrd载入，如果载入成功的话initrd_load函数会将realfs的根设置为当前目录。
代码[2]：将当前目录即realfs的根mount为Linux VFS的根。initrd_load函数执行完后，将真正的文件系统的根设置为当前目录。
initrd_load函数负责载入image-initrd，代码如下：
int __init initrd_load(void)
{
[1]	if (mount_initrd) {
		create_dev(&quot;/dev/ram&quot;, Root_RAM0, NULL);
[2]		if (rd_load_image(&quot;/initrd.image&quot;) &amp;&amp; ROOT_DEV != Root_RAM0) {
			sys_unlink(&quot;/initrd.image&quot;);
			handle_initrd();
			return 1;
		}
	}
	sys_unlink(&quot;/initrd.image&quot;);
	return 0;
}代码[1]：如果加载initrd则建立一个ram0设备 /dev/ram。
代码 [2]：/initrd.image文件保存的就是image-initrd，rd_load_image函数执行具体的加载操作，将image- nitrd的文件内容释放到ram0里。判断ROOT_DEV!=Root_RAM0的含义是，如果你在grub或者lilo里配置了  root=/dev/ram0 ,则实际上真正的根设备就是initrd了，所以就不把它作为initrd处理 ，而是作为realfs处理。
handle_initrd()函数负责对initrd进行具体的处理，代码如下：
	static void __init handle_initrd(void){
[1]	real_root_dev = new_encode_dev(ROOT_DEV);
[2]	create_dev(&quot;/dev/root.old&quot;, Root_RAM0, NULL);
	mount_block_root(&quot;/dev/root.old&quot;, root_mountflags &amp; ~MS_RDONLY);
[3]	sys_mkdir(&quot;/old&quot;, 0700);
	root_fd = sys_open(&quot;/&quot;, 0, 0);
	old_fd = sys_open(&quot;/old&quot;, 0, 0);
	/* move initrd over / and chdir/chroot in initrd root */
[4]	sys_chdir(&quot;/root&quot;);
	sys_mount(&quot;.&quot;, &quot;/&quot;, NULL, MS_MOVE, NULL);
	sys_chroot(&quot;.&quot;);
	mount_devfs_fs ();
[5]	pid = kernel_thread(do_linuxrc, &quot;/linuxrc&quot;, SIGCHLD);
	if (pid &gt; 0) {
		while (pid != sys_wait4(-1, &amp;i, 0, NULL))
			yield();
	}
	/* move initrd to rootfs' /old */
	sys_fchdir(old_fd);
	sys_mount(&quot;/&quot;, &quot;.&quot;, NULL, MS_MOVE, NULL);
	/* switch root and cwd back to / of rootfs */
[6]	sys_fchdir(root_fd);
	sys_chroot(&quot;.&quot;);
	sys_close(old_fd);
	sys_close(root_fd);
	umount_devfs(&quot;/old/dev&quot;);
[7]	if (new_decode_dev(real_root_dev) == Root_RAM0) {
		sys_chdir(&quot;/old&quot;);
		return;
	}
[8]	ROOT_DEV = new_decode_dev(real_root_dev);
	mount_root();
[9]	printk(KERN_NOTICE &quot;Trying to move old root to /initrd ... &quot;);
	error = sys_mount(&quot;/old&quot;, &quot;/root/initrd&quot;, NULL, MS_MOVE, NULL);
	if (!error)
		printk(&quot;okay\n&quot;);
	else {
		int fd = sys_open(&quot;/dev/root.old&quot;, O_RDWR, 0);
		printk(&quot;failed\n&quot;);
		printk(KERN_NOTICE &quot;Unmounting old root\n&quot;);
		sys_umount(&quot;/old&quot;, MNT_DETACH);
		printk(KERN_NOTICE &quot;Trying to free ramdisk memory ... &quot;);
		if (fd &lt; 0) {
			error = fd;
		} else {
			error = sys_ioctl(fd, BLKFLSBUF, 0);
			sys_close(fd);
		}
		printk(!error ? &quot;okay\n&quot; : &quot;failed\n&quot;);
	}
	handle_initrd函数的主要功能是执行initrd的linuxrc文件，并且将realfs的根目录设置为当前目录。
代码[1]：real_root_dev，是一个全局变量保存的是realfs的设备号。
代码[2]：调用mount_block_root函数将initrd文件系统挂载到了VFS的/root下。
代码[3]：提取rootfs的根的文件描述符并将其保存到root_fd。它的作用就是为了在chroot到initrd的文件系统，处理完initrd之后要，还能够返回rootfs。返回的代码参考代码[7]。
代码[4]：chroot进入initrd的文件系统。前面initrd已挂载到了rootfs的/root目录。
代码[5]：执行initrd的linuxrc文件，等待其结束。
代码[6]：initrd处理完之后，重新chroot进入rootfs。
代码[7]：如果real_root_dev在 linuxrc中重新设成Root_RAM0，则initrd就是最终的realfs了，改变当前目录到initrd中，不作后续处理直接返回。
代码[8]：在linuxrc执行完后，realfs设备已经确定，调用mount_root函数将realfs挂载到root_fs的 /root目录下，并将当前目录设置为/root。
代码[9]：后面的代码主要是做一些收尾的工作，将initrd的内存盘释放。
到此代码分析完毕。

</rich_text><rich_text scale="h2">6．结束语</rich_text><rich_text>
通过本文前半部分对cpio-initrd和imag-initrd的阐述与对比以及后半部分的代码分析，我相信读者对Linux 2.6内核的initrd技术有了一个较为全面的了解。在本文的最后，给出两点最重要的结论：
1． 尽管Linux2.6既支持cpio-initrd，也支持image-initrd，但是cpio-initrd有着更大的优势，在使用中我们应该优先考虑使用cpio格式的initrd。
2． cpio-initrd相对于image-initrd承担了更多的初始化责任，这种变化也可以看作是内核代码的用户层化的一种体现，我们在其它的诸如 FUSE等项目中也看到了将内核功能扩展到用户层实现的尝试。精简内核代码，将部分功能移植到用户层必然是linux内核发展的一个趋势。


</rich_text><rich_text justification="left"></rich_text><rich_text>


</rich_text><rich_text foreground="#ffff00000000" scale="h1">android分析(A31s __initramfs -&gt; 0xc0804844, 200 initrd-&gt; 0xc1000000, 189dab)</rich_text><rich_text>
env.cfg:
    #kernel command arguments
    console=ttyS0,115200
    nand_root=/dev/system
    mmc_root=/dev/mmcblk0p7
    init=/init
    loglevel=8
    mac=
    specialstr=
    #set kernel cmdline if boot.img or recovery.img has no cmdline we will use this
    setargs_nand=setenv bootargs console=${console} root=${nand_root} init=${init} loglevel=${loglevel} partitions=${partitions} mac_addr=${mac} specialstr=${specialstr}
    setargs_mmc=setenv bootargs console=${console} root=${mmc_root} init=${init} loglevel=${loglevel} partitions=${partitions} mac_addr=${mac} specialstr=${specialstr}
    #nand command syntax: sunxi_flash read address partition_name read_bytes
    #0x40007800 = 0x40008000(kernel entry) - 0x800(boot.img header 2k)
    boot_normal=sunxi_flash read 40007800 boot;boota 40007800
    boot_recovery=sunxi_flash read 40007800 recovery;boota 40007800
    boot_fastboot=fastboot
    #recovery key
    recovery_key_value_max=0x13
    recovery_key_value_min=0x10
    #fastboot key
    fastboot_key_value_max=0x8
    fastboot_key_value_min=0x2

    #uboot system env config
    bootdelay=1
    #default bootcmd, will change at runtime according to key press
    bootcmd=run setargs_nand boot_normal#default nand boot

u-boot:
    int do_boota (cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
    {
	    ulong	addr;
	    unsigned kaddr, raddr;

	    if (argc &lt; 2)
		    return cmd_usage(cmdtp);

	    tick_printf(__FILE__, __LINE__);

	    addr = simple_strtoul(argv[1], NULL, 16);

	    struct fastboot_boot_img_hdr *fb_hdr = (struct fastboot_boot_img_hdr *)addr;
	    image_header_t *hdr =(image_header_t *)(addr + CFG_FASTBOOT_MKBOOTIMAGE_PAGE_SIZE);
    #ifdef DEBUG
	    printf(&quot;---------------------\n&quot;);
	    printf(&quot;kernel size: 0x%x \n&quot;, fb_hdr-&gt;kernel_size);
	    printf(&quot;kernel addr: 0x%x \n&quot;, fb_hdr-&gt;kernel_addr);

	    printf(&quot;ramdisk size: 0x%x \n&quot;, fb_hdr-&gt;ramdisk_size);
	    printf(&quot;ramdisk addr: 0x%x \n&quot;, fb_hdr-&gt;ramdisk_addr);

	    printf(&quot;second size: 0x%x \n&quot;, fb_hdr-&gt;second_size);
	    printf(&quot;second addr: 0x%x \n&quot;, fb_hdr-&gt;second_addr);

	    printf(&quot;second size: 0x%x \n&quot;, fb_hdr-&gt;second_size);
	    printf(&quot;second addr: 0x%x \n&quot;, fb_hdr-&gt;second_addr);

	    printf(&quot;name: %s\n&quot;, fb_hdr-&gt;name);
	    printf(&quot;cmdline: %s\n&quot;, fb_hdr-&gt;cmdline);
    #endif
	    /* save the image header somewhere */
	    memcpy(boot_hdr, (void*) addr, sizeof(*hdr));
	    if (memcmp(fb_hdr-&gt;magic, FASTBOOT_BOOT_MAGIC, 8)) {
		    puts(&quot;boota: bad boot image magic, maybe not a boot.img?\n&quot;);
		    return 1;
	    }

	    kaddr = addr + fb_hdr-&gt;page_size;
	    raddr = kaddr + ALIGN(fb_hdr-&gt;kernel_size, fb_hdr-&gt;page_size);
    #ifdef DEBUG
	    printf(&quot;moving kernel from %x to: %x, size 0x%x\n&quot;, kaddr, fb_hdr-&gt;kernel_addr, fb_hdr-&gt;kernel_size);
	    printf(&quot;moving ramdisk from %x to: %x, size 0x%x\n&quot;, raddr, fb_hdr-&gt;ramdisk_addr, fb_hdr-&gt;ramdisk_size);
    #endif
	    memmove((void*) fb_hdr-&gt;kernel_addr, (const void *)kaddr, fb_hdr-&gt;kernel_size);
	    //memmove((void*) fb_hdr-&gt;ramdisk_addr, (const void *)raddr, fb_hdr-&gt;ramdisk_size);
	    tick_printf(__FILE__, __LINE__);
	    memcpy((void*) fb_hdr-&gt;ramdisk_addr, (const void *)raddr, fb_hdr-&gt;ramdisk_size);

	    tick_printf(__FILE__, __LINE__);

	    do_boota_linux(fb_hdr);

	    puts(&quot;Boot linux failed, control return to monitor\n&quot;);

	    return 0;
    }

    /* Boot android style linux kernel and ramdisk */
    int do_boota_linux (struct fastboot_boot_img_hdr *hdr)
    {
	    ulong initrd_start, initrd_end;
	    void (*kernel_entry)(int zero, int arch, uint params);
	    bd_t *bd = gd-&gt;bd;
    #ifdef DEBUG
	    printf(&quot;do_boota_linux storage_type = %d\n&quot;, storage_type);
    #endif
	    kernel_entry = (void (*)(int, int, uint))(hdr-&gt;kernel_addr);

    #ifdef CONFIG_CMDLINE_TAG
	    char *commandline = getenv (&quot;bootargs&quot;);
    #endif

	    initrd_start = hdr-&gt;ramdisk_addr;
	    initrd_end = initrd_start + hdr-&gt;ramdisk_size;

    #if defined (CONFIG_SETUP_MEMORY_TAGS) || \
        defined (CONFIG_CMDLINE_TAG) || \
        defined (CONFIG_INITRD_TAG) || \
        defined (CONFIG_SERIAL_TAG) || \
        defined (CONFIG_REVISION_TAG)
	    setup_start_tag (bd);
    #ifdef CONFIG_SERIAL_TAG
	    setup_serial_tag (&amp;params);
    #endif
    #ifdef CONFIG_REVISION_TAG
	    setup_revision_tag (&amp;params);
    #endif
    #ifdef CONFIG_SETUP_MEMORY_TAGS
	    setup_memory_tags (bd);
    #endif
    #ifdef CONFIG_CMDLINE_TAG
	    if(strlen((const char *)hdr-&gt;cmdline)) {
		    setup_commandline_tag (bd, (char *)hdr-&gt;cmdline);
	    } else {
		    setup_commandline_tag (bd, commandline);
	    }
    #endif
    #ifdef CONFIG_INITRD_TAG
	    if (hdr-&gt;ramdisk_size)
		    setup_initrd_tag (bd, initrd_start, initrd_end);
    #endif
    #if defined (CONFIG_VFD) || defined (CONFIG_LCD)
	    setup_videolfb_tag ((gd_t *) gd);
    #endif
	    setup_end_tag (bd);
    #endif
	    sunxi_flash_exit();
	    /* we assume that the kernel is in place */
	    announce_and_cleanup();
	    //sr32(SUNXI_CCM_APB1_GATING, 16, 1, 0);

	    kernel_entry(0, bd-&gt;bi_arch_number, bd-&gt;bi_boot_params);
	    /* does not return */

	    return 1;
    }

#define pure_initcall(fn)                   __define_initcall(&quot;0&quot;,fn,0)  
#define core_initcall(fn)                   __define_initcall(&quot;1&quot;,fn,1)  
#define core_initcall_sync(fn)          __define_initcall(&quot;1s&quot;,fn,1s)  
#define postcore_initcall(fn)            __define_initcall(&quot;2&quot;,fn,2)  
#define postcore_initcall_sync(fn)   __define_initcall(&quot;2s&quot;,fn,2s)  
#define arch_initcall(fn)                   __define_initcall(&quot;3&quot;,fn,3)  
#define arch_initcall_sync(fn)          __define_initcall(&quot;3s&quot;,fn,3s)  
#define subsys_initcall(fn)               __define_initcall(&quot;4&quot;,fn,4)  
#define subsys_initcall_sync(fn)      __define_initcall(&quot;4s&quot;,fn,4s)  
#define fs_initcall(fn)                       __define_initcall(&quot;5&quot;,fn,5)  
#define fs_initcall_sync(fn)              __define_initcall(&quot;5s&quot;,fn,5s)  
#define rootfs_initcall(fn)                 __define_initcall(&quot;rootfs&quot;,fn,rootfs)  
#define device_initcall(fn)               __define_initcall(&quot;6&quot;,fn,6)  
#define device_initcall_sync(fn)      __define_initcall(&quot;6s&quot;,fn,6s)  
#define late_initcall(fn)                   __define_initcall(&quot;7&quot;,fn,7)  
#define late_initcall_sync(fn)          __define_initcall(&quot;7s&quot;,fn,7s)
   
#define __define_initcall(level,fn,id) \  
         static initcall_t __initcall_##fn##id __used \  
         __attribute__((__section__(&quot;.initcall&quot; level &quot;.init&quot;))) = fn  

#define INITCALLS                                                   \  
            *(.initcallearly.init)                                  \  
            VMLINUX_SYMBOL(__early_initcall_end) = .;               \  
            *(.initcall0.init)                                      \  
            *(.initcall0s.init)                                     \  
            *(.initcall1.init)                                      \  
            *(.initcall1s.init)                                     \  
            *(.initcall2.init)                                      \  
            *(.initcall2s.init)                                     \  
             *(.initcall3.init)                                      \  
             *(.initcall3s.init)                                     \  
             *(.initcall4.init)                                      \  
             *(.initcall4s.init)                                     \  
             *(.initcall5.init)                                      \  
             *(.initcall5s.init)                                     \  
             *(.initcallrootfs.init)                                 \  
             *(.initcall6.init)                                      \  
             *(.initcall6s.init)                                     \  
             *(.initcall7.init)                                      \  
             *(.initcall7s.init)  

extern initcall_t __initcall_start[], __initcall_end[], __early_initcall_end[];

__initcall_start和__initcall_end以及INITCALLS中定义的SECTION都是在arch/xxx/kernel/vmlinux.lds.S中放在.init段的。
SECTIONS  
{  
        .init : {  
                __initcall_start = .;  
                        INITCALLS  
                __initcall_end = .;  
        }  
}  
         
static void __init do_initcalls(void)
{
	initcall_t *fn;

	for (fn = __early_initcall_end; fn &lt; __initcall_end; fn++)
		do_one_initcall(*fn);
}
    
static void __init do_basic_setup(void)
{
	cpuset_init_smp();
	usermodehelper_init();
	shmem_init();
	driver_init();
	init_irq_proc();
	do_ctors();
	usermodehelper_enable();
	do_initcalls();
}

kernel启动:
    start_kernel() 
    -&gt; rest_init()
         -&gt; kernel_thread(kernel_init, NULL, CLONE_FS | CLONE_SIGHAND);
              static int __init kernel_init(void * unused)
              -&gt; do_basic_setup()
                -&gt; do_initcalls()
                    -&gt;  populate_rootfs
              ...
              -&gt; init_post()
                -&gt; run_init_process(ramdisk_execute_command);           
            
    static int __init populate_rootfs(void)
    {
        ....
    }
    rootfs_initcall(populate_rootfs);
   -&gt;unpack_to_rootfs(__initramfs_start, __initramfs_size);
   -&gt;unpack_to_rootfs((char *)initrd_start, initrd_end - initrd_start);
    static char * __init unpack_to_rootfs(char *buf, unsigned len)
    {
	    int written, res;
	    decompress_fn decompress;
	    const char *compress_name;
	    static __initdata char msg_buf[64];

	    header_buf = kmalloc(110, GFP_KERNEL);
	    symlink_buf = kmalloc(PATH_MAX + N_ALIGN(PATH_MAX) + 1, GFP_KERNEL);
	    name_buf = kmalloc(N_ALIGN(PATH_MAX), GFP_KERNEL);

	    if (!header_buf || !symlink_buf || !name_buf)
		    panic(&quot;can't allocate buffers&quot;);

	    state = Start;
	    this_header = 0;
	    message = NULL;
	    while (!message &amp;&amp; len) {
		    loff_t saved_offset = this_header;
		    if (*buf == '0' &amp;&amp; !(this_header &amp; 3)) {
			    state = Start;
			    written = write_buffer(buf, len);
			    buf += written;
			    len -= written;
			    continue;
		    }
		    if (!*buf) {
			    buf++;
			    len--;
			    this_header++;
			    continue;
		    }
		    this_header = 0;
		    //查找匹配的decompress方法
		    decompress = decompress_method(buf, len, &amp;compress_name);   
		    if (decompress) {
		        //解压文件在当前目录下
			    res = decompress(buf, len, NULL, flush_buffer, NULL,
				       &amp;my_inptr, error);
			    if (res)
				    error(&quot;decompressor failed&quot;);
		    } else if (compress_name) {
			    if (!message) {
				    snprintf(msg_buf, sizeof msg_buf,
					     &quot;compression method %s not configured&quot;,
					     compress_name);
				    message = msg_buf;
			    }
		    } else
			    error(&quot;junk in compressed archive&quot;);
		    if (state != Reset)
			    error(&quot;junk in compressed archive&quot;);
		    this_header = saved_offset + my_inptr;
		    buf += my_inptr;
		    len -= my_inptr;
	    }
	    dir_utime();
	    kfree(name_buf);
	    kfree(symlink_buf);
	    kfree(header_buf);
	    return message;
    }

    static const struct compress_format {
	    unsigned char magic[2];
	    const char *name;
	    decompress_fn decompressor;
    } compressed_formats[] = {
	    { {037, 0213}, &quot;gzip&quot;, gunzip },
	    { {037, 0236}, &quot;gzip&quot;, gunzip },
	    { {0x42, 0x5a}, &quot;bzip2&quot;, bunzip2 },
	    { {0x5d, 0x00}, &quot;lzma&quot;, unlzma },
	    { {0xfd, 0x37}, &quot;xz&quot;, unxz },
	    { {0x89, 0x4c}, &quot;lzo&quot;, unlzo },
	    { {0, 0}, NULL, NULL }
    };

    decompress_fn decompress_method(const unsigned char *inbuf, int len,
				    const char **name)
    {
	    const struct compress_format *cf;

	    if (len &lt; 2)
		    return NULL;	/* Need at least this much... */

	    for (cf = compressed_formats; cf-&gt;name; cf++) {
		    if (!memcmp(inbuf, cf-&gt;magic, 2))
			    break;

	    }
	    if (name)
		    *name = cf-&gt;name;
	    return cf-&gt;decompressor;
    }

1). start_kernel(void) --&gt; setup_arch(&amp;command_line) --&gt; parse_tags(tags)
        /*
         * Scan the tag table for this tag, and call its parse function.
         * The tag table is built by the linker from all the __tagtable
         * declarations.
         */
        static int __init parse_tag(const struct tag *tag)
        {
	        extern struct tagtable __tagtable_begin, __tagtable_end;
	        struct tagtable *t;

	        for (t = &amp;__tagtable_begin; t &lt; &amp;__tagtable_end; t++)
		        if (tag-&gt;hdr.tag == t-&gt;tag) {
			        t-&gt;parse(tag);
			        break;
		        }

	        return t &lt; &amp;__tagtable_end;
        }

        /*
         * Parse all tags in the list, checking both the global and architecture
         * specific tag tables.
         */
        static void __init parse_tags(const struct tag *t)
        {
	        for (; t-&gt;hdr.size; t = tag_next(t))
		        if (!parse_tag(t))
			        printk(KERN_WARNING
				        &quot;Ignoring unrecognised tag 0x%08x\n&quot;,
				        t-&gt;hdr.tag);
        }

    parse_tags根据u-boot传过来的tag list解析,调用下面几个函数:
    static int __init parse_tag_mem32(const struct tag *tag)
    static int __init parse_tag_cmdline(const struct tag *tag)//拷贝commandline
    {
    strlcpy(default_command_line,tag-&gt;u.cmdline.cmdline, COMMAND_LINE_SIZE);
           printk(tag-&gt;u.cmdline.cmdline);
           return 0;
    }
    static int __init parse_tag_initrd2(const struct tag *tag)
    {
           phys_initrd_start = tag-&gt;u.initrd.start;
           phys_initrd_size = tag-&gt;u.initrd.size;
           return 0;
    }
    
2). setup_arch(&amp;command_line) --&gt;parse_early_param() --&gt;parse_early_options(tmp_cmdline) 
    解析commandline中的2个参数&quot;initrd=&quot; &quot;mem=&quot;
    void __init parse_early_options(char *cmdline)
    {
    	parse_args(&quot;early options&quot;, cmdline, NULL, 0, do_early_param);
    }

    /* Check for early params. */
    static int __init do_early_param(char *param, char *val)
    {
	    const struct obs_kernel_param *p;

	    for (p = __setup_start; p &lt; __setup_end; p++) {
		    if ((p-&gt;early &amp;&amp; parameq(param, p-&gt;str)) ||
		        (strcmp(param, &quot;console&quot;) == 0 &amp;&amp;
		         strcmp(p-&gt;str, &quot;earlycon&quot;) == 0)
		    ) {
			    if (p-&gt;setup_func(val) != 0)
				    printk(KERN_WARNING
				           &quot;Malformed early option '%s'\n&quot;, param);
		    }
	    }
	    /* We accept everything at this stage. */
	    return 0;
    }
        
3). start_kernel(void) --&gt; setup_arch(&amp;command_line) --&gt; arm_memblock_init(&amp;meminfo, mdesc)
    根据 phys_initrd_start  phys_initrd_size 设置全局变量initrd_start initrd_end 
    initrd_start的赋值是在arch/arm/mm/init.c   
    void __init arm_memblock_init(struct meminfo *mi, struct machine_desc *mdesc)
    {
	    int i;

	    for (i = 0; i &lt; mi-&gt;nr_banks; i++)
		    memblock_add(mi-&gt;bank[i].start, mi-&gt;bank[i].size);

	    /* Register the kernel text, kernel data and initrd with memblock. */
    #ifdef CONFIG_XIP_KERNEL
	    memblock_reserve(__pa(_sdata), _end - _sdata);
    #else
	    memblock_reserve(__pa(_stext), _end - _stext);
    #endif
    #ifdef CONFIG_BLK_DEV_INITRD
	    if (phys_initrd_size &amp;&amp;
	        !memblock_is_region_memory(phys_initrd_start, phys_initrd_size)) {
		    pr_err(&quot;INITRD: 0x%08lx+0x%08lx is not a memory region - disabling initrd\n&quot;,
		           phys_initrd_start, phys_initrd_size);
		    phys_initrd_start = phys_initrd_size = 0;
	    }
	    if (phys_initrd_size &amp;&amp;
	        memblock_is_region_reserved(phys_initrd_start, phys_initrd_size)) {
		    pr_err(&quot;INITRD: 0x%08lx+0x%08lx overlaps in-use memory region - disabling initrd\n&quot;,
		           phys_initrd_start, phys_initrd_size);
		    phys_initrd_start = phys_initrd_size = 0;
	    }
	    if (phys_initrd_size) {
		    memblock_reserve(phys_initrd_start, phys_initrd_size);

		    /* Now convert initrd to virtual addresses */
		    initrd_start = __phys_to_virt(phys_initrd_start);           //0x41000000转为0xc1000000
		    initrd_end = initrd_start + phys_initrd_size;
	    }
    #endif

	    arm_mm_memblock_reserve();
	    arm_dt_memblock_reserve();

	    /* reserve any platform specific memblock areas */
	    if (mdesc-&gt;reserve)
		    mdesc-&gt;reserve();

	    arm_memblock_steal_permitted = false;
	    memblock_allow_resize();
	    memblock_dump_all();
    }

    void __init bootmem_init(void)
    {
	    unsigned long min, max_low, max_high;

	    max_low = max_high = 0;

	    find_limits(&amp;min, &amp;max_low, &amp;max_high);

	    arm_bootmem_init(min, max_low);

	    /*
	     * Sparsemem tries to allocate bootmem in memory_present(),
	     * so must be done after the fixed reservations
	     */
	    arm_memory_present();

	    /*
	     * sparse_init() needs the bootmem allocator up and running.
	     */
	    sparse_init();

	    /*
	     * Now free the memory - free_area_init_node needs
	     * the sparse mem_map arrays initialized by sparse_init()
	     * for memmap_init_zone(), otherwise all PFNs are invalid.
	     */
	    arm_bootmem_free(min, max_low, max_high);

	    /*
	     * This doesn't seem to be used by the Linux memory manager any
	     * more, but is used by ll_rw_block.  If we can get rid of it, we
	     * also get rid of some of the stuff above as well.
	     *
	     * Note: max_low_pfn and max_pfn reflect the number of _pages_ in
	     * the system, not the maximum PFN.
	     */
	    max_low_pfn = max_low - PHYS_PFN_OFFSET;
	    max_pfn = max_high - PHYS_PFN_OFFSET;
    }
   
4). start_kernel(void)--&gt;parse_early_param()--&gt;
	parse_args(&quot;Booting kernel&quot;, static_command_line, __start___param,
		   __stop___param - __start___param,
		   &amp;unknown_bootoption);
    
    解析commandline的其余参数&quot;root=&quot; &quot;rootfstype=&quot; &quot;init=&quot; &quot;ro&quot; &quot;rw&quot; &quot;console=&quot;等
    static int __init root_dev_setup(char *line)
    {
           strlcpy(saved_root_name, line, sizeof(saved_root_name));
           return 1;
    }
    __setup(&quot;root=&quot;, root_dev_setup);
    
    
</rich_text><rich_text foreground="#00000000ffff" scale="h1">__setup与early_param</rich_text><rich_text>
#define __setup_param(str, unique_id, fn, early)            /
    static char __setup_str_##unique_id[] __initdata = str;    /
    static struct obs_kernel_param __setup_##unique_id    /
        __attribute_used__                /
        __attribute__((__section__(&quot;.init.setup&quot;)))    /
        __attribute__((aligned((sizeof(long)))))    /
        = { __setup_str_##unique_id, fn, early }
        
#define __setup(str, fn)                    /
    __setup_param(str, fn, fn, 0)
    
#define early_param(str, fn)                    /
    __setup_param(str, fn, fn, 1)

 
__setup与early_param不同的是，early_param 宏注册的内核选项必须要在其他内核选项之前被处理。
在函数start_kernel中，parse_early_param处理early_param定义的参数，parse_args处理__setup定义的参数。

  parse_early_param();
  parse_args(&quot;Booting kernel&quot;, static_command_line, __start___param,
      __stop___param - __start___param,
      &amp;unknown_bootoption);
    
 1,所有的系统启动参数都是由形如 static int __init foo(char *str);的函数来支持的
 注:#define __init        __attribute__ ((__section__ (&quot;.init.text&quot;)))
 申明所有的启动参数支持函数都放入.init.text段

 
2.1,用__setup宏来导出参数的支持函数
 __setup(&quot;foo=&quot; , foo);
 展开后就是如下的形式
static char __setup_str_foo[] __initdata = &quot;foo=&quot;;    
 static struct obs_kernel_param __setup_foo    
         __attribute_used__                
         __attribute__((__section__(&quot;.init.setup&quot;)))    
         __attribute__((aligned((sizeof(long)))))    
         = { __setup_str_foo, foo, 0 };//&quot;foo=&quot;,foo,0
 也就是说,启动参数(函数指针)被封装到obs_kernel_param结构中,
 所有的内核启动参数形成内核映像.init.setup段中的一个
 obs_kernel_param数组
2.2用early_param宏来申明需要'早期'处理的启动参数,例如在
 arch/i386/kernel/setup.c就有如下的申明:
 early_param(&quot;mem&quot;, parse_mem);
 展开后和__setup是一样的只是early参数不一样,因此会在do_early_param
 中被处理
3,内核对启动参数的解析:下面函数历遍obs_kernel_param数组,调用
 支持函数
 static int __init do_early_param(char *param, char *val)
 {
     struct obs_kernel_param *p;
    for (p = __setup_start; p &lt; __setup_end; p++) {
         if (p-&gt;early &amp;&amp; strcmp(param, p-&gt;str) == 0) {
             if (p-&gt;setup_func(val) != 0)
                 printk(KERN_WARNING
                        &quot;Malformed early option '%s'/n&quot;, param);
         }
     }
     /* We accept everything at this stage. */
     return 0;
 }
 这个函数在parse_early_param中被调用,而parse_early_param在start_kernel
 中被调用,parse_early_param之后的parse_args会调用下面函数
 static int __init obsolete_checksetup(char *line)
 {
     struct obs_kernel_param *p;
     int had_early_param = 0;
    p = __setup_start;
     do {
         int n = strlen(p-&gt;str);
         if (!strncmp(line, p-&gt;str, n)) {
             if (p-&gt;early) {
                 /* Already done in parse_early_param?
                  * (Needs exact match on param part).
                  * Keep iterating, as we can have early
                  * params and __setups of same names 8( */
                 if (line[n] == '/0' || line[n] == '=')
                     had_early_param = 1;
             } else if (!p-&gt;setup_func) {
                 printk(KERN_WARNING &quot;Parameter %s is obsolete,&quot;
                        &quot; ignored/n&quot;, p-&gt;str);
                 return 1;
             } else if (p-&gt;setup_func(line + n))//调用支持函数
                 return 1;
         }
         p++;
     } while (p &lt; __setup_end);
    return had_early_param;
 }
init/main.c中启动参数申明列表:
 __setup(&quot;nosmp&quot;, nosmp);
 __setup(&quot;maxcpus=&quot;, maxcpus);
 __setup(&quot;reset_devices&quot;, set_reset_devices);
__setup(&quot;debug&quot;, debug_kernel);
 __setup(&quot;quiet&quot;, quiet_kernel);
__setup(&quot;loglevel=&quot;, loglevel);
__setup(&quot;init=&quot;, init_setup);
 __setup(&quot;rdinit=&quot;, rdinit_setup);
__setup(&quot;initcall_debug&quot;, initcall_debug_setup);


</rich_text><encoded_png char_offset="4000">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</encoded_png><encoded_png char_offset="5163">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</encoded_png><encoded_png char_offset="11152"></encoded_png></node><node name="mkimage" prog_lang="custom-colors" readonly="False" tags="" unique_id="18"><rich_text>    </rich_text><rich_text foreground="#ffff00000000">bootm命令</rich_text><rich_text>是用来引导经过u-boot的工具mkimage打包后的kernel image的，什么叫做经过u-boot的工具mkimage打包后的kernel image，这个就要看mkimage的代码，看看它做了些什么，虽然我很希望大家不要偷懒，认真地去看看，但是我知道还是有很多人懒得去做这件，那么我就j将分析mkimage代码后得到的总结告诉大家，mkimage做了些什么，怎么用这个工具。
    
</rich_text><rich_text scale="h2">mkimage的用法</rich_text><rich_text>
uboot源代码的tools/目录下有mkimage工具，这个工具可以用来制作不压缩或者压缩的多种可启动映象文件。
mkimage在制作映象文件的时候，是在原来的可执行映象文件的前面加上一个0x40字节的头，记录参数所指定的信息，这样uboot才能识别这个映象是针对哪个CPU体系结构的，哪个OS的，哪种类型，加载内存中的哪个位置， 入口点在内存的那个位置以及映象名是什么
</rich_text><rich_text foreground="#00000000ffff">root@Glym:/tftpboot# ./mkimage
Usage: ./mkimage -l image
    -l ==&gt; list image header information
    ./mkimage -A arch -O os -T type -C comp -a addr -e ep -n name -d data_file[:data_file...] image
    -A ==&gt; set architecture to 'arch'
    -O ==&gt; set operating system to 'os'
    -T ==&gt; set image type to 'type'
    -C ==&gt; set compression type 'comp'
    -a ==&gt; set load address to 'addr' (hex)
    -e ==&gt; set entry point to 'ep' (hex)
    -n ==&gt; set image name to 'name'
    -d ==&gt; use image data from 'datafile'
    -x ==&gt; set XIP (execute in place)</rich_text><rich_text>
参数说明：
-A 指定CPU的体系结构：
    取值 表示的体系结构
    alpha Alpha
    arm A RM
    x86 Intel x86
    ia64 IA64
    mips MIPS
    mips64 MIPS 64 Bit
    ppc PowerPC
    s390 IBM S390
    sh SuperH
    sparc SPARC
    sparc64 SPARC 64 Bit
    m68k MC68000
    
-O 指定操作系统类型，可以取以下值：
    openbsd、netbsd、freebsd、4_4bsd、linux、svr4、esix、solaris、irix、sco、dell、ncr、lynxos、vxworks、psos、qnx、u-boot、rtems、artos
-T 指定映象类型，可以取以下值：
    standalone、kernel、ramdisk、multi、firmware、script、filesystem
-C 指定映象压缩方式，可以取以下值：
    none 不压缩
    gzip 用gzip的压缩方式
    bzip2 用bzip2的压缩方式
    
-a 指定映象在内存中的加载地址，映象下载到内存中时，要按照用mkimage制作映象时，这个参数所指定的地址值来下载
-e 指定映象运行的入口点地址，这个地址就是-a参数指定的值加上0x40（因为前面有个mkimage添加的0x40个字节的头）
-n 指定映象名
-d 指定制作映象的源文件

mkimage
   解压内核源码包,编辑Makefile
   设置 cross_compile:=[编译器的绝对路径]     ;这个绝对路径既上面2.95.3放到的路径
   进入内核文件夹,执行下面命令
   [root@hostname]# make clean
   [root@hostname]# make dep
   [root@hostname]# make
   [root@hostname]# [编译器的绝对路径]/bin/arm-linux-objcopy -O binary -S vmlinux linux.bin    ;编译器的绝对路径也是上面说到的路径
    [root@hostname]# gzip linux.bin
下面的比较重要了,主要是u-boot的安装,这个在H9200的手册上说的很不清楚
    [root@hostname]# tar xzvf u-boot-1.0.0.tar.gz      ;解压u-boot
    [root@hostname]# cd u-boot-1.0.0
    [root@hostname]# make distclean
    [root@hostname]# make at91rm9200dk_config
    [root@hostname]# make all
    然后在/usr/local下建立uboot文件夹将u-boot-1.0.0下的所有文件都复制到uboot下
    [root@hostname]# [uboot的绝对路径]/tools/mkimage -A arm -O linux -C gzip -a 0x20008000 -e 0x20008000 -d linux.bin.gz uImage           ;这里的绝对路径是/usr/local/uboot
        vmlinux linux.bin linux.bin.gz uImage(uboot制作的image)
        mkimage -a -e
        -a参数后是内核的运行地址，-e参数后是入口地址。
1）如果我们没用mkimage对内核进行处理的话，那直接把内核下载到0x30008000再运行就行，内核会自解压运行（不过内核运行需要一个tag来传递参数，而这个tag建议是由bootloader提供的，在u-boot下默认是由bootm命令建立的）。
2）如果使用mkimage生成内核镜像文件的话，会在内核的前头加上了64byte的信息，供建立tag之用。bootm命令会首先判断bootm xxxx 这个指定的地址xxxx是否与-a指定的加载地址相同。
(1)如果不同的话会从这个地址开始提取出这个64byte的头部，对其进行分析，然后把去掉头部的内核复制到-a指定的load地址中去运行之
(2)如果相同的话那就让其原封不同的放在那，但-e指定的入口地址会推后64byte，以跳过这64byte的头部。

QUESTIONS
1. I have built a vmlinux image but I can boot it.
2: The mkimage tool, ARMboot's tftp command, and the bootm command require
   certain load and entry addresses. I'm confused which ones to chose.
ANSWERS
1. I have built a vmlinux image but I can boot it.
--------------------------------------------------
ARMboot is designed to boot Images as created by the mkimage tool, that
comes with ARMboot and is automatically built, too. You cannot directly load
the vmlinux image, as it expects a number of prerequisits such as special
register contents etc.
2. The mkimage tool, ARMboot's tftp command, and the bootm command require
   certain load and entry addresses. I'm confused which ones to chose.
--------------------------------------------------------------------------
Well, there are 3 different addresses:
1. Kernel Load Address. This is the address, where the kernel was linked
   to when you built the vmlinux and can be found in arch/arm/Makefile.
   The default for it is:
   
   ifeq ($(CONFIG_CPU_32),y)
   PROCESSOR    = armv
   TEXTADDR     = 0xC0008000
   LDSCRIPT     = arch/arm/vmlinux-armv.lds.in
   endif
   
   Provide this as &quot;-a&quot; parameter to mkimage.
2. Kernel Entry Point. This is the address, where ARMboot jumps to to
   enter the Kernel. It usually is the same as the kernel load address.
   Provide this as &quot;-e&quot; parameter to mkimage.
3. The Network Download Address. This is where you download the mkimage
   File. This address MUST BE different to the Kernel Load Address, and
   should be sufficiently far away to allow ARMboot to relocate the 
   image to the final Kernel Load Address. Loading to the 5th MB
   within the RAM is usually a good idea, eg. if the RAM begins at
   0xc0000000, you can do this:
   
   LART # tftp c0400000 linux.img
   ARP broadcast 1
   eth addr: 00:02:03:04:05:06
   TFTP from server 192.168.1.1; our IP address is 192.168.1.2
   Filename 'image.img'.
   Load address: 0xc0400000
   Loading: 
   ##################################################################done
   Bytes transferred = 567252 (8a7d4 hex)
   LART # bootm c0400000
      Image Name:   Linux 2.4.18
      Created:      Mon Jun 24 12:00:01 2002
      Image Type:   ARM Linux Kernel Image (gzip compressed)
      Data Size:    567188 Bytes = 553 kB = 0 MB
      Load Address: 0xc0008000
      Entry Point: 0xc0008000
      Verifying Checksum ... OK
      Loading Kernel Image ... OK 
   Starting kernel ...
   Linux version 2.4.18 (
[email=mag@mag]</rich_text><rich_text foreground="#0000ff">mag@mag</rich_text><rich_text>[/email]
) (gcc version 2.95.3 20010315 (release)) #4 Mon Jun 17 20:35:32 CST 2002
   ...</rich_text></node><node name="kernel version" prog_lang="custom-colors" readonly="False" tags="" unique_id="19"><rich_text>１.cat /proc/version的实现:
平时的时候我们都在用cat/proc/version来获得我们内核的版本号，代码在:fs/proc/version.c。
static int version_proc_show(struct seq_file *m, void *v)  
{  
    seq_printf(m, linux_proc_banner,  
        utsname()-&gt;sysname,  
        utsname()-&gt;release,  
        utsname()-&gt;version);  
    return 0;  
}  
  
  
static int version_proc_open(struct inode *inode, struct file *file)  
{  
    return single_open(file, version_proc_show, NULL);  
}  
  
  
static const struct file_operations version_proc_fops = {  
    .open       = version_proc_open,  
    .read       = seq_read,  
    .llseek     = seq_lseek,  
    .release    = single_release,  
};  
  
  
static int __init proc_version_init(void)  
{  
    proc_create(&quot;version&quot;, 0, NULL, &amp;version_proc_fops);  
    return 0;  
}  
module_init(proc_version_init);  


这里看到show，是不是紧张了，现在就看看这些值是哪里赋值的。来看include/linux/utsname.h
static inline struct new_utsname *utsname(void)  
{  
    return &amp;current-&gt;nsproxy-&gt;uts_ns-&gt;name;  
}  

在utsname中有一个nsproxy。这个在kernel/nsproxy.c中定义了uts_ns
struct nsproxy init_nsproxy = {  
    .count  = ATOMIC_INIT(1),  
    .uts_ns = &amp;init_uts_ns,  
#if defined(CONFIG_POSIX_MQUEUE) || defined(CONFIG_SYSVIPC)  
    .ipc_ns = &amp;init_ipc_ns,  
#endif  
    .mnt_ns = NULL,  
    .pid_ns = &amp;init_pid_ns,  
#ifdef CONFIG_NET  
    .net_ns = &amp;init_net,  
#endif  
};  

看到了所使用的uts_ns了吧，在init/version.c中
struct uts_namespace init_uts_ns = {  
    .kref = {  
        .refcount   = ATOMIC_INIT(2),  
    },  
    .name = {  
        .sysname    = UTS_SYSNAME,  
        .nodename   = UTS_NODENAME,  
        .release    = UTS_RELEASE,  
        .version    = UTS_VERSION,  
        .machine    = UTS_MACHINE,  
        .domainname = UTS_DOMAINNAME,  
    },  
}; 

EXPORT_SYMBOL_GPL(init_uts_ns);

const char linux_banner[] =
       &quot;Linux version &quot; UTS_RELEASE &quot; (&quot; LINUX_COMPILE_BY &quot;@&quot;
       LINUX_COMPILE_HOST &quot;) (&quot; LINUX_COMPILER &quot;) &quot; UTS_VERSION&quot;\n&quot;;

const char linux_proc_banner[]=
       &quot;%s version %s\n&quot;;
    &quot; (&quot; LINUX_COMPILE_BY &quot;@&quot; LINUX_COMPILE_HOST &quot;)&quot;
   &quot; (&quot;LINUX_COMPILER &quot;) %s\n&quot;;



所以我们在version_proc_show中看到的utsname中使用了version等等。


言归正传，看看init_uts_ns中的UTS_VERSION的定义，where？
在include/generated/compile.h中，看到这里去找文件，( ⊙ o ⊙)啊！，怎么没有你说的？？稍等，继续往下看。
在scripts/mkcompile_h文件中呢，这里都是用脚本来生成的compile.h这个文件。

等编译完后会成include/generated下生成
autoconf.h bounds.h compile.h utsrelease.h version.h
</rich_text><rich_text foreground="#00000000ffff">cat utstrelease.h :</rich_text><rich_text>
</rich_text><rich_text foreground="#ffff00000000">#define UTS_RELEASE &quot;3.0.8&quot;
</rich_text><rich_text>
2. utstrelease.h的生成:
Makefile:
 
uts_len := 64
define filechk_utsrelease.h
       if [ `echo -n &quot;$(KERNELRELEASE)&quot; | wc -c ` -gt $(uts_len) ]; then\
         echo '&quot;$(KERNELRELEASE)&quot; exceeds $(uts_len) characters'&gt;&amp;2;   \
         exit1;                                                        \
       fi;                                                              \
       (echo \#define UTS_RELEASE \&quot;$(KERNELRELEASE)\&quot;;)
endef

define filechk_version.h
       (echo \#define LINUX_VERSION_CODE$(shell                            \
       expr $(VERSION) \* 65536 + $(PATCHLEVEL) \* 256 +$(SUBLEVEL));    \
       echo '#define KERNEL_VERSION(a,b,c) (((a)&lt;&lt; 16) + ((b)&lt;&lt; 8) + (c))';)
endef

include/linux/version.h: $(srctree)/Makefile FORCE　　　　　　　　//version.h的生成
       $(call filechk,version.h)

include/linux/utsrelease.h: include/config/kernel.release FORCE         //utstrelease.h的生成
       $(call filechk,utsrelease.h)

可以看出UTS_RELEASE 是由KERNELRELEASE生成:


# Read KERNELRELEASE from include/config/kernel.release (if itexists)
KERNELRELEASE = $(shell cat include/config/kernel.release2&gt; /dev/null)
KERNELVERSION =$(VERSION).$(PATCHLEVEL).$(SUBLEVEL)$(EXTRAVERSION)

３.kernel.release 的生成:

# Build the kernel release string
#
# The KERNELRELEASE value built here is stored in the file
# include/config/kernel.release, and is used when executingseveral
# make targets, such as &quot;make install&quot; or &quot;makemodules_install.&quot;
#
# The eventual kernel release string consists of the followingfields,
# shown in a hierarchical format to show how smaller parts areconcatenated
# to form the larger and final value, with values coming fromplaces like
# the Makefile, kernel config options, make command line optionsand/or
# SCM tag information.
#
#      $(KERNELVERSION)
#        $(VERSION)                   eg, 2
#        $(PATCHLEVEL)                eg, 6
#        $(SUBLEVEL)                  eg, 18
#        $(EXTRAVERSION)              eg, -rc6
#      $(localver-full)
#        $(localver)
#          localversion*              (files without backups, containing '~')
#          $(CONFIG_LOCALVERSION)     (from kernel config setting)
#        $(localver-auto)             (only if CONFIG_LOCALVERSION_AUTO is set)
#          ./scripts/setlocalversion  (SCMtag, if one exists)
#          $(LOCALVERSION)            (from make command line if provided)
#
# Note how the final $(localver-auto) string isincluded *only* if the
# kernel config option CONFIG_LOCALVERSION_AUTO isselected. Also, at the
# moment, only git is supported but other SCMs can edit thescript
# scripts/setlocalversion and add the appropriate checks asneeded.
pattern = &quot;.*/localversion[^~]*&quot;
string = $(shell cat /dev/null \
          `find $(objtree) $(srctree) -maxdepth 1 -regex $(pattern) | sort-u`)

localver = $(subst $(space),, $(string) \
                             $(patsubst &quot;%&quot;,%,$(CONFIG_LOCALVERSION)))

# If CONFIG_LOCALVERSION_AUTO is set scripts/setlocalversion iscalled
# and if the SCM is know a tag from the SCM is appended.
# The appended tag is determined by the SCM used.
#
# .scmversion is used when generating rpm packages so we do notloose
# the version information from the SCM when we do the build of thekernel
# from the copied source
ifdefCONFIG_LOCALVERSION_AUTO      //yes

ifeq ($(wildcard.scmversion),)                //don,thave .scmversion
       _localver-auto = $(shell $(CONFIG_SHELL) \
                        $(srctree)/scripts/setlocalversion$(srctree))  //如果带--save-scmversion参数就会生成.scmversion,但是脚本没有带,所以不会有.scmversion
else
       _localver-auto = $(shell cat .scmversion 2&gt;/dev/null)
endif

       localver-auto =$(LOCALVERSION)$(_localver-auto)
endif

localver-full = $(localver)$(localver-auto)

# Store (new) KERNELRELASE string ininclude/config/kernel.release
kernelrelease =$(KERNELVERSION)$(localver-full)
include/config/kernel.release:include/config/auto.conf FORCE
       $(Q)rm -f $@
       $(Q)echo $(kernelrelease) &gt; $@

/kernel/scripts/setlocalversion:

#!/bin/sh
#
# This scripts adds localversion information from the version
# control systems git,mercurial (hg) and subversion (svn).
#
# If something goes wrong,send a mail the kernel build mailinglist
# (see MAINTAINERS) and CCNico Schottelius
#&lt;nico-linuxsetlocalversion -at-schottelius.org&gt;.
#
#

usage() {
   echo &quot;Usage: $0 [--save-scmversion] [srctree]&quot;&gt;&amp;2
   exit 1
}

scm_only=false
srctree=.
if test &quot;$1&quot; =&quot;--save-scmversion&quot;; then
   scm_only=true
   shift
fi
if test $# -gt 0;then
   srctree=$1
   shift
fi
if test $# -gt 0 -o ! -d&quot;$srctree&quot;; then
   usage
fi


# Check for git and a git repo.
if head=`git rev-parse--verify --short HEAD 2&gt;/dev/null`;then

   # If we are at a tagged commit (like &quot;v2.6.30-rc6&quot;), we ignoreit,
   # because this version is defined in the top levelMakefile.
   if [ -z &quot;`git describe --exact-match 2&gt;/dev/null`&quot;]; then

      # If we arepast a tagged commit (like&quot;v2.6.30-rc5-302-g72357d5&quot;),
      # we prettyprint it.
      ifatag=&quot;`git describe 2&gt;/dev/null`&quot;;then
         echo &quot;$atag&quot;| awk -F- '{printf(&quot;-d-%s&quot;, $(NF-1),$(NF))}'

      # If wedon't have a tag at all we print -g{commitish}.
      else
         printf'%s%s' -g $head
      fi
   fi

   # Is this git on svn?
   if git config --get svn-remote.svn.url &gt;/dev/null;then
          printf -- '-svn%s' &quot;`git svn find-rev $head`&quot;
   fi

   # Update index only on r/w media
   [ -w . ] &amp;&amp; git update-index--refresh --unmerged &gt; /dev/null

   # Check for uncommitted changes　//如果kernelcode有修改并且没有git commit,就会生成-dirty
   if git diff-index--name-only HEAD | grep -v &quot;^scripts/package&quot;\
      | readdummy; then
      printf '%s'-dirty
   fi

   # All done with git
   exit
fi

# Check for mercurial and amercurial repo.
if hgid=`hg id2&gt;/dev/null`; then
   tag=`printf '%s' &quot;$hgid&quot; | cut -d' ' -f2`

   # Do we have an untagged version?
   if [ -z &quot;$tag&quot; -o &quot;$tag&quot; = tip ]; then
      id=`printf'%s' &quot;$hgid&quot; | sed 's/[+ ].*//'`
      printf'%s%s' -hg &quot;$id&quot;
   fi

   # Are there uncommitted changes?
   # These are represented by + after the changesetid.
   case &quot;$hgid&quot; in
      *+|*+\ *)printf '%s' -dirty ;;
   esac

   # All done with mercurial
   exit
fi

# Check for svn and a svnrepo.
if rev=`svn info2&gt;/dev/null | grep '^Last Changed Rev'`;then
   rev=`echo $rev | awk '{print $NF}'`
   printf -- '-svn%s' &quot;$rev&quot;

   # All done with svn
   exit
fi</rich_text></node><node name="mkbootimg" prog_lang="custom-colors" readonly="False" tags="" unique_id="20"><rich_text scale="h1">一.mkbootfs</rich_text><rich_text>
</rich_text><rich_text scale="h2">1.使用</rich_text><rich_text>
    mkbootfs root | gzip &gt; ramdisk.img
 
 
</rich_text><rich_text scale="h1">二.mkbootimg</rich_text><rich_text>
</rich_text><rich_text scale="h2">1.使用</rich_text><rich_text>
    mkbootimg  --kernel your-kernel-file --ramdisk newramdisk.cpio.gz --cmdline  &quot;mem=128 console=ttymxc0,115200n8 init=/init rw&quot; --output mynewimage.img
    或
    mkbootimg --kernel your-kernel-file --ramdisk newramdisk.cpio.gz --cmdline  --output mynewimage.img</rich_text></node></node><node name="linux命名空间" prog_lang="custom-colors" readonly="False" tags="" unique_id="28"><rich_text>    在linux中，命名空间主要提供一种轻量级的资源虚拟，可以从不同方面来查看系统的全局属性，不同命名空间可以互相不干扰，为进程的一部分嗯。例如：同一个进程pid,可以被多个进程共享使用，可以查看同一用户的所有资源消费情况等等。
     总体定义
     定义如下：
struct nsproxy {
 atomit_t count;//指向同一个nsproxy的进程个数
 struct uts_namespace *uts_ns;//运行的内核
 struct ipc_namespace *ipc_ns;//进程通信ipc
 struct mnt_namespace *mnt_ns;//文件系统
 struct pid_namespace *pid_ns;
 struct net    *net_ns;//网络
}

             
在创建进程(fork,clone系统调用)时，需要设置一些标志来指明命名空间的创建与否
1. </rich_text><rich_text foreground="#000000">#define CLONE_NEWUTS    0x04000000</rich_text><rich_text>
2. #define CLONE_NEWIPC    0x08000000
3. #define CLONE_NEWUSER  0x10000000
4. #define CLONE_NEWPID      0x20000000
5. #define CLONE_NEWNET     0x40000000
             
同时在每个任务的定义中也包含命名空间的相关域:
</rich_text><rich_text foreground="#000000">struct task_struct</rich_text><rich_text foreground="#0000CC">{</rich_text><rich_text>
     …</rich_text><rich_text foreground="#0000CC">..</rich_text><rich_text>
     </rich_text><rich_text foreground="#0000CC">//</rich_text><rich_text>指针形式，这样可以被多个进程共享，修改一个命名空间，其它进程就可见了
     struct nsproxy </rich_text><rich_text foreground="#0000CC">*</rich_text><rich_text>nsproxy</rich_text><rich_text foreground="#0000CC">;</rich_text><rich_text>
     …</rich_text><rich_text foreground="#0000CC">....</rich_text><rich_text>
 </rich_text><rich_text foreground="#0000CC">}</rich_text><rich_text>

                 
值得注意的是，命名空间需要在编译其间进行选择，如果没有指明，则所有的属性都是全局的，即只存在一个命名空间，全局命名空间为init_proxy,指向每个子系统的对象:
struct nsproxy init_nsproxy = {
	.count	= ATOMIC_INIT(1),
	.uts_ns	= &amp;init_uts_ns,
#if defined(CONFIG_POSIX_MQUEUE) || defined(CONFIG_SYSVIPC)
	.ipc_ns	= &amp;init_ipc_ns,
#endif
	.mnt_ns	= NULL,
	.pid_ns	= &amp;init_pid_ns,
#ifdef CONFIG_NET
	.net_ns	= &amp;init_net,
#endif
};
                 
    相对应的系统调用有unshare,可以将父子进程的命名空间进行分开或共享。
    UTS命名空间
    定义如下：
    </rich_text><rich_text foreground="#000000">struct uts_namespace </rich_text><rich_text foreground="#0000CC">{</rich_text><rich_text>
         struct kref kref</rich_text><rich_text foreground="#0000CC">;//</rich_text><rich_text>使用计数
         struct new_utsname name</rich_text><rich_text foreground="#0000CC">;</rich_text><rich_text>
         struct user_namespace *user_ns;
     </rich_text><rich_text foreground="#0000CC">}</rich_text><rich_text>
    #define __NEW_UTS_LEN 64

    struct old_utsname {
	    char sysname[65];
	    char nodename[65];
	    char release[65];
	    char version[65];
	    char machine[65];
    };

    struct new_utsname {
	    char sysname[__NEW_UTS_LEN + 1];
	    char nodename[__NEW_UTS_LEN + 1];
	    char release[__NEW_UTS_LEN + 1];
	    char version[__NEW_UTS_LEN + 1];
	    char machine[__NEW_UTS_LEN + 1];
	    char domainname[__NEW_UTS_LEN + 1];
    };
             
测试结果如下：
</rich_text><rich_text foreground="#000000">sys</rich_text><rich_text foreground="#0000CC">:</rich_text><rich_text>Linux
 node</rich_text><rich_text foreground="#0000CC">:</rich_text><rich_text>ubuntu</rich_text><rich_text foreground="#0000CC">-</rich_text><rich_text>laptop
 release</rich_text><rich_text foreground="#0000CC">:</rich_text><rich_text>2</rich_text><rich_text foreground="#0000CC">.</rich_text><rich_text>6</rich_text><rich_text foreground="#0000CC">.</rich_text><rich_text>32</rich_text><rich_text foreground="#0000CC">-</rich_text><rich_text>33</rich_text><rich_text foreground="#0000CC">-</rich_text><rich_text>generic
 version</rich_text><rich_text foreground="#0000CC">:#</rich_text><rich_text>68</rich_text><rich_text foreground="#0000CC">-</rich_text><rich_text>Ubuntu SMP Fri Jun 17 16</rich_text><rich_text foreground="#0000CC">:</rich_text><rich_text>25</rich_text><rich_text foreground="#0000CC">:</rich_text><rich_text>19 UTC 2011
 machine</rich_text><rich_text foreground="#0000CC">:</rich_text><rich_text>i686
 domain</rich_text><rich_text foreground="#0000CC">:(</rich_text><rich_text>none</rich_text><rich_text foreground="#0000CC">)</rich_text><rich_text>
                 
init进程初始化时，utsname赋值如下：
</rich_text><rich_text foreground="#000000">struct uts_namespace init_uts_ns     </rich_text><rich_text foreground="#0000CC">=</rich_text><rich_text>     </rich_text><rich_text foreground="#0000CC">{</rich_text><rich_text>
     </rich_text><rich_text foreground="#0000CC">.</rich_text><rich_text>kref      </rich_text><rich_text foreground="#0000CC">=</rich_text><rich_text>  </rich_text><rich_text foreground="#0000CC">{</rich_text><rich_text>
         </rich_text><rich_text foreground="#0000CC">.</rich_text><rich_text>refcount         </rich_text><rich_text foreground="#0000CC">=</rich_text><rich_text> ATOMIC_INIT</rich_text><rich_text foreground="#0000CC">(</rich_text><rich_text>2</rich_text><rich_text foreground="#0000CC">),</rich_text><rich_text>
     </rich_text><rich_text foreground="#0000CC">},</rich_text><rich_text>
     </rich_text><rich_text foreground="#0000CC">.</rich_text><rich_text>name </rich_text><rich_text foreground="#0000CC">=</rich_text><rich_text> </rich_text><rich_text foreground="#0000CC">{</rich_text><rich_text>
         </rich_text><rich_text foreground="#0000CC">.</rich_text><rich_text>sysname        </rich_text><rich_text foreground="#0000CC">=</rich_text><rich_text> UTS_SYSNAME</rich_text><rich_text foreground="#0000CC">,</rich_text><rich_text>
         </rich_text><rich_text foreground="#0000CC">.</rich_text><rich_text>nodename        </rich_text><rich_text foreground="#0000CC">=</rich_text><rich_text> UTS_NODENAME</rich_text><rich_text foreground="#0000CC">,</rich_text><rich_text>
         </rich_text><rich_text foreground="#0000CC">.</rich_text><rich_text>release        </rich_text><rich_text foreground="#0000CC">=</rich_text><rich_text> UTS_RELEASE</rich_text><rich_text foreground="#0000CC">,</rich_text><rich_text>
         </rich_text><rich_text foreground="#0000CC">.</rich_text><rich_text>version         </rich_text><rich_text foreground="#0000CC">=</rich_text><rich_text> UTS_VERSION</rich_text><rich_text foreground="#0000CC">,</rich_text><rich_text>
          </rich_text><rich_text foreground="#0000CC">.</rich_text><rich_text>machine        </rich_text><rich_text foreground="#0000CC">=</rich_text><rich_text> UTS_MACHINE</rich_text><rich_text foreground="#0000CC">,</rich_text><rich_text>
          </rich_text><rich_text foreground="#0000CC">.</rich_text><rich_text>domainname    </rich_text><rich_text foreground="#0000CC">=</rich_text><rich_text> UTS_DOMAINNAME</rich_text><rich_text foreground="#0000CC">,</rich_text><rich_text>
      </rich_text><rich_text foreground="#0000CC">},</rich_text><rich_text>
  </rich_text><rich_text foreground="#0000CC">}</rich_text><rich_text>
                 
这些宏常量定义在内核的各个地方， 有些通过编译内核形成的，如UTS_RElEASE，定义在文件
 &lt;utsrelease.h&gt;中。有些域可以进行修改，但是有些域不能修改，如UTS_SYSNAME只能是Linux,而UTS_NODENAME则可以进行修改。

struct ipc_namespace {
	atomic_t	count;
	struct ipc_ids	ids[3];

	int		sem_ctls[4];
	int		used_sems;

	int		msg_ctlmax;
	int		msg_ctlmnb;
	int		msg_ctlmni;
	atomic_t	msg_bytes;
	atomic_t	msg_hdrs;
	int		auto_msgmni;

	size_t		shm_ctlmax;
	size_t		shm_ctlall;
	int		shm_ctlmni;
	int		shm_tot;
	/*
	 * Defines whether IPC_RMID is forced for _all_ shm segments regardless
	 * of shmctl()
	 */
	int		shm_rmid_forced;

	struct notifier_block ipcns_nb;

	/* The kern_mount of the mqueuefs sb.  We take a ref on it */
	struct vfsmount	*mq_mnt;

	/* # queues in this ns, protected by mq_lock */
	unsigned int    mq_queues_count;

	/* next fields are set through sysctl */
	unsigned int    mq_queues_max;   /* initialized to DFLT_QUEUESMAX */
	unsigned int    mq_msg_max;      /* initialized to DFLT_MSGMAX */
	unsigned int    mq_msgsize_max;  /* initialized to DFLT_MSGSIZEMAX */

	/* user_ns which owns the ipc ns */
	struct user_namespace *user_ns;
};

当需要一个新用户命名空间时，当前用户命名空间就会被复制，并与当前任务的nsproxy相关联，声明如下：
</rich_text><rich_text foreground="#000000">struct  user_namespace </rich_text><rich_text foreground="#0000CC">{</rich_text><rich_text>
    struct kref         kref</rich_text><rich_text foreground="#0000CC">;</rich_text><rich_text>
    struct hlist_head   uidhash_table</rich_text><rich_text foreground="#0000CC">[</rich_text><rich_text>UIDHASH_SZ</rich_text><rich_text foreground="#0000CC">];</rich_text><rich_text>
    struct user_struct </rich_text><rich_text foreground="#0000CC">*</rich_text><rich_text>root_user</rich_text><rich_text foreground="#0000CC">;</rich_text><rich_text>
</rich_text><rich_text foreground="#0000CC">}</rich_text><rich_text>
            
其中root_user用于记录单个用户资源情况，而uidhash_table将所有user_struct连接起来.
</rich_text><rich_text foreground="#000000">struct user_struct </rich_text><rich_text foreground="#0000CC">{</rich_text><rich_text>
     atomic_t __count</rich_text><rich_text foreground="#0000CC">;//</rich_text><rich_text>该结构体引用计数
     atomic_t processes</rich_text><rich_text foreground="#0000CC">;//</rich_text><rich_text>该用户拥有的进程数量
     atomic_t sigpending</rich_text><rich_text foreground="#0000CC">;//</rich_text><rich_text>该用户拥有的悬而未决的信号量数目
     …</rich_text><rich_text foreground="#0000CC">.</rich_text><rich_text>
     unsigned long locked_shm</rich_text><rich_text foreground="#0000CC">;//</rich_text><rich_text>锁住的共享页个数
     </rich_text><rich_text foreground="#0000CC">//</rich_text><rich_text>hash表所维护的信息
     struct hlist_node uidhash_node</rich_text><rich_text foreground="#0000CC">;</rich_text><rich_text>
     uid_t uid</rich_text><rich_text foreground="#0000CC">;</rich_text><rich_text>
      …</rich_text><rich_text foreground="#0000CC">...</rich_text><rich_text>
  </rich_text><rich_text foreground="#0000CC">}</rich_text><rich_text>

               
当设置新的用户时，用户命名空间创建如下：
</rich_text><rich_text foreground="#000000">static struct user_namespace </rich_text><rich_text foreground="#0000CC">*</rich_text><rich_text>clone_user_ns</rich_text><rich_text foreground="#0000CC">(</rich_text><rich_text>struct user_namespace </rich_text><rich_text foreground="#0000CC">*</rich_text><rich_text>old_ns</rich_text><rich_text foreground="#0000CC">)</rich_text><rich_text>
 </rich_text><rich_text foreground="#0000CC">{</rich_text><rich_text>
     struct user_namespace </rich_text><rich_text foreground="#0000CC">*</rich_text><rich_text>ns</rich_text><rich_text foreground="#0000CC">;</rich_text><rich_text>
     struct user_struct </rich_text><rich_text foreground="#0000CC">*</rich_text><rich_text>new_user</rich_text><rich_text foreground="#0000CC">;</rich_text><rich_text>
     </rich_text><rich_text foreground="#FF0000">int</rich_text><rich_text> n</rich_text><rich_text foreground="#0000CC">;</rich_text><rich_text>
     
     ns </rich_text><rich_text foreground="#0000CC">=</rich_text><rich_text> kmalloc</rich_text><rich_text foreground="#0000CC">(</rich_text><rich_text>sizeof</rich_text><rich_text foreground="#0000CC">(</rich_text><rich_text>struct user_namespace</rich_text><rich_text foreground="#0000CC">),</rich_text><rich_text>GFP_KERNEL</rich_text><rich_text foreground="#0000CC">);</rich_text><rich_text>
     </rich_text><rich_text foreground="#0000FF">if</rich_text><rich_text foreground="#0000CC">(!</rich_text><rich_text>ns</rich_text><rich_text foreground="#0000CC">)</rich_text><rich_text> 
         return ERR_PTR</rich_text><rich_text foreground="#0000CC">(-</rich_text><rich_text>ENOMEM</rich_text><rich_text foreground="#0000CC">);</rich_text><rich_text>
      
      kref_init</rich_text><rich_text foreground="#0000CC">(&amp;</rich_text><rich_text>ns</rich_text><rich_text foreground="#0000CC">-&gt;</rich_text><rich_text>kref</rich_text><rich_text foreground="#0000CC">);</rich_text><rich_text>
      
      </rich_text><rich_text foreground="#0000FF">for</rich_text><rich_text foreground="#0000CC">(</rich_text><rich_text>n</rich_text><rich_text foreground="#0000CC">=</rich_text><rich_text>0</rich_text><rich_text foreground="#0000CC">;</rich_text><rich_text> n</rich_text><rich_text foreground="#0000CC">&lt;</rich_text><rich_text> UIDHASH_SZ</rich_text><rich_text foreground="#0000CC">;++</rich_text><rich_text>n</rich_text><rich_text foreground="#0000CC">)</rich_text><rich_text>
          INIT_HLIST_HEAD</rich_text><rich_text foreground="#0000CC">(</rich_text><rich_text>ns</rich_text><rich_text foreground="#0000CC">-&gt;</rich_text><rich_text>uidhash_table</rich_text><rich_text foreground="#0000CC">+</rich_text><rich_text>n</rich_text><rich_text foreground="#0000CC">);</rich_text><rich_text>
      
      </rich_text><rich_text foreground="#0000CC">/*</rich_text><rich_text>insert into new root user</rich_text><rich_text foreground="#0000CC">*/</rich_text><rich_text>
      ns</rich_text><rich_text foreground="#0000CC">-&gt;</rich_text><rich_text>root_user </rich_text><rich_text foreground="#0000CC">=</rich_text><rich_text> alloc_uid</rich_text><rich_text foreground="#0000CC">(</rich_text><rich_text>ns</rich_text><rich_text foreground="#0000CC">,</rich_text><rich_text>0</rich_text><rich_text foreground="#0000CC">);</rich_text><rich_text>
      </rich_text><rich_text foreground="#0000FF">if</rich_text><rich_text foreground="#0000CC">(!</rich_text><rich_text>ns</rich_text><rich_text foreground="#0000CC">-&gt;</rich_text><rich_text>root_user</rich_text><rich_text foreground="#0000CC">)</rich_text><rich_text> </rich_text><rich_text foreground="#0000CC">{</rich_text><rich_text>
          kfree</rich_text><rich_text foreground="#0000CC">(</rich_text><rich_text>ns</rich_text><rich_text foreground="#0000CC">);</rich_text><rich_text>
          return ERR_PTR</rich_text><rich_text foreground="#0000CC">(-</rich_text><rich_text>ENOMEM</rich_text><rich_text foreground="#0000CC">);</rich_text><rich_text>
      </rich_text><rich_text foreground="#0000CC">}</rich_text><rich_text>
  
      new_user </rich_text><rich_text foreground="#0000CC">=</rich_text><rich_text> alloc_uid</rich_text><rich_text foreground="#0000CC">(</rich_text><rich_text>ns</rich_text><rich_text foreground="#0000CC">,</rich_text><rich_text>current</rich_text><rich_text foreground="#0000CC">-&gt;</rich_text><rich_text>uid</rich_text><rich_text foreground="#0000CC">);</rich_text><rich_text>
      </rich_text><rich_text foreground="#0000FF">if</rich_text><rich_text foreground="#0000CC">(!</rich_text><rich_text>new_user</rich_text><rich_text foreground="#0000CC">)</rich_text><rich_text> </rich_text><rich_text foreground="#0000CC">{</rich_text><rich_text>
          free_uid</rich_text><rich_text foreground="#0000CC">(</rich_text><rich_text>ns</rich_text><rich_text foreground="#0000CC">-&gt;</rich_text><rich_text>root_user</rich_text><rich_text foreground="#0000CC">);</rich_text><rich_text>
          kfree</rich_text><rich_text foreground="#0000CC">(</rich_text><rich_text>ns</rich_text><rich_text foreground="#0000CC">);</rich_text><rich_text>
          return ERR_PTR</rich_text><rich_text foreground="#0000CC">(-</rich_text><rich_text>ENOMEM</rich_text><rich_text foreground="#0000CC">);</rich_text><rich_text>        
      </rich_text><rich_text foreground="#0000CC">}</rich_text><rich_text>
          switch</rich_text><rich_text foreground="#0000CC">(</rich_text><rich_text>new_user</rich_text><rich_text foreground="#0000CC">);</rich_text><rich_text>
          return ns</rich_text><rich_text foreground="#0000CC">;</rich_text><rich_text>
  </rich_text><rich_text foreground="#0000CC">}</rich_text><rich_text>
            
    命名空间增加了pid管理的复杂性，pid命名空间按照树型层次化管理。当一个新的命名空间创建，该命名空间内所有的pid都对其父命名空间可见，但是子命名空间却不能看到父命名空间中pid,这样就意味着有些任务包含有多个pid:父命名空间，子命名空间。这样就产生了两种类型的pid:
    Global pid:内核本身包含有效的pid,init任务中可见的全局唯一的pid,也就是系统唯一的pid。
    Local pid:在该命名空间内部的pid,全局不是唯一的，在不同的命名空间中，可能存在相同的pid。
    task的pid_namespace描述 
    task_struct  中结构体部分结构如下：
    </rich_text><rich_text foreground="#000000">struct task_struct </rich_text><rich_text foreground="#0000CC">{</rich_text><rich_text>
         …</rich_text><rich_text foreground="#0000CC">..</rich_text><rich_text>
         pid_t pid</rich_text><rich_text foreground="#0000CC">;</rich_text><rich_text>
         pid_t tgid</rich_text><rich_text foreground="#0000CC">;</rich_text><rich_text>
         struct task_struct </rich_text><rich_text foreground="#0000CC">*</rich_text><rich_text>group_leader</rich_text><rich_text foreground="#0000CC">;</rich_text><rich_text>
         struct list_head thread_group</rich_text><rich_text foreground="#0000CC">;</rich_text><rich_text>
         …</rich_text><rich_text foreground="#0000CC">..</rich_text><rich_text>
     </rich_text><rich_text foreground="#0000CC">}</rich_text><rich_text>

            
而session id和进程组id没有直接包含在task_struct内部，而是存放在signal结构体中
</rich_text><rich_text foreground="#000000">struct signal_struct </rich_text><rich_text foreground="#0000CC">{</rich_text><rich_text>
     …</rich_text><rich_text foreground="#0000CC">.....</rich_text><rich_text>
     struct task_struct </rich_text><rich_text foreground="#0000CC">*</rich_text><rich_text>curr_target</rich_text><rich_text foreground="#0000CC">;</rich_text><rich_text>
     union </rich_text><rich_text foreground="#0000CC">{</rich_text><rich_text>
         pid_t pgrp __deprecated</rich_text><rich_text foreground="#0000CC">;</rich_text><rich_text>
         pid_t __pgrp</rich_text><rich_text foreground="#0000CC">;</rich_text><rich_text>
 </rich_text><rich_text foreground="#0000CC">};</rich_text><rich_text>
     union </rich_text><rich_text foreground="#0000CC">{</rich_text><rich_text>
         pid_t session  __deprecated</rich_text><rich_text foreground="#0000CC">;</rich_text><rich_text>
          pid_t __session</rich_text><rich_text foreground="#0000CC">;</rich_text><rich_text>
  </rich_text><rich_text foreground="#0000CC">};</rich_text><rich_text>
      …</rich_text><rich_text foreground="#0000CC">.....</rich_text><rich_text>
  </rich_text><rich_text foreground="#0000CC">}</rich_text><rich_text>
             
    对应的修改函数有:set_task_session,set_task_pgrp。
    pid的管理 
    对应的pid_namespace定义如下：
    </rich_text><rich_text foreground="#0000CC">[</rich_text><rich_text>include</rich_text><rich_text foreground="#0000CC">/</rich_text><rich_text>linux</rich_text><rich_text foreground="#0000CC">/</rich_text><rich_text>pid_namespace</rich_text><rich_text foreground="#0000CC">.</rich_text><rich_text>h</rich_text><rich_text foreground="#0000CC">]</rich_text><rich_text>
     </rich_text><rich_text foreground="#0000CC">//</rich_text><rich_text>每个命名空间都包含一个所有pid的分配图，系统中各个命名空间互不交叉
    struct pid_namespace {
	    struct kref kref;                                               //进程的引用计数
	    struct pidmap pidmap[PIDMAP_ENTRIES];     //pid分配图
	    int last_pid;
	    struct task_struct *child_reaper;                    //当前命名空间中waitpid角色的task
	    struct kmem_cache *pid_cachep;
	    unsigned int level;                                          //当前pid_namespace的深度
	    struct pid_namespace *parent;                      //父pid_namespace
    #ifdef CONFIG_PROC_FS
	    struct vfsmount *proc_mnt;
    #endif
    #ifdef CONFIG_BSD_PROCESS_ACCT
	    struct bsd_acct_struct *bacct;
    #endif
	    gid_t pid_gid;
	    int hide_pid;
    };

    /*
     * PID-map pages start out as NULL, they get allocated upon
     * first use and are never deallocated. This way a low pid_max
     * value does not cause lots of bitmaps to be allocated, but
     * the scheme scales to up to 4 million PIDs, runtime.
     */
    struct pid_namespace init_pid_ns = {
	    .kref = {
		    .refcount       = ATOMIC_INIT(2),
	    },
	    .pidmap = {
		    [ 0 ... PIDMAP_ENTRIES-1] = { ATOMIC_INIT(BITS_PER_PAGE), NULL }
	    },
	    .last_pid = 0,
	    .level = 0,
	    .child_reaper = &amp;init_task,
    };
    EXPORT_SYMBOL_GPL(init_pid_ns);
                       
    pid的管理主要集中在两个数据结构:
    struct pid为内核形式的pid,
    struct upid代表在特定命名空间中可见的信息，定义如下：
    </rich_text><rich_text foreground="#0000CC">[</rich_text><rich_text>include</rich_text><rich_text foreground="#0000CC">/</rich_text><rich_text>linux</rich_text><rich_text foreground="#0000CC">/</rich_text><rich_text>pid</rich_text><rich_text foreground="#0000CC">.</rich_text><rich_text>h</rich_text><rich_text foreground="#0000CC">]</rich_text><rich_text>
     struct upid
     </rich_text><rich_text foreground="#0000CC">{</rich_text><rich_text>
         </rich_text><rich_text foreground="#FF0000">int</rich_text><rich_text> nr</rich_text><rich_text foreground="#0000CC">;                                        //</rich_text><rich_text>真正的pid值
         struct pid_namespace </rich_text><rich_text foreground="#0000CC">*</rich_text><rich_text>ns</rich_text><rich_text foreground="#0000CC">;      //</rich_text><rich_text>该nr属于哪个pid_namespace
         struct hlist_node pid_chain</rich_text><rich_text foreground="#0000CC">;     //</rich_text><rich_text>所有upid的hash链表 find_pid
     </rich_text><rich_text foreground="#0000CC">}</rich_text><rich_text>
     
     </rich_text><rich_text foreground="#0000CC">//</rich_text><rich_text>一个pid可以属于不同的级别，每一级别又包含一个upid
     struct pid
      </rich_text><rich_text foreground="#0000CC">{</rich_text><rich_text>
          atomic_t count</rich_text><rich_text foreground="#0000CC">;                                           //</rich_text><rich_text>引用计数
          struct hlist_head tasks</rich_text><rich_text foreground="#0000CC">[</rich_text><rich_text>PIDTYPE_MAX</rich_text><rich_text foreground="#0000CC">];     //</rich_text><rich_text>该pid被使用的task链表
          struct rcu_head rcu</rich_text><rich_text foreground="#0000CC">;                                    //</rich_text><rich_text>互斥访问
          </rich_text><rich_text foreground="#FF0000">int</rich_text><rich_text> level</rich_text><rich_text foreground="#0000CC">;                                                      //</rich_text><rich_text>该pid所能到达的最大深度
          struct upid numbers</rich_text><rich_text foreground="#0000CC">[0];                              //</rich_text><rich_text>每一层次</rich_text><rich_text foreground="#0000CC">(</rich_text><rich_text>level</rich_text><rich_text foreground="#0000CC">)</rich_text><rich_text>的upid
      </rich_text><rich_text foreground="#0000CC">}</rich_text><rich_text>
             
    一个进程可以在多个命名空间中，但是每个命名空间的local id却不相同，numbers则表示每一层level的upid实例，这里的数组只包含一个元素，如果系统只有一个进程，这是可行的，但如果包含多个进程的话，就需要进行分配更多的空间，这个放在结构体中最后一个元素就是方便扩容。
 其中PIDTYPE_MAX定义如下：
</rich_text><rich_text foreground="#000000">enum  pid_type
</rich_text><rich_text> </rich_text><rich_text foreground="#0000CC">{</rich_text><rich_text>
     PIDTYPE_PID</rich_text><rich_text foreground="#0000CC">,</rich_text><rich_text>
     PIDTYPE_PGID</rich_text><rich_text foreground="#0000CC">,</rich_text><rich_text>
     PIDTYPE_SID</rich_text><rich_text foreground="#0000CC">,</rich_text><rich_text>
     PIDTYPE_MAX
 </rich_text><rich_text foreground="#0000CC">}</rich_text><rich_text>

             
线程组id没有包含在内，因为它与thread group leader的pid一样，没有必要放在里面。
 一个任务可以包含多个命名空间，task_struct的结构体中显示如下：
</rich_text><rich_text foreground="#000000">struct task_struct </rich_text><rich_text foreground="#0000CC">{</rich_text><rich_text>
     …</rich_text><rich_text foreground="#0000CC">...</rich_text><rich_text>
     struct pid_link pids</rich_text><rich_text foreground="#0000CC">[</rich_text><rich_text>PIDTYPE_MAX</rich_text><rich_text foreground="#0000CC">];</rich_text><rich_text>
     …</rich_text><rich_text foreground="#0000CC">...</rich_text><rich_text>
 </rich_text><rich_text foreground="#0000CC">}</rich_text><rich_text>

             
pid_link就是链接所有的pid:
</rich_text><rich_text foreground="#000000">struct pid_link </rich_text><rich_text foreground="#0000CC">{</rich_text><rich_text>
 struct hlist_node node</rich_text><rich_text foreground="#0000CC">;//</rich_text><rich_text>由于每个task包含多个pid</rich_text><rich_text foreground="#0000CC">(</rich_text><rich_text>多个命名空间可见</rich_text><rich_text foreground="#0000CC">)</rich_text><rich_text>，指向的是自己
 struct pid    </rich_text><rich_text foreground="#0000CC">*</rich_text><rich_text>pid</rich_text><rich_text foreground="#0000CC">;</rich_text><rich_text>
 </rich_text><rich_text foreground="#0000CC">}</rich_text><rich_text>

                 
而实现upid中的数值nr到pid对象的hash映射如下：
</rich_text><rich_text foreground="#000000">static struct hlist_head </rich_text><rich_text foreground="#0000CC">*</rich_text><rich_text>pid_hash</rich_text><rich_text foreground="#0000CC">;//</rich_text><rich_text>双向hash链表
 pid_hash是一个hlist_head数组，大小根据机器的内存配置，从16到4096</rich_text><rich_text foreground="#0000CC">,</rich_text><rich_text>初始化代码如下：
 </rich_text><rich_text foreground="#0000CC">[</rich_text><rich_text>kernel</rich_text><rich_text foreground="#0000CC">/</rich_text><rich_text>pid</rich_text><rich_text foreground="#0000CC">.</rich_text><rich_text>c</rich_text><rich_text foreground="#0000CC">]</rich_text><rich_text>
 void __init pidhash_init</rich_text><rich_text foreground="#0000CC">(</rich_text><rich_text>void</rich_text><rich_text foreground="#0000CC">)</rich_text><rich_text>
 </rich_text><rich_text foreground="#0000CC">{</rich_text><rich_text>
     </rich_text><rich_text foreground="#FF0000">int</rich_text><rich_text> i</rich_text><rich_text foreground="#0000CC">,</rich_text><rich_text> pidhash_size</rich_text><rich_text foreground="#0000CC">;</rich_text><rich_text>
     </rich_text><rich_text foreground="#0000CC">//#</rich_text><rich_text>define PAGE_SHIFT 12
     unsigned long megabytes </rich_text><rich_text foreground="#0000CC">=</rich_text><rich_text> nr_kernel_pages </rich_text><rich_text foreground="#0000CC">&gt;&gt;</rich_text><rich_text> </rich_text><rich_text foreground="#0000CC">(</rich_text><rich_text>20</rich_text><rich_text foreground="#0000CC">-</rich_text><rich_text>PAGE_SHIFT</rich_text><rich_text foreground="#0000CC">);</rich_text><rich_text>
     
      pidhash_shift </rich_text><rich_text foreground="#0000CC">=</rich_text><rich_text> max</rich_text><rich_text foreground="#0000CC">(</rich_text><rich_text>4</rich_text><rich_text foreground="#0000CC">,</rich_text><rich_text>fls</rich_text><rich_text foreground="#0000CC">(</rich_text><rich_text>megabytes </rich_text><rich_text foreground="#0000CC">*</rich_text><rich_text> 4</rich_text><rich_text foreground="#0000CC">));</rich_text><rich_text>
      pidhash_shift </rich_text><rich_text foreground="#0000CC">=</rich_text><rich_text> min</rich_text><rich_text foreground="#0000CC">(</rich_text><rich_text>12</rich_text><rich_text foreground="#0000CC">,</rich_text><rich_text>pidhash_shift</rich_text><rich_text foreground="#0000CC">);</rich_text><rich_text>
      </rich_text><rich_text foreground="#0000CC">//</rich_text><rich_text>16项到4096项
      pidhash_size </rich_text><rich_text foreground="#0000CC">=</rich_text><rich_text> 1 </rich_text><rich_text foreground="#0000CC">&lt;&lt;</rich_text><rich_text> pidhash_shift</rich_text><rich_text foreground="#0000CC">;</rich_text><rich_text>
      
      …</rich_text><rich_text foreground="#0000CC">.....</rich_text><rich_text>
      pid_hash </rich_text><rich_text foreground="#0000CC">=</rich_text><rich_text> alloc_bootmem</rich_text><rich_text foreground="#0000CC">(</rich_text><rich_text>pidhash_size</rich_text><rich_text foreground="#0000CC">*</rich_text><rich_text>sizeof</rich_text><rich_text foreground="#0000CC">(*(</rich_text><rich_text>pid_hash</rich_text><rich_text foreground="#0000CC">)));</rich_text><rich_text>
      </rich_text><rich_text foreground="#0000FF">if</rich_text><rich_text foreground="#0000CC">(!</rich_text><rich_text>pid_hash</rich_text><rich_text foreground="#0000CC">)</rich_text><rich_text>
          panic</rich_text><rich_text foreground="#0000CC">(</rich_text><rich_text>“Could </rich_text><rich_text foreground="#0000FF">not</rich_text><rich_text> alloc pidhash”</rich_text><rich_text foreground="#0000CC">);</rich_text><rich_text>
      </rich_text><rich_text foreground="#0000FF">for</rich_text><rich_text foreground="#0000CC">(</rich_text><rich_text>i</rich_text><rich_text foreground="#0000CC">=</rich_text><rich_text>0</rich_text><rich_text foreground="#0000CC">;</rich_text><rich_text>i</rich_text><rich_text foreground="#0000CC">&lt;</rich_text><rich_text> pidhash_size</rich_text><rich_text foreground="#0000CC">;++</rich_text><rich_text>i</rich_text><rich_text foreground="#0000CC">)</rich_text><rich_text>
              INIT_HLIST_HEAD</rich_text><rich_text foreground="#0000CC">(&amp;</rich_text><rich_text>pid_hash</rich_text><rich_text foreground="#0000CC">[</rich_text><rich_text>i</rich_text><rich_text foreground="#0000CC">]);</rich_text><rich_text>
  </rich_text><rich_text foreground="#0000CC">}</rich_text><rich_text>
</rich_text></node><node name="printk的log level" prog_lang="custom-colors" readonly="False" tags="" unique_id="10"><rich_text>Printk的loglevel和日志记录分析
（分析版本是ubuntu7.10，内核源码是2.6.23）
 
首先，printk有8个loglevel,定义在&lt;linux/kernel.h&gt;中，其中数值范围从0到7，数值越小，优先级越高。
#define    KERN_EMERG      &quot;&lt;0&gt;&quot;      /* system is unusable     */ 系统崩溃
#define    KERN_ALERT       &quot;&lt;1&gt;&quot;/* action must be taken immediately*/必须紧急处理
#define    KERN_CRIT  &quot;&lt;2&gt;&quot;      /* critical conditions      */ 临界条件，严重的硬软件错误
#define    KERN_ERR    &quot;&lt;3&gt;&quot;      /* error conditions  */ 报告错误
#define    KERN_WARNING &quot;&lt;4&gt;&quot;      /* warning conditions           */警告
#define    KERN_NOTICE     &quot;&lt;5&gt;&quot;      /* normal but significant condition */普通但还是须注意
#define    KERN_INFO  &quot;&lt;6&gt;&quot;      /* informational                    */ 信息
#define    KERN_DEBUG      &quot;&lt;7&gt;&quot;      /* debug-level messages               */ 调试信息
从这里也可以看出他们的优先级是数值越小，其紧急和严重程度就越高。
extern int console_printk[];
 
#define console_loglevel (console_printk[0])
#define default_message_loglevel (console_printk[1])
#define minimum_console_loglevel (console_printk[2])
#define default_console_loglevel (console_printk[3])
 
未指定优先级的默认级别定义在/kernel/printk.c中：
 
/* printk's without a loglevel use this.. */
#define DEFAULT_MESSAGE_LOGLEVEL 4 /* KERN_WARNING */
/* We show everything that is MORE important than this.. */
 
#define MINIMUM_CONSOLE_LOGLEVEL 1 /* Minimum loglevel we let people use */
#define DEFAULT_CONSOLE_LOGLEVEL 7 /* anything MORE serious than KERN_DEBUG */
 
int console_printk[4] = {
       DEFAULT_CONSOLE_LOGLEVEL,   /* console_loglevel */ 终端级别
       DEFAULT_MESSAGE_LOGLEVEL,   /* default_message_loglevel */默认级别
       MINIMUM_CONSOLE_LOGLEVEL,  /* minimum_console_loglevel */让用户使用的最小级别
       DEFAULT_CONSOLE_LOGLEVEL,   /* default_console_loglevel */默认终端级别
};
当优先级的值小于console_loglevel这个整数变量的值，信息才能显示出来。而console_loglevel的初始值DEFAULT_CONSOLE_LOGLEVEL也定义在/kernel/printk.c中： 
 
cat /proc/sys/kernel/printk
4   4   1   7
这个默认值是在sysctl.conf中写的，在系统启动时就把这个值写到/proc/sys/kernel/printk这个文件了。也可以使用下面的命令修改其值
echo 0 &gt; /proc/sys/kernel/printk 
cat /proc/sys/kernel/printk
0   4   1   7
 
它们根据日志记录消息的重要性，定义将其发送到何处。关于不同日志级别的更多信息，请阅读 syslog(2) 联机帮助页。该文件的四个值为：
控制台日志级别：优先级高于该值的消息将被打印至控制台
缺省的消息日志级别：将用该优先级来打印没有优先级的消息
最低的控制台日志级别：控制台日志级别可被设置的最小值（最高优先级）
缺省的控制台日志级别：控制台日志级别的缺省值
以下是我的测试程序和作的相关的测试。
#include &lt;linux/module.h&gt;
#include &lt;linux/init.h&gt;
#include &lt;linux/kernel.h&gt;
 
static int __init pinit(void)
{
 printk(&quot;&lt;0&gt;goodluck0!/n&quot;);
 printk(&quot;&lt;1&gt;goodluck1!/n&quot;);
 printk(&quot;&lt;2&gt;goodluck2!/n&quot;);
 printk(&quot;&lt;3&gt;goodluck3!/n&quot;);
 printk(&quot;&lt;4&gt;goodluck4!/n&quot;);
 printk(&quot;&lt;5&gt;goodluck5!/n&quot;);
 printk(&quot;&lt;6&gt;goodluck6!/n&quot;);
 printk(&quot;&lt;7&gt;goodluck7!/n&quot;);
 printk(&quot;&lt;8&gt;goodluck8!/n&quot;);//虽然没有这级别，我还是试了一把。目的是看默认级别。
 return 0;
}
 
static void __exit pexit(void)
{
 printk(&quot;&lt;0&gt;goodbey!0/n&quot;);
 printk(&quot;&lt;1&gt;goodbey!1/n&quot;);
 printk(&quot;&lt;2&gt;goodbey!2/n&quot;);
 printk(&quot;&lt;3&gt;goodbey!3/n&quot;);
 printk(&quot;&lt;4&gt;goodbey!4/n&quot;);
 printk(&quot;&lt;5&gt;goodbey!5/n&quot;);
printk(&quot;&lt;6&gt;goodbey!6/n&quot;);
 printk(&quot;&lt;7&gt;goodbey!7/n&quot;);
}
 
module_init(pinit);
module_exit(pexit);
 
在这里我只观察了四个比较重要的日志文件：messages，kern.log，syslog，debug。这四个文件都在/var/log/这个目录下。它的日志文件经观察未出现这些printk信息。
cat /proc/sys/kernel/printk
4   4   1   7
在上面这种情况下日志文件的变化情况是：
l         kern.log：   纪录了级别是0—7包括&lt;8&gt;的所有信息，在这些纪录当中，其中&lt;8&gt;的纪录是这样的。&lt;8&gt;goodluck8!
l         Messages： 只是记录了456和&lt;8&gt;。
l         Syslog：     记录和kern.log一样。
l         Debug：     之记录级别是7的信息。
cat /proc/sys/kernel/printk
0   4   1   7
在上面这种情况下日志文件的变化情况是：
l         kern.log：   纪录了级别是0—7包括&lt;8&gt;的所有信息，在这些纪录当中，其中&lt;8&gt;的纪录是这样的。&lt;8&gt;goodluck8!
l         Messages： 只是记录了456和&lt;8&gt;。
l         Syslog：     记录和kern.log一样。
l         Debug：     之记录级别是7的信息。
 
cat /proc/sys/kernel/printk
7   4   1   7
l         kern.log：   纪录了级别是0—7包括&lt;8&gt;的所有信息，在这些纪录当中，其中&lt;8&gt;的纪录是这样的。&lt;8&gt;goodluck8!
l         Messages： 只是记录了456和&lt;8&gt;。
l         Syslog：     记录和kern.log一样。
l         Debug：     之记录级别是7的信息。
分析结论：在操作系统是图形化的界面下测试证明-日志记录和终端级别是没有关系的，但是在文本界面下的结果和这里是不太一样的，根据不同的设置有些信息会输出到终端。这里就不多说了。
其次有关于系统的日志记录工具有两种主要的：syslog和klog。
Linux系统中/etc/init.d/sysklogd会启动2个守护进程:Klogd, Syslogd。
syslog 是 Unix 系统的一个常见组件，用于执行系统日志记录活动。syslogd 是它的守护进程。syslogd 从一组日志源（如 /dev/log 和  /dev/klog ）中读取数据，并按照 /etc/syslog.conf  中的说明处理这些日志消息。通过调用syslog()，可将应用程序日志消息记录到 syslog 中。syslog  消息采用一种包含可选优先级和设备的标准格式。优先级指示消息的紧急程度。设备指示发布消息的子系统。/usr/include/syslog.h中定义 了它的优先级和设备资源。
klog是一个从Unix内核接受消息的设备klogd 守护进程获得并记录 Linux 内核信息。通常，syslogd 会记录 klogd 传来的所有内核信息。
 
syslogd的配置文件是/etc/syslog.conf。
下面是我机子上这个文件的部分内容。主要是对debug和messages文件要记录内容的设置。
*.=debug;/
        auth,authpriv.none;/
        news.none;mail.none     -/var/log/debug
*.=info;*.=notice;*.=warn;/
        auth,authpriv.none;/
        cron,daemon.none;/
        mail,news.none          -/var/log/messages
 
本文来自CSDN博客，转载请标明出处：</rich_text><rich_text link="webs http://blog.csdn.net/brfeng/archive/2008/08/05/2772502.aspx">http://blog.csdn.net/brfeng/archive/2008/08/05/2772502.aspx</rich_text><rich_text>
 
要将linux内核的带级别控制的printk内容打印出来，在命令行 输入 dmesg -n 8 就将2010-12-13 17:01 
</rich_text><rich_text justification="left"></rich_text><rich_text>

 
上面显示的4个数据分别对应控制台日志级别、默认的消息日志级别、最低的控制台日志级别和默认的控制台日志级别。
可用下面的命令设置当前日志级别：
 
</rich_text><rich_text justification="left"></rich_text><rich_text>

 
另外为了防止 printk() 瞬时被调用次数过多，可以通过 printk_ratelimit()  来控制速度。printk_ratelimit() 通过跟踪发送到控制台的消息数量工作，当输出速度超过一个临界值，就返回零。可通过修改  /proc/sys/kernel/{printk_ratelimit, printk_ratelimit_burst} 来调节  printk_ratelimit() 的计算。
printk_ratelimit() 的典型用法如下：
if (printk_ratelimit())
    printk(KERN_INFO &quot;Hello, world!/n&quot;);
</rich_text><codebox char_offset="4649" frame_height="150" frame_width="300" highlight_brackets="False" show_line_numbers="False" syntax_highlighting="custom-colors" width_in_pixels="True">#cat /proc/sys/kernel/printk
6 4 1 7 </codebox><codebox char_offset="4727" frame_height="150" frame_width="300" highlight_brackets="False" show_line_numbers="False" syntax_highlighting="custom-colors" width_in_pixels="True"># echo 8 &gt; /proc/sys/kernel/printk </codebox></node><node name="原子操作" prog_lang="custom-colors" readonly="False" tags="" unique_id="3"><rich_text>  在任何处理器平台下，都会有一些原子性操作，供操作系统使用，我们这里只讲x86下面的。在单处理器情况下，每条指令的执行都是原子性的，但在多处理器情 况下，只有那些单独的读操作或写操作才是原子性的。为了弥补这一缺点，x86提供了附加的lock前缀，使带lock前缀的读修改写指令也能原子性执行。 带lock前缀的指令在操作时会锁住总线，使自身的执行即使在多处理器间也是原子性执行的。xchg指令不带lock前缀也是原子性执行，也就是说 xchg执行时默认会锁内存总线。原子性操作是线程间同步的基础，linux专门定义了一种只进行原子操作的类型atomic_t，并提供相关的原子读写 调用API。本节就来分析这些原子操作在x86下的实现。
1. typedef struct {  
2.     volatile int counter;  
3. } atomic_t;  
 原子类型其实是int类型，只是禁止寄存器对其暂存。
1. #define ATOMIC_INIT(i)  { (i) }  
原子类型的初始化。32位x86平台下atomic API在arch/x86/include/asm/atomic_32.h中实现。
1. static inline int atomic_read(const atomic_t *v)  
2. {  
3.     return v-&gt;counter;  
4. }  
5.   
6. static inline void atomic_set(atomic_t *v, int i)  
7. {  
8.     v-&gt;counter = i;  
9. }  
单独的读操作或者写操作，在x86下都是原子性的。
1. static inline void atomic_add(int i, atomic_t *v)  
2. {  
3.     asm volatile(LOCK_PREFIX &quot;addl %1,%0&quot;  
4.              : &quot;+m&quot; (v-&gt;counter)  
5.              : &quot;ir&quot; (i));  
6. }  
7.   
8. static inline void atomic_sub(int i, atomic_t *v)  
9. {  
10.     asm volatile(LOCK_PREFIX &quot;subl %1,%0&quot;  
11.              : &quot;+m&quot; (v-&gt;counter)  
12.              : &quot;ir&quot; (i));  
13. }  
atomic_add和atomic_sub属于读修改写操作，实现时需要加lock前缀。
1. static inline int atomic_sub_and_test(int i, atomic_t *v)  
2. {  
3.     unsigned char c;  
4.   
5.     asm volatile(LOCK_PREFIX &quot;subl %2,%0; sete %1&quot;  
6.              : &quot;+m&quot; (v-&gt;counter), &quot;=qm&quot; (c)  
7.              : &quot;ir&quot; (i) : &quot;memory&quot;);  
8.     return c;  
9. }  
atomic_sub_and_test执行完减操作后检查结果是否为0。
1. static inline void atomic_inc(atomic_t *v)  
2. {  
3.     asm volatile(LOCK_PREFIX &quot;incl %0&quot;  
4.              : &quot;+m&quot; (v-&gt;counter));  
5. }  
6.   
7. static inline void atomic_dec(atomic_t *v)  
8. {  
9.     asm volatile(LOCK_PREFIX &quot;decl %0&quot;  
10.              : &quot;+m&quot; (v-&gt;counter));  
11. }  
atomic_inc和atomic_dec是递增递减操作。
1. static inline int atomic_dec_and_test(atomic_t *v)  
2. {  
3.     unsigned char c;  
4.   
5.     asm volatile(LOCK_PREFIX &quot;decl %0; sete %1&quot;  
6.              : &quot;+m&quot; (v-&gt;counter), &quot;=qm&quot; (c)  
7.              : : &quot;memory&quot;);  
8.     return c != 0;  
9. }  
atomic_dec_and_test在递减后检查结果是否为0。
1. static inline int atomic_inc_and_test(atomic_t *v)  
2. {  
3.     unsigned char c;  
4.   
5.     asm volatile(LOCK_PREFIX &quot;incl %0; sete %1&quot;  
6.              : &quot;+m&quot; (v-&gt;counter), &quot;=qm&quot; (c)  
7.              : : &quot;memory&quot;);  
8.     return c != 0;  
9. }  
atomic_inc_and_test在递增后检查结果是否为0。
1. static inline int atomic_add_negative(int i, atomic_t *v)  
2. {  
3.     unsigned char c;  
4.   
5.     asm volatile(LOCK_PREFIX &quot;addl %2,%0; sets %1&quot;  
6.              : &quot;+m&quot; (v-&gt;counter), &quot;=qm&quot; (c)  
7.              : &quot;ir&quot; (i) : &quot;memory&quot;);  
8.     return c;  
9. }  
atomic_add_negative在加操作后检查结果是否为负数。
1. static inline int atomic_add_return(int i, atomic_t *v)  
2. {  
3.     int __i;  
4. #ifdef CONFIG_M386  
5.     unsigned long flags;  
6.     if (unlikely(boot_cpu_data.x86 &lt;= 3))  
7.         goto no_xadd;  
8. #endif  
9.     /* Modern 486+ processor */  
10.     __i = i;  
11.     asm volatile(LOCK_PREFIX &quot;xaddl %0, %1&quot;  
12.              : &quot;+r&quot; (i), &quot;+m&quot; (v-&gt;counter)  
13.              : : &quot;memory&quot;);  
14.     return i + __i;  
15.   
16. #ifdef CONFIG_M386  
17. no_xadd: /* Legacy 386 processor */  
18.     local_irq_save(flags);  
19.     __i = atomic_read(v);  
20.     atomic_set(v, i + __i);  
21.     local_irq_restore(flags);  
22.     return i + __i;  
23. #endif  
24. }  
atomic_add_return 不仅执行加操作，而且把相加的结果返回。它是通过xadd这一指令实现的。
1. static inline int atomic_sub_return(int i, atomic_t *v)  
2. {  
3.     return atomic_add_return(-i, v);  
4. }  
atomic_sub_return 不仅执行减操作，而且把相减的结果返回。它是通过atomic_add_return实现的。
1. static inline int atomic_cmpxchg(atomic_t *v, int old, int new)  
2. {  
3.     return cmpxchg(&amp;v-&gt;counter, old, new);  
4. }  
5.   
6. #define cmpxchg(ptr, o, n)                      \  
7.     ((__typeof__(*(ptr)))__cmpxchg((ptr), (unsigned long)(o),   \  
8.                        (unsigned long)(n),      \  
9.                        sizeof(*(ptr))))  
10.   
11. static inline unsigned long __cmpxchg(volatile void *ptr, unsigned long old,  
12.                       unsigned long new, int size)  
13. {  
14.     unsigned long prev;  
15.     switch (size) {  
16.     case 1:  
17.         asm volatile(LOCK_PREFIX &quot;cmpxchgb %b1,%2&quot;  
18.                  : &quot;=a&quot;(prev)  
19.                  : &quot;q&quot;(new), &quot;m&quot;(*__xg(ptr)), &quot;0&quot;(old)  
20.                  : &quot;memory&quot;);  
21.         return prev;  
22.     case 2:  
23.         asm volatile(LOCK_PREFIX &quot;cmpxchgw %w1,%2&quot;  
24.                  : &quot;=a&quot;(prev)  
25.                  : &quot;r&quot;(new), &quot;m&quot;(*__xg(ptr)), &quot;0&quot;(old)  
26.                  : &quot;memory&quot;);  
27.         return prev;  
28.     case 4:  
29.         asm volatile(LOCK_PREFIX &quot;cmpxchgl %k1,%2&quot;  
30.                  : &quot;=a&quot;(prev)  
31.                  : &quot;r&quot;(new), &quot;m&quot;(*__xg(ptr)), &quot;0&quot;(old)  
32.                  : &quot;memory&quot;);  
33.         return prev;  
34.     case 8:  
35.         asm volatile(LOCK_PREFIX &quot;cmpxchgq %1,%2&quot;  
36.                  : &quot;=a&quot;(prev)  
37.                  : &quot;r&quot;(new), &quot;m&quot;(*__xg(ptr)), &quot;0&quot;(old)  
38.                  : &quot;memory&quot;);  
39.         return prev;  
40.     }  
41.     return old;  
42. }  

 atomic_cmpxchg是由cmpxchg指令完成的。它把旧值同atomic_t类型的值相比较，如果相同，就把新值存入atomic_t类型的值中，返回atomic_t类型变量中原有的值。
 
 
1. static inline int atomic_xchg(atomic_t *v, int new)  
2. {  
3.     return xchg(&amp;v-&gt;counter, new);  
4. }  
5.   
6. #define xchg(ptr, v)                            \  
7.     ((__typeof__(*(ptr)))__xchg((unsigned long)(v), (ptr), sizeof(*(ptr))))  
8.   
9. static inline unsigned long __xchg(unsigned long x, volatile void *ptr,  
10.                    int size)  
11. {  
12.     switch (size) {  
13.     case 1:  
14.         asm volatile(&quot;xchgb %b0,%1&quot;  
15.                  : &quot;=q&quot; (x)  
16.                  : &quot;m&quot; (*__xg(ptr)), &quot;0&quot; (x)  
17.                  : &quot;memory&quot;);  
18.         break;  
19.     case 2:  
20.         asm volatile(&quot;xchgw %w0,%1&quot;  
21.                  : &quot;=r&quot; (x)  
22.                  : &quot;m&quot; (*__xg(ptr)), &quot;0&quot; (x)  
23.                  : &quot;memory&quot;);  
24.         break;  
25.     case 4:  
26.         asm volatile(&quot;xchgl %k0,%1&quot;  
27.                  : &quot;=r&quot; (x)  
28.                  : &quot;m&quot; (*__xg(ptr)), &quot;0&quot; (x)  
29.                  : &quot;memory&quot;);  
30.         break;  
31.     case 8:  
32.         asm volatile(&quot;xchgq %0,%1&quot;  
33.                  : &quot;=r&quot; (x)  
34.                  : &quot;m&quot; (*__xg(ptr)), &quot;0&quot; (x)  
35.                  : &quot;memory&quot;);  
36.         break;  
37.     }  
38.     return x;  
39. }  

 atomic_xchg则是将新值存入atomic_t类型的变量，并将变量的旧值返回。它使用xchg指令实现。
 
1. /** 
2.  * atomic_add_unless - add unless the number is already a given value 
3.  * @v: pointer of type atomic_t 
4.  * @a: the amount to add to v... 
5.  * @u: ...unless v is equal to u. 
6.  * 
7.  * Atomically adds @a to @v, so long as @v was not already @u. 
8.  * Returns non-zero if @v was not @u, and zero otherwise. 
9.  */  
10. static inline int atomic_add_unless(atomic_t *v, int a, int u)  
11. {  
12.     int c, old;  
13.     c = atomic_read(v);  
14.     for (;;) {  
15.         if (unlikely(c == (u)))  
16.             break;  
17.         old = atomic_cmpxchg((v), c, c + (a));  
18.         if (likely(old == c))  
19.             break;  
20.         c = old;  
21.     }  
22.     return c != (u);  
23. }  

 atomic_add_unless的功能比较特殊。它检查v是否等于u，如果不是则把v的值加上a，返回值表示相加前v是否等于u。因为在atomic_read和atomic_cmpxchg中间可能有其它的写操作，所以要循环检查自己的值是否被写进去。
 
1. #define atomic_inc_not_zero(v) atomic_add_unless((v), 1, 0)  
2.   
3. #define atomic_inc_return(v)  (atomic_add_return(1, v))  
4. #define atomic_dec_return(v)  (atomic_sub_return(1, v))  

atomic_inc_not_zero在v值不是0时加1。
atomic_inc_return对v值加1，并返回相加结果。
atomic_dec_return对v值减1，并返回相减结果。
 
1. #define atomic_clear_mask(mask, addr)               \  
2.     asm volatile(LOCK_PREFIX &quot;andl %0,%1&quot;           \  
3.              : : &quot;r&quot; (~(mask)), &quot;m&quot; (*(addr)) : &quot;memory&quot;)  
atomic_clear_mask清除变量某些位。
1. #define atomic_set_mask(mask, addr)             \  
2.     asm volatile(LOCK_PREFIX &quot;orl %0,%1&quot;                \  
3.              : : &quot;r&quot; (mask), &quot;m&quot; (*(addr)) : &quot;memory&quot;)  

 atomic_set_mask将变量的某些位置位。
1. /* Atomic operations are already serializing on x86 */  
2. #define smp_mb__before_atomic_dec() barrier()  
3. #define smp_mb__after_atomic_dec()  barrier()  
4. #define smp_mb__before_atomic_inc() barrier()  
5. #define smp_mb__after_atomic_inc()  barrier()  
因为x86的atomic操作大多使用原子指令或者带lock前缀的指令。带lock前缀的指令执行前会完成之前的读写操作，对于原子操作来说不会 受之前对同一位置的读写操作，所以这里只是用空操作barrier()代替。barrier()的作用相当于告诉编译器这里有一个内存屏障，放弃在寄存器 中的暂存值，重新从内存中读入。
 
本节的atomic_t类型操作是最基础的，为了介绍下面的内容，必须先介绍它。如果可以使用atomic_t类型代替临界区操作，也可以加快不少速度。


=======================================================================================
如没有赋值，则返回非零；否则返回零。
int android_atomic_cmpxchg(int32_t oldvalue, int32_t newvalue, volatile int32_t* addr) {
    return OSAtomicCompareAndSwap32Barrier(oldvalue, newvalue,(int32_t*)addr) == 0;
}

OSAtomicCompareAndSwap32Barrier :

if (*addr == oldvalue) {
     *addr = newvalue;
     return 1;
  } else {
     return 0;
  }

</rich_text></node><node name="关于热插拔usb hotplug /proc/sys/kernel mdev udev busybox " prog_lang="custom-colors" readonly="False" tags="" unique_id="9"><rich_text foreground="#000000">这篇文章说的很好http://blog.chinaunix.net/u1/38994/showart_2022040.html：</rich_text><rich_text>  
</rich_text><rich_text foreground="#000000">如何使用busybox精简版本udev程序--mdev动态创建插入的u盘和鼠标等设备 </rich_text><rich_text>  
</rich_text><rich_text foreground="#000000">busybox的mdev是一个精简了的udev管理程序,它可以间接的以hotplug方式被内核调用,进而在arm平台上/dev目录下动态创建设备 节点,因为hotplug会被内核发送uevent之前调用,所以如果动态可插拔设备很多,很频繁,那么每次内核都会调用elf格式的用户空间的 hotplug,生成一个独立的hotplug程序来处理,所以hotplug是一个非常笨重的实现方法,但是在我们的arm开发板上,可插拔设备并没有 想象中的频繁
 目前还没有必要移植完全版的udev,所以完全可以在不复杂的嵌入式设备上使用mdev来管理动态节点,
 方法也很简单,就是在rcS脚本中加入下面一句,将用户空间的应用程序路径传递给内核,
 echo /sbin/mdev &gt; /proc/sys/kernel/hotplug
 之后kernel会在每次设备出现变动时调用上面一句传递进去的用户空间应用程序/sbin/mdev来处理对应的信息,进而mdev应用程序操作/dev目录下的设备,进行添加或删除,可以参考</rich_text><rich_text foreground="#000000" link="webs http://blog.chinaunix.net/u1/38994/showart_1981836.html">添加hotplug函数到内核,监控uevent信息</rich_text><rich_text foreground="#000000"> 
   mdev的另外一个很有用的地方是,他可以通过proc和sys文件系统来动态整理出注册的设备,进而到/dev/下生成他们对应的节点,
 使用该功能之前必须mount上proc和sys文件系统,然后简单的执行下面的一句就弯成了:
   mdev -s
 
 如果需要编译udev,下面是udev的下载地址：</rich_text><rich_text foreground="#000000" link="webs http://www.us.kernel.org/pub/linux/utils/kernel/hotplug/udev-145.tar.bz2">http://www.us.kernel.org/pub/linux/utils/kernel/hotplug/udev-145.tar.bz2</rich_text><rich_text foreground="#000000"> </rich_text><rich_text>  
</rich_text><rich_text foreground="#000000">
 </rich_text><rich_text>  
</rich_text><rich_text foreground="#000000">这个哥们也说得比较详细：</rich_text><rich_text>  
</rich_text><rich_text foreground="#000000">http://203.208.39.132/search?q=cache:c8dPpXQD5HwJ:jimmy-lee.blog.hexun.com/31155612_d.html+busybox+hotplug&amp;cd=9&amp;hl=zh-CN&amp;ct=clnk&amp;gl=cn&amp;st_usg=ALhdy28vvvlS7owkZsMZfoX5oCEEE3l8aA</rich_text><rich_text>  
</rich_text><rich_text foreground="#000000">
 </rich_text><rich_text>  
</rich_text><rich_text foreground="#000000">1, </rich_text><rich_text background="#ffffff" foreground="#000000">busybox</rich_text><rich_text>   添加mdev支持  
</rich_text><rich_text foreground="#000000">
 </rich_text><rich_text>  
</rich_text><rich_text foreground="#000000">2, 在/etc/rc.d/rcS中添加</rich_text><rich_text>  
</rich_text><rich_text foreground="#000000">#mount filesystem</rich_text><rich_text>  
</rich_text><rich_text foreground="#000000">/bin/mount -a</rich_text><rich_text>  
</rich_text><rich_text foreground="#000000">#start mdev</rich_text><rich_text>  
</rich_text><rich_text foreground="#000000">#设置系统的hotplug 程序为mdev</rich_text><rich_text>  
</rich_text><rich_text foreground="#000000">echo /sbin/mdev &gt; /proc/sys/kernel/</rich_text><rich_text background="#ffffff" foreground="#000000">hotplug  </rich_text><rich_text>   
   
</rich_text><rich_text foreground="#000000">#</rich_text><rich_text foreground="#ff0000">扫描并创建节点，这一步可不能少</rich_text><rich_text> 
   
</rich_text><rich_text foreground="#000000">mdev –s </rich_text><rich_text>  
</rich_text><rich_text foreground="#000000">
 </rich_text><rich_text>  
</rich_text><rich_text foreground="#000000">/etc/fstab的内容如下：</rich_text><rich_text>  
</rich_text><rich_text foreground="#000000">proc    /proc   proc    defaults    0       0</rich_text><rich_text>  
</rich_text><rich_text foreground="#000000">none    /tmp    ramfs   defaults 0       0</rich_text><rich_text>  
</rich_text><rich_text foreground="#000000">mdev    /dev    ramfs   defaults 0       0</rich_text><rich_text>  
</rich_text><rich_text foreground="#000000">sysfs   /sys    sysfs   defaults    0       0</rich_text><rich_text>  
</rich_text><rich_text foreground="#000000">
 </rich_text><rich_text>  
</rich_text><rich_text foreground="#000000">执行mdev -s  ：以‘-s’为参数调用位于 /sbin目录写的mdev（其实是个链接，作用是传递参数给/bin目录下的</rich_text><rich_text background="#ffffff" foreground="#000000">busybox </rich_text><rich_text> 程序并调用它），mdev扫描 /sys/class 和 /sys/block 中所有的类设备目录，如果在目录中含有名为“dev”的文件，且文件中包含的是设备号，则mdev就利用这些信息为这个设备在/dev 下创建设备节点文件。一般只在启动时才执行一次 “mdev -s”。  
</rich_text><rich_text foreground="#000000">
 </rich_text><rich_text>  
</rich_text><rich_text foreground="#000000">热插拔事件：由于启动时运行了命令：echo /sbin/mdev &gt; /proc/sys/kernel/</rich_text><rich_text background="#ffffff" foreground="#000000"> </rich_text><rich_text> hotplug ，那么当有热插拔事件产生时，内核就会调用位于 /sbin目录的mdev。这时mdev通过环境变量中的 ACTION 和 DEVPATH，来确定此次热插拔事件的动作以及影响了/sys中的那个目录。接着会看看这个目录中是否有“dev”的属性文件，如果有就利用这些信息为 这个设备在/dev 下创建设备节点文件。  
</rich_text><rich_text foreground="#000000">
 </rich_text><rich_text>  
</rich_text><rich_text foreground="#000000">解决使用mdev时“cannot create /proc/sys/kernel/hotplug :nonexistent directory”错误</rich_text><rich_text>  
</rich_text><rich_text foreground="#000000">确保编译内核时编译如下选项：</rich_text><rich_text>  
</rich_text><rich_text foreground="#000000">CONFIG_PROC_FS=y</rich_text><rich_text>  
</rich_text><rich_text foreground="#000000">CONFIG_PROC_SYSCTL=y</rich_text><rich_text>  
</rich_text><rich_text foreground="#000000">CONFIG_HOTPLUG=y </rich_text><rich_text>  
</rich_text><rich_text foreground="#000000">CONFIG_NET=y </rich_text><rich_text>  
</rich_text><rich_text foreground="#000000">如果CONFIG_HOTPLUG和CONFIG_NET不选或没全选上的话，/proc/sys/kernel下将不会创建</rich_text><rich_text background="#ffffff" foreground="#000000"> </rich_text><rich_text> hotplug文件.(参见kernel/sysctl.c)
</rich_text><rich_text foreground="#000000">////////////////////////////////////////////////////////</rich_text><rich_text>
</rich_text><rich_text foreground="#000000">这里有一段翻译的：</rich_text><rich_text>
 
</rich_text><rich_text foreground="#000000">MDEV 入门(转)
</rich_text><rich_text> 
Busybox-1.7.0/docs/mdev.txt
翻译：tekkamanninja Email：tekkamanninja@163.com - 1 -
-------------
MDEV Primer
</rich_text><rich_text foreground="#0000ff">MDEV 入门</rich_text><rich_text>
-------------
For those of us who know how to use mdev, a primer might seem lame. For
</rich_text><rich_text foreground="#0000ff">这份文档对于那些知道如何使用 mdev 的人看来可能有些肤浅。</rich_text><rich_text>
everyone else, mdev is a weird black box that they hear is awesome, but can't
</rich_text><rich_text foreground="#0000ff">但对于其他人，mdev 可能是一个神秘的黑匣子，以至让人敬畏。</rich_text><rich_text>
seem to get their head around how it works. Thus, a primer.
</rich_text><rich_text foreground="#0000ff">而这份文档又不足以让他们知道mdev 是如何工作的。 因此，这是一份入门文档。
</rich_text><rich_text>-----------
Basic Use
</rich_text><rich_text foreground="#0000ff">基本使用方法
</rich_text><rich_text>-----------
Mdev has two primary uses: initial population and dynamic updates. Both
</rich_text><rich_text foreground="#0000ff">mdev 有两个主要的应用：初始化对象和动态更新。</rich_text><rich_text>
require sysfs support in the kernel and have it mounted at /sys. For dynamic
</rich_text><rich_text foreground="#0000ff">两个应用都需要内核 sysfs 的支持，且必须挂载到 /sys 。为了实现动态更新，</rich_text><rich_text>
updates, you also need to have hotplugging enabled in your kernel.
</rich_text><rich_text foreground="#0000ff">你还必须在内核配置时增加热插拔支持（hotplugging）。</rich_text><rich_text>
Here's a typical code snippet from the init script:
</rich_text><rich_text foreground="#0000ff">以下是系统初始化脚本中一个典型的使用mdev 的代码片段：
</rich_text><rich_text>    [1] mount -t sysfs sysfs /sys
    [2] echo /bin/mdev &gt; /proc/sys/kernel/hotplug
    [3] mdev -s
Of course, a more &quot;full&quot; setup would entail executing this before the previous
</rich_text><rich_text foreground="#0000ff">当然，一个对mdev 更完整的安装还必须在以上代码片段前执行下面的命令：</rich_text><rich_text>
code snippet:
    [4] mount -t tmpfs mdev /dev
    [5] mkdir /dev/pts
    [6] mount -t devpts devpts /dev/pts
The simple explanation here is that [1] you need to have /sys mounted before
</rich_text><rich_text foreground="#0000ff">简单说明一下上面的代码：[1]你必须在执行mdev 前挂载 /sys 。</rich_text><rich_text>
executing mdev. Then you [2] instruct the kernel to execute /bin/mdev whenever
</rich_text><rich_text foreground="#0000ff">随后你 [2] 命令内核在增删设备时执行 /bin/mdev ，</rich_text><rich_text>
a device is added or removed so that the device node can be created or
</rich_text><rich_text foreground="#0000ff">使设备节点文件会被创建和删除。</rich_text><rich_text>
destroyed. Then you [3] seed /dev with all the device nodes that were created
</rich_text><rich_text foreground="#0000ff">最后你 [3] 设置mdev，让它在系统启动时创建所有的设备节点。</rich_text><rich_text>
while the system was booting.
For the &quot;full&quot; setup, you want to [4] make sure /dev is a tmpfs filesystem
</rich_text><rich_text foreground="#0000ff">而对mdev 更完整的安装，你必须[4]确保 /dev 是 tmpfs 文件系统</rich_text><rich_text>
(assuming you're running out of flash). Then you want to [5] create the
</rich_text><rich_text foreground="#0000ff">(假设文件系统在 flash 外运行)。 而且你必须 [5] 创建</rich_text><rich_text>

-------------
MDEV Config (/etc/mdev.conf)
</rich_text><rich_text foreground="#0000ff">MDEV 配置 (/etc/mdev.conf)</rich_text><rich_text>
-------------
Mdev has an optional config file for controlling ownership/permissions of
device nodes if your system needs something more than the default root/root
660 permissions.
</rich_text><rich_text foreground="#0000ff">如果你的系统需要一些比默认的 root/root 660 更多的权限，
你可以使用 mdev 的可选配置文件，以控制设备节点的 所有者 和 权限。</rich_text><rich_text>
The file has the format:
</rich_text><rich_text foreground="#0000ff">这个文件的格式如下：</rich_text><rich_text>
    &lt;device regex&gt; &lt;uid&gt;:&lt;gid&gt; &lt;octal permissions&gt;
For example:
</rich_text><rich_text foreground="#0000ff">例如：</rich_text><rich_text>
    hd[a-z][0-9]* 0:3 660
The config file parsing stops at the first matching line. If no line is
</rich_text><rich_text foreground="#0000ff">这个配置文件在第一个匹配行处停止解析。 如果没有匹配行，</rich_text><rich_text>
matched, then the default of 0:0 660 is used. To set your own default, simply
</rich_text><rich_text foreground="#0000ff">那么就使用默认的 0:0 660 。 你也可以通过在最后创建如下的全匹配
</rich_text><rich_text>create your own total match like so:
</rich_text><rich_text foreground="#0000ff">行，来设置你自己的默认设置：</rich_text><rich_text>
    .* 1:1 777
If you also enable support for executing your own commands, then the file has
</rich_text><rich_text foreground="#0000ff">如果你想 mdev 在找到匹配行时可以执行自定义的命令，那么文件格式如下：</rich_text><rich_text>
the format:
    &lt;device regex&gt; &lt;uid&gt;:&lt;gid&gt; &lt;octal permissions&gt; [&lt;@|$|*&gt; &lt;command&gt;]
The special characters have the meaning:
</rich_text><rich_text foreground="#0000ff">特殊字符的意义如下：</rich_text><rich_text>
   @ Run after creating the device.
</rich_text><rich_text foreground="#0000ff">    @ 在创建设备节点后运行命令。
</rich_text><rich_text>    $ Run before removing the device.
</rich_text><rich_text foreground="#0000ff">    $ 在删除设备节点前运行命令。</rich_text><rich_text>
    * Run both after creating and before removing the device.
</rich_text><rich_text foreground="#0000ff">    * 在创建设备节点后和删除设备节点前都运行命令。
</rich_text><rich_text>The command is executed via the system() function (which means you're giving a
</rich_text><rich_text foreground="#0000ff">这些命令是通过系统函数（system()）执行的（也就是说你在对shell 下命令）</rich_text><rich_text>
command to the shell), so make sure you have a shell installed at /bin/sh.
</rich_text><rich_text foreground="#0000ff">，所以请确保你已在 /bin/sh 安装了shell。</rich_text><rich_text>
For your convenience, the shell env var $MDEV is set to the device name. So if
</rich_text><rich_text foreground="#0000ff">为了方便，shell 的环境变量 $MDEV 会被设置成设备名。 例如</rich_text><rich_text>
the device 'hdc' was matched, MDEV would be set to &quot;hdc&quot;.
</rich_text><rich_text foreground="#0000ff">mdev 解析到设备 'hdc' 匹配，MDEV 将会被设置为 &quot;hdc&quot;。</rich_text><rich_text>

----------
FIRMWARE
</rich_text><rich_text foreground="#0000ff">固件</rich_text><rich_text>
----------
Some kernel device drivers need to request firmware at runtime in order to
</rich_text><rich_text foreground="#0000ff">有些设备驱动程序在运行时，为了正确的初始化设备，需要上传固件。</rich_text><rich_text>
properly initialize a device. Place all such firmware files into the
</rich_text><rich_text foreground="#0000ff">请将所有的固件文件放入</rich_text><rich_text>
/lib/firmware/ directory. At runtime, the kernel will invoke mdev with the
</rich_text><rich_text foreground="#0000ff">/lib/firmware/ 目录。 在运行时，内核将会按固件文件名调用 mdev ，</rich_text><rich_text>
filename of the firmware which mdev will load out of /lib/firmware/ and into
</rich_text><rich_text foreground="#0000ff">之后 mdev 会通过 sysfs 接口将固件从 /lib/firmware/</rich_text><rich_text>
the kernel via the sysfs interface. The exact filename is hardcoded in the
</rich_text><rich_text foreground="#0000ff">装载到内核。 确定的文件名被固化在内核中，</rich_text><rich_text>
kernel, so look there if you need to want to know what to name the file in
</rich_text><rich_text foreground="#0000ff">如有必要，你必须知道如何在用户空间命名这个文件。</rich_text><rich_text>
userspace.
</rich_text></node><node name="戴文linux内核" prog_lang="custom-colors" readonly="False" tags="" unique_id="4"><rich_text></rich_text><node name="01 介绍" prog_lang="custom-colors" readonly="False" tags="" unique_id="5"><rich_text>本文作者戴文.科利尔.约翰逊(Devyn Collier Johnson)今年才19岁，但是他在Linux内核、人工智能、编程语言方面拥有丰富的经验，本文是其在</rich_text><rich_text link="webs http://www.linux.org/threads/%EF%BB%BFthe-linux-kernel-introduction.4203/">linux.org上连载的一系列关于内核的文章</rich_text><rich_text>。文章写的深入浅出，本站不揣浅陋，由LCTT成员geekpi进行了系列翻译，以分享给广大Linux爱好者。
 
在1991年，一个叫林纳斯·本纳第克特·托瓦兹的芬兰学生制作了一个现在非常流行的操作系统的内核。他于1991年9月发 布了Linux  0.01，并且于1992年以GPL许可证的方式授权了该内核。GNU通用许可证(GPL)允许人们使用、拥有、修改，以及合法和免费的分发源代码。这使 得内核变得非常流行，因为任何人都可以免费地下载。现在任何人都可以生成他们自己的内核，这有助于人们学习如何获取、编辑、配置、编译并安装Linux内 核。
内核是操作系统的核心。操作系统是一系列的管理硬件并允许用户在电脑上运行应用的程序。内核控制着硬件和应用。应用并不直接和硬件打交道，而是首先和内核交互。总之，软件运行在内核上，而内核操作着硬件。没有内核，电脑就是一个没用的物件。
用户制作他们自己的内核有各种各样的原因。许多用户也许想要一个只包含他们需要的代码的系统内核。比如说我的内核包含了火线 设备驱动，但是我的电脑缺乏这些端口。当系统启动时，时间和内存就会浪费在那些我系统上并没有安装的设备上。如果我想要简化我的内核，我会制作自己不包含 火线驱动的内核。至于另外一个理由，某个用户可能拥有一台有特殊硬件的设备，但是最新的Ubuntu版本中的内核缺乏所需的驱动。这个用户可以下载最新的 内核(比当前Ununtu的Linux内核要新)，并制作他们自己的有相应驱动的内核。不管怎样，这两个原因是用户想要制作自己的Linux内核的普遍原 因。
在下载内核前，我们应该讨论一些重要的术语和事实。Linux内核是一个宏内核，这意味着整个操作系统都运行在内核预留的内 存里。说的更清楚一些，内核是放在内存里的。内核所使用的空间是内核预留的。只有内核可以使用预留的内核空间。内核拥有这些内存空间，直到系统关闭。与内 核空间相对应的还是用户空间。用户空间是内存上用户程序拥有的空间。比如浏览器、电子游戏、文字处理器、媒体播放器、壁纸、主题等都是放在内存里的用户空 间。当一个程序关闭的时候，任何程序都可以使用新释放的空间。在内核空间，一旦内存被占用，则没有任何其他程序可以使用这块空间。
Linux内核也是一个抢占式多任务内核。这意味该内核可以暂停一些任务来保证任何应用都有机会来使用CPU。举个例子，如 果一个应用正在运行但是正在等待一些数据，内核会把这个应用暂停并允许其他的程序使用新释放的CPU资源，直到数据到来。否则的话，系统就会浪费资源给那 些正在等待数据或者其他程序执行的的任务。内核将会强制程序去等待或者停止使用CPU。没有内核的允许，应用程序不能脱离暂停或者使用CPU。
Linux内核使得设备作为文件显示在/dev文件夹下。举个例子，USB端口位于/dev/bus/usb。硬盘分区则位 于/dev/disk/分区。因为这个特性，许多人说：“在Linux上，一切皆文件”。举个例子，如果一个用户想要访问在存储卡上的数据，他们能通过设 备文件访问这些数据。（译注：此处原文是“If a user wanted to access data on their memory  card, for example, they cannot access the data through these device files.”，但根据上下文和实际经验看，应该是“can 能”）
Linux内核是可移植的。可移植性是Linux流行的一个最重要的原因。可移植性使得内核可以工作在各种处理器和系统上。 一些内核支持的处理器的型号包括：Alpha、AMD、ARM、C6X、Intel、x86、Microblaze、MIPS、PowerPC、 SPARC、UltraSPARC等，这还不是全部的列表。
在引导文件夹(/boot),用户会看到诸如“vmlinux”或者“vmlinuz”的文件。这两者都是已编译的 Linux内核。以“z”结尾的是已压缩的。“vm”代表虚拟内存。在SPARC处理器的系统上，用户可以看见一个zImage文件。一小部分用户可以发 现一个bzImage文件，这也是一个已压缩的Linux内核。无论用户有哪个文件，这些引导文件都是不能更改的，除非用户知道他们正在做什么。否则系统 会变成无法引导，也就是说系统启动不了了。
内核源代码就是程序编码。有了源代码，程序员可以修改内核并能观察到内核是如何工作的。

</rich_text><rich_text scale="h3">下载内核:</rich_text><rich_text>
现在我们想更多地了解了内核，就要下载内核源代码了。进入kernel.org并点击那个巨大的下载按钮。下载完成后，解压下载的文件。
对于本文，我使用的源代码是Linux kernel 3.9.4.这个文章系列的所有指导对于所有的内核版本是相同的(或者非常相似的)
</rich_text></node><node name="02 源代码" prog_lang="custom-colors" readonly="False" tags="" unique_id="6"><rich_text>在下载并解压内核源代码后，用户可以看到许多文件夹和文件。尝试去找一个特定的文件或许是一个挑战。谢天谢地，源代码以一个特定的方式组织的。这使开发者能够轻松找到任何文件或者内核的一部分。
内核源代码的根目录下包含了以下文件夹
arch
block
crypto
Documentation
drivers
firmware
fs
include
init
ipc
kernel
lib
mm
net
samples
scripts
security
sound
tools
usr
virt还有一些文件在源代码的根目录下。它们会在下面列出。
COPYING -许可和授权信息。Linux内核在GPLv2许可证下授权。该许可证授予任何人有权免费去使用、修改、分发和共享源代码和编译代码。然而，没有人可以出售源代码。
CREDITS - 贡献者列表
Kbuild - 这是一个设置一些内核设定的脚本。打个比方，这个脚本设定一个ARCH变量，这是开发者想要生成的内核支持的处理器类型。
Kconfig - 这个脚本会在开发人员配置内核的时候用到，这会在以后的文章中讨论。
MAINTAINERS - 这是一个目前维护者列表，他们的电子邮件地址，主页，和他们负责开发和维护的内核的特定部分或文件。当一个开发者在内核中发现一个问题，并希望能够报告给能够处理这个问题的维护者时，这是是很有用的。
Makefile - This script is the main file  that is used to compile the kernel. This file passes parameters to the  compiler as well as the list of files to compile and any other necessary  information. 这个脚本是编译内核的主要文件。这个文件将编译参数和编译所需的文件和必要的信息传给编译器。
README - 这个文档提供给开发者想要知道的如何编译内核的信息。
REPORTING-BUGS - 这个文档提供如何报告问题的信息。
内核的代码是以“.c”或“.h”为扩展名的文件。 “.c”的扩展名表明内核是用众多的编程语言之一的C语言写的，  “h”的文件是头文件，而他们也是用C写成。头文件包含了许多“.c”文件需要使用的代码，因为他们可以引入已有的代码而不是重新编写代码，这节省了程序 员的时间。否则，一组执行相同的动作的代码，将存在许多或全部都是“c”文件。这也会消耗和浪费硬盘空间。（译注：头文件不仅仅可节省重复编码，而且代码 复用也会降低代码错误的几率）
所有上面列出的文件夹中的文件都组织得很好。文件夹名称至少可以帮助开发人员很好地猜测文件夹中的内容。下面提供了一个目录树和描述。
arch -  这个文件夹包含了一个Kconfig文件，它用于设置这个目录里的源代码编译所需的一系列设定。每个支持的处理器架构都在它相应的文件夹中。 如，Alpha处理器的源代码在alpha文件夹中。请记住，随着时间的推移，一些新的处理器将被支持,有些会被放弃。对于Linux  v3.9.4，arch下有以下文件夹：
alpha
arc
arm
arm64
avr32
blackfin
c6x
cris
frv
h8300
hexagon
ia64
m32r
m68k
metag
microblaze
mips
mn10300
openrisc
parisc
powerpc
s390
score
sh
sparc
tile
um
unicore32
x86
xtensablock – 此文件夹包含块设备驱动程序的代码。块设备是以数据块方式接收和发送的数据的设备。数据块都是一块一块的数据而不是持续的数据流。
crypto - 这个文件夹包含许多加密算法的源代码。例如，“sha1_generic.c”这个文件包含了SHA1加密算法的代码。
Documentation - 此文件夹包含了内核信息和其他许多文件信息的文本文档。如果开发者需要一些信息，他们也许能在这里找到所需要的信息。
drivers -  该目录包含了驱动代码。驱动是一个控制硬件的软件。例如，要让计算机知道键盘并使其可用，键盘驱动是必要的。这个文件夹中存在许多文件夹。每个文件夹都以 硬件的种类或者型号命名。例如，'bluetooth'包含了蓝牙驱动程序的代码。还有其他很明显的驱动像SCSI、USB和火线等。有些驱动程序可能会 比较难找到。例如，操纵杆驱动不在'joystick'文件夹中，它们却在./drivers/input/joystick。同样键盘和鼠标驱动也在这 个input文件夹中。 'Macintosh'包含了苹果的硬件代码。 'Xen'包含了Xen  hypervisor代码。（hypervisor是一种允许用户在一台计算机上运行多个操作系统的软件或硬件。这意味着在Xen允许用户在一台计算机上 同时运行的两个或两个以上的Linux系统。用户还可以运行Windows，Solaris，FreeBSD或其他操作系统在Linux系统 上。）driver文件夹下还有许多其他的文件夹，但他们在这篇文章中无法一一列举，他们将在以后的文章中提到。
firmware -  fireware中包含了让计算机读取和理解从设备发来的信号的代码。举例来说，一个摄像头管理它自己的硬件，但计算机必须了解摄像头给计算机发送的信 号。Linux系统会使用vicam固件（firmware）来理解摄像头的通讯。否则，没有了固件，Linux系统将不知道如何处理摄像头发来的信息。 另外，固件同样有助于将Linux系统发送消息给该设备。这样Linux系统可以告诉摄像头重新调整或关闭摄像头。
fs -  这是文件系统的文件夹。理解和使用的文件系统所需要的所有的代码就在这里。在这个文件夹里，每种文件系统都有自己的文件夹。例如，ext4文件系统的代码 在ext4文件夹内。  在fs文件夹内，开发者会看到一些不在文件夹中的文件。这些文件用来控制整个文件系统。例如，mount.h中会包含挂载文件系统的代码。文件系统是以结 构化的方式来存储和管理的存储设备上的文件和目录。每个文件系统都有自己的优点和缺点。这是由文件系统的设计决定的。举例来说，NTFS文件系统支持的透 明压缩（当启用时，会在用户不知道的情况下自动压缩存储文件）。大多数文件系统缺乏此功能，但如果在fs文件夹里编入相应的文件，它们也有这种能力。
include - include包含了内核所需的各种头文件.这个名字来自于C语言用&quot;include&quot;来在编译时导入头文件。
init - init文件夹包含了内核启动的处理代码(INITiation)。main.c是内核的核心文件，这是用来衔接所有的其他文件的源代码主文件。
ipc -  IPC代表进程间通讯。此文件夹中的代码是作为内核与进程之间的通信层。内核控制着硬件，因此程序只能请求内核来执行任务。假设用户有一个打开DVD托盘 的程序。程序不直接打开托盘，相反，该程序通知内核托盘应该被打开。然后，内核给硬件发送一个信号去打开托盘。这些代码同样管理kill信号。举例来说， 当系统管理员打开进程管理器去关闭一个已经锁死的程序，这个关闭程序的信号被称为kill信号。内核接收到信号，然后内核会要求程序停止或直接把进程从内 存和CPU中移除（取决于kill的类型）。命令行中的管道同样用于进程间通信。管道会告诉内核在某个内存页上写入输出数据。程序或者命令得到的数据是来 自内存页上的某个给定的指针。
kernel - 这个文件夹中的代码控制内核本身。例如，如果一个调试器需要跟踪问题，内核将使用这个文件夹中代码来将内核指令通知调试器跟踪内核进行的所有动作。这里也有跟踪时间的代码。在内核文件夹下有个&quot;power&quot;文件夹，这里的代码可以使计算机重新启动、关机和挂起。
lib - 这个文件夹包含了内核需要引用的一系列内核库文件代码。
mm - mm文件夹中包含了内存管理代码。内存并不是任意存储在RAM芯片上的。相反，内核小心地将数据放在RAM芯片上。内核不会覆盖任何正在使用或保存重要数据的内存区域。
net - net文件夹中包含了网络协议代码。这包括IPv6、AppleTalk、以太网、WiFi、蓝牙等的代码，此外处理网桥和DNS解析的代码也在net目录。
samples - 此文件夹包含了程序示例和正在编写中的模块代码。假设一个新的模块引入了一个想要的有用功能，但没有程序员说它已经可以正常运行在内核上。那么，这些模块就会移到这里。这给了新内核程序员一个机会通过这个文件夹来获得帮助，或者选择一个他们想要协助开发的模块。
scripts - 这个文件夹有内核编译所需的脚本。最好不要改变这个文件夹内的任何东西。否则，您可能无法配置或编译内核。
security - 这个文件夹是有关内核安全的代码。它对计算机免于受到病毒和黑客的侵害很重要。否则，Linux系统可能会遭到损坏。关于内核的安全性，将在以后的文章中讨论。
sound - 这个文件夹中包含了声卡驱动。
tools - 这个文件夹中包含了和内核交互的工具。
usr - 还记得在以前的文章中提到vmlinuz和其他类似的文件么？这个文件夹中的代码在内核编译完成后创建这些文件。
virt -  此文件夹包含了虚拟化代码，它允许用户一次运行多个操作系统。这与先前提到的Xen是不同的。通过虚拟化，客户机操作系统就像任何其他运行在Linux主 机的应用程序一样运行。通过Xen这样的hypervisor(注:虚拟机管理程序)，两个操作系统可以同时管理硬件。在虚拟化中，在客户机操作系统上运 行在Linux内核上，而在hypervisor中，它没有客户系统并且所有的系统不互相依赖。
提示: 绝不在内核源代码内移动文件，除非你知道你在做什么。否则，编译会由于缺失文件失败。
Linux内核的文件夹结构保持相对稳定。内核开发者会做一些修改，但总体来说，这些设置对整个内核版本都是一样。驱动程序文件夹的布局也基本保持一样。
</rich_text></node><node name="03 驱动程序" prog_lang="custom-colors" readonly="False" tags="" unique_id="11"><rich_text>驱动程序是使内核能够沟通和操作硬件或协议（规则和标准）的小程序。没有驱动程序，内核不知道如何与硬件沟通或者处理协议 （内核实际上先发送指令给BIOS，然后BIOS传给硬件）。  Linux的内核代码在驱动程序文件夹中以源代码的形式包含了许多驱动程序。驱动文件夹中的每个文件夹会在下面说明。在配置和  编译内核时，这样有助于你了解驱动程序。否则，用户可能会在编译时加入不必要的或者漏掉重要的驱动。驱动代码通常会包含一个单行注释来指出驱动的目的。  比如，tc的驱动代码，有一行的注释说是用于TURBOchannel总线。由于这些文档，用户应该看驱动前几行的注释来了解它们的用途。
有几个术语你应该已经知道，所以下面的信息应该是明白的。一个I/O设备指的是输入/输出设备。例如调制解调器和网卡，他们 发送和接收数据。监视器是一个输出设备 -  只有信息出来。键盘、鼠标和游戏杆是数据输入系统。存储设备用于存储数据，例如SD卡、硬盘、光盘、存储卡等。CPU（处理器）是计算机的“大脑”或“心 脏”  ，如果没有它，电脑就无法运作。主板则是一块连接板上不同组件的印刷线路板。主板及各个组件是计算机的运行的基础。许多计算机用户说主板是电脑的心脏（主 板上有CPU）。主板包含了用于连接外设的端口，外设包括输入、输出和存储设备。总线是主板的电路，它连接着外设。网络设备用于两台或多台计算机之间的连 接。端口则是用户可以插入另外一台设备或一根电缆的设备，例如，用户可以将插入一根火线记忆棒插入一个火线端口；将以太网电缆插入一个以太网端口。光碟的 读取是利用激光，从可以散射或反射的激光的反射面上读出数据，一个常见的  光盘是DVD。许多系统说自己是32位或者64位，这指的是寄存器、地址总线或数据总线的位数。例如，在一块64位的主板上，数据总线（组件之间的银线） 有64根并排到目的的线。存储器地址以位(0和1)的形式在存储器中编址，因此，一个32位存储地址包含32个0和1来表示存储器上的某处地址。

许多驱动程序是通用驱动程序，这意味着一个通用键盘驱动可以使内核可以处理几乎所有的键盘。然而，有些驱动是专用驱动，像苹 果和Commodore就分别为苹果电脑和Amiga系统制造了专门的硬件。Linux内核中已经包含了许多诸如智能手机、苹果、Amiga系统、 PS3、Android平板，和许多其他设备的驱动程序。
注意有些设备的驱动不在本目录中。比如，射频驱动在net和media文件夹下。
</rich_text><rich_text foreground="#00000000ffff">accessibility</rich_text><rich_text> - 这些驱动提供支持一些辅助设备。在Linux 3.9.4中，这个文件夹中只有一个驱动就是盲文设备驱动。
</rich_text><rich_text foreground="#00000000ffff">acpi</rich_text><rich_text> - 高级配置和电源接口（ACPI : Advanced Configuration and Power Interface）驱动用来管理电源使用。
</rich_text><rich_text foreground="#00000000ffff">amba</rich_text><rich_text> - 高级微控制器总线架构（AMBA : Advanced  Microcontroller Bus  Architecture）是与片上系统（SoC）的管理和互连的协议。SoC是一块包含许多或所有必要的计算机组件的芯片。这里的AMBA驱动让内核能 够运行在这上面。
</rich_text><rich_text foreground="#00000000ffff">ata</rich_text><rich_text> - 该目录包含PATA和SATA设备的驱动程序。串行ATA（SATA）是一种连接主机总线适配器到像硬盘那样的存储器的计算机总线接口。并行ATA（PATA）用于连接存储设备，如硬盘驱动器，软盘驱动器，光盘驱动器的标准。PATA就是我们所说的IDE。
</rich_text><rich_text foreground="#00000000ffff">atm</rich_text><rich_text> - 异步通信模式(ATM : Asynchronous Transfer Mode)是一种通信标准。这里有各种接到PCI桥的驱动(他们连接到PCI总线)和以太网控制器(控制以太网通信的集成电路芯片)。
</rich_text><rich_text foreground="#00000000ffff">auxdisplay</rich_text><rich_text> - 这个文件夹提供了三个驱动。LCD 帧缓存（framebuffer）驱动、LCD控制器驱动和一个LCD驱动。这些驱动用于管理液晶显示器 —— 液晶显示器会在按压时显示波纹。注意:按压会损害屏幕,所以请不要用力戳LCD显示屏。
</rich_text><rich_text foreground="#00000000ffff">base</rich_text><rich_text> - 这是个重要的目录包含了固件、系统总线、虚拟化能力等基本的驱动。
</rich_text><rich_text foreground="#00000000ffff">bcma</rich_text><rich_text> - 这些驱动用于使用基于AMBA协议的总线。AMBA是由博通公司开发。
</rich_text><rich_text foreground="#00000000ffff">block</rich_text><rich_text> - 这些驱动提供对块设备的支持，像软驱、SCSI磁带、TCP网络块设备等等。
</rich_text><rich_text foreground="#00000000ffff">bluetooth</rich_text><rich_text> - 蓝牙是一种安全的无线个人区域网络标准(PANs)。蓝牙驱动就在这个文件夹，它允许系统使用各种蓝牙设备。例如，一个蓝牙鼠标不用电缆，并且计算机有一个电子狗(小型USB接收器)。Linux系统必须能够知道进入电子狗的信号，否则蓝牙设备无法工作。
</rich_text><rich_text foreground="#00000000ffff">bus</rich_text><rich_text> - 这个目录包含了三个驱动。一个转换ocp接口协议到scp协议。一个是设备间的互联驱动，第三个是用于处理互联中的错误处理。
</rich_text><rich_text foreground="#00000000ffff">cdrom</rich_text><rich_text> - 这个目录包含两个驱动。一个是cd-rom，包括DVD和CD的读写。第二个是gd-rom(只读GB光盘)，GD光盘是1.2GB容量的光盘，这像一个更大的CD或者更小的DVD。GD通常用于世嘉游戏机中。
</rich_text><rich_text foreground="#00000000ffff">char</rich_text><rich_text> - 字符设备驱动就在这里。字符设备每次传输数据传输一个字符。这个文件夹里的驱动包括打印机、PS3闪存驱动、东芝SMM驱动和随机数发生器驱动等。
</rich_text><rich_text foreground="#00000000ffff">clk </rich_text><rich_text>- 这些驱动用于系统时钟。
</rich_text><rich_text foreground="#00000000ffff">clocksource </rich_text><rich_text>- 这些驱动用于作为定时器的时钟。
</rich_text><rich_text foreground="#00000000ffff">connector</rich_text><rich_text> - 这些驱动使内核知道当进程fork并使用proc连接器更改UID(用户ID)、GID(组ID)和SID(会话ID)。内核需要知道什么时候进程fork(CPU中运行多个任务)并执行。否则,内核可能会低效管理资源。
</rich_text><rich_text foreground="#00000000ffff">cpufreq</rich_text><rich_text> - 这些驱动改变CPU的电源能耗。
</rich_text><rich_text foreground="#00000000ffff">cpuidle</rich_text><rich_text> - 这些驱动用来管理空闲的CPU。一些系统使用多个CPU，其中一个驱动可以让这些CPU负载相当。
</rich_text><rich_text foreground="#00000000ffff">crypto</rich_text><rich_text> - 这些驱动提供加密功能。
</rich_text><rich_text foreground="#00000000ffff">dca</rich_text><rich_text> - 直接缓存访问（DCA ： Direct Cache Access）驱动允许内核访问CPU缓存。CPU缓存就像CPU内置的RAM。CPU缓存的速度比RAM更快。然而,CPU缓存的容量比RAM小得多。CPU在这个缓存系统上存储了最重要的和执行的代码。
</rich_text><rich_text foreground="#00000000ffff">devfreq</rich_text><rich_text> - 这个驱动程序提供了一个通用的动态电压和频率调整(DVFS ： Generic Dynamic Voltage and Frequency Scaling)框架，可以根据需要改变CPU频率来节约能源。这就是所谓的CPU节能。
</rich_text><rich_text foreground="#00000000ffff">dio</rich_text><rich_text> - 数字输入/输出（DIO ：Digital Input/Output）总线驱动允许内核可以使用DIO总线。
</rich_text><rich_text foreground="#00000000ffff">dma</rich_text><rich_text> - 直接内存访问(DMA)驱动允许设备无需CPU直接访问内存。这减少了CPU的负载。
</rich_text><rich_text foreground="#00000000ffff">edac</rich_text><rich_text> - 错误检测和校正（ Error Detection And Correction）驱动帮助减少和纠正错误。
</rich_text><rich_text foreground="#00000000ffff">eisa </rich_text><rich_text>- 扩展工业标准结构总线（Extended Industry Standard Architecture）驱动提供内核对EISA总线的支持。
</rich_text><rich_text foreground="#00000000ffff">extcon </rich_text><rich_text>- 外部连接器（EXTernal CONnectors）驱动用于检测设备插入时的变化。例如，extcon会检测用户是否插入了USB驱动器。
</rich_text><rich_text foreground="#00000000ffff">firewire</rich_text><rich_text> - 这些驱动用于控制苹果制造的类似于USB的火线设备。
</rich_text><rich_text foreground="#00000000ffff">firmware</rich_text><rich_text> -  这些驱动用于和像BIOS(计算机的基本输入输出系统固件)这样的设备的固件通信。BIOS用于启动操作系统和控制硬件与设备的固件。一些BIOS允许用 户超频CPU。超频是使CPU运行在一个更快的速度。CPU速度以MHz(百万赫兹)或GHz衡量。一个3.7  GHz的CPU的的速度明显快于一个700Mhz的处理器。
</rich_text><rich_text foreground="#00000000ffff">gpio</rich_text><rich_text> - 通用输入/输出(GPIO ：General Purpose Input/Output)是可由用户控制行为的芯片的管脚。这里的驱动就是控制GPIO。
</rich_text><rich_text foreground="#00000000ffff">gpu </rich_text><rich_text>- 这些驱动控制VGA、GPU和直接渲染管理(DRM ：Direct Rendering Manager )。VGA是640*480的模拟计算机显示器或是简化的分辨率标准。GPU是图形处理器。DRM是一个Unix渲染系统。
</rich_text><rich_text foreground="#00000000ffff">hid</rich_text><rich_text> - 这驱动用于对USB人机界面设备的支持。
</rich_text><rich_text foreground="#00000000ffff">hsi</rich_text><rich_text> - 这个驱动用于内核访问像Nokia N900这样的蜂窝式调制解调器。
</rich_text><rich_text foreground="#00000000ffff">hv</rich_text><rich_text> - 这个驱动用于提供Linux中的键值对(KVP ：Key Value Pair)功能。
</rich_text><rich_text foreground="#00000000ffff">hwmon</rich_text><rich_text> - 硬件监控驱动用于内核读取硬件传感器上的信息。比如，CPU上有个温度传感器。那么内核就可以追踪温度的变化并相应地调节风扇的速度。
</rich_text><rich_text foreground="#00000000ffff">hwspinlock</rich_text><rich_text> - 硬件转锁驱动允许系统同时使用两个或者更多的处理器，或使用一个处理器上的两个或更多的核心。
</rich_text><rich_text foreground="#00000000ffff">i2c</rich_text><rich_text> - I2C驱动可以使计算机用I2C协议处理主板上的低速外设。系统管理总线(SMBus ：System Management Bus)驱动管理SMBus,这是一种用于轻量级通信的two-wire总线。
</rich_text><rich_text foreground="#00000000ffff">ide</rich_text><rich_text> - 这些驱动用来处理像CDROM和硬盘这些PATA/IDE设备。
</rich_text><rich_text foreground="#00000000ffff">idle</rich_text><rich_text> - 这个驱动用来管理Intel处理器的空闲功能。
</rich_text><rich_text foreground="#00000000ffff">iio</rich_text><rich_text> - 工业I/O核心驱动程序用来处理数模转换器或模数转换器。
</rich_text><rich_text foreground="#00000000ffff">infiniband</rich_text><rich_text> - Infiniband是在企业数据中心和一些超级计算机中使用的一种高性能的端口。这个目录中的驱动用来支持Infiniband硬件。
</rich_text><rich_text foreground="#00000000ffff">input</rich_text><rich_text> - 这里包含了很多驱动，这些驱动都用于输入处理，包括游戏杆、鼠标、键盘、游戏端口（旧式的游戏杆接口）、遥控器、触控、耳麦按钮和许多其他的驱动。如今的操纵杆使用USB端口，但是在上世纪80、90年代，操纵杆是插在游戏端口的。
</rich_text><rich_text foreground="#00000000ffff">iommu</rich_text><rich_text> - 输入/输出内存管理单元(IOMMU ：Input/Output  Memory Management Unit)驱动用来管理内存管理单元中的IOMMU。IOMMU连接DMA  IO总线到内存上。IOMMU是设备在没有CPU帮助下直接访问内存的桥梁。这有助于减少处理器的负载。
</rich_text><rich_text foreground="#00000000ffff">ipack</rich_text><rich_text> - Ipack代表的是IndustryPack。 这个驱动是一个虚拟总线,允许在载体和夹板之间操作。
</rich_text><rich_text foreground="#00000000ffff">irqchip</rich_text><rich_text> - 这些驱动程序允许硬件的中断请求(IRQ)发送到处理器，暂时挂起一个正在运行的程序而去运行一个特殊的程序（称为一个中断处理程序）。
</rich_text><rich_text foreground="#00000000ffff">isdn</rich_text><rich_text> - 这些驱动用于支持综合业务数字网(ISDN)，这是用于同步数字传输语音、视频、数据和其他网络服务使用传统电话网络的电路的通信标准。
</rich_text><rich_text foreground="#00000000ffff">leds</rich_text><rich_text> - 用于LED的驱动。
</rich_text><rich_text foreground="#00000000ffff">lguest</rich_text><rich_text> - lguest用于管理客户机系统的中断。中断是CPU被重要任务打断的硬件或软件信号。CPU接着给硬件或软件一些处理资源。
</rich_text><rich_text foreground="#00000000ffff">macintosh</rich_text><rich_text> - 苹果设备的驱动在这个文件夹里。
</rich_text><rich_text foreground="#00000000ffff">mailbox</rich_text><rich_text> - 这个文件夹(pl320-pci)中的驱动用于管理邮箱系统的连接。
</rich_text><rich_text foreground="#00000000ffff">md</rich_text><rich_text> - 多设备驱动用于支持磁盘阵列，一种多块硬盘间共享或复制数据的系统。
</rich_text><rich_text foreground="#00000000ffff">media</rich_text><rich_text> - 媒体驱动提供了对收音机、调谐器、视频捕捉卡、DVB标准的数字电视等等的支持。驱动还提供了对不同通过USB或火线端口插入的多媒体设备的支持。
</rich_text><rich_text foreground="#00000000ffff">memory</rich_text><rich_text> - 支持内存的重要驱动。
</rich_text><rich_text foreground="#00000000ffff">memstick</rich_text><rich_text> - 这个驱动用于支持Sony记忆棒。
</rich_text><rich_text foreground="#00000000ffff">message</rich_text><rich_text> - 这些驱动用于运行LSI Fusion MPT(一种消息传递技术)固件的LSI PCI芯片/适配器。LSI大规模集成，这代表每片芯片上集成了几万晶体管、
</rich_text><rich_text foreground="#00000000ffff">mfd</rich_text><rich_text> - 多用途设备(MFD)驱动提供了对可以提供诸如电子邮件、传真、复印机、扫描仪、打印机功能的多用途设备的支持。这里的驱动还给MFD设备提供了一个通用多媒体通信端口(MCP)层。
</rich_text><rich_text foreground="#00000000ffff">misc</rich_text><rich_text> - 这个目录包含了不适合在其他目录的各种驱动。就像光线传感器驱动。
</rich_text><rich_text foreground="#00000000ffff">mmc</rich_text><rich_text> - MMC卡驱动用于处理用于MMC标准的闪存卡。
</rich_text><rich_text foreground="#00000000ffff">mtd</rich_text><rich_text> - 内存技术设备(MTD ：Memory technology  devices)驱动程序用于Linux和闪存的交互，这就就像一层闪存转换层。其他块设备和字符设备的驱动程序不会以闪存设备的操作方式来做映射。尽管 USB记忆卡和SD卡是闪存设备，但它们不使用这个驱动，因为他们隐藏在系统的块设备接口后。这个驱动用于新型闪存设备的通用闪存驱动器驱动。
</rich_text><rich_text foreground="#00000000ffff">net</rich_text><rich_text> - 网络驱动提供像AppleTalk、TCP和其他的网络协议。这些驱动也提供对调制解调器、USB 2.0的网络设备、和射频设备的支持。
</rich_text><rich_text foreground="#00000000ffff">nfc</rich_text><rich_text> - 这个驱动是德州仪器的共享传输层之间的接口和NCI核心。
</rich_text><rich_text foreground="#00000000ffff">ntb</rich_text><rich_text> - 不透明的桥接驱动提供了在PCIe系统的不透明桥接。PCIe是一种高速扩展总线标准。
</rich_text><rich_text foreground="#00000000ffff">nubus</rich_text><rich_text> - NuBus是一种32位并行计算总线。用于支持苹果设备。
</rich_text><rich_text foreground="#00000000ffff">of</rich_text><rich_text> - 此驱动程序提供设备树中创建、访问和解释程序的OF助手。设备树是一种数据结构，用于描述硬件。
</rich_text><rich_text foreground="#00000000ffff">oprofile</rich_text><rich_text> - 这个驱动用于从驱动到用户空间进程(运行在用户态下的应用)评测整个系统。这帮助开发人员找到性能问题
</rich_text><rich_text foreground="#00000000ffff">parisc</rich_text><rich_text> - 这些驱动用于HP生产的PA-RISC架构设备。PA-RISC是一种特殊指令集的处理器。
</rich_text><rich_text foreground="#00000000ffff">parport</rich_text><rich_text> - 并口驱动提供了Linux下的并口支持。
</rich_text><rich_text foreground="#00000000ffff">pci</rich_text><rich_text> - 这些驱动提供了PCI总线服务。
</rich_text><rich_text foreground="#00000000ffff">pcmcia</rich_text><rich_text> - 这些是笔记本的pc卡驱动
</rich_text><rich_text foreground="#00000000ffff">pinctrl</rich_text><rich_text> - 这些驱动用来处理引脚控制设备。引脚控制器可以禁用或启用I/O设备。
</rich_text><rich_text foreground="#00000000ffff">platform</rich_text><rich_text> -这个文件夹包含了不同的计算机平台的驱动像Acer、Dell、Toshiba、IBM、Intel、Chrombooks等等。
</rich_text><rich_text foreground="#00000000ffff">pnp</rich_text><rich_text> - 即插即用驱动允许用户在插入一个像USB的设备后可以立即使用而不必手动配置设备。
</rich_text><rich_text foreground="#00000000ffff">power</rich_text><rich_text> - 电源驱动使内核可以测量电池电量，检测充电器和进行电源管理。
</rich_text><rich_text foreground="#00000000ffff">pps</rich_text><rich_text> - Pulse-Per-Second驱动用来控制电流脉冲速率。这用于计时。
</rich_text><rich_text foreground="#00000000ffff">ps3</rich_text><rich_text> - 这是Sony的游戏控制台驱动- PlayStation3。
</rich_text><rich_text foreground="#00000000ffff">ptp</rich_text><rich_text> - 图片传输协议(PTP)驱动支持一种从数码相机中传输图片的协议。
</rich_text><rich_text foreground="#00000000ffff">pwm</rich_text><rich_text> - 脉宽调制(PWM)驱动用于控制设备的电流脉冲。主要用于控制像CPU风扇。
</rich_text><rich_text foreground="#00000000ffff">rapidio</rich_text><rich_text> - RapidIO驱动用于管理RapidIO架构，它是一种高性能分组交换，用于电路板上交互芯片的交互技术，也用于互相使用底板的电路板。
</rich_text><rich_text foreground="#00000000ffff">regulator</rich_text><rich_text> - 校准驱动用于校准电流、温度、或其他可能系统存在的校准硬件。
</rich_text><rich_text foreground="#00000000ffff">remoteproc</rich_text><rich_text> - 这些驱动用来管理远程处理器。
</rich_text><rich_text foreground="#00000000ffff">rpmsg</rich_text><rich_text> - 这个驱动用来控制支持大量驱动的远程处理器通讯总线(rpmsg)。这些总线提供消息传递设施,促进客户端驱动程序编写自己的连接协议消息。
</rich_text><rich_text foreground="#00000000ffff">rtc</rich_text><rich_text> - 实时时钟(RTC)驱动使内核可以读取时钟。
</rich_text><rich_text foreground="#00000000ffff">s390</rich_text><rich_text> - 用于31/32位的大型机架构的驱动。
</rich_text><rich_text foreground="#00000000ffff">sbus</rich_text><rich_text> - 用于管理基于SPARC的总线驱动。
</rich_text><rich_text foreground="#00000000ffff">scsi</rich_text><rich_text> - 允许内核使用SCSI标准外围设备。例如,Linux将在与SCSI硬件传输数据时使用SCSI驱动。
</rich_text><rich_text foreground="#00000000ffff">sfi</rich_text><rich_text> -简单固件接口(SFI)驱动允许固件发送信息表给操作系统。这些表的数据称为SFI表。
</rich_text><rich_text foreground="#00000000ffff">sh</rich_text><rich_text> - 该驱动用于支持SuperHway总线。
</rich_text><rich_text foreground="#00000000ffff">sn</rich_text><rich_text> - 该驱动用于支持IOC3串口。
</rich_text><rich_text foreground="#00000000ffff">spi</rich_text><rich_text> - 这些驱动处理串行设备接口总线(SPI)，它是一个在在全双工下运行的同步串行数据链路标准,。全双工是指两个设备可以同一时间同时发送和接收信息。双工指的是双向通信。设备在主/从模式下通信(取决于设备配置)。
</rich_text><rich_text foreground="#00000000ffff">ssb</rich_text><rich_text> - ssb(Sonics Silicon Backplane)驱动提供对在不同博通芯片和嵌入式设备上使用的迷你总线的支持。
</rich_text><rich_text foreground="#00000000ffff">staging</rich_text><rich_text> - 该目录含有许多子目录。这里所有的驱动还需要在加入主内核前经过更多的开发工作。
</rich_text><rich_text foreground="#00000000ffff">target</rich_text><rich_text> - SCSI设备驱动
</rich_text><rich_text foreground="#00000000ffff">tc</rich_text><rich_text> - 这些驱动用于TURBOchannel，TURBOchannel是数字设备公司开发的32位开放总线。这主要用于DEC工作站。
</rich_text><rich_text foreground="#00000000ffff">thermal</rich_text><rich_text> - thermal驱动使CPU保持较低温度。
</rich_text><rich_text foreground="#00000000ffff">tty</rich_text><rich_text> - tty驱动用于管理物理终端连接。
</rich_text><rich_text foreground="#00000000ffff">uio</rich_text><rich_text> - 该驱动允许用户编译运行在用户空间而不是内核空间的驱动。这使用户驱动不会导致内核崩溃。
</rich_text><rich_text foreground="#00000000ffff">usb</rich_text><rich_text> - USB设备允许内核使用USB端口。闪存驱动和记忆卡已经包含了固件和控制器,所以这些驱动程序允许内核使用USB接口和与USB设备。
</rich_text><rich_text foreground="#00000000ffff">uwb</rich_text><rich_text> - Ultra-WideBand驱动用来管理短距离，高带宽通信的超低功耗的射频设备
</rich_text><rich_text foreground="#00000000ffff">vfio</rich_text><rich_text> - 允许设备访问用户空间的VFIO驱动。
</rich_text><rich_text foreground="#00000000ffff">vhost</rich_text><rich_text> - 这是用于宿主内核中的virtio服务器驱动。用于虚拟化中。
</rich_text><rich_text foreground="#00000000ffff">video</rich_text><rich_text> - 这是用来管理显卡和监视器的视频驱动。
</rich_text><rich_text foreground="#00000000ffff">virt</rich_text><rich_text> - 这些驱动用来虚拟化。
</rich_text><rich_text foreground="#00000000ffff">virtio</rich_text><rich_text> - 这个驱动用来在虚拟PCI设备上使用virtio设备。用于虚拟化中。
</rich_text><rich_text foreground="#00000000ffff">vlynq</rich_text><rich_text> - 这个驱动控制着由德州仪器开发的专有接口。这些都是宽带产品，像WLAN和调制解调器，VOIP处理器，音频和数字媒体信号处理芯片。
</rich_text><rich_text foreground="#00000000ffff">vme</rich_text><rich_text> - WMEbus最初是为摩托罗拉68000系列处理器开发的总线标准
</rich_text><rich_text foreground="#00000000ffff">w1</rich_text><rich_text> - 这些驱动用来控制one-wire总线。
</rich_text><rich_text foreground="#00000000ffff">watchdog</rich_text><rich_text> - 该驱动管理看门狗定时器，这是一个可以用来检测和恢复异常的定时器。
</rich_text><rich_text foreground="#00000000ffff">xen</rich_text><rich_text> -  该驱动是Xen管理程序系统。这是个允许用户运行多个操作系统在一台计算机的软件或硬件。这意味着xen的代码将允许用户在同一时间的一台计算机上运行两 个或更多的Linux系统。用户也可以在Linux上运行Windows、Solaris、FreeBSD、或其他操作系统。
</rich_text><rich_text foreground="#00000000ffff">zorro</rich_text><rich_text> - 该驱动提供Zorro Amiga总线支持。
</rich_text></node><node name="04 安全" prog_lang="custom-colors" readonly="False" tags="" unique_id="7"><rich_text>Linux内核是所有Linux系统的核心。如果有任何恶意代码控制或破害了内核的任何一部分，那么系统会严重受损，文件可 能被删除或损坏，私人信息可能被盗等等。很明显，保持内核安全涉及到用户的最大利益。值得庆幸的是，由于Linux内核极其安全，Linux是一个非常安 全的系统。在用户比例上，Linux病毒比Windows病毒更少，并且Linux用户比Windows用户个人更少感染病毒。(这就是为什么许多公司使 用Linux来管理他们的服务器的一个原因。)  然而，我们仍然没有借口去忽视内核的安全。Linux有几个安全特性和程序，但本文只讨论Linux安全模块(LSM)及其它的内核安全特性。

</rich_text><rich_text foreground="#00000000ffff">AppArmor（应用盔甲）</rich_text><rich_text>最初是由Immunix写的安全模块。自从2009年以来，Canonical维护着这些代码 （Novell在Immunix之后，Canonical以前管理这些代码）。这个安全模块已经从2.6.36版本进入Linux主分支之中。 AppArmor限制了程序的能力。AppArmor使用文件路径来跟踪程序限制。许多Linux管理员称AppArmor是最容易配置的安全模块。然 而，而许多Linux用户觉得这个模块与其它的替代品相比很糟糕。

</rich_text><rich_text foreground="#00000000ffff">安全增强Linux(SELinux)</rich_text><rich_text>是AppArmor的替代品，它最初由美国国家安全局开发（NSA）。SELinux 自从2.6版本就进入内核主分支中。SELinux是限制修改内核和用户空间的工具。SELinux给可执行文件(主要是守护进程和服务端程序)最小特权 去完成它们的任务。SELinux也可以用来控制用户权限。SELinux不像AppArmor那样使用文件路径，而SELinux在追踪权限时使用文件 系统去标记可执行文件。因为SElinux本身使用文件系统管理可执行文件，所以SELinux不能像AppArmor那样对整个文件系统提供保护。
注意：守护进程是在后台运行的程序
注意：虽然在内核中有AppArmor、SELinux及其它安全模块，但只能有一个安全模块被激活。

</rich_text><rich_text foreground="#00000000ffff">Smack</rich_text><rich_text>是安全模块的另一种选择。Smack从2.6.25起进入内核主分支。Smack应能比AppArmor更安全，但比SELinux更容易配置。
</rich_text><rich_text foreground="#00000000ffff">TOMOYO</rich_text><rich_text>，是另外一个安全模块，在2.6.30进入内核主分支。TOMOYO可以提供安全防护，但是它的主要用途是分析系统安全缺陷。

AppArmor、SELinux、Smack和TOMYO组成了四个标准Linux安全模块。这些都通过使用强制访问控制 (MAC ： mandatory access  control)工作，这种访问控制是通过限制程序或者用户执行一些任务来实现的。安全模块还有某些形式的列表规定了它们可以做什么不可以做什么。

</rich_text><rich_text foreground="#00000000ffff">Yama</rich_text><rich_text>在Linux内核中一个新安全模块。Yama还没有作为标准的安全模块，但是在将来他会成为第5个标准安全模块。Yama和其他安全模块一样使用相同的机制。
</rich_text><rich_text foreground="#00000000ffff">“grsecurity”</rich_text><rich_text>是一系列Linux内核安全补丁的集合。多数补丁用于处理远程网络连接和缓冲区溢出的安全问题(以 后讨论)。grsecurity中有一个叫PaX的有趣组件。PaX补丁允许内存里的代码使用最少的所需权限。例如，存储程序的内存段被标为不可写。想想 看，为什么一个可执行的程序需要在内存中是可写的？通过这个补丁，恶意代码就不能修改目前正在执行的程序。缓冲区溢出是一种当程序由于bug或者恶意代码 在内存上写入数据，并让它的内存边界超出到其他程序的内存页上的安全事件。当Pax被激活时，它会帮助阻止这些缓冲区溢出，因为程序没有写到其他内存页上 的权限了。
</rich_text><rich_text foreground="#00000000ffff">Linux入侵检测系统(LIDS)</rich_text><rich_text>是一个内核安全补丁，提供了强制访问控制(MAC)的特性。这个补丁就像扮演LSM模块的角色。
</rich_text><rich_text foreground="#00000000ffff">Systrace</rich_text><rich_text>是一个减少和控制应用程序访问系统文件和系统调用的工具。系统调用是对内核的服务请求。比如，当一个文本编辑器写入一个文件到硬盘上时，程序将会发送一个系统请求让内核写入文件到硬盘中。
这些是在Linux安全系统中非常重要的组件。这些安全模块和补丁使内核免于受到恶意代码的攻击。没有这些特性，Linux系统将会变成一个不安全的操作系统。
</rich_text></node><node name="05 配置内核 (1)" prog_lang="custom-colors" readonly="False" tags="" unique_id="8"><rich_text>现在我们已经了解了内核，现在我们可以进入主要工作：配置并编译内核代码。配置内核代码并不会花费太长时间。配置工具会询问许多问题并且允许开发者配置内核的每个方面。如果你有不确定的问题或者特性，你最好使用配置工具提供的默认值。本系列教程会使读者逐步了解配置内核的整个过程。

配置代码前需要在源文件的文件夹内打开一个终端。当终端打开后，基于你喜好的配置界面，这里有几种不同的配置方法：
    • make config - 纯文本界面 (最常用的选择)。
    • make menuconfig - 基于文本彩色菜单和单选列表。这个选项可以加快开发者开发速度。需要安装ncurses(ncurses-devel)。
    • make nconfig - 基于文本的彩色菜单。需要安装curses (libcdk5-dev)。
    • make xconfig - QT/X-windows 界面。需要安装QT。
    • make gconfig - Gtk/X-windows 界面。需要安装GTK。
    • make oldconfig - 纯文本界面，但是其默认的问题是基于已有的本地配置文件。
    • make silentoldconfig - 和oldconfig相似，但是不会显示配置文件中已有的问题的回答。
    • make olddefconfig -和silentoldconfig相似，但有些问题已经以它们的默认值选择。
    • make defconfig - 这个选项将会创建一份以当前系统架构为基础的默认设置文件。
    • make ${PLATFORM}defconfig - 创建一份使用arch/$ARCH/configs/${PLATFORM}defconfig中的值的配置文件。
    • make allyesconfig - 这个选项将会创建一份尽可能多的问题回答都为‘yes’的配置文件。
    • make allmodconfig - 这个选项将会创建一份将尽可能多的内核部分配置为模块的配置文件。
注意：内核代码可以放进内核自身，也可以成为一个模块。例如，用户可以将蓝牙驱动作为一个模块加入(独立于内核)，或者直接放到内核里，或者完全不加蓝牙驱动。当代码放到内核本身时，内核将会请求更多的内存并且启动会花费更长的时间。然而，内核会执行的更好。如果代码作为模块加入，代码将会一直存在于硬盘上直到被需要时加载。接着模块被加载到内存中。这可以减少内核的内存使用并减少启动的时间。然而，因为内核和模块在内存上相互独立所以会影响内核的性能。另一种选择是不添加一些代码。举例来说，内核开发人员假如知道系统永远都不会使用蓝牙设备，因此这个驱动就可以不加到内核 中。这提升了内核的性能。然而，如果用户之后需要蓝牙设备，那么他么需要安装蓝牙模块或者升级内核才行。
    • make allnoconfig - 这个选项只会生成内核所必要代码的配置文件。它对尽可能多的问题都回答no。这有时会导致内核无法工作在为编译该内核的硬件上。
    • make randconfig - 这个选项会对内核选项随机选择（译注：这是做什么用途的？！）。
    • make localmodconfig - 这个选项会根据当前已加载模块列表和系统配置来生成配置文件。
    • make localyesconfig - 将所有可装载模块（LKM）都编译进内核(译者注：这里与原文 ‘This will set all module options to yes - most (or all) of the kernel will not be in modules’的意思不同，作者也作出了解释：</rich_text><rich_text link="webs http://www.linux.org/threads/the-linux-kernel-configuring-the-kernel-part-1.4274/#post-13307%29&amp;%2312290">http://www.linux.org/threads/the-linux-kernel-configuring-the-kernel-part-1.4274/#post-13307)。</rich_text><rich_text>;
贴士：最好使用“make menuconfig”，因为用户可以保存进度。“make config”不会提供这样的便利，因为配置过程会耗费大量时间。

</rich_text><rich_text scale="h3">配置:</rich_text><rich_text>
大多数开发者选择使用“make  menucongfig”或者其他图形菜单之一。当键入上述配置命令后，第一个问题，是受否将内核编译成64位。选项有“Y”、“n”和“?”。问号用来 解释这个问题，“n”代表这个问题回答否(no),&quot;Y&quot;代表这个问题回答是(yes)。在这个教程里，我选择是。  
这里我输入&quot;Y&quot;(这里是大小写敏感的)并输入回车。
注意：当内核在32位系统上编译时，编译工具会询问内核是否编译成32位。第一个问题在不同的处理器上不一样。
下一行显示的是&quot;Cross-compiler tool prefix (CROSS_COMPILE)  []&quot;（交叉编译器工具前缀）。如果你不是做交叉编译就直接按下回车。如果你正在交叉编译，对ARM系统输入像&quot;arm-unknown-linux-gnu-&quot;，对64位PC输入像&quot;x86_64-pc-linux-gnu-&quot;的字样。对其他处理器而言还有许多其他可能的命令，但是这个表太大了。一旦一名开发者知道他们想要支持的处理器，很容易就可研究出处理器需要的命令。
注意：交叉编译是为别的处理器编译代码。比如，一台Intel系统正编译着不在Intel处理器上运行的程序，比如，这个系统可能正在编译着要在ARM或AMD处理器上运行的代码。
注意：每一项选择会改变接下来显示什么问题及何时显示。我会(在教程里)包含上我的选择让读者可以在他们自己的系统上跟上配置的进度。
接下来,用户会看到“Local version - append to kernel release  (LOCALVERSION)  []”（本地版本号，附加到内核版本号后面）。这使开发人员可以给定一个特殊版本号或命名他们自定义的内核。我将输入“LinuxDotOrg”，这样， 内核版本会显示为“3.9.4-LinuxDotOrg”。接下来，配置工具会询问“Automatically append version  information to the version string (LOCALVERSION_AUTO)  [N/y/?]”（是否自动添加版本信息到版本号后）。如果本地有一个git版本库，git的修订号会被添加到版本号后面。这个例子中我们没有使用 git，所以我回答&quot;no&quot;。不然git修订号将会追加到版本号中。还记得vmlinuz和几个类似的文件么？好了，下一个问题就是问使用哪一种格式压缩内核。开发人员可以从五个选项中选择一个。它们是
    1. Gzip (KERNEL_GZIP)
    2. Bzip2 (KERNEL_BZIP2)
    3. LZMA (KERNEL_LZMA)
    4. XZ (KERNEL_XZ)
    5. LZO (KERNEL_LZO)
Gzip是默认值，所以我选择&quot;1&quot;并按回车。每种压缩格式和其他压缩格式相比都有更高或者更低的压缩比。更好的压缩比意味着更小的体积，但是与低压缩比文件相比，它解压时需要更多的时间。
现在这行显示“Default hostname (DEFAULT_HOSTNAME) [(none)]”（默认主机名）。这里可以配置主机名。通常地，开发者这行留空(我这里留空)，以便以后Linux用户可以自己设置他们的主机名。
接下来开发者可以启用或者禁用交换分区。Linux使用一个叫做&quot;swap  space&quot;的独立分区来使用虚拟内存。这相当于Windows中的页面文件。典型地，开发者在这行“Support for paging of  anonymous memory (swap) (SWAP) [Y/n/?]”（是否支持匿名内存换页）回答“Y”。
接下来的一行（System V IPC (SYSVIPC)  [Y/n/?]）询问内核是否支持IPC。进程间通信使进程间可以通信和同步。最好启用IPC不然许多程序将无法工作。这个问题回答“Y”会使配置工具接 下来问“POSIX Message Queues (POSIX_MQUEUE)  [Y/n/?]”（是否使用POSIX消息队列），这个问题只会在IPC启用后看见。POSIX消息队列是一种给每条消息一个优先级的消息队列（一种进程 间通信形式）。默认的选择是“Y”。按回车选择默认选择（以大写选择指示默认）。
下一个问题“open by fhandle syscalls (FHANDLE) [Y/n/?]”（是否使用文件句柄系统调用来打开文件）是问当有需要进行文件系统操作的时候，程序是否允许使用文件句柄而不是文件名进行。默认上，这个选择是“Y”。
有时，开发者在做了一些选择后，某些问题会自动回答。比如，下一个问题“Auditing support (AUDIT)   [Y/?]”（是否支持审计）会在没有提示的情况下自动回答，因为先前的选项需要这个特性。审计支持会记录所有文件的访问和修改。下一个关于审计的问题 “Enable system-call auditing support (AUDITSYSCALL)  [Y/n/?]”（是否启用系统调用审计支持）。如果启用，所有的系统调用都会记录下来。如果开发者想要更好的性能，那么最好尽可能地禁用审计特性并且不 把它加入内核。而另外一些开发者可能为了安全监控而启用审计。这个问题我选择“n”。下一个审计方面的问题“Make audit loginuid  immutable (AUDITLOGINUIDIMMUTABLE)  [N/y/?]”（是否要审计进程身份ID不可变）是询问进程是否可以改变它们的loginuid(LOGIN User  ID)，如果启用，用户空间的进程将无法改变他们的loginuid。为了更好的性能，我们这里禁用这个特性。（译注：对于使用systemd这样的系 统，其是通过中央进程来重启登录服务的，设置为“y”可以避免一些安全问题；而使用较旧的SysVinit和Upstart的系统，其需要管理员手工重启 登录服务，应该设置为“N”）
注意：当通过“make config”配置时，这些通过配置工具回答的问题会显示出来但是用户无法改变答案。当通过&quot;make menuconfig&quot;配置时，无论用户按任何键都无法改变选项。开发者不需要去改变这些选项，因为之前的选择决定了另外一个问题的选择。
</rich_text></node><node name="06 内核配置(2)" prog_lang="custom-colors" readonly="False" tags="" unique_id="12"><rich_text>这一部分我们讲配置内核IRQ子系统。中断请求(IRQ)是硬件发给处理器的一个信号，它暂时停止一个正在运行的程序并允许一个特殊的程序占用CPU运行。
这个目录中的第一个问题属于内核特性(Expose hardware/virtual IRQ mapping via debugfs  (IRQ_DOMAIN_DEBUG))（通过debugfs来显示硬件/虚拟的IRQ映射），它询问是否可以使用虚拟的调试文件系统来映射硬件及 Linux上对应的IRQ中断号。这个用作调试目的，大多数用户不需要用到，所以我选择了&quot;no&quot;。
下一个标题显示&quot;Timers subsystem&quot;（计时器子系统）。第一个有关定时器子系统的问题是“Tickless System  (Dynamic Ticks)  (NO_HZ)”（无滴答系统）。我选择了“yes”，这会启用一个无滴答系统。这意味着定时器中断将会按需使用，定时器中断允许任务以特定的时间间隔执 行。下一个问题(High Resolution Timer Support  (HIGH_RES_TIMERS))问是否支持高精度定时器。并不是所有的硬件支持这个，通常地说，如果硬件很慢或很旧，那么选择&quot;no&quot;,否则像我一 样选择&quot;yes&quot;。
下一个标题&quot;CPU/Task time and stats accounting&quot;（CPU/任务用时与状态统计），这个是关于进程的追踪。第一个问题看上去像这样：
Cputime accounting （CPU用时统计）
    1. Simple tick based cputime accounting (TICK_CPU_ACCOUNTING) （简单基于滴答的用时统计）
    2. Full dynticks CPU time accounting (VIRT_CPU_ACCOUNTING_GEN) (NEW) （全动态滴答的用时统计）
    3. Fine granularity task level IRQ time accounting (IRQ_TIME_ACCOUNTING) （细粒度的任务级IRQ用时统计）
TICKCPUACCOUNTING会在每个CPU滴答中检测/proc/stat。这是默认的选项，这个记账方法非常简单。
注意：CPU滴答是抽象测量CPU时间的方式。每个处理器、操作系统和安装的系统都不同，比如说，一个更强大的处理器会比老的处理器拥有更多的 CPU滴答。如果你安装了一个Linux系统，然后接着在同一块磁盘上重新安装了它，你可能会得到一个更快或更慢的CPU滴答时间(至少一些计算机技术书 上这么说)。通常来讲，一个更快的时钟速度意味着更多的CPU滴答。
如果启用了VIRT_CPU_ACCOUNTING_GEN，任务和CPU时间统计将由监视内核-用户边界实现。这个选择的代价是会增加额外的开销。
IRQ_TIME_ACCOUNTING记账方式则通过检测IRQ状态间的时间戳工作，这个性能开销很小。
我选择了&quot;1&quot;并被询问有关BSD记账&quot;BSD Process Accounting (BSD_PROCESS_ACCT)&quot;（BSD进程记账）的问题。这个内核特性会记录每个进程不同的关闭信息。为了得到一个更小和更快的内核，我选择了&quot;no&quot;.
下一组问题看上去就像下面这样。
    • Export task/process statistics through netlink (TASKSTATS) （通过netlink导出任务/进程统计数据）
    • Enable per-task delay accounting (TASK_DELAY_ACCT) （启用针对每个任务的延迟统计）
    • Enable extended accounting over taskstats (TASK_XACCT) （启用taskstats的扩展统计）
TASKSTATS使内核可以通过网络套接字导出进程统计。网络套接字是内核和用户空间进程间IPC通信的一种形式。TASKDELAY\ACCT监视进程并注意资源访问的延迟。比如，TASKDELAYACCT可以看到X进程正在为了CPU时间而等待，如果TASK_DELAY_ACCT观察到进程已经等待了太长时间，这个进程接着就会被给予一些CPU时间。TASK_XACCT会收集额外的统计数据，为了更小的内核负载我会禁用这个。
现在接下来的目录就会显示RCU子系统：读取-复制-更新子系统是一种低负载的同步机制，它允许程序查看到正在被修改/更新的文件。配置工具已经回答了第一个问题。
RCU Implementation （RCU 实现方式）
&gt; 1. Tree-based hierarchical RCU (TREE_RCU) （树形分层结构的RCU）
choice[1]: 1
这里就选择“1”。除了TREE_RCU，还有classic RCU(更老的实现)。下一个问题(Consider userspace as  in RCU extended quiescent state (RCU_USER_QS)  [N/y/?])（是否在用户空间记录扩展的quiescent状态）问RCU是否可以在CPU运行在用户空间时设置一个特殊的quiescent状态。 这个选项通常被禁用，因为这会增加太多消耗。下面是另一个RCU问题(Tree-based hierarchical RCU fanout  value (RCU_FANOUT) [64])（树形分层结构的RCU端点数），问的是关于端点数。下一个问题(Tree-based  hierarchical RCU leaf-level fanout value (RCU_FANOUT_LEAF)  [16])（树形分层结构的RCU叶级端点数），是另外一个关于端点数的问题，但它只处理叶级。还有另外一个RCU问题(Disable  tree-based hierarchical RCU auto-balancing (RCU_FANOUT_EXACT)  [N/y/?])（是否禁用树形分层结构的RCU的自动平衡），询问是否禁用RCU自动平衡树，而采用上述的端点数。
接下来，配置脚本将会询问&quot;Accelerate last non-dyntick-idle CPU's grace periods  (RCU_FAST_NO_HZ)&quot;（加速最后的非dyntick-idle CPU的RCU宽限期）。在这之后会显示&quot;Offload RCU  callback processing from boot-selected CPUs  (RCU_NOCB_CPU)&quot;（从选择引导的CPU里面卸载RCU回调）。（译注：此处作者没做解释。前一个能够节省电力，但是降低了性能；后一个用于 调试。）
下一个问题非常重要(Kernel .config support  (IKCONFIG))（内核的.config支持）。开发人员可以选择保存由这个配置工具生成的设置到一个文件中。这个文件可以放在内核中，也可在一个 模块中，或者完全不保存。这个文件可以被想要编译一个完全跟某人相同内核的开发者使用。这个文件还可以帮助开发人员使用一个更新的编译器重新编译一个内 核。举例来说，开发人员配置并编译了一个内核，然而编译器有一些bug，但开发人员仍然需要一个使用这些设置的内核。而值得庆幸的是，开发人员可以升级他 们的编译器，并使用设置文件来节省他们重新配置内核的时间。开发人员也可以在另一台计算机上保存源代码和配置文件并编译内核。至于另一个目的，开发人员可 以加载该文件，并根据需要调整设置。我选择保存配置文件在一个模块中，这个问题 &quot;Enable access to .config through  /proc/config.gz  (IKCONFIG_PROC)&quot;（启用通过/proc/config.gz来访问.config的功能）是询问这个文件是否是可以通过这次方式访问的， 我选择了&quot;yes&quot;。
下一个问题是内核使用多大的log缓冲区(Kernel log buffer size (16 =&gt; 64KB, 17 =&gt;  128KB) (LOG_BUF_SHIFT)  [17])（内核日志缓冲区大小）。小的缓冲区意味着它无法像更大的缓冲区那样保持日志更长的时间。这个选择取决于开发者想要日志保持的时间，我选择的 是&quot;12&quot;。
接着，出现了另外一个问题。该问题询问关于是否启用NUMA(非一致性内存访问)的内存/任务的均衡(Automatically enable  NUMA aware memory/task placement  (NUMA_BALANCING_DEFAULT_ENABLED))（自动启用NUMA的内存/任务均衡）。如果在NUMA的机器上设置了该选项，那么 NUMA自动平衡就会启用。在NUMA下，处理器可以比非本地内存(内存分配给另外一个处理器或在处理器之间共享的内存)更快地访问它的本地内存。如果上 面启用了(我启用了)，那么最好对这个问题&quot;Memory placement aware NUMA scheduler  (NUMA_BALANCING)&quot;（由NUMA调度器进行内存分配）回答&quot;yes&quot;，这是一个NUMA调度器。
在新的标题&quot;Control Group support&quot;（Cgroup支持）下，因为先前的选择，&quot;Control Group support (CGROUPS)&quot;（Cgroup支持）被自动地回答了&quot;yes&quot;。
以下设定(Example debug cgroup subsystem  (CGROUP_DEBUG))（导出Cgroup子系统的调试信息）是启用一个用于调试cgroup框架的一个简单cgroup子系统。下一个选项 (Freezer cgroup subsystem  (CGROUP_FREEZER))（冻结Cgroup子系统）可以让程序员可以冻结或解冻cgroup内的任务。
注意：cgroup是一组进程。
下面我们要求回答&quot;Device controller for cgroups  (CGROUP_DEVICE)&quot;(Cgroup的设备控制器)。cgroup(控制组)是一种用来控制资源使用的特性。回答&quot;yes&quot;可以允许设备 cgroup的白名单可以使用open和mknod系统调用(用来创建文件系统节点的系统调用)。
下一个问题(Cpuset support  (CPUSETS))（CPU分组支持）询问的是内核是否可以创建和管理CPU分组。这允许管理员可以在一个系统上动态分配各组内存节点，并分配任务在这 些内存上运行。这通常用于SMP和NUMA系统中。我这个问题回答的是&quot;no&quot;。
注意：请记住，如果我没有指定我选的是什么，那么我选的就是默认选项。
启用cgroup统计子系统(Simple CPU accounting cgroup subsystem  (CGROUP_CPUACCT))（Cgroup子系统的简单CPU统计）会生成一个资源控制器来监控在一个cgroup组内的独立任务的CPU使用情 况。我选择了&quot;no&quot;。
资源计数器(Resource counters (RESOURCE_COUNTERS))使控制器的独立资源统计功能能够统计cgroup。我选择了&quot;no&quot;。
下一个问题(Enable perf_event per-cpu per-container group (cgroup)  monitoring  (CGROUP_PERF))（启用每个CPU、每个容器组的pref_event监控）允许开发者扩展每个CPU的模式，使它可以只监控运行在特定 CPU上的一个特别的cgroup组的线程。
下一章节是&quot;Group CPU Scheduler&quot;（CPU分组调度器）。前两个已经回答的问题包括：
Group CPU scheduler (CGROUPSCHED)（CPU分组调度器） Group scheduling for SCHEDOTHER (FAIRGROUP\SCHED)（SCHED_OTHER分组调度）
第一个已回答的问题(CPU bandwidth provisioning for FAIR_GROUP_SCHED  (CFS_BANDWIDTH))（CPU带宽分配）询问的是内核是否允许用户设置在公平组调度器内执行的任务的CPU带宽限制。没有限制的组会被认为不 受约束，并会没有限制地运行。
注意：并不是所有内核选项都在这里。我这里提到的组只是为了便于阅读，并挑出那些新的和大的部分。并不需要了解所有的分组。分组有助于使用图形工具配置内核，这样开发者可以在搜索特定的设置时，直接通过分组菜单找到。
开发者可以通过回答&quot;Group scheduling for SCHED_RR/FIFO (RT_GROUP_SCHED)&quot;（SCHED_RR/FIFO分组调度）这个问题为&quot;yes&quot;来让用户可以分配CPU带宽到任务组中。
下一个问题是&quot;Block IO controller (BLK_CGROUP)&quot;（块IO控制器）。任务组可以被识别，并且它们的磁盘带宽是由使用块IO控制器实现的CFQ IO调度器分配的。BIO在块级的限制逻辑使用块IO控制器来提供设备上的IO速率上限。
这里有一个调试问题(Enable Block IO controller debugging (DEBUGBLKCGROUP) [N/y/?])（启用阻塞IO控制器的调试）询问是否启用块IO控制器的调试。为了制作一个精简的内核，最好禁用这个特性。
为了启用内核中的检查点和还原特性。这个问题“Checkpoint/restore support  (CHECKPOINT_RESTORE)”（检查点及还原支持）可以选择“yes”，不过为了更低的负载这里我选择了“n”。启用这个特性会增加辅助的 进程控制代码来设置进程的代码段、数据段和堆的大小，并增加了一些额外的程序入口。
下面我们就要配置命名空间的支持了。命名空间是一组标识符的容器。比如，/usr/lib/python3/dist-packages /re.py就是一个标识符，/usr/lib/python3/dist-packages/就是一个命名空间。而re.py是这个命名空间下的本地名 称。
第一个命名空间问题(Namespaces support  (NAMESPACES))询问的是是否启用命名空间。这允许可以使用相同的PID但在不同的命名空间内(译注：原文为&quot; This will  allow the same PIDs (Process ID) to be used but indifferent  namespaces&quot;,这里indiffernt根据上下文应该是少了空格)，否则PID永远不会重复。
下一个问题(UTS namespace (UTS_NS))询问是否可以让UTS命名空间内的任务可以在uname()系统调用中看到不同的信息。uname()系统调用提供查看机器和操作系统的信息。
启用IPC命名空间(IPC namespace (IPC_NS))将允许在这个命名空间内的任务与其他命名空间内相对应IPC ID的对象协同工作。
PID命名空间(PID Namespaces (PID_NS))就是进程ID命名空间。这可以使不同的进程在不同的PID命名空间使用相同的PID。这是一个容器的构建块。
接下来，启用网络命名空间(Network namespace (NET_NS))可以使用户创建一个拥有多个实例的网络栈。
当启用后,自动进程分组调度(SCHED_AUTOGROUP)会填充并创建任务组来优化桌面程序的调度。它将把占用大量资源的应用程序放在它们自己的任务组，这有助于性能提升。
这里是一个调试特性，除非你有特别的需求否则应该禁用它。这个问题(Enable deprecated sysfs features to  support old userspace tools  (SYSFS_DEPRECATED))（启用不推荐的sysfs功能来支持旧式的用户空间工具）询问是否启用sysfs，这是调试内核时用的虚拟文件系 统。
接下来，因为当前的配置需要它，所以&quot;Kernel-&gt;user space relay support (formerly  relayfs)  (RELAY)&quot;（内核-&gt;用户空间的中继支持，即relayfs）已经被设成&quot;yes&quot;了。最好启用initrd支持(Initial RAM  filesystem and RAM disk (initramfs/initrd) support  (BLK_DEV_INITRD))（初始化内存文件系统和内存盘(initramfs/initrd)）。
用户会被问及哪里放置initramfs源文件。如果没有需要，请留空。
接下来,开发人员会被询问关于初始虚拟磁盘(Linux的内核映像文件)所支持的压缩格式。你可以启用所有支持的压缩格式。
    • Support initial ramdisks compressed using gzip (RD_GZIP)
    • Support initial ramdisks compressed using bzip2 (RD_BZIP2)
    • Support initial ramdisks compressed using LZMA (RD_LZMA)
    • Support initial ramdisks compressed using XZ (RD_XZ)
    • Support initial ramdisks compressed using LZO (RD_LZO)
这里设置了内核的编译内核编译选项(Optimize for size (CC_OPTIMIZE_FOR_SIZE))（优化大小）。开发者可以让编译器在编译时优化代码。我选择了&quot;yes&quot;。
用户想要配置更多的内核特性，那么下个问题就回答&quot;yes&quot;(Configure standard kernel features (expert users) (EXPERT))（配置标准内核特性（专家级用户））。
要启用过时的16位UID系统调用封装器，这个问题设成&quot;yes&quot;(Enable 16-bit UID system calls (UID16))。系统调用就会使用16位UID。
推荐启用&quot;sysctl syscall&quot;(Sysctl syscall support (SYSCTL_SYSCALL))支持。这使/proc/sys成为二进制路径的接口。
接下来的两个问题已经被预先回答了&quot;yes&quot;,它们是&quot;Load all symbols for debugging/ksymoops  (KALLSYMS)&quot;（载入所以的调试符号）和&quot;“Include all symbols in kallsyms  (KALLSYMS_ALL)&quot;（包括所有的kallsyms符号）。这些都是启用调试标志。
下一步，开发者应该启用printk支持( (Enable support for printk  (PRINTK)))，这会输出内核消息到内核日志中。这在内核出错时是很重要的。编译一个&quot;哑巴&quot;内核并不是一个好主意。然而，如果我们启用了这个支 持，就会被一些开发者看到这些出错，要么就不要启用。
除非有必要，开发者可以禁用bug支持(BUG() support (BUG))。禁用这项将会不支持WARN信息和BUG信息。这会减小内核的体积。
</rich_text></node><node name="07 配置内核 (3)" prog_lang="custom-colors" readonly="False" tags="" unique_id="13"><rich_text>下一个问题(Enable ELF core dumps (ELF_CORE))询问的是内核是否可以生成内核转储文件。这会使内核变大4KB。所以我选择了&quot;no&quot;。
注意：内核转储文件(内存或者系统的转储)是程序崩溃前已记录的状态。内核转储是用来调试问题的。这个转储文件的格式是ELF(Executable and Linkable Format )。
下面可以启用PC扬声器(Enable PC-Speaker support (PCSPKR_PLATFORM))。大多数计算机用户拥有并使用扬声器，所以这个启用它。
虽然下面的特性会增加内核的大小(Enable full-sized data structures for core (BASE_FULL))（启用完全大小的内核数据结构），但性能也随之增加。所以我选择&quot;yes&quot;。
为了使内核可以运行基于glibc的程序，必须启用FUTEX(Enable futex support (FUTEX))。这个特性启用了快速用户空间互斥锁(Fast Userspace muTEXes)。
注意：glibc(GNU C Library)是由GNU实现的标准C库。
注意：FUTEX (fast userspace mutex)是用来防止两个线程访问同一个不能被多个线程使用的共享资源。
下一个问题(Enable eventpoll support (EPOLL))可以通过回答&quot;no&quot;来禁用epoll系统调用。然而，为了含有epoll系统调用，我选择了&quot;yes&quot;。epoll是一种I/O事件通知系统。
为了收到来自文件描述符的信号，我们启用signalfd系统调用(Enable signalfd() system call (SIGNALFD)。
如果启用这个特性(Enable timerfd() system call (TIMERFD))，它允许程序使用定时器事件获取文件描述符。
我们现在的配置必须启用eventfd系统调用(Enable eventfd() system call  (EVENTFD))。它默认启用访问共享内存文件系统(Use full shmem filesystem  (SHMEM)。共享内存文件系统是一种虚拟内存文件系统。
下一个问题是&quot;Enable AIO support (AIO)&quot;。这个特性启用了线程化程序使用的POSIX异步I/O。
注意：异步I/O用来处理输入/输出，它允许线程在传输完成前就完成处理。
如果你正在给一个嵌入式系统配置一个内核，那么问题“Embedded system (EMBEDDED)”可以选择&quot;yes&quot;。否则就像我一样选择&quot;no&quot;。
注意：嵌入式系统是运行在一个更大的电子系统的实时计算机。
现在，我们可以配置内核性能事件和计时器了。配置工具没有给开发者选择，直接启用了事件和计数器(Kernel performance events and counters (PERF_EVENTS))（内核性能事件和计数器）。这是一个重要特性。
接下来，我们可以禁用另外一个调试特性(ebug: use vmalloc to back perf mmap() buffers (DEBUG_PERF_USE_VMALLOC))。
如果启用了VM事件计数器，那么事件计数就会显示在/proc/vmstat(Enable VM event counters for  /proc/vmstat (VM_EVENT_COUNTERS))。如果禁用了事件计数就不会显示，/proc/vmstat只会显示内存页计数。
为了更好地支持PCI芯片，(Enable PCI quirk workarounds (PCI_QUIRKS))回答yes。这会启用对PCI芯片的怪异行为和bug的临时解决方案。
下面一个调试特性可以像我一样禁用掉(Enable SLUB debugging support  (SLUB_DEBUG))。这个特性会耗费很多空间并且会禁用用于调试内核的SLB  sysfs。如果这个特性被禁用，那么/sys/slab就不会存在并且系统上也不再支持缓冲验证。
堆随机化是一个让利用堆漏洞更加困难的特性(Disable heap randomization  (COMPAT_BRK))。然而我们不应该去启用它，因为任何基于libc5的软件都无法工作在这个系统上！只有我们有特别的理由这么做或者如果你不会 使用基于libc5的软件时才去启用它。我禁用了这个特性。当编译一个通用的内核时，开发这会希望禁用这个特性。
接下来必须选择一个SLAB分配器。SLAB分配器是一个没有碎片且有效率地将内核对象放置在内存中的内存管理系统。默认选择是&quot;2&quot;。
Choose SLAB allocator
1. SLAB (SLAB)
&gt; 2. SLUB (Unqueued Allocator) (SLUB)
3. SLOB (Simple Allocator) (SLOB)
choice[1-3?]: 2
为了支持扩展性能支持，(Profiling support (PROFILING))回答&quot;yes&quot;。
下一个问题让开发者选择是否启用OProfile系统。它可以禁用、启用或者添加为一个模块在需要时载入。我选择禁用这个特性。
Kprobes允许用户捕捉几乎任意的内核地址去启动一个回调函数。这是一个可以像我一样禁用的调试工具(Kprobes (KPROBES))。
这个优化特性可以启用(Optimize very unlikely/likely branches (JUMP_LABEL))（优化非常近似/不近似的分支）。这使分支预判更加简单并可以减小开销。
配置工具启用了一个实验性特性&quot;透明用户空间探针&quot;(Transparent user-space probes (EXPERIMENTAL) (UPROBES))。不过不要担心，系统可以很好工作，并不是所有的实验性特性是不稳定或者坏的。
接下来，我们会被询问基于gcov的内核分析(Enable gcov-based kernel profiling (GCOV_KERNEL))。这可以被禁用。
为了允许内核加载模块，需要启用可加载模块支持(Enable loadable module support (MODULES))。
内核一般只能加载有版本号的模块。如果想允许内核加载没有版本号的模块，就启用这个特性(Forced module loading  (MODULE_FORCE_LOAD))（强制模块载入）。这么做是一个很糟糕的注意，所以我已经禁用了它，除非你有特定的需求需要这个特性。
如果启用了这个特性(Module unloading  (MODULE_UNLOAD))，Linux内核也能卸载模块，最好启用。如果内核判断你要卸载的模块不应该被卸载，那么用户则无法卸载模块。启用强制 卸载也行，但是不建议(Forced module unloading (MODULE_FORCE_UNLOAD)。
为了使用不是为你的内核开发的或者并不适用你的版本号的模块，可以启用版本支持(Module versioning support (MODVERSIONS))。最好不要混用不同版本号的模块，所以我禁用了这个特性。
模块在它们的modinfo(模块信息)里有一个字段名为&quot;srcverion&quot;。这个字段允许开发者知道使用什么源码版本来编译模块。启用这个选 项可以在编译模块的时候加入这个字段。这个并不必要，所以我禁用了它(Source checksum for all modules  (MODULE_SRCVERSION_ALL))。如果启用了先前的选项，开发者可以将校验和加入到模块中(Source checksum for  all modules (MODULE_SRCVERSION_ALL))。
为了启用模块签名验证(Module signature verification (MODULE_SIG))，这个选项回答&quot;yes&quot;。因为这个并不必要，我选择了&quot;no&quot;，否则内核在加载模块前会检查并验证签名。
为了启用块级支持(Enable the block layer (BLOCK)),像我一样选择&quot;yes&quot;。禁用这个将会使块设备无法使用并且无法启用某些文件系统。
下面，SG支持已经默认启用(Block layer SG support v4  (BLK_DEV_BSG))（块级SG支持V4版），并且辅助库也启用了(Block layer SG support v4 helper lib  (BLK_DEV_BSGLIB))。
下面回答的问题是关于对块设备的数据完整性支持(Block layer data integrity support (BLK_DEV_INTEGRITY))。这个特性允许拥有更好的数据完整性来提供设备数据保护特性。许多设备不支持这个特性，所以我禁用了它。
如果启用了块级bio带宽限制(Block layer bio throttling support (BLK_DEV_THROTTLING))那就可以限制设备的IO速率。
为了启用外部分区方案的支持，这个问题就回答&quot;yes&quot;(Advanced partition selection (PARTITION_ADVANCED))。我禁用了这个特性。
为了启用CSCAN(译注：循环扫描)和FIFO过期请求，那就启用最后期限IO调度器(Deadline I/O scheduler (IOSCHED_DEADLINE))。
CFQ IO调度器在处理器之间平均地分配带宽。因此启用这个特性feature (CFQ I/O scheduler (IOSCHED_CFQ))是个好主意。
下面，开发者可以启用或禁用CFQ组支持(CFQ Group Scheduling support (CFQ_GROUP_IOSCHED))。接下来，开发者可以选择默认的IO调度器，最好选择DEFAULT_DEADLINE。
对于小于32位寻址的设备，下面的特性会分配16MB的寻址空间(DMA memory allocation support (ZONE_DMA))。如果你不使用这些设备，那么这个是可以禁用的，所以我禁用了它。
对于有多个CPU的系统，最好启用SMP(Symmetric multi-processing support (SMP))。对于只有单个处理器的设备，内核会在禁用这个特性后执行得更快。我启用了这个特性。
对于支持x2apic的CPU，启用x2apic支持support (Support x2apic (X86_X2APIC))。如果你的系统缺乏这个特性就像我一样禁用它。
接下来我们可以启用对那些缺乏合适的ACPI支持的旧式SMP系统的MPS表(Enable MPS table (X86_MPPARSE))。一些拥有ACPI、DSDT、MADT支持的更新的系统不需要这个特性。我禁用了它。
下面的问题允许我们启用扩展x86平台的支持(Support for extended (non-PC) x86 platforms  (X86_EXTENDED_PLATFORM))。只有在你需要一个通用内核或者内核运行在某个特定的需要扩展支持的处理器上时才启用它。我禁用了这个 特性。
为了支持Intel低功耗子系统，就启用这个特性(Intel Low Power Subsystem Support (X86_INTEL_LPSS))。
单一深度WCHAN输出(Single-depth WCHAN output (SCHED_OMIT_FRAME_POINTER))是用来计算电量(/proc//wchan)，然而这会导致更多的功耗。
下面，我们启用虚拟客户系统支持(Paravirtualized guest support (PARAVIRT_GUEST))。这允许一个Guest操作系统与主操作系统一起运行。我会禁用这个特性。
Memtest是一个在系统启动时检测内存的软件。Memtest可以配置为每次或者有时开机运行。Memtest并不必要，所以我禁用了它。
这里我们可以选择一个内核应该支持的处理器家族。我选择了5 – Generic-x86-64。这是一个64位的系统，x86是32系统。
下面我们能选择也支持x86(32位)处理器 (Supported processor vendors (PROCESSOR_SELECT))。
为了发现机器异常，我们可以启用DMI扫描(Enable DMI scanning (DMI))，这可以检测异常。
要启用DMA访问系统上32位内存的3GB以上的内存，下一个问题(GART IOMMU support (GART_IOMMU))我们回答&quot;yes&quot;。
</rich_text></node><node name="08 配置内核(4)" prog_lang="custom-colors" readonly="False" tags="" unique_id="22"><rich_text>这里我们被问及关于&quot;IBM Calgary IOMMU support (CALGARY_IOMMU)&quot;。这个选项将会提供对IBM  xSeries x366和x460的IOMMU的支持。这也将让那些32位PCI的设备工作正常——在这些系统上不支持双地址周期(DAC :  Double Address  Cycle)——因为该系统设置在访问超过3GB内存的时候会有问题。如果需要这些IOMMU设备可以用&quot;iommu=off&quot;在启动时关闭。(这些内核 /模块参数会在以后的文章中讨论)
IOMMU(input/output memory management  unit)是一个内存管理单元(MMU)，它连接具有DMA功能的I/O总线到主内存上。DMA(Direct Memory  Access)是许多计算机支持的一种允许特定设备不借助CPU直接访问内存的特性。双地址周期(Double Address Cycle,  DAC)是64位DMA；而通常的DMA使用32位。
下面，我们被问及是否默认启用Calgary(Should Calgary be enabled by default?  (CALGARY_IOMMU_ENABLED_BY_DEFAULT))。Calgary与上面提到的IOMMU是同一个概念。这两者之间的不同是 IOMMU可以支持许多设备而Calgary只能支持IBM  IOMMU设备。如果禁用了它，但是以后需要使用到它，可以使用内核参数(iommu=calgary)。
这里有个问题需要小心处理(Enable Maximum number of SMP Processors and NUMA Nodes  (MAXSMP))。只有在内核运行在拥有很多SMP处理器和NUMA节点的情况下才启用它，如Core i7和许多AMD  CPU芯片。如果系统缺乏或者只有少量的SMP处理器和NUMA节点，内核就会变得低效。这个最好选择&quot;No&quot;。
非一致性内存访问(Non-Uniform Memory Access  (NUMA))是一个每块内存都需要花费更长时间访问其他部分内存的系统。一个节点就是一组内存。例如，一个NUMA系统可能有三块内存芯片。每块芯片是 一个节点，在带CPU的主板上有一个节点/芯片(这是最快的节点)，另外两个在不同的总线上。这两个节点需要比第一个节点花费更长的时间去访问。
注意：ccNUMA和NUMA目前是一样的，至少是非常相似的。
对称多处理器(Symmetric Multi-Processing (SMP))是NUMA的替代品。它的内存在同一根总线上。只有限定数量的CPU可以访问总线，所以这限制了SMP系统上处理器的数量。然而它内存的访问速度一样块。
注意：我是在为AMD64系统在编译内核，所以我会告诉你我的选择，来帮助读者理解过程和选择。如果我没有指出我的选择，那么我用的就是默认选择。如果你在为不同的系统编译或者你有不同的需求，你需要在你的情况下做出替代的选择。
接下来，除非配置工具已经为你做了选择，选择一个内核需要支持的最多CPU的数量。这个配置根据你给的数量优化内核。
接着启用或禁用&quot;SMT (Hyperthreading) scheduler support  (SCHED_SMT)&quot;（超线程调度器支持）。SMT调度器提升了在使用了超线程技术的Pentium  4处理器上的CPU决策能力。然而，这会带来额外的功耗，在一些系统上最好像我一样选择&quot;no&quot;。
超线程一种专有的SMT并行微处理器(Intel 实现了它)。这是多任务/多线程(同时做许多任务)的一种特殊形式，并行多线程(Simultaneous multithreading (SMT))提升了多线程执行的效率。
在这之后，启用或者禁用&quot;Multi-core scheduler support (SCHED_MC)&quot;。这样也是一种提升多核CPU决策的特性。然而这回带来额外功耗，我选择了&quot;No&quot;。
在下一个选项中可以选择抢占模式。
Preemption Model（抢占模式）
1. No Forced Preemption (Server) (PREEMPT_NONE) （非强制抢占）
&gt; 2. Voluntary Kernel Preemption (Desktop) (PREEMPT_VOLUNTARY) （自愿内核抢占）
3. Preemptible Kernel (Low-Latency Desktop) (PREEMPT) （可抢占内核）
choice[1-3]: 2
抢占就是暂停一个意图让它之后继续执行的中断任务的过程。抢占强制一个进程暂停，执行中的任务无法忽视抢占。
接着，我们被询问关于&quot;Reroute for broken boot IRQs  (X86_REROUTE_FOR_BROKEN_BOOT_IRQS)&quot;。这是一个对于假中断的简单修复。假中断是一种无用的硬件中断，这些通常是有电 子干扰或者错误连接的电子产品触发。记住，中断是发送给处理器需要马上注意的信号。
这个选项对任何机器都很重要；我怀疑任何人可能都会有禁用这个特性的理由(Machine Check / overheating reporting (X86_MCE))。内核必须意识到过热和数据损坏，不然，系统将会继续操作，这样只会导致进一步的破坏。
下面，用户可以启用禁用&quot;Intel MCE features (X86_MCE_INTEL)&quot;，这是一种额外的对像热度监控的Intel  MCE特性的支持。因为我是为AMD64处理器编译内核所以我选择了&quot;no&quot;。机器检测异常(MCE)是一种当处理器发现硬件问题时的错误输出。MCE通 常会导致内核严重错误(kernel panic)(相当于Windows中的&quot;蓝屏&quot;)。
这个除了是AMD设备外是同一个问题Intel MCE features (X86_MCE_INTEL)。
下一个是我会禁用的调试特性(Machine check injector support  (X86_MCE_INJECT))。这个会允许注射检查。如果你偶尔执行机器注射，那最好编译成模块而不是编译进内核。机器注射可以使设备即使实际没有 错误也可以发送一个伪造的错误信息。这个用来确认内核和其他进程可以正常处理错误。比如，如果CPU过热，接着应该关机，但是开发者如何在不损坏CPU的 情况下测试代码。注射错误是一种最好的方法，因为它只是一种告诉硬件发送错误信号的软件。
注:模块是对可能被使用或者很少执行的特性/驱动而言的。只加入在许多使用该内核的系统中用到的特性/驱动到内核中。
如果内核很可能用在Dell笔记本上，那么启用这个特性(Dell laptop support  (I8K))。否则，如果一些用户可能在戴尔笔记本电脑上用到这个内核，将其作为一个模块加入。如果这个内核不打算支持Dell笔记本，那就像我一样忽略 掉它。特别地，这个支持是一个允许Dell Inspiron  8000系列笔记本访问处理器的系统管理模式的驱动。系统管理模式的目的是得到处理器的温度和风扇状态，这对一些需要控制风扇的系统有用。
下面，用户可以选择微码加载支持(CPU microcode loading support (MICROCODE))。这可以允许用户在支持这个特性的AMD或者Intel芯片上更新微码。
注意：为了加载微码，你必须拥有一个为你的处理器设计的合法的二进制微代码拷贝。
如果要加载微码补丁(修复bug或加入次要的特性)到intel芯片上(Intel microcode loading support (MICROCODE_INTEL))，这个就必须启用。这里我禁用了它。
然后是AMD芯片的类似选项(AMD microcode loading support (MICROCODE_AMD))。
启用这个支持(/dev/cpu/*/msr - Model-specific register support  (X86_MSR))可以允许某个处理器有权限使用x86特殊模块寄存器(Model-Specific Registers  (MSRs))。这些寄存器是一些字符设备，包括major 202下minor 0到31的设备((/dev/cpu/0/msr to  /dev/cpu/31/msr))。这个特性用在多处理器系统上。每个虚拟字符设备都连接到一个特定的CPU。
注意：MSRs被用来改变CPU设备、调试、性能监控和执行追踪。MSRs使用x86指令集。
在这之后，我们有一个选项&quot;CPU information support (X86_CPUID)&quot;，启用这个特性允许处理器访问x86  CPUID指令，这需要通过字符设备在一个特定的CPU上执行。这些字符设备包括major 202下minor  0到31的设备(/dev/cpu/0/msr to /dev/cpu/31/msr)，就像上面x86_MSR支持的这些。
如果处理器支持，启用内核线性映射来使用1GB的内存页(Enable 1GB pages for kernel pagetables (DIRECT_GBPAGES))。启用这个可以帮助减轻TLB的压力。
页是内存本身的基本单位(位是数据的基本单位)。页的大小是由硬件自身决定的。页码表是虚拟和物理内存间的映射。物理内存是设备上的内存。虚拟内存 是到内存的地址。依赖于系统架构，硬件可以访问大于实际内存地址的地址。举例来说，一个64位系统拥有6GB内存，管理员在需要时可以加上更多的内存。这 是因为还有很多虚拟内存地址。然而，在很多32位系统上，系统管理员可以增加一条8GB的内存，但是系统无法完全使用它，因为系统中没有足够的虚拟内存地 址去访问大容量的内存。转换后援缓冲器(Translation Lookaside Buffer  (TLB))是一种提升虚拟内存转换速度的缓存系统。
下面，我们看到了NUMA选项(Numa Memory Allocation and Scheduler Support  (NUMA))。这可以允许内核在CPU本地内存分配器上分配CPU可使用的内存。这个支持同样可使内核更好感知到NUMA。很少的32位系统需要这个特 性，但是一些通用的645位处理器使用这个特性。我选择了&quot;no&quot;。
为了系统使用旧方式来检测AMD NUMA节点拓扑，启用这个特性(Old style AMD Opteron NUMA detection  (AMD_NUMA))。下一个选项是一种更新的检测方式(ACPI NUMA detection  (X86_64_ACPI_NUMA))。如果两个都启用，新的方式将会占支配作用。一些硬件在使用其中一种方式而不是另外一个时工作得更好。
如果为了调试目的的NUMA仿真，可以启用下一个特性(NUMA emulation (NUMA_EMU))。
注意：如果你不打算进行调试并且你需要一个快速、轻量级系统，那么禁用尽可能多的调试特性。
下一个选项中，选择你的内核打算如何处理NUMA节点的最大数量。接下来选择内存模型，这里可能只有一个内存模型选择。内存模型指定了内存如何存储。
Maximum NUMA Nodes (as a power of 2) (NODES_SHIFT) [6]
Memory model
&gt; 1. Sparse Memory (SPARSEMEM_MANUAL)
choice[1]: 1
为了提升性能，这里有一个选项用通过虚拟内存映射(Sparse Memory virtual memmap  (SPARSEMEM_VMEMMAP))来优化pfn_to_page和page_to_pfn操作。页帧号是每页被给定的号码。这两个操作用来从号码 得到页或者从页得到号码。
下一个选项是允许一个节点可以移除内存(Enable to assign a node which has only movable  memory  (MOVABLE_NODE))。内核页通常无法移除。当启用后，用户可以热插拔内存节点，同样可移除内存允许内存整理。作为出入内存的数据，只要有可用 空间一组数据可能被划分到不同内存。
接着前面的内存问题，我们还有更多的问题。这些可能已被配置工具预配置了。第三个选项(BALLOON_COMPACTION)，当启用时可以帮助 减少内存碎片。碎片内存会减慢系统速度。第四个选项(COMPACTION)允许内存压缩。下面列到的第五个选项(MIGRATION)允许页面被移动。
    • Allow for memory hot-add (MEMORY_HOTPLUG) (允许内存热添加)
    • Allow for memory hot remove (MEMORY_HOTREMOVE) （允许内存热移除）
    • Allow for balloon memory compaction/migration (BALLOON_COMPACTION) （允许泡状内存规整和合并）
    • Allow for memory compaction (允许内存规整)
    • Page migration (MIGRATION) (页合并)
注意：启用可移动内存会启用以上5个特性。
下一步，我们可以&quot;Enable KSM for page merging (KSM)&quot;。内核同页合并(Kernel Samepage  Merging  (KSM))会查看程序认为可以合并的内核。如果两页内存完全相同这可以节约内存。一块内存可以被删除或者被合并，并且只有一块可以使用。
配置工具可能会自动选择保存多少内存用于用户分配(Low address space to protect from user allocation (DEFAULT_MMAP_MIN_ADDR) [65536])。
下一个选项很重要(Enable recovery from hardware memory errors  (MEMORY_FAILURE))。如果内存故障并且系统有MCA恢复或者ECC内存，系统就可以继续运行并且恢复。要使用这个特性，硬件自身和内核都 必须支持。
机器检测架构(Machine Check Architecture  (MCA))是一个一些CPU上可以发送硬件错误信息给操作系统的特性。错误更正码内存(Error-correcting code memory  (ECC memory))是一种内存设备检测和纠正错误的形式。
下面，配置工具会自动启用&quot;HWPoison pages injector (HWPOISON_INJECT)&quot;。这个特性允许内核标记一块坏页为&quot;poisoned&quot;，接着内核会杀死创建坏页的程序。这有助于停止并纠正错误。
为了允许内核使用大页(Transparent Hugepage Support (TRANSPARENT_HUGEPAGE))，启用这个特性。这可以加速系统但是需要更多内存。嵌入式系统不必使用这个特性。嵌入式系统通常只有非常小的内存。
如果启用了上面的，那么必须配置大页的sysfs支持。
Transparent Hugepage Support sysfs defaults
1. always (TRANSPARENT_HUGEPAGE_ALWAYS)
&gt; 2. madvise (TRANSPARENT_HUGEPAGE_MADVISE)
choice[1-2?]: 2
下面的选项是增加process_vm_readv和process_vm_writev这两个系统调用(Cross Memory Support (CROSS_MEMORY_ATTACH))。这允许特权进程访问另外一个程序的地址空间。
如果有tmem，启用缓存清理(cleancache)通常是一个好主意 (Enable cleancache driver to cache  clean pages if Transcendent Memory (tmem) is present  (CLEANCACHE))。当一些内存页需要从内存中移除时，cleancache会将页面放在cleancache-enabled的文件系统上。当 需要该页时，页会被重新放回内存中。超内存(tmem)没有一组已知大小的内存，内核对此内存使用间接寻址。
下一个选项允许在tmen激活后缓存交换页(Enable frontswap to cache swap pages if tmem is present (FRONTSWAP))。frontswap在交换分区放置数据。交换特性的支持需要这个。
最好启用下一个特性(Check for low memory corruption  (X86_CHECK_BIOS_CORRUPTION))。这会检测低位内存的内存损坏情况。这个特性在执行期被禁止。为了启用这个特性,在内核命令行 内加入  &quot;memory_corruption_check=1&quot;(这会在以后的文章中讨论;这不同于任何命令行)。即使经常执行这个特性，也只使用非常小的开销 (接近没有)。
接下来我门可以设置内存损坏检测的默认设置(“Set the default setting of  memory_corruption_check  (X86_BOOTPARAM_MEMORY_CORRUPTION_CHECK))。这可以选择是否开启或关闭 memory_corruption_check。最好启用内存损坏检测不然如果一部分重要内存损坏后可能会导致数据丢失和系统崩溃。
这个选项关注的是BIOS(Amount of low memory, in kilobytes, to reserve for the BIOS (X86_RESERVE_LOW) [64])。配置工具通常知道给BIOS预留内存的最佳大小。
对于Intel P6处理器，开发者可以启用存储区域类型寄存器(MTRR (Memory Type Range Register) support (MTRR))。这用于连接着VGA卡的AGP和PCI卡。启用这个特性内核会创建/proc/mtrr。
如果X驱动需要加入回写入口，那么启用下面的选项(MTRR cleanup support  (MTRR_SANITIZER))。这会将MTRR的布局从连续转换到离散。存储区域类型寄存器(Memory type range  registers (MTRRs))提供了一种软件访问CPU缓存的方法。
下面，配置工具已经设置了一些MTRR选项
    •     MTRR cleanup enable value (0-1) (MTRR_SANITIZER_ENABLE_DEFAULT) [1]
    
    •     MTRR cleanup spare reg num (0-7) (MTRR_SANITIZER_SPARE_REG_NR_DEFAULT) [1]
    
为了设置页级缓冲控制，那就启用PAT属性(x86 PAT support (X86_PAT))。页属性表(Page Attribute  Table  (PATs))是现在版的MTRRs并比它更灵活。如果你经历过因启用它而引发的启动问题，那么禁用这个特性后重新编译内核。我选择了&quot;no&quot;。
</rich_text></node></node><node name="Linux 内核中的 Device Mapper 机制" prog_lang="custom-colors" readonly="False" tags="" unique_id="32"><rich_text>    本文结合具体代码对 Linux 内核中的 device mapper 映射机制进行了介绍。Device mapper 是 Linux  2.6 内核中提供的一种从逻辑设备到物理设备的映射框架机制，在该机制下，用户可以很方便的根据自己的需要制定实现存储资源的管理策略，当前比较流行的  Linux 下的逻辑卷管理器如 LVM2（Linux Volume Manager 2 version)、EVMS(Enterprise  Volume Management System)、dmraid(Device Mapper Raid  Tool)等都是基于该机制实现的。理解该机制是进一步分析、理解这些卷管理器的实现及设计的基础。通过本文也可以进一步理解 Linux 系统块一级  IO的设计和实现。

  Device Mapper 是 Linux2.6 内核中支持逻辑卷管理的通用设备映射机制，它为实现用于存储资源管理的块设备驱动提供了一个高度模块化的内核架构，如图 1。
</rich_text><rich_text weight="heavy">图1 Device Mapper的内核体系架构</rich_text><rich_text>
    </rich_text><rich_text justification="left"></rich_text><rich_text>
    在内核中它通过一个一个模块化的 target driver 插件实现对 IO 请求的过滤或者重新定向等工作，当前已经实现的 target  driver 插件包括软 raid、软加密、逻辑卷条带、多路径、镜像、快照等，图中  linear、mirror、snapshot、multipath 表示的就是这些 target driver。Device mapper  进一步体现了在 Linux  内核设计中策略和机制分离的原则，将所有与策略相关的工作放到用户空间完成，内核中主要提供完成这些策略所需要的机制。Device mapper  用户空间相关部分主要负责配置具体的策略和控制逻辑，比如逻辑设备和哪些物理设备建立映射，怎么建立这些映射关系等等，而具体过滤和重定向 IO  请求的工作由内核中相关代码完成。因此整个 device mapper 机制由两部分组成--内核空间的 device mapper  驱动、用户空间的device mapper 库以及它提供的 dmsetup 工具。在下文中，我们分内核和用户空间两部分进行介绍。

</rich_text><rich_text scale="h1" weight="heavy">内核部分</rich_text><rich_text>
    Device  mapper 的内核相关代码已经作为 Linux 2.6 内核发布版的一部分集成到内核源码中了，相关代码在内核源码的 driver/md/  目录中，其代码文件可以划分为实现 device mapper 内核中基本架构的文件和实现具体映射工作的 target driver  插件文件两部分。文章下面的分析结果主要是基于上述源码文件得到的。
重要概念
    Device  mapper 在内核中作为一个块设备驱动被注册的，它包含三个重要的对象概念，mapped device、映射表、target  device。Mapped device 是一个逻辑抽象，可以理解成为内核向外提供的逻辑设备，它通过映射表描述的映射关系和 target  device 建立映射。从 Mapped device 到一个 target device 的映射表由一个多元组表示，该多元组由表示  mapped device 逻辑的起始地址、范围、和表示在 target device 所在物理设备的地址偏移量以及target  类型等变量组成（这些地址和偏移量都是以磁盘的扇区为单位的，即 512 个字节大小）。Target device 表示的是 mapped  device 所映射的物理空间段，对 mapped device 所表示的逻辑设备来说，就是该逻辑设备映射到的一个物理设备。Device  mapper 中这三个对象和 target driver  插件一起构成了一个可迭代的设备树。在该树型结构中的顶层根节点是最终作为逻辑设备向外提供的 mapped device，叶子节点是 target  device 所表示的底层物理设备。最小的设备树由单个 mapped device 和 target device 组成。每个 target  device 都是被mapped device 独占的，只能被一个 mapped device 使用。一个 mapped device  可以映射到一个或者多个 target device 上，而一个 mapped device 又可以作为它上层 mapped device的  target device 被使用，该层次在理论上可以在 device mapper 架构下无限迭代下去。
</rich_text><rich_text weight="heavy">图2 Device mapper 内核中各对象的层次关系</rich_text><rich_text>
        </rich_text><rich_text justification="left"></rich_text><rich_text>
    在 图2 中我们可以看到 mapped device1 通过映射表和 a、b、c 三个 target device 建立了映射关系，而 target  device a 又是通过 mapped device 2 演化过来，mapped device 2 通过映射表和 target device  d 建立映射关系。
    我们进一步看一下上述三个对象在代码中的具体实现，dm.c 文件定义的 mapped_device 结构用于表示  mapped device，它主要包括该 mapped device  相关的锁，注册的请求队列和一些内存池以及指向它所对应映射表的指针等域。Mapped device 对应的映射表是由 dm_table.c  文件中定义的 dm_table 结构表示的，该结构中包含一个 dm_target结构数组，dm_target 结构具体描述了  mapped_device 到它某个 target device 的映射关系。而在 dm_table 结构中将这些 dm_target 按照 B  树的方式组织起来方便 IO 请求映射时的查找操作。Dm_target 结构具体记录该结构对应 target device 所映射的  mapped device 逻辑区域的开始地址和范围，同时还包含指向具体 target device 相关操作的 target_type  结构的指针。Target_type 结构主要包含了 target device 对应的 target driver  插件的名字、定义的构建和删除该类型target device的方法、该类target  device对应的IO请求重映射和结束IO的方法等。而表示具体的target  device的域是dm_target中的private域，该指针指向mapped device所映射的具体target  device对应的结构。表示target device的具体结构由于不同的target  类型而不同，比如最简单的线性映射target类型对应target  device的结构是dm-linear.c文件中定义的linear_c结构。其定义如下：
    struct linear_c {
	    struct dm_dev *dev;
	    sector_t start;
    };
    </rich_text><rich_text foreground="#00000000ffff">该target device的定义相当简单，就只包括了表示对应物理设备的dm_dev结构指针和在该物理设备中以扇区为单位的偏移地址start。上述几个数据结构关系如图3所示：</rich_text><rich_text>
</rich_text><rich_text weight="heavy">图3  device mapper中几个重要数据结构的关系内核中建立过程</rich_text><rich_text>
    </rich_text><rich_text justification="left"></rich_text><rich_text>
</rich_text><rich_text scale="h3">    </rich_text><rich_text scale="h3" weight="heavy">内核中建立过程</rich_text><rich_text scale="h3">    </rich_text><rich_text>
    在下面我们结合具体的代码简要介绍下在内核中创建一个mapped device的过程：
    1、  根据内核向用户空间提供的ioctl 接口传来的参数，用dm-ioctl.c文件中的dev_create函数创建相应的mapped  device结构。这个过程很简单，主要是向内核申请必要的内存资源，包括mapped  device和为进行IO操作预申请的内存池，通过内核提供的blk_queue_make_request函数注册该mapped  device对应的请求队列dm_request。并将该mapped device作为磁盘块设备注册到内核中。
    2、 调用dm_hash_insert将创建好的mapped device插入到device mapper中的一个全局hash表中，该表中保存了内核中当前创建的所有mapped device。
    3、  用户空间命令通过ioctl调用table_load函数，该函数根据用户空间传来的参数构建指定mapped  device的映射表和所映射的target  device。该函数先构建相应的dm_table、dm_target结构，再调用dm-table.c中的dm_table_add_target函 数根据用户传入的参数初始化这些结构，并且根据参数所指定的target类型，调用相应的target类型的构建函数ctr在内存中构建target  device对应的结构，然后再根据所建立的dm_target结构更新dm_table中维护的B树。上述过程完毕后，再将建立好的dm_table添 加到mapped device的全局hash表对应的hash_cell结构中。
    4、  最后通过ioctl调用do_resume函数建立mapped  device和映射表之间的绑定关系，事实上该过程就是通过dm_swap_table函数将当前dm_table结构指针值赋予 mapped_device相应的map域中，然后再修改mapped_device表示当前状态的域。
通过上述的4个主要步骤，device mapper在内核中就建立一个可以提供给用户使用的mapped device逻辑块设备。

    </rich_text><rich_text scale="h3" weight="heavy">IO流</rich_text><rich_text>
    Device  mapper本质功能就是根据映射关系和target driver描述的IO处理规则，将IO请求从逻辑设备mapped  device转发相应的target device上。Device  mapper处理所有从内核中块一级IO子系统的generic_make_request和submit_bio接口[两个接口具体的描述可以查看</rich_text><rich_text link="webs http://www.ibm.com/developerworks/cn/linux/l-devmapper/#resources">参考文献</rich_text><rich_text>[1] 和[2]，这两本书对内核中的块IO层有比较详尽的讲解。] 中定向到mapped device的所有块读写IO请求。IO请求在device  mapper的设备树中通过请求转发从上到下地进行处理。当一个bio请求在设备树中的mapped  deivce向下层转发时，一个或者多个bio的克隆被创建并发送给下层target  device。然后相同的过程在设备树的每一个层次上重复，只要设备树足够大理论上这种转发过程可以无限进行下去。在设备树上某个层次中，target  driver结束某个bio请求后，将表示结束该bio请求的事件上报给它上层的mapped  device，该过程在各个层次上进行直到该事件最终上传到根mapped device的为止，然后device mapper结束根mapped  device上原始bio请求，结束整个IO请求过程。
Bio在device  mapper的设备树进行逐层的转发时，最终转发到一个或多个叶子target节点终止。因为一个bio请求不可以跨多个target  device(亦即物理空间段)， 因此在每一个层次上，device mapper根据用户预先告知的mapped device  的target映射信息克隆一个或者多个bio，将bio进行拆分后转发到对应的target device上。这些克隆的bio先交给mapped  device上对应的target driver上进行处理，根据target  driver中定义的IO处理规则进行IO请求的过滤等处理，然后再提交给target  device完成。上述过程在dm.c文件中的dm_request函数中完成。Target driver可以对这些bio做如下处理：
    １、 将这些bio在本驱动内部排队等待以后进行处理；
    ２、 将bio重新定向到一个或多个target device上或者每个target device上的不同扇区；
    ３、 向device mapper返回error 状态。
IO请求就按照上文中描述的过程在图2中所示的设备树中逐层进行处理，直到IO请求结束。

</rich_text><rich_text scale="h3">    </rich_text><rich_text scale="h3" weight="heavy">小结</rich_text><rich_text>
    Device   mapper在内核中向外提供了一个从逻辑设备到物理设备的映射架构，只要用户在用户空间制定好映射策略，按照自己的需要编写处理具体IO请求的 target driver插件，就可以很方便的实现一个类似LVM的逻辑卷管理器。Device  mapper以ioctl的方式向外提供接口，用户通过用户空间的device mapper库，向device  mapper的字符设备发送ioctl命令，完成向内的通信。它还通过ioctl提供向往的事件通知机制，允许target  driver将IO相关的某些事件传送到用户空间。

</rich_text><rich_text scale="h1" weight="heavy">用户空间部分</rich_text><rich_text>
Device  mapper在用户空间相对简单，主要包括device mapper库和dmsetup工具。Device  mapper库就是对ioctl、用户空间创建删除device  mapper逻辑设备所需必要操作的封装，dmsetup是一个提供给用户直接可用的创建删除device  mapper设备的命令行工具。因为它们的功能和流程相对简单，在本文中对它们的细节就不介绍了，用户空间主要负责如下工作：
    1、 发现每个mapped device相关的target device；
    2、 根据配置信息创建映射表；
    3、 将用户空间构建好的映射表传入内核，让内核构建该mapped device对应的dm_table结构；
    4、 保存当前的映射信息，以便未来重新构建。
    
    以下我们主要通过实例来说明dmsetup的使用，同时进一步说明device mapper这种映射机制。用户空间中最主要的工作就是构建并保存映射表，下面给出一些映射表的例子：
</rich_text><rich_text foreground="#00000000ffff">    1)
        0  1024  linear   /dev/sda 204
        1024  512  linear  /dev/sdb  766
        1536  128  linear  /dev/sdc  0  
    2) 0 2048 striped 2 64 /dev/sda 1024 /dev/sdb 0
    3) 0 4711  mirror core  2 64 nosync 2 /dev/sda 2048 /dev/sdb 1024</rich_text><rich_text>
    
    例子1中将逻辑设备0~1023扇区、1024~1535扇区以及1536~1663三个地址范围分别以线形映射的方式映射到/dev/sda设备第204号扇区、/dev/sdb设备第766号扇区和/dev/sdc设备的第0号扇区开始的区域。
    例子2中将逻辑设备从0号扇区开始的，长度为2048个扇区的段以条带的方式映射的到/dev/sda设备的第1024号扇区以及/dev/sdb设备的第 0号扇区开始的区域。同时告诉内核这个条带类型的target  driver存在2个条带设备与逻辑设备做映射，并且条带的大小是64个扇区，使得驱动可以该值来拆分跨设备的IO请求。
    例子3中将逻辑设备从0号扇区开始的，长度为4711个扇区的段以镜像的方式映射到/dev/sda设备的第2048个扇区以及/dev/sdb设备的第1024号扇区开始的区域。
映射表确定后，创建、删除逻辑设备的操作就相对简单，通过dmsetup如下命令就可以完成相应的操作。

    dmsetup create  设备名  映射表文件 /* 根据指定的映射表创建一个逻辑设备 */

    dmsetup reload  设备名 映射表文件  /* 为指定设备从磁盘中读取映射文件，重新构建映射关系 */
    
    dmsetup remove 设备名  /* 删除指定的逻辑设备 */
    
   </rich_text><rich_text weight="heavy"> 图4 根据例子1中映射表在内核中建立的逻辑设备</rich_text><rich_text>
    </rich_text><rich_text justification="left"></rich_text><rich_text>
    当用户空间根据映射表下达创建逻辑设备命令后，device  mapper在内核中就根据传入的参数和映射关系建立逻辑地址到物理地址的映射关系。根据映射表例子1中的映射关系建立的设备如图4所示，图中的下半部分就抽象地描绘出了按照该映射表在内核中建立的逻辑地址到物理地址的映射关系。
    Device  mapper的用户空间部分对开发者要实现自己的存储管理工具来说是可选的，事实上，很多我们常见的逻辑卷管理器，比如LVM2、dmraid等工具都利用device mapper的提供的device  mapper用户空间库，根据自己的管理需求建立独立的一套管理工具，而并没有使用它提供的dmsetup工具，甚至IBM的开源项目企业级的逻辑卷管理系统-EVMS，在实现中都没有采用device mapper的用户空间库，完全根据内核中的ioctl定义实现了一套自己的函数库。

</rich_text><rich_text scale="h1" weight="heavy">Target Driver</rich_text><rich_text>
    Device  mapper提供了一个统一的架构，通过target driver 插件的方式允许用户根据实际的需要指定自己的IO处理规则，因此target  driver充分体现了device mapper的灵活性。在上文中我们已经不止一次的提到过target driver，也描述过target  driver的功能，在这里我们结合最简单的linear target driver具体介绍target driver的实现。
    Target driver主要定义对IO请求的处理规则，在device mapper中对target driver的操作已定义好了统一的接口，在实现中该接口由我们上文提到的target_type结构中定义，它定义了以下target driver的方法：
    １、 构建target device 的方法；
    ２、 删除target device 的方法；
    ３、 Target的映射IO请求的方法；
    ４、 Target结束IO请求的方法；
    ５、 暂停target device读写的方法；
    ６、 恢复target device读写的访问；
    ７、 获取当前target device状态的访问；
    ８、 Target 处理用户消息的方法；
    
    用户可以根据具体需求选择性地实现上述方法，但一般最少要实现前3种方法，否则在device  mapper下不能够正常的工作。linear target  driver就只实现了前3种方法和方法7，它完成逻辑地址空间到物理地址空间的线性映射，可以将多个物理设备以线性连接的方式组成一个逻辑设备，就如图 4中描述的那样，通过linear target  driver将/dev/sda、/dev/sdb、/dev/sdc的三段连续空间组成了一个大的逻辑块设备。Linear  target的实现很简单，它的创建和删除方法主要完成申请和释放描述linear target  device所用结构的内存资源；IO映射处理方法的实现更是简单，如下代码所示：
    static int linear_map(struct dm_target *ti, struct bio *bio,
		          union map_info *map_context)
    {
	    struct linear_c *lc = (struct linear_c *) ti-&gt;private;

	    bio-&gt;bi_bdev = lc-&gt;dev-&gt;bdev;
	    bio-&gt;bi_sector = lc-&gt;start + (bio-&gt;bi_sector - ti-&gt;begin);

	    return 1;
    }
    该映射方法就是将发送给逻辑设备mapped  device的bio请求，根据映射关系以线性的方式重新定向到linear target  device所表示物理设备的相应位置，如代码所示具体实现方法就是修改bio的bi_bdev设备指针为target  device对应的设备指针，并根据target device的起始地址和该bio请求在mapped  device设备上的偏移值改变IO请求开始的扇区号bi_sector，从而完成IO请求的重定向。其他target  driver的实现也都大同小异，按照device  mapper所定义的接口规范，结合自己需要的功能进行实现即可，这里就不一一介绍了，有兴趣的读者可以看内核中具体的target driver代码。

</rich_text><rich_text scale="h1" weight="heavy">总结</rich_text><rich_text>
    Device   Mapper是Linux操作系统中块设备一级提供的一种主要映射机制，现在已被多数Linux下的逻辑卷管理器所采用。在该机制下，实现用户自定义的存 储资源管理策略变得极其方便。理解device mapper所提供的映射机制，也是进一步理解Linux下一些常见逻辑卷管理器实现的基础。
</rich_text><encoded_png char_offset="468"></encoded_png><encoded_png char_offset="1963"></encoded_png><encoded_png char_offset="3106"></encoded_png><encoded_png char_offset="6785">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/7kfYf369dK2t18/AMB9ccC4SffijYO/63UX0PjoaBw9/LY09uTg78oRd3cUtr/0M3R23kBn5w1pfAsRkS+wJ4UoSLz9+gFER0fjxc3/Lm1bu/4/pF6PLQXbsWXTWuzfvx9bCrZL+yxY+Iy0KCHgGJvS3HQRERERWL9+PZ6c84hjdeXfvgEA+PDjBjz68HfwxNwf9OqZISLyJi4wSKQAciwwqBRcYJCI+sPLPURERKRIDClERESkSAwpREREpEgMKURERKRIDClERESkSAwpREREpEgMKURERKRInMyNSCFu3rwZkgv22e12uUsgIoViSCFSgPj4eERGRmLnL1+Wpf2/XtXijnGiLG1PmzYNUVFRg+9IRCGHM84ShThRBGbOBC5eBJgViEhJOCaFKMQVFAB2O/CyPJ04RET9Yk8KUQgTRSA11fGxSsXeFCJSFvakEIWwgoJvPmZvChEpDXtSiEKUay+KE3tTiEhJ2JNCFKLefRf4/vcd/1Qqx//TpgF/+IPMhRER/R17UohCXFMTMGuWoweFiEhJ2JNCREREisSQQkRERIrEkEJERESKxJBCREREisSQQkRERIrEkEJERESKxJBCREREisSQQkRERIrEkEJERESKxJBCREREisSQQkRERIrEkEJERESKxJBCREREisSQQkRERIrEkEJERESKxJBCREREisSQQkRERIrEkEJERESK9C25CyAiebz0ElBd7fi4tRWYNcvx8TPPAHq9fHURETmN6u7u7pa7CCLyP1EEUlPdt6lUwMWLQFSUPDUREbni5R6iEKXVAk8+6b7tRz9iQCEi5WBPClEIc+1NYS8KESkNe1KIQphrbwp7UYhIadiTQhTiRBGYOZO9KESkPAwp5DeiKGLdunVyl0F9+OtVLe4YJ8pdBvVw190TsH/fa3KXQSQbhhTym02bNuFi0wU8k/m03KUQBYT5c58Gf0VTKOM8KeRXd999F2bOnC53GUREFAA4cJaIiIgUiSGFyM+utP4Vn332udxlyOrkydNyl0BEAYCXe4h8oLOzE+vyXwAAbN68HuOj7pAeO3euDuc/acTadT/2ersnT57G0aOnoIkMR0VFBZ6Y+wNoIsNxsekCSncVe62dzs5OhIeH9/vYuvwX0NHeieTkZLR1dKL54gVkLc7AE3Mex5XWv+J3Fa/zsh8RDYohhcgHwsPDMTEu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zJ/be9xAR0eH9HFsbCysVismT7mv13GClfMygyAIuO2220Z8/oD3QmpQqOtlmr6+b/7lX/4F5eXlSE1N7XPcyo2v26WPIyIiACCkzh/RSLEnhRStsLAQycnJ0i915yq0J06ckPaZMGECqqqq+h2s6Ny38vU3cfvtt+O9mj9L3fGuxwk2XV1dKCoqQk5OjrRtpOfvzugiq/lcAAAgAElEQVRxMBgM6OrqQldXV1AvOOh6/vr7vtFqtbh06RLarv9Pr+c7n+Mce/L2H6tC6vwReQN7UkgxRFFEZGQkTCYTbh0Tia+vd7j9hbp69WqUlJTAbDZj9erV0vPS09Nx7do16fP3z9TCdrkZXV1d0nMqKyuxevVqjBs3Djk5OSgpKUFkZKTbarWBrrq6Grfddpt0SQJw3GniDHjeOH+CIOC/P72AJUuW4LsPfy+oeqQGO3/9fd88OP27SPv+TACOYGOt/wiAo5cqJycHK1aswMSJE6XnBOv5I/IFLjBIfuGPBQZ9JVQWGPSVUFlg0Fe4wCCFMl7uISIiIkViSCEiIiJFYkghIiIiRWJIISIiIkXi3T3kFxqNBrm5uXKXMWxz586Vtf3bbrsNTzzxhKw1jMSKlf8ma/tqtRqpqamy1jAS27Ztk7sEIlnw7h4iIiJSJF7uISIiIkViSCEiIiJFYkghIiIiRWJIISIiIkViSCEiIiJFYkghIiIiRWJIISIiIkViSCEiIiJFYkghIiIiRWJIISIiIkViSCEiIiJFYkghIiIiRWJIISIiIkX61oiebbcDEycCra1eKoeIiIiCSm0toNUO66mjuru7u71cDhEREdGI8XIPERERKRJDChERESkSQwoREREpEkMKERERKRJDChERESkSQwoREREpEkMKERERKRJDChERESkSQwoREREpEkMKERERKRJDChERESkSQwoREREpEkMKERERKRJDChERESkSQwoREREpEkMKERERKRJDChERESkSQwoREREpEkMKkQxEUfT4ORaLZdjt2Ww2WK1Wrx6TiMjXGFKIPGC325Gbm4vc3FzYbLZhH6eystKjoGI2m7F58+Z+H7darcjNze338eLiYpjNZrdtoihi5cqVQ66BiMjfviV3AUSBRKVSITY2FgAQHR097ONs27bNo/11Oh3Ky8v7fXzPnj2oqanp93GNRtNrm1ar9agGIiJ/Y0gh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</encoded_png></node><node name="linux wifi工具" prog_lang="custom-colors" readonly="False" tags="" unique_id="2"><rich_text>Wireless tools for Linux介绍 
Wireless tools for  Linux是一个Linux命令行工具包，用来设置支持Linux Wireless Extension的无线设备。Wireless tools  for Linux 和 Linux Wireless Extension 由 Jean  Tourrilhes在维护，由Hewlett-Packard（HP惠普）赞助。
大多数基于Linux内核的操作系统都包含Wireless tools。在许多GNU/Linux 发行版中，都缺省安装这个工具包，即使是没有自动安装，也能很容易地找到其二进制代码安装包。
Wireless Extension  (WE)是一组通用的API，能在用户空间对通用Wireless  LANs进行配置和统计。它的好处在于仅通过一组单一的工具就能对各种各样的Wireless  LANs进行管理，不过它们是什么类型，只要其驱动支持Wireless  Extension就行；另一个好处就是不用重启驱动或Linux就能改变这些参数。
       Wireless Tools  (WT)就是用来操作Wireless Extensions的工具集，它们使用字符界面，虽然粗糙，但支持所有Wireless  Extension。虽然还有很多其他管理Wireless Extensions的工具，但Wireless Tools是参考实现，它包括以下工具：
        iwconfig：设置基本无线参数
        iwlist：扫描、列出频率，比特率，密钥等 
        iwspy：获取每个节点链接的质量
        iwpriv：操作Wireless Extensions 特定驱动
        ifrename： 基于各种静态标准命名接口
大多数 Linux 发行版本都在其网络初始化脚本中集成Wireless Extension，以便启动时配置无线接口。他们还将Wireless Tools作为其标准封装包。
无线配置也可以使用hotplug或uDev脚本来完成，需要发行版特定的支持，这样能支持任何可移动的无线接口（Pcmcia，CardBus，USB接口...）。
Wireless Tools（从版本19）开始完全支持IEEE 802.11标准参数和设备，支持旧风格的设备和最专有协议，并准备处理HiperLan。较新版本增加了更多802.11支持。但不幸的是，并非所有的驱动程序支持所有这些功能。
最新的稳定版本的Wireless Tools是版本29，大多数愚蠢的错误已被删除，并支持所有的Wireless Extension（从版本v11至v21）。可以从</rich_text><rich_text link="webs http://www.hpl.hp.com/personal/Jean_Tourrilhes/Linux/wireless_tools.29.tar.gz">http://www.hpl.hp.com/personal/Jean_Tourrilhes/Linux/wireless_tools.29.tar.gz</rich_text><rich_text>下载最新的Wireless Tools。
     我们经常会用到的主要是iwlist、iwconfig、 iwpriv： 命令行：(ap不需要验证密码)
iwlist mlan0 scan //搜索ap
iwconfig mlan0 essid “linksys” //连接ap
udhcpc –i mlan0  //获得动态IP
 
命令行：(ap需要验证密码)
iwlist mlan0 scan //搜索ap
iwconfig mlan0 key  xxxxxxxxxx  // 输入验证密码
iwconfig mlan0 key open //密码验证功能打开
iwconfig mlan0 essid “linksys” //连接ap
udhcpc –i mlan0 //获得动态IP
  
   关于iwconfig 可以看上一篇文章；这里补充一下有关iwpriv：       [root@root- /]#iwpriv    mlan0     Available private ioctls :
          extscan          (8BFA) : set   0 int   &amp; get   2 char
          hostcmd          (8BE4) : set 2047 byte  &amp; get 2047 byte
          arpfilter        (8BE6) : set 2047 byte  &amp; get 2047 byte
          regrdwr          (8BE3) : set 256 char  &amp; get 256 char
          sdcmd52rw        (8BFE) : set   7 byte  &amp; get   7 byte
          sdcmd53rw        (8BFF) : set   0 char  &amp; get   0 char
          setgetconf       (8BEA) : set 2000 byte  &amp; get 2000 byte
          getcis           (8BE1) : set   0       &amp; get 512 byte
          scantype         (8BEB) : set   8 char  &amp; get   8 char
          deauth           (0001) : set   1 addr  &amp; get   0
          getNF            (0001) : set   1 int   &amp; get   1 int
          getRSSI          (0002) : set   1 int   &amp; get   1 int
          bgscan           (0004) : set   1 int   &amp; get   1 int
          enable11d        (0005) : set   1 int   &amp; get   1 int
          adhocgrate       (0006) : set   1 int   &amp; get   1 int
          sdioclock        (0007) : set   1 int   &amp; get   1 int
          wmm              (0008) : set   1 int   &amp; get   1 int
          uapsdnullgen     (000A) : set   1 int   &amp; get   1 int
          setcoalescing    (000B) : set   1 int   &amp; get   1 int
          adhocgprot       (000C) : set   1 int   &amp; get   1 int
          disable_chsw     (000F) : set   1 int   &amp; get   1 int
          setpowercons     (0001) : set   1 int   &amp; get   1 int
          wmm_qosinfo      (0002) : set   1 int   &amp; get   1 int
          lolisteninter    (0003) : set   1 int   &amp; get   1 int
          psnullinterval   (0005) : set   1 int   &amp; get   1 int
          bcnmisto         (0006) : set   1 int   &amp; get   1 int
          ldocfg           (0008) : set   1 int   &amp; get   1 int
          rtsctsctrl       (000F) : set   1 int   &amp; get   1 int
          moduletype       (000B) : set   1 int   &amp; get   1 int
          autodeepsleep    (000C) : set   1 int   &amp; get   1 int
          enhanceps        (000D) : set   1 int   &amp; get   1 int
          wakeupmt         (000E) : set   1 int   &amp; get   1 int
          setrxant         (0001) : set   1 int   &amp; get   0
          settxant         (0002) : set   1 int   &amp; get   0
          authalgs         (0004) : set   1 int   &amp; get   0
          encryptionmode   (0005) : set   1 int   &amp; get   0
          setregioncode    (0006) : set   1 int   &amp; get   0
          setlisteninter   (0007) : set   1 int   &amp; get   0
          setmultipledtim  (0008) : set   1 int   &amp; get   0
          setbcnavg        (0009) : set   1 int   &amp; get   0
          setdataavg       (000A) : set   1 int   &amp; get   0
          associate        (000B) : set   1 int   &amp; get   0
          getregioncode    (0001) : set   0       &amp; get   1 int
          getlisteninter   (0002) : set   0       &amp; get   1 int
          getmultipledtim  (0003) : set   0       &amp; get   1 int
          gettxrate        (0004) : set   0       &amp; get   1 int
          getbcnavg        (0005) : set   0       &amp; get   1 int
          getdataavg       (0006) : set   0       &amp; get   1 int
          getauthtype      (0007) : set   0       &amp; get   1 int
          getrsnmode       (0008) : set   0       &amp; get   1 int
          act_paircipher   (0009) : set   0       &amp; get   1 int
          act_groupcipher  (000A) : set   0       &amp; get   1 int
          getdtim          (000B) : set   0       &amp; get   1 int
          getrxant         (0001) : set   0       &amp; get  12 char
          gettxant         (0002) : set   0       &amp; get  12 char
          gettsf           (0003) : set   0       &amp; get  12 char
          wpssession       (0004) : set   0       &amp; get  12 char
          deepsleep        (8BFB) : set   1 char  &amp; get   6 char
          adhocstop        (0004) : set   0       &amp; get   0
          radioon          (0001) : set   0       &amp; get   0
          radiooff         (0002) : set   0       &amp; get   0
          rmaeskey         (0003) : set   0       &amp; get   0
          crypto_test      (0006) : set   0       &amp; get   0
          reasso-on        (0007) : set   0       &amp; get   0
          reasso-off       (0008) : set   0       &amp; get   0
          wlanidle-on      (0009) : set   0       &amp; get   0
          wlanidle-off     (000A) : set   0       &amp; get   0
          softreset        (000C) : set   0       &amp; get   0
          sleepparams      (0002) : set  64 char  &amp; get  64 char
          requesttpc       (0004) : set  64 char  &amp; get  64 char
          powercap         (0005) : set  64 char  &amp; get  64 char
          measreq          (000C) : set  64 char  &amp; get  64 char
          bca-ts           (0003) : set  64 char  &amp; get  64 char
          scanmode         (0006) : set  64 char  &amp; get  64 char
          getadhocstatus   (0009) : set  64 char  &amp; get  64 char
          setgenie         (000A) : set  64 char  &amp; get  64 char
          getgenie         (000B) : set  64 char  &amp; get  64 char
          qstatus          (000D) : set  64 char  &amp; get  64 char
          ts_status        (000E) : set  64 char  &amp; get  64 char
          setaeskey        (0001) : set  32 char  &amp; get   0
          getaeskey        (0001) : set   1 int   &amp; get 128 char
          version          (0002) : set   1 int   &amp; get 128 char
          verext           (0003) : set   1 int   &amp; get 128 char
          setwpaie         (8BE0) : set  24 char  &amp; get   0
          setband          (0001) : set  10 char  &amp; get   0
          setadhocch       (0002) : set  10 char  &amp; get   0
          chanswann        (0003) : set  10 char  &amp; get   0
          getband          (0001) : set   0       &amp; get  10 char
          getadhocch       (0002) : set   0       &amp; get  10 char
          getlog           (8BE9) : set   0       &amp; get 512 char
          tpccfg           (0001) : set  16 int   &amp; get  16 int
          scanprobes       (0006) : set  16 int   &amp; get  16 int
          ledgpio          (0005) : set  16 int   &amp; get  16 int
          sleeppd          (0007) : set  16 int   &amp; get  16 int
          rateadapt        (0008) : set  16 int   &amp; get  16 int
          getSNR           (0009) : set  16 int   &amp; get  16 int
          getrate          (000A) : set  16 int   &amp; get  16 int
          getrxinfo        (000B) : set  16 int   &amp; get  16 int
          atimwindow       (000C) : set  16 int   &amp; get  16 int
          bcninterval      (000D) : set  16 int   &amp; get  16 int
          sdiopullctrl     (000E) : set  16 int   &amp; get  16 int
          scantime         (000F) : set  16 int   &amp; get  16 int
          sysclock         (0010) : set  16 int   &amp; get  16 int
          txcontrol        (0012) : set  16 int   &amp; get  16 int
          hscfg            (0014) : set  16 int   &amp; get  16 int
          hssetpara        (0015) : set  16 int   &amp; get  16 int
          inactoext        (0016) : set  16 int   &amp; get  16 int
          dbgscfg          (0017) : set  16 int   &amp; get  16 int
          drvdbg           (0018) : set  16 int   &amp; get  16 int
          drvdelaymax      (001A) : set  16 int   &amp; get  16 int
          intfctrl         (001B) : set  16 int   &amp; get  16 int
          setquietie       (001C) : set  16 int   &amp; get  16 int
          ctspowerctrl     (001E) : set  16 int   &amp; get  16 int
          psmode           (001F) : set  16 int   &amp; get  16 int
          setuserscan      (0001) : set 2000 byte  &amp; get 2000 byte
          getscantable     (0002) : set 2000 byte  &amp; get 2000 byte
          setmrvltlv       (0003) : set 2000 byte  &amp; get 2000 byte
          getassocrsp      (0004) : set 2000 byte  &amp; get 2000 byte
          addts            (0005) : set 2000 byte  &amp; get 2000 byte
          delts            (0006) : set 2000 byte  &amp; get 2000 byte
          qconfig          (0007) : set 2000 byte  &amp; get 2000 byte
          qstats           (0008) : set 2000 byte  &amp; get 2000 byte
          txpktstats       (000C) : set 2000 byte  &amp; get 2000 byte
          getcfptable      (0009) : set 2000 byte  &amp; get 2000 byte
          mefcfg           (000A) : set 2000 byte  &amp; get 2000 byte
          getmem           (000B) : set 2000 byte  &amp; get 2000 byte
    通过iwpriv，我们可以得到AP的一些参数设置，也可以设置自己的WIFI参数。       [root@root- /]#iwpriv mlan0 getband
       mlan0     getband:bg -----------------------------------------------------------------1.WIFI介绍
Wi-Fi（WirelessFidelity），即无线保真，与蓝牙技术一样，同属于在办公室和家庭中使用的短距离无线 技术。该技术使用的使2.4GHz附近的频段，该频段目前尚属没用许可的无线频段。其目前可使用的标准有两个，分别是IEEE802.11a和 IEEE802.11b。Wi-Fi技术突出的优势在于：  其一，无线电波的覆盖范围广，基于蓝牙技术的电波覆盖范围非常小，半径大约只有50英尺左右约合15米，而Wi-Fi的半径则可达300英尺左右约合 100米。  其二，传输速度非常快，可以达到11mbps，符合个人和社会信息化的需求。根据无线网卡使用的标准不同，WIFI的速度也有所不同。其中 IEEE802.11b最高为11Mbps（部分厂商在设备配套的情况下可以达到22Mbps），IEEE802.11a为54Mbps、 IEEE802.11g也是54Mbps。WIFI无线网络由AP(Access  Point)和无线网卡组成。AP一般称为网络桥接器或接入点，AP每100ms将SSID（Service Set  Identifier）经由beacons（信号台）封包广播一次，beacons封包的传输速率是1  Mbit/s，并且长度相当的短，所以这个广播动作对网络效能的影响不大。因为Wi-Fi规定的最低传输速率是1 Mbit/s  ，所以确保所有的Wi-Fi client端都能收到这个SSID广播封包，client  可以借此决定是否要和这一个SSID的AP连线。使用者可以设定要连线到哪一个SSID。Wi-Fi系统总是对用户端开放其连接标准，并支援漫游，这就是 Wi-Fi的好处。但亦意味着，一个无线适配器有可能在性能上优于其他的适配器。由于Wi-Fi通过空气传送信号，所以和非交换以太网有相同的特点。  Wifi加密方式主要有以下三种：WEP（有线等效加密）——采用WEP 64位或者128位数据加密 WPA-PSK  [TKIP]——采用预共享密钥的Wi-Fi保护访问，采用WPA-PSK标准加密技术，加密类型为TKIP WPA2-PSK  [AES]——采用预共享密钥的Wi-Fi保护访问（版本2），采用WPA2-PSK标准加密技术，加密类型为AES 
2.WIFI相关工具安装
在加载wifi驱动之前，我们需要安装应用层的工具，即wireless tools与wpa_supplicant。
2.1 wireless-tools安装
wireless-tools是一组无线网络扫描器及监控工具，可以用于监控、分析、以及测试WiFi网络，支持几乎所有的无线网卡和驱动，它可以支持WEP的AP，但它不能连接到那些只支持WPA的AP。连接AP需要使用它所编译出来的工具。
1、资源下载
下载wireless_tools.29.tar.gz
2、解压
# tar zxvf wireless_tools.29.tar.gz
#cd wireless_tools.29
3、修改Makefile
## Compiler to use (modify this for cross compile).
CC = mipsel-linux-gcc
4、编译
#make
5、拷贝
将生成的工具:iwlist、iwconfig、iwpriv等拷贝到目标板上，路径为:/root/app/bin/wifitools/
2.3 wpa-supplicant安装
由于wireless tools只能支持连接WEP的AP，所以要支持WPA的AP就需要移植wpa_supplicant。
Rt73的原始驱动中采用的wpa_supplicant的版本比较旧，是0.5.8，我们采用版本。
1、下载资源
本文使用的是：
</rich_text><rich_text link="webs http://hostap.epitest.fi/releases/wpa_supplicant-0.5.11.tar.gz">http://hostap.epitest.fi/releases/wpa_supplicant-0.5.11.tar.gz</rich_text><rich_text>
最新 wpa-supplicant 
</rich_text><rich_text link="webs http://hostap.epitest.fi/releases/wpa_supplicant-0.6.9.tar.gz">http://hostap.epitest.fi/releases/wpa_supplicant-0.6.9.tar.gz</rich_text><rich_text>
2、文件修改
对照2009_0206_RT73_Linux_STA_Drv.bz2中WPA_Supplicant-0.5.8的文件，修改0.5.11中的对应文件，
3、解压
# tar zxvf wpa_supplicant-0.5.11.tar.gz
# cd wpa_supplicant-0.5.11
4、编译
#cp defconfig .config #使用默认的config
#export CC=mipsel-linux-gcc
#make
5、安装
将生成的wpa_supplicant 拷贝到目标板上, 路径为:/root/app/bin/wifitools/下
6、编写wpa网络的配置文件wpa_supplicant.conf
在目标板上目录为/root/appb/conf/wifi/下，创建一个wpa_supplicant.conf，键入以下内容：
ctrl_interface=/var/run/wpa_supplicant
ctrl_interface_group=0
ap_scan=1
network={
ssid=&quot;a&quot; #essid
psk=&quot;111&quot; #密码
}
3. WIFI驱动安装
1、驱动下载
</rich_text><rich_text link="webs http://www.ralinktech.com.tw/data/drivers/2009_0206_RT73_Linux_STA_Drv1.1.0.2.tar.bz2">http://www.ralinktech.com.tw/data/drivers/2009_0206_RT73_Linux_STA_Drv1.1.0.2.tar.bz2</rich_text><rich_text>
2、解压
# tar jxvf 2009_0206_RT73_Linux_STA_Drv1.1.0.2.tar.bz2
# cd 2009_2006_RT73_Linux_STA_Drv_1.1.0.2/Module
3、修改Makefile
5 #PLATFORM=PC
6 PLATFORM=CMPC
40 ifeq ($(PLATFORM),CMPC)
41 LINUX_SRC = /opt/smp86xx_kernel_source_2.8.4.1/linux-2.6.15
42 endif
4、编译
# cp Makefile.6 ./Makefile
# make
5、安装
在目标板上，先将生成的rt73.ko以及文件rt73sta.dat 与 rt73.bin 拷贝到目标板上。
# cp rt73.ko /root/app/lib/ modules/2.6.15/
# mkdir –p /etc/Wireless/RT73STA
# cp rt73.bin /etc/Wireless/RT73STA
# cp rt73sta.dat /etc/Wireless/RT73STA
# insmod rt73.ko
# lsmod
另：ifrename 的使用
touch /etc/iftab 
ifrename -i ra0 -n wlan0 
ifrename -i rausb0 -n wlan0 
/etc/iftab  wlan1 mac 
</rich_text><rich_text link="webs http://linux.die.net/man/8/ifrename">http://linux.die.net/man/8/ifrename</rich_text><rich_text>
 ---------------------------------------------------------------------------
移植wireless tools for liunx
要正常使用无线网卡，还要正确配置。linux下的配置工具是wireless-tools，可以在这里下载到它的最新版。</rich_text><rich_text link="webs http://www.hpl.hp.com/personal/Jean_Tourrilhes/Linux/Tools.html">http://www.hpl.hp.com/personal/Jean_Tourrilhes/Linux/Tools.html</rich_text><rich_text>下载后，将源代码解压。再修改其中的makefile文件，将其中的
CC = gcc
AR = ar
RANLIB = ranlib
改为</rich_text><rich_text background="#fff700">
CC = arm-linux-gcc</rich_text><rich_text>
</rich_text><rich_text background="#fff700">AR = arm-linux-ar</rich_text><rich_text>
</rich_text><rich_text background="#fff700">RANLIB = arm-linux-ranlib</rich_text><rich_text>再执行make，编译完成后，将生成的iwconfig，iwlist文件拷贝到rat-linux for mini2440的根文件系统中的/bin目录下，将libiw.so.29拷贝到/lib目录下。启动mini2440开发板，进入linux命令行后，执行ifconfig wlan0 up，启动无线网卡。再执行iwlist scanning，此命令可以搜索到可用的无线网络接入点。我的无线接入点是一台无线路由器，ESSID是&quot;rat-linux&quot;，执行此命令后就会下列输出wlan0     Scan completed :
          Cell 01 - Address: 00:19:C6:53:B9:CE
                    ESSID:&quot;rat-linux&quot;
                    Mode:Master
                    Channel:2
                    Frequency:2.417 GHz (Channel 2)
                    Quality=11/100  Signal level:66/100
                    Encryption key:on
                    Bit Rates:1 Mb/s; 2 Mb/s; 5.5 Mb/s; 11 Mb/s; 6 Mb/s
                              9 Mb/s; 12 Mb/s; 18 Mb/s; 24 Mb/s; 36 Mb/s
                              48 Mb/s; 54 Mb/s
                    Extra:tsf=000000056306469f
                    Extra: Last beacon: 1065ms ago
其中可以看到我的无线接入点是需要密码的。假设密码是123456。使用如下的命令设置密码。
  iwconfig wlan0 key 123456为了能接无线网，还要使用下面的命令设置ESSID  iwconfig wlan0 essid &quot;rat-linux&quot;其它的参数可以都采用默认的，不用再设了。可以使用下面的命令加入无线网了。
 
  iwconfig wlan0 ap auto再执行iwconfig wlan0，就可以看到下面的信息。wlan0     IEEE 802.11bg  ESSID:&quot;rat-linux&quot;
          Mode:Managed  Frequency:2.417 GHz  Access Point: 00:19:C6:53:B9:CE
          Bit Rate=1 Mb/s   Tx-Power=27 dBm
          Retry min limit:7   RTS thr:off   Fragment thr=2352 B
          Encryption key:1234-56   Security mode:open
          Power Management:off
          Link Quality=100/100  Signal level:66/100
          Rx invalid nwid:0  Rx invalid crypt:0  Rx invalid frag:0
          Tx excessive retries:0  Invalid misc:0   Missed beacon:0这就表示已接入无线网。最后，为无线网卡指定IP地址。命令如下  ifconfig wlan0 192.168.1.30 netmask 255.255.255.0我的开发主机和无线网卡处于同一网段，因此是可以相互PING通的。因此可以用从开发主机上PING无线网卡的IP地址的方法来确网卡是否工作正常。从主机上执行ping 192.168.1.30，正常PING通。
至此，无线网卡安装全部完成。最后，为了方便配置，可以将上述的配置命令写入linux脚本文件，以后，只要执行此脚本，即可完成上述步骤的配置。脚本文件内容如下。
#! /bin/shifconfig wlan0 up
iwconfig wlan0 key 123456
iwconfig wlan0 essid &quot;rat-linux&quot;
iwconfig wlan0 ap auto
ifconfig wlan0 192.168.1.30 netmask 255.255.255.0</rich_text></node><node name="常用命令" prog_lang="custom-colors" readonly="False" tags="" unique_id="33"><rich_text>###############################################################################
</rich_text><rich_text scale="h3" weight="heavy">从指定类型文件中查找</rich_text><rich_text>
find . -name '*.c' | awk '{print &quot;grep -i -nH keyword &quot;$1}' | /bin/bash
find . -name '*.c' -exec grep -i -nH &quot;keyword&quot; {} \;
</rich_text><rich_text scale="h3" weight="heavy">更好的搜索方法：</rich_text><rich_text>
grep -i &quot;search_string&quot; . -r --include=*.txt
grep &quot;search_string&quot; . -r --include=*.txt --include=*.cpp --include=*.h

</rich_text><rich_text scale="h3" weight="heavy">只显示目录名</rich_text><rich_text>
ls -l | grep ^d
或
ls -d */

</rich_text><rich_text scale="h3" weight="heavy">只显示文件</rich_text><rich_text>
ls -l | grep ^-

</rich_text><rich_text scale="h3" weight="heavy">分别设置子目录和文件不同权限</rich_text><rich_text>
find . -type d -exec chmod 755 {} \;
find . -type f -exec chmod 644 {} \;

</rich_text><rich_text scale="h3" weight="heavy">为指定文件设置可执行权限</rich_text><rich_text>
</rich_text><rich_text scale="h3">find . -name 'commit-msg' -type f -exec chmod +x {} \;</rich_text><rich_text>
find . -name '*.sh' -type f -exec chmod +x {} \;

找出在/home/user中的所有空子目录:
find /home/user -maxdepth 1 -type d -empty

得到test.txt中50到60行的文本:
&lt; test.txt sed -n '50,60p'

以sudo权限重新运行上一个执行的命令 (如果是: mkdir /root/test, 下面会运行: sudo mkdir /root/tes
sudo !!

创建临时RAM文件系统 - ramdisk (请先创建 /tmpram 目录):
mount -t tmpfs tmpfs /tmpram -o size=512m

Grep完整的单词（译注：而不是其它单词的一部分）:
grep -w &quot;name&quot; test.txt

提升权限后在一个文件后追加文本:
echo &quot;some text&quot; | sudo tee -a /path/file

列出所有支持的kill信号:
kill -l

生成随机密码 (本例中16个字符长):
openssl rand -base64 16

在bash历史中不记录最后的会话:
kill -9 $$

扫描网络来找出开放的端口:
nmap -p 8081 172.20.0.0/16

将文件名中含有txt的所有文件移动到/home/user:
find -iname &quot;*txt*&quot; -exec mv -v {} /home/user \;

按行将两个文件中的对应行合并显示:
paste test.txt test1.txt

shell中的进度条:
pv data.log

转换tab为空格:
expand test.txt &gt; test1.txt

找出文件中带有末尾空格的文件:
find . -type f -exec egrep -l &quot; +$&quot; &quot;{}&quot; \;

找出用tab缩进的文件:
find . -type f -exec egrep -l $'\t' &quot;{}&quot; \;

用&quot;=&quot;打印水平行
printf '%100s\n' | tr ' ' =


###############################################################################
</rich_text><rich_text scale="h2" weight="heavy">kernel patch</rich_text><rich_text>
###############################################################################
	(1).产生补丁
	生成patch命令用diff命令，该命令的基本用法是：
	diff [选项] 旧文件或目录 新文件或目录
	该命令根据选项产生新旧文件或目录之间的patch，并把该patch输出到标准输出上。
	选项用来指定输出的patch文件格式，如果比较的是目录是否需要递归，对只在一边目录中存在的文件的处理方法，如何处理空格、制表符、小写等；常用选项有
	-c 表示产生context格式的patch
	-u 表示产生unified格式的patch
	-r 表示对目录进行递归操作，用于产生整个代码树的patch
	-N 表示如果文件不存在则将其等价为空文件，这个用于产生有文件增加或删除的patch

	接下来，需要指定比较的对象，它们可以是文件，也可以时目录。旧版本列在前面，新版本列在后面。当然，文件或目录也可以从标准输入获得。此时，文件或目录名称用减号&quot;-&quot;表示。实例：

	cat build.xml | diff -y -W 100 - build-1.10.xml
	以每列100个字符的宽度并排对比输出build.xml和build-1.10.xml之间的差异到屏幕(标准输出)

	diff -c web.xml web2.xml &gt; web.xml.diff
	产生web2.xml相对于web.xml的修改的上下文格式补丁文件到web.xml.diff中去

	diff -crN src src_XFIRE &gt; xfire-patch.diff
	产生代码树src_XIRE相对于代码树src的上下文补丁文件到xfire-patch.diff中去，在src_XFIRE中新增的文件的内容也会被包含在补丁中。

	来自Linux内核patch的一个简短的引用可以这样实现：
　 diff -u ——recursive ——new-file v2.1.118//mm/swapfile.c /mm/swapfile. c
   --- v2.1.118/linux/mm/swapfile.c Wed Aug 26 11:37:45 1998
   +++ linux/mm/swapfile.c Wed Aug 26 16:01:57 1998 
   @@ -489,7 +489,7 @@
　　int swap_header_version;
　　int lock_map_size = PAGE_SIZE;
　　int nr_good_pages = 0; 
  - char tmp_lock_map = 0; 
  + unsigned long tmp_lock_map = 0;
　　应用来自本段中使用-p1开关拷贝的patch可以有效地减短patch定位的路径；patch会查找当前目录下一个名为/mm的子目录，接着应该会在这儿发现swapfile.c文件，然后等待打补丁。在这个过程中，以破折号（“-”号，译者注）开始的行会被一个以加号（“+”号，译者注）开始的行代替。一个典型的patch会包含对多个文件的更新，每个部分中都由对两个版本的文件运行diff -u命令的输出结果组成。

	(2).打补丁
	打补丁可以使用命令行工具patch。它的基本用法是：patch -pnum &lt; 补丁文件。
	打补丁时将工作目录改到需要打补丁源代码顶层目录，然后确定p后面的数字，该数字表示需要去掉的补丁文件中目录的层数，该数字和补丁创建时候工作目录和代码目录的相对位置有关，一般补丁的作者为在补丁文档中指明。如果没有指定，可以通过观察补丁文件中列出的文件完整路径和代码树中该文件所在相对路径得出。

	例子：
	cd src
	patch -p1 &lt; xfire-patch.diff

    (3).技巧
    如果你准备查看命令的输出，或者可能你希望保留*.orig文件直到你确定打过补丁的源程序编译已经通过，按照我的经验，直接运行patch（正如前面介绍的一样，patch位于内核源程序的最高目录）是很可靠的。为了避免对patch进行解压，在使用之前，可以使用这样一个技巧：
　　gzip -cd patchXX.gz | patch -p1
　　或者
　　bzip2 -dc patchXX.bz2 | patch -p1
　　在使用patch之后，可以使用find程序来检测被拒绝的文件：
　　find . -name *.rej
　　第一次使用这个命令，语法可能有些不清楚。点号（“.”）说明find应该查找当前目录并递规查找当前目录之下的所有子目录。记住，点号前后都应该有一个空格。通配符&quot;*&quot;号前面的反斜线把星号转义出来，以免shell会搞混，星号是有其它意义的。如果find找到了任何的*.rej文件，它就会把文件名打印到屏幕上。如果没有任何输出find就退出了，那么就差不多能确定patch正确发挥作用了。
　　find的另外一个工作是删除*.orig文件：
　　find . -name *.orig -print0 | xargs -0r rm -f


###############################################################################
###############################################################################
</rich_text><rich_text foreground="#ffff00000000" weight="heavy">patch</rich_text><rich_text weight="heavy"> [-bceEflnNRstTuvZ][-B &lt;备份字首字符串&gt;][-d &lt;工作目录&gt;][-D &lt;标示符号&gt;][-F &lt;监别列数&gt;][-g &lt;控制数值&gt;][-i &lt;修补文件&gt;][-o &lt;输出文件&gt;][-p &lt;剥离层级&gt;][-r &lt;拒绝文件&gt;][-V &lt;备份方式&gt;][-Y &lt;备份字首字符串&gt;][-z &lt;备份字尾字符串&gt;][--backup-if　　 -mismatch][--binary][--help][--nobackup-if-mismatch][--verbose][原始文件 &lt;修补文件&gt;] 或 path [-p &lt;剥离层级&gt;] &lt; [修补文件]</rich_text><rich_text>

</rich_text><rich_text weight="heavy">补充说明：</rich_text><rich_text>patch指令让用户利用设置修补文件的方式，修改，更新原始文件。倘若一次仅修改一个文件，可直接在指令列中下达指令依序执行。如果配合修补文件的方式则能一次修补大批文件，这也是Linux系统核心的升级方法之一。

</rich_text><rich_text weight="heavy">参　　数：</rich_text><rich_text>
　-b或--backup 　备份每一个原始文件。 
　-B&lt;备份字首字符串&gt;或--prefix=&lt;备份字首字符串&gt; 　设置文件备份时，附加在文件名称前面的字首字符串，该字符串可以是路径名称。 
　-c或--context 　把修补数据解译成关联性的差异。 
　-d&lt;工作目录&gt;或--directory=&lt;工作目录&gt; 　设置工作目录。 
　-D&lt;标示符号&gt;或--ifdef=&lt;标示符号&gt; 　用指定的符号把改变的地方标示出来。 
　-e或--ed 　把修补数据解译成ed指令可用的叙述文件。 
　-E或--remove-empty-files 　若修补过后输出的文件其内容是一片空白，则移除该文件。 
　-f或--force 　此参数的效果和指定&quot;-t&quot;参数类似，但会假设修补数据的版本为新　版本。 
　-F&lt;监别列数&gt;或--fuzz&lt;监别列数&gt; 　设置监别列数的最大值。 
　-g&lt;控制数值&gt;或--get=&lt;控制数值&gt; 　设置以RSC或SCCS控制修补作业。 
　-i&lt;修补文件&gt;或--input=&lt;修补文件&gt; 　读取指定的修补问家你。 
　-l或--ignore-whitespace 　忽略修补数据与输入数据的跳格，空格字符。 
　-n或--normal 　把修补数据解译成一般性的差异。 
　-N或--forward 　忽略修补的数据较原始文件的版本更旧，或该版本的修补数据已使　用过。 
　-o&lt;输出文件&gt;或--output=&lt;输出文件&gt; 　设置输出文件的名称，修补过的文件会以该名称存放。 
　-p&lt;剥离层级&gt;或--strip=&lt;剥离层级&gt; 　设置欲剥离几层路径(第几个斜杠(slash))名称。 

</rich_text><rich_text foreground="#00000000ffff">        例子：
              </rich_text><rich_text foreground="#a5a52a2a2a2a">/u/howard/src/blurfl/blurfl.c</rich_text><rich_text foreground="#00000000ffff">
                
          setting </rich_text><rich_text foreground="#ffff00000000">-p0</rich_text><rich_text foreground="#00000000ffff"> gives the entire file name unmodified, </rich_text><rich_text foreground="#ffff00000000">-p1</rich_text><rich_text foreground="#00000000ffff"> gives
             </rich_text><rich_text foreground="#a5a52a2a2a2a">u/howard/src/blurfl/blurfl.c</rich_text><rich_text foreground="#00000000ffff">

          without the leading slash, </rich_text><rich_text foreground="#ffff00000000">-p4</rich_text><rich_text foreground="#00000000ffff"> gives
             </rich_text><rich_text foreground="#a5a52a2a2a2a">blurfl/blurfl.c</rich_text><rich_text>

　-f&lt;拒绝文件&gt;或--reject-file=&lt;拒绝文件&gt; 　设置保存拒绝修补相关信息的文件名称，预设的文件名称为.rej。 
　-R或--reverse 　假设修补数据是由新旧文件交换位置而产生。 
　-s或--quiet或--silent 　不显示指令执行过程，除非发生错误。 
　-t或--batch 　自动略过错误，不询问任何问题。 
　-T或--set-time 　此参数的效果和指定&quot;-Z&quot;参数类似，但以本地时间为主。 
　-u或--unified 　把修补数据解译成一致化的差异。 
　-v或--version 　显示版本信息。 
　-V&lt;备份方式&gt;或--version-control=&lt;备份方式&gt; 　用&quot;-b&quot;参数备份目标文件后，备份文件的字尾会被加上一个备份字符串，这个字符串不仅可用&quot;-z&quot;参数变更，当使用&quot;-V&quot;参数指定不同备份方式时，也会产生不同字尾的备份字符串。
　-Y&lt;备份字首字符串&gt;或--basename-prefix=--&lt;备份字首字符串&gt; 　设置文件备份时，附加在文件基本名称开头的字首字符串。
　-z&lt;备份字尾字符串&gt;或--suffix=&lt;备份字尾字符串&gt; 　此参数的效果和指定&quot;-B&quot;参数类似，差别在于修补作业使用的路径与文件名若为src/linux/fs/super.c，加上&quot;backup/&quot;字符串后，文件super.c会备份于/src/linux/fs/backup目录里。 
　-Z或--set-utc 　把修补过的文件更改，存取时间设为UTC。 
　--backup-if-mismatch 　在修补数据不完全吻合，且没有刻意指定要备份文件时，才备份文件。 
　--binary 　以二进制模式读写数据，而不通过标准输出设备。 
　--help 　在线帮助。 
　--nobackup-if-mismatch 　在修补数据不完全吻合，且没有刻意指定要备份文件时，不要备份文件。 
　--verbose 　详细显示指令的执行过程。     

###############################################################################
</rich_text><rich_text scale="h1" weight="heavy">chroot和schroot的安装使用</rich_text><rich_text>
###############################################################################
</rich_text><rich_text link="webs https://help.ubuntu.com/community/DebootstrapChroot">https://help.ubuntu.com/community/DebootstrapChroot</rich_text><rich_text>
</rich_text><rich_text link="webs http://jacky.aiwaly.com/wp/schroot-chroot-for-any-users.html">http://jacky.aiwaly.com/wp/schroot-chro ... users.html</rich_text><rich_text>
</rich_text><rich_text link="webs https://help.ubuntu.com/community/BasicChroot">https://help.ubuntu.com/community/BasicChroot</rich_text><rich_text>
</rich_text><rich_text link="webs http://wiki.debian.org/Schroot">http://wiki.debian.org/Schroot</rich_text><rich_text>


</rich_text><rich_text scale="h2" weight="heavy">一、基本工具及配置、用法</rich_text><rich_text>
</rich_text><rich_text scale="h3" weight="heavy">1. 安装工具</rich_text><rich_text>
$ sudo apt-get install debootstrap schroot

</rich_text><rich_text scale="h3" weight="heavy">2. 提高安全性及避免用户配置混淆</rich_text><rich_text>
$ sudo editor /etc/schroot/mount-defaults
注释掉/home的挂载

</rich_text><rich_text scale="h3" weight="heavy">3. 进入系统的方法</rich_text><rich_text>
普通用户：schroot -c XXX
管理权限：sudo schroot -c XXX 或 schroot -c XXX -u root

</rich_text><rich_text scale="h3" weight="heavy">4. 另一种安装软件的方法</rich_text><rich_text>
$ sudo schroot -c XXX apt-get install YYY
例如：
$ sudo schroot -c lucid apt-get install nano
$ sudo schroot -c precise apt-get install nano

</rich_text><rich_text scale="h2" weight="heavy">二、安装32位 Ubuntu Precise</rich_text><rich_text>
</rich_text><rich_text scale="h3" weight="heavy">1. 编辑配置：sudo editor /etc/schroot/chroot.d/precise.conf,添加如下内容</rich_text><rich_text>
[precise]
description=Ubuntu Precise 32Bit
type=directory
directory=/srv/chroot/precise
users=loaden
groups=users
root-groups=root
personality=linux32

</rich_text><rich_text scale="h3" weight="heavy">2. 在/32目录安装32位系统</rich_text><rich_text>
$ sudo debootstrap --arch i386 precise /srv/chroot/precise </rich_text><rich_text link="webs http://mirrors.163.com/ubuntu/">http://mirrors.163.com/ubuntu/</rich_text><rich_text>
$ sudo chmod 777 /srv/chroot/precise/home
$ mkdir /srv/chroot/precise/home/loaden

</rich_text><rich_text scale="h3" weight="heavy">3. 执行：sudo schroot -c precise 进入系统</rich_text><rich_text>
a. 更新源
# echo &quot;deb </rich_text><rich_text link="webs http://mirrors.163.com/ubuntu">http://mirrors.163.com/ubuntu</rich_text><rich_text> precise main universe&quot; &gt; /etc/apt/sources.list
# apt-get update
b. 语言支持
# locale-gen en_US.UTF-8 zh_CN.UTF-8
c. 时区
# dpkg-reconfigure tzdata
d. 自动完成
# apt-get install bash-completion
e. 字体
# apt-get install ttf-wqy-*
f. 图形界面
# apt-get install libgtk2.0-0 libgtk-3-0 appmenu-gtk appmenu-gtk3
# echo &quot;export DISPLAY=:0.0&quot; &gt; /etc/profile.d/gui_support.sh

6. 以普通权限进入32位系统
a. 安装FoxReader
$ sudo dpkg -i FoxitReader_1.1.0_i386.deb
$ sudo apt-get install libcanberra-gtk-module
b. 安装glGo
$ sudo dpkg -i glGo-1.4.1.deb
$ sudo apt-get install libsm6 libjpeg62 libsdl-image1.2 libsdl-ttf2.0-0 libsdl-mixer1.2 libglu1-mesa libpython2.7 gnugo
$ sudo ln -s /usr/lib/libpython2.7.so.1.0 /usr/lib/libpython2.5.so.1.0


</rich_text><rich_text scale="h2" weight="heavy">二、安装32位 Ubuntu Lucid</rich_text><rich_text>
</rich_text><rich_text scale="h3" weight="heavy">1. 编辑配置：sudo editor /etc/schroot/chroot.d/lucid.conf,添加如下内容</rich_text><rich_text>
[lucid]
description=Ubuntu Lucid 32Bit
type=directory
directory=/srv/chroot/lucid
users=loaden
groups=users
root-groups=root
personality=linux32

</rich_text><rich_text scale="h3" weight="heavy">2. 在/32目录安装32位系统</rich_text><rich_text>
$ sudo debootstrap --arch i386 lucid /srv/chroot/lucid </rich_text><rich_text link="webs http://mirrors.163.com/ubuntu/">http://mirrors.163.com/ubuntu/</rich_text><rich_text>
$ sudo chmod 777 /srv/chroot/lucid/home
$ mkdir /srv/chroot/lucid/home/loaden
$ ln -s ~ /srv/chroot/lucid/home/loaden/.host

</rich_text><rich_text scale="h3" weight="heavy">3. 执行：sudo schroot -c lucid 进入系统</rich_text><rich_text>
a. 更新源
# echo &quot;deb </rich_text><rich_text link="webs http://mirrors.163.com/ubuntu">http://mirrors.163.com/ubuntu</rich_text><rich_text> lucid main universe&quot; &gt; /etc/apt/sources.list
# apt-get update
b. 语言支持
# locale-gen en_US.UTF-8 zh_CN.UTF-8
c. 时区
# dpkg-reconfigure tzdata
d. 自动完成
# apt-get install bash-completion
e. 字体
# apt-get install ttf-wqy-*
f. 图形界面
# apt-get install libgtk2.0-0
# echo &quot;export DISPLAY=:0.0&quot; &gt; /etc/profile.d/gui_support.sh

</rich_text><rich_text scale="h3" weight="heavy">4. 以普通权限进入32位系统</rich_text><rich_text>
a. 安装FoxReader
$ sudo dpkg -i FoxitReader_1.1.0_i386.deb
$ sudo apt-get install libcanberra-gtk-module
b. 安装glGo
$ sudo dpkg -i glGo-1.4.1.deb
$ sudo apt-get install libsm6 libjpeg62 libsdl-image1.2 libsdl-ttf2.0-0 libsdl-mixer1.2 libglu1-mesa libpython2.6 gnugo
$ sudo ln -s /usr/lib/libpython2.6.so.1.0 /usr/lib/libpython2.5.so.1.0           

</rich_text></node></cherrytree>