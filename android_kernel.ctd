<?xml version="1.0" ?><cherrytree><node name="Android内核解读" prog_lang="custom-colors" readonly="False" tags="" unique_id="128"><rich_text>
</rich_text><node name="Android系统的开机启动过程 " prog_lang="custom-colors" readonly="False" tags="" unique_id="130"><rich_text scale="h2">前言</rich_text><rich_text>
    当长按手机的power键，Android手机就会开机，那么Android系统的开机启动过程到底是怎么样的呢，本文将要 介绍这一过程。简单来说，Android系统的开机启动过程大致是这样的：首先linux系统会启动一个叫做zygote（可以称为受精卵、母体）的 linux程序，这个程序实际上就是android系统的内核，zygote启动的时候会建立socket服务端并加载大量的类和资源。接着zygote 会孵化第一个dalvik进程SystemServer，在SystemServer中会创建一个socket客户端，后续 AMS（ActivityManagerService）会通过此客户端和zygote通信，zygote再根据请求孵化出新的dalvik进程即启动一 个新的apk同时把新进程的socket连接关闭。SystemServer初始化完毕后会启动一个位于桟顶的activity，由于系统刚开机，所以 task桟顶没有activity，于是接着它会发送一个隐式的intent（category：CATEGORY_HOME），也就是launcher 了，即Android系统的桌面程序，launcher启动以后，我们就可以通过桌面启动各种应用了，可以发现，launcher可以有多个，第三方应用只要加入launcher所需要的intent-filter即可。下面一一分析各个流程。（注：本文分析基于Android4.3源码）

</rich_text><rich_text scale="h2">zygote的启动过程</rich_text><rich_text>
zygote是一个linux程序，其对应的可执行文件位于/system/bin/app_process，它在/init.rc中定义，如下
service zygote /system/bin/app_process -Xzygote /system/bin --zygote --start-system-server
    class main
    socket zygote stream 660 root system
    onrestart write /sys/android_power/request_state wake
    onrestart write /sys/power/state on
    onrestart restart media
    onrestart restart netd
    
    可以发现，zygote创建了一个流式套接字（即采用TCP协议），并监听660端口，并且当zygote重启的时候需要对唤醒电源并重启Media、 netd服务。下面看zygote的源码，
其路径为frameworks\base\cmds\app_process\app_main.cpp中：
1. int main(int argc, char* const argv[])  
2. {  
3. #ifdef __arm__  
4.     /* 
5.      * b/7188322 - Temporarily revert to the compat memory layout 
6.      * to avoid breaking third party apps. 
7.      * 
8.      * THIS WILL GO AWAY IN A FUTURE ANDROID RELEASE. 
9.      * 
10.      * http://git.kernel.org/?p=linux/kernel/git/torvalds/linux-2.6.git;a=commitdiff;h=7dbaa466 
11.      * changes the kernel mapping from bottom up to top-down. 
12.      * This breaks some programs which improperly embed 
13.      * an out of date copy of Android's linker. 
14.      */  
15.     char value[PROPERTY_VALUE_MAX];  
16.     property_get(&quot;ro.kernel.qemu&quot;, value, &quot;&quot;);  
17.     bool is_qemu = (strcmp(value, &quot;1&quot;) == 0);  
18.     if ((getenv(&quot;NO_ADDR_COMPAT_LAYOUT_FIXUP&quot;) == NULL) &amp;&amp; !is_qemu) {  
19.         int current = personality(0xFFFFFFFF);  
20.         if ((current &amp; ADDR_COMPAT_LAYOUT) == 0) {  
21.             personality(current | ADDR_COMPAT_LAYOUT);  
22.             setenv(&quot;NO_ADDR_COMPAT_LAYOUT_FIXUP&quot;, &quot;1&quot;, 1);  
23.             execv(&quot;/system/bin/app_process&quot;, argv);  
24.             return -1;  
25.         }  
26.     }  
27.     unsetenv(&quot;NO_ADDR_COMPAT_LAYOUT_FIXUP&quot;);  
28. #endif  
29.   
30.     // These are global variables in ProcessState.cpp  
31.     mArgC = argc;  
32.     mArgV = argv;  
33.   
34.     mArgLen = 0;  
35.     for (int i=0; i&lt;argc; i++) {  
36.         mArgLen += strlen(argv[i]) + 1;  
37.     }  
38.     mArgLen--;  
39.     //注意，这里持有了一个AppRuntime对象，其继承自AndroidRuntime  
40.     AppRuntime runtime;  
41.     const char* argv0 = argv[0];  
42.   
43.     // Process command line arguments  
44.     // ignore argv[0]  
45.     argc--;  
46.     argv++;  
47.   
48.     // Everything up to '--' or first non '-' arg goes to the vm  
49.   
50.     int i = runtime.addVmArguments(argc, argv);  
51.   
52.     // Parse runtime arguments.  Stop at first unrecognized option.  
53.     bool zygote = false;  
54.     bool startSystemServer = false;  
55.     bool application = false;  
56.     const char* parentDir = NULL;  
57.     const char* niceName = NULL;  
58.     const char* className = NULL;  
59.     //这里是解析init.rc中定义的zygote的启动参数  
60.     while (i &lt; argc) {  
61.         const char* arg = argv[i++];  
62.         if (!parentDir) {  
63.             parentDir = arg;  
64.         } else if (strcmp(arg, &quot;--zygote&quot;) == 0) {  
65.             zygote = true;  
66.             niceName = &quot;zygote&quot;;  
67.         } else if (strcmp(arg, &quot;--start-system-server&quot;) == 0) {  
68.             startSystemServer = true;  
69.         } else if (strcmp(arg, &quot;--application&quot;) == 0) {  
70.             application = true;  
71.         } else if (strncmp(arg, &quot;--nice-name=&quot;, 12) == 0) {  
72.             niceName = arg + 12;  
73.         } else {  
74.             className = arg;  
75.             break;  
76.         }  
77.     }  
78.   
79.     if (niceName &amp;&amp; *niceName) {  
80.         setArgv0(argv0, niceName);  
81.         set_process_name(niceName);  
82.     }  
83.   
84.     runtime.mParentDir = parentDir;  
85.   
86.     if (zygote) {  
87.         //从init.rc中的定义可以看出，zygote为true，startSystemServer也为true  
88.         //最终这里会调用ZygoteInit的main方法  
89.         runtime.start(&quot;com.android.internal.os.ZygoteInit&quot;,  
90.                 startSystemServer ? &quot;start-system-server&quot; : &quot;&quot;);  
91.     } else if (className) {  
92.         // Remainder of args get passed to startup class main()  
93.         runtime.mClassName = className;  
94.         runtime.mArgC = argc - i;  
95.         runtime.mArgV = argv + i;  
96.         runtime.start(&quot;com.android.internal.os.RuntimeInit&quot;,  
97.                 application ? &quot;application&quot; : &quot;tool&quot;);  
98.     } else {  
99.         fprintf(stderr, &quot;Error: no class name or --zygote supplied.\n&quot;);  
100.         app_usage();  
101.         LOG_ALWAYS_FATAL(&quot;app_process: no class name or --zygote supplied.&quot;);  
102.         return 10;  
103.     }  
104. }  
    说 明：这句代码 runtime.start(&quot;com.android.internal.os.ZygoteInit&quot;, startSystemServer ?  &quot;start-system-server&quot; :  &quot;&quot;)
    在AndroidRuntime中实现，其最终会调用ZygoteInit的main方法，请看 env-&gt;CallStaticVoidMethod(startClass, startMeth,  strArray);这里的startClass就是com.android.internal.os.ZygoteInit，而startMeth就是main，所以，我们直接看ZygoteInit的main方法，代码路径为：frameworks\base\core\java\com\android\internal\os\ZygoteInit.java：
106. public static void main(String argv[]) {  
107.     try {  
108.         // Start profiling the zygote initialization.  
109.         SamplingProfilerIntegration.start();  
110.         //这里注册流式socket，以便于fork新的dalvik进程  
111.         registerZygoteSocket();  
112.         EventLog.writeEvent(LOG_BOOT_PROGRESS_PRELOAD_START,  
113.             SystemClock.uptimeMillis());  
114.         //这里预先加载一些类和资源  
115.         preload();  
116.         EventLog.writeEvent(LOG_BOOT_PROGRESS_PRELOAD_END,  
117.             SystemClock.uptimeMillis());  
118.   
119.         // Finish profiling the zygote initialization.  
120.         SamplingProfilerIntegration.writeZygoteSnapshot();  
121.   
122.         // Do an initial gc to clean up after startup  
123.         gc();  
124.   
125.         // Disable tracing so that forked processes do not inherit stale tracing tags from  
126.         // Zygote.  
127.         Trace.setTracingEnabled(false);  
128.   
129.         // If requested, start system server directly from Zygote  
130.         if (argv.length != 2) {  
131.             throw new RuntimeException(argv[0] + USAGE_STRING);  
132.         }  
133.   
134.         if (argv[1].equals(&quot;start-system-server&quot;)) {  
135.             //启动SystemServer，zygote通过SystemServer和上层服务进行交互  
136.             startSystemServer();  
137.         } else if (!argv[1].equals(&quot;&quot;)) {  
138.             throw new RuntimeException(argv[0] + USAGE_STRING);  
139.         }  
140.   
141.         Log.i(TAG, &quot;Accepting command socket connections&quot;);  
142.         //通过Select方式监听端口，即异步读取消息，死循环，没有消息则一直阻塞在那里  
143.         runSelectLoop();  
144.   
145.         closeServerSocket();  
146.     } catch (MethodAndArgsCaller caller) {  
147.         caller.run();  
148.     } catch (RuntimeException ex) {  
149.         Log.e(TAG, &quot;Zygote died with exception&quot;, ex);  
150.         closeServerSocket();  
151.         throw ex;  
152.     }  
153. }  
    下面看一下runSelectLoop方法，看看它是如何fork产生一个新的进程的：
1. /** 
2.  * Runs the zygote process's select loop. Accepts new connections as 
3.  * they happen, and reads commands from connections one spawn-request's 
4.  * worth at a time. 
5.  * 
6.  * @throws MethodAndArgsCaller in a child process when a main() should 
7.  * be executed. 
8.  */  
9. private static void runSelectLoop() throws MethodAndArgsCaller {  
10.     ArrayList&lt;FileDescriptor&gt; fds = new ArrayList&lt;FileDescriptor&gt;();  
11.     ArrayList&lt;ZygoteConnection&gt; peers = new ArrayList&lt;ZygoteConnection&gt;();  
12.     FileDescriptor[] fdArray = new FileDescriptor[4];  
13.   
14.     fds.add(sServerSocket.getFileDescriptor());  
15.     peers.add(null);  
16.   
17.     int loopCount = GC_LOOP_COUNT;  
18.     //死循环，没有消息则一直阻塞在这里  
19.     while (true) {  
20.         int index;  
21.   
22.         /* 
23.          * Call gc() before we block in select(). 
24.          * It's work that has to be done anyway, and it's better 
25.          * to avoid making every child do it.  It will also 
26.          * madvise() any free memory as a side-effect. 
27.          * 
28.          * Don't call it every time, because walking the entire 
29.          * heap is a lot of overhead to free a few hundred bytes. 
30.          */  
31.         if (loopCount &lt;= 0) {  
32.             gc();  
33.             loopCount = GC_LOOP_COUNT;  
34.         } else {  
35.             loopCount--;  
36.         }  
37.   
38.   
39.         try {  
40.             fdArray = fds.toArray(fdArray);  
41.             //通过select()函数来读取新的socket消息，其返回值有&lt;0、0、&gt;0三种  
42.             //分别代表：发生异常、继续读取新消息、首先处理当前消息  
43.             index = selectReadable(fdArray);  
44.         } catch (IOException ex) {  
45.             throw new RuntimeException(&quot;Error in select()&quot;, ex);  
46.         }  
47.   
48.         if (index &lt; 0) {  
49.             throw new RuntimeException(&quot;Error in select()&quot;);  
50.         } else if (index == 0) {  
51.             //构造一个ZygoteConnection对象，并将其加入到peers列表中  
52.             ZygoteConnection newPeer = acceptCommandPeer();  
53.             peers.add(newPeer);  
54.             fds.add(newPeer.getFileDesciptor());  
55.         } else {  
56.             boolean done;  
57.             //这里处理当前socket消息，ZygoteConnection的runOnce会被调用，一个新的dalvik进程会被创建  
58.             done = peers.get(index).runOnce();  
59.   
60.             if (done) {  
61.                 //处理完了以后删除此socket消息  
62.                 peers.remove(index);  
63.                 fds.remove(index);  
64.             }  
65.         }  
66.     }  
67. }  
    接着，我们还需要看下ZygoteConnection的runOnce方法，看看一个dalvik进程到底是如何产生的，我们知道每个apk都运行在一个 独立的dalvik进程中，所以当启动一个apk的时候，zygote会孵化出一个新的进程，在这个进程中运行此apk。  在 ZygoteConnection中，新进程是通过Zygote的静态方法forkAndSpecialize来产生的：
    pid = Zygote.forkAndSpecialize(parsedArgs.uid, parsedArgs.gid, parsedArgs.gids,
    parsedArgs.debugFlags, rlimits, parsedArgs.mountExternal, parsedArgs.seInfo, parsedArgs.niceName);
具 体的我们就不用多看了，内部肯定是通过linux系统的fork()函数来产生一个新进程的。当一个新的dalvik进程产生了以后，还需要做一些清场的 工作，由于新进程是由zygote程序fork出来的，所以子进程具有zygote的一份拷贝，我们知道，zygote启动的时候创建了一个socket 服务端，这个服务端只能有一个，由zygote孵化的子进程是不应该有的，所以子进程孵化出来以后，还必须关闭拷贝的socket服务端，这些操作在 handleChildProc方法中完成：
1. private void handleChildProc(Arguments parsedArgs,  
2.         FileDescriptor[] descriptors, FileDescriptor pipeFd, PrintStream newStderr)  
3.         throws ZygoteInit.MethodAndArgsCaller {  
4.     //关闭本地和服务端（如果有）的socket  
5.     closeSocket();  
6.     ZygoteInit.closeServerSocket();  
7.   
8.     if (descriptors != null) {  
9.         try {  
10.             ZygoteInit.reopenStdio(descriptors[0],  
11.                     descriptors[1], descriptors[2]);  
12.   
13.             for (FileDescriptor fd: descriptors) {  
14.                 IoUtils.closeQuietly(fd);  
15.             }  
16.             newStderr = System.err;  
17.         } catch (IOException ex) {  
18.             Log.e(TAG, &quot;Error reopening stdio&quot;, ex);  
19.         }  
20.     }  
21.   
22.     if (parsedArgs.niceName != null) {  
23.         Process.setArgV0(parsedArgs.niceName);  
24.     }  
25.   
26.     if (parsedArgs.runtimeInit) {  
27.         if (parsedArgs.invokeWith != null) {  
28.             WrapperInit.execApplication(parsedArgs.invokeWith,  
29.                     parsedArgs.niceName, parsedArgs.targetSdkVersion,  
30.                     pipeFd, parsedArgs.remainingArgs);  
31.         } else {  
32.             RuntimeInit.zygoteInit(parsedArgs.targetSdkVersion,  
33.                     parsedArgs.remainingArgs);  
34.         }  
35.     } else {  
36.         String className;  
37.         try {  
38.             className = parsedArgs.remainingArgs[0];  
39.         } catch (ArrayIndexOutOfBoundsException ex) {  
40.             logAndPrintError(newStderr,  
41.                     &quot;Missing required class name argument&quot;, null);  
42.             return;  
43.         }  
44.   
45.         String[] mainArgs = new String[parsedArgs.remainingArgs.length - 1];  
46.         System.arraycopy(parsedArgs.remainingArgs, 1,  
47.                 mainArgs, 0, mainArgs.length);  
48.   
49.         if (parsedArgs.invokeWith != null) {  
50.             WrapperInit.execStandalone(parsedArgs.invokeWith,  
51.                     parsedArgs.classpath, className, mainArgs);  
52.         } else {  
53.             ClassLoader cloader;  
54.             if (parsedArgs.classpath != null) {  
55.                 cloader = new PathClassLoader(parsedArgs.classpath,  
56.                         ClassLoader.getSystemClassLoader());  
57.             } else {  
58.                 cloader = ClassLoader.getSystemClassLoader();  
59.             }  
60.   
61.             try {  
62.                 //这里子进程的main方法被调用，此时，子进程完全从zygote（母体）上脱离出来了  
63.                 ZygoteInit.invokeStaticMain(cloader, className, mainArgs);  
64.             } catch (RuntimeException ex) {  
65.                 logAndPrintError(newStderr, &quot;Error starting.&quot;, ex);  
66.             }  
67.         }  
68.     }  
69. }  

    /**
     * Helper exception class which holds a method and arguments and
     * can call them. This is used as part of a trampoline to get rid of
     * the initial process setup stack frames.
     */
    public static class MethodAndArgsCaller extends Exception
            implements Runnable {
        /** method to call */
        private final Method mMethod;

        /** argument array */
        private final String[] mArgs;

        public MethodAndArgsCaller(Method method, String[] args) {
            mMethod = method;
            mArgs = args;
        }

        public void run() {
            try {
                mMethod.invoke(null, new Object[] { mArgs });
            } catch (IllegalAccessException ex) {
                throw new RuntimeException(ex);
            } catch (InvocationTargetException ex) {
                Throwable cause = ex.getCause();
                if (cause instanceof RuntimeException) {
                    throw (RuntimeException) cause;
                } else if (cause instanceof Error) {
                    throw (Error) cause;
                }
                throw new RuntimeException(ex);
            }
        }
    }

    /**
     * Invokes a static &quot;main(argv[]) method on class &quot;className&quot;.
     * Converts various failing exceptions into RuntimeExceptions, with
     * the assumption that they will then cause the VM instance to exit.
     *
     * @param loader class loader to use
     * @param className Fully-qualified class name
     * @param argv Argument vector for main()
     */
    static void invokeStaticMain(ClassLoader loader,
            String className, String[] argv)
            throws ZygoteInit.MethodAndArgsCaller {
        Class&lt;?&gt; cl;

        try {
            cl = loader.loadClass(className);
        } catch (ClassNotFoundException ex) {
            throw new RuntimeException(
                    &quot;Missing class when invoking static main &quot; + className,
                    ex);
        }

        Method m;
        try {
            m = cl.getMethod(&quot;main&quot;, new Class[] { String[].class });
        } catch (NoSuchMethodException ex) {
            throw new RuntimeException(
                    &quot;Missing static main on &quot; + className, ex);
        } catch (SecurityException ex) {
            throw new RuntimeException(
                    &quot;Problem getting static main on &quot; + className, ex);
        }

        int modifiers = m.getModifiers();
        if (! (Modifier.isStatic(modifiers) &amp;&amp; Modifier.isPublic(modifiers))) {
            throw new RuntimeException(
                    &quot;Main method is not public and static on &quot; + className);
        }

        /*
         * This throw gets caught in ZygoteInit.main(), which responds
         * by invoking the exception's run() method. This arrangement
         * clears up all the stack frames that were required in setting
         * up the process.
         */
        throw new ZygoteInit.MethodAndArgsCaller(m, argv);
    }
        
    调用invokeStaticMain函数抛出MethodAndArgsCaller异常， 然后在ZygoteInit的main中
146.     } catch (MethodAndArgsCaller caller) {  
147.         caller.run();  
148.     }
    调用
    同时在ZygoteInit中会预先加载一些类和资源，具体代码在preload方法中：
    static void preload() {
        preloadClasses();
        preloadResources();
    }

</rich_text><rich_text scale="h2">SystemServer的创建</rich_text><rich_text>
    SystemServer 作为zygote孵化的第一个dalvik进程，其孵化过程在上面已经进行了描述，但是其和普通进程的启动略有不同，普通进程由 Zygote.forkAndSpecialize来启动，而SystemServer由Zygote.forkSystemServer来启动，其次是 SystemServer内部多创建了一个socket客户端。关于SystemServer内部的本地socket客户端，本文前面已经说过，外围的 Service都是通过SystemServer和zygote交互的，比如要启动一个apk，首先AMS会发起一个新进程的创建请求，在 startProcessLocked方法中会调用Process的start方法，其内部会调用startViaZygote方法，而在 startViaZygote内部会创建一个本地socket和zygote通信，我们要知道，AMS是在SystemServer进程中创建的，所以说 在SystemServer中创建一个本地socket和zygote通信是有道理的。SystemServer的一个很重要的作用是创建各种服务，包括 大家常见的WindowManagerService 、AlarmManagerService、ActivityManagerService等，然 后上层的各种manager通过binder和service进行交互，关于SystemServer创建各种服务的过程以及和binder的交互，请参 考我之前写的一篇博客的其中一节，这里就不重复了：</rich_text><rich_text link="webs http://blog.csdn.net/singwhatiwanna/article/details/18448997#t4">各种Manager和Binder服务的对应关系</rich_text><rich_text>。

</rich_text><rich_text scale="h2">系统桌面的启动</rich_text><rich_text>
 当SystemServer创建各种服务完毕后，其中的一个服务ActivityManagerService由于也创建完成，所以其事件回调方法systemReady会被调用，这个方法很长，注意到在这个方法的倒数第二句是mMainStack.resumeTopActivityLocked(null)，它的意思是将桟顶的activity复位，看它的代码
1. final boolean resumeTopActivityLocked(ActivityRecord prev, Bundle options) {  
2.     // Find the first activity that is not finishing.  
3.     //找到桟顶的activity记录  
4.     ActivityRecord next = topRunningActivityLocked(null);  
5.   
6.     // Remember how we'll process this pause/resume situation, and ensure  
7.     // that the state is reset however we wind up proceeding.  
8.     final boolean userLeaving = mUserLeaving;  
9.     mUserLeaving = false;  
10.     //由于系统刚启动，桟顶肯定没有activity，所以next为null  
11.     if (next == null) {  
12.         // There are no more activities!  Let's just start up the  
13.         // Launcher...  
14.         if (mMainStack) {  
15.             ActivityOptions.abort(options);  
16.             //程序执行到这里，桌面就会被调起来  
17.             return mService.startHomeActivityLocked(mCurrentUser);  
18.         }  
19.     }  
20.     ...此处省略  
21. }  
最后看看桌面是如何被调起来的：
1. boolean startHomeActivityLocked(int userId) {  
2.     if (mHeadless) {  
3.         // Added because none of the other calls to ensureBootCompleted seem to fire  
4.         // when running headless.  
5.         ensureBootCompleted();  
6.         return false;  
7.     }  
8.   
9.     if (mFactoryTest == SystemServer.FACTORY_TEST_LOW_LEVEL  
10.             &amp;&amp; mTopAction == null) {  
11.         // We are running in factory test mode, but unable to find  
12.         // the factory test app, so just sit around displaying the  
13.         // error message and don't try to start anything.  
14.         return false;  
15.     }  
16.     Intent intent = new Intent(  
17.         mTopAction,  
18.         mTopData != null ? Uri.parse(mTopData) : null);  
19.     intent.setComponent(mTopComponent);  
20.     if (mFactoryTest != SystemServer.FACTORY_TEST_LOW_LEVEL) {  
21.         //其实就是为intent加上CATEGORY_HOME这个Category，接着就发送隐式intent来调起所有满足条件的桌面  
22.         //这也是第三方桌面存在的价值  
23.         intent.addCategory(Intent.CATEGORY_HOME);  
24.     }  
25.     ActivityInfo aInfo =  
26.         resolveActivityInfo(intent, STOCK_PM_FLAGS, userId);  
27.     if (aInfo != null) {  
28.         intent.setComponent(new ComponentName(  
29.                 aInfo.applicationInfo.packageName, aInfo.name));  
30.         // Don't do this if the home app is currently being  
31.         // instrumented.  
32.         aInfo = new ActivityInfo(aInfo);  
33.         aInfo.applicationInfo = getAppInfoForUser(aInfo.applicationInfo, userId);  
34.         ProcessRecord app = getProcessRecordLocked(aInfo.processName,  
35.                 aInfo.applicationInfo.uid);  
36.         if (app == null || app.instrumentationClass == null) {  
37.             intent.setFlags(intent.getFlags() | Intent.FLAG_ACTIVITY_NEW_TASK);  
38.             //这里启动桌面activity，到此为止，桌面被启动了，我们就可以认为手机开机完成了  
39.             mMainStack.startActivityLocked(null, intent, null, aInfo,  
40.                     null, null, 0, 0, 0, null, 0, null, false, null);  
41.         }  
42.     }  
43.   
44.     return true;  
45. }  
到此为止，桌面已经启动了，也就意味着手机的开机启动过程已经完成，后续我们就可以通过桌面来启动各个应用了，根据本文的介绍，我们已经知道apk启动时dalvik进程的创建过程，关于单个activity的启动过程，请参看我之前写的另一篇文章</rich_text><rich_text link="webs http://blog.csdn.net/singwhatiwanna/article/details/18154335">Android源码分析-Activity的启动过程</rich_text><rich_text>。到此为止，本文结束了，相信大家对Android系统的开机启动过程应该有了一个感性的认识了。
</rich_text></node><node name="应用的安装过程" prog_lang="custom-colors" readonly="False" tags="" unique_id="129"><rich_text scale="h2">前言</rich_text><rich_text>
我 们知道，在android手机上安装一个apk很简单，只要打开apk文件，默认就会弹出安装界面，然后点击确定，经过若干秒后，apk就安装成功了，可 是你知道apk的安装过程是什么吗？你知道android系统在安装一个apk的时候都干了什么吗？在本文中，将一一解答这个问题。
    简单来说，apk的安 装过程分两步：
        第一步，将apk文件复制到程序目录下（/data/app/）；
        第二步，为应用创建数据目录（/data/data/&lt;package  name&gt;/）、提取dex文件到指定目录（/data/dalvik-cache/）、修改系统包管理信息。
        注意，本文的分析基于Android  4.3源码。

</rich_text><rich_text scale="h2">apk的复制过程</rich_text><rich_text>
    apk的安装从PackageManager的installApk方法开始，由于PackageManager所对应的binder服务为 PackageManagerService（PMS），所以，真正的安装过程都在PackageManagerService中完成。 PackageManagerService的installApk方法最终调用了installPackageWithVerificationAndEncryption方法，该方法的核心就是在最后发送了一个INIT_COPY的 消息，这个消息的含义是完成apk的拷贝过程。
1. public void installPackageWithVerificationAndEncryption(Uri packageURI,  
2.         IPackageInstallObserver observer, int flags, String installerPackageName,  
3.         VerificationParams verificationParams, ContainerEncryptionParams encryptionParams) {  
4.     mContext.enforceCallingOrSelfPermission(android.Manifest.permission.INSTALL_PACKAGES,  
5.             null);  
6.   
7.     final int uid = Binder.getCallingUid();  
8.     if (isUserRestricted(UserHandle.getUserId(uid), UserManager.DISALLOW_INSTALL_APPS)) {  
9.         try {  
10.             observer.packageInstalled(&quot;&quot;, PackageManager.INSTALL_FAILED_USER_RESTRICTED);  
11.         } catch (RemoteException re) {  
12.         }  
13.         return;  
14.     }  
15.   
16.     UserHandle user;  
17.     if ((flags&amp;PackageManager.INSTALL_ALL_USERS) != 0) {  
18.         user = UserHandle.ALL;  
19.     } else {  
20.         user = new UserHandle(UserHandle.getUserId(uid));  
21.     }  
22.   
23.     final int filteredFlags;  
24.   
25.     if (uid == Process.SHELL_UID || uid == 0) {  
26.         if (DEBUG_INSTALL) {  
27.             Slog.v(TAG, &quot;Install from ADB&quot;);  
28.         }  
29.         filteredFlags = flags | PackageManager.INSTALL_FROM_ADB;  
30.     } else {  
31.         filteredFlags = flags &amp; ~PackageManager.INSTALL_FROM_ADB;  
32.     }  
33.   
34.     verificationParams.setInstallerUid(uid);  
35.   
36.     final Message msg = mHandler.obtainMessage(INIT_COPY);  
37.     msg.obj = new InstallParams(packageURI, observer, filteredFlags, installerPackageName,  
38.             verificationParams, encryptionParams, user);  
39.     mHandler.sendMessage(msg);  
40. }  
    </rich_text><rich_text foreground="#000000">通过分析代码可以发现，真正实现apk拷贝的方法是InstallParams的handleStartCopy方法，InstallParams中有重试机制，拷贝如果失败的话会重试，最多重试4次。在拷贝之前，还必须做一件事情，那就是绑定media container  service，安装过程中一些状态的检查会用到这个服务，代码如下所示：</rich_text><rich_text>
1. class PackageHandler extends Handler {  
2.     private boolean mBound = false;  
3.     final ArrayList&lt;HandlerParams&gt; mPendingInstalls =  
4.         new ArrayList&lt;HandlerParams&gt;();  
5.   
6.     private boolean connectToService() {  
7.         if (DEBUG_SD_INSTALL) Log.i(TAG, &quot;Trying to bind to&quot; +  
8.                 &quot; DefaultContainerService&quot;);  
9.         Intent service = new Intent().setComponent(DEFAULT_CONTAINER_COMPONENT);  
10.         Process.setThreadPriority(Process.THREAD_PRIORITY_DEFAULT);  
11.         if (mContext.bindServiceAsUser(service, mDefContainerConn,  
12.                 Context.BIND_AUTO_CREATE, UserHandle.OWNER)) {  
13.             Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);  
14.             mBound = true;  
15.             return true;  
16.         }  
17.         Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);  
18.         return false;  
19.     }  
20.     ...  
21. }  
现在分析一下InstallParams的handleStartCopy方法，这个方法很长，代码就不帖出来了，大家可以自己去看看，这里主要分析下它的工作流程：
1. 检查安装位置标记位是否有冲突，如果有冲突，则安装失败，这里的有冲突是指“一个apk同时要求被安装到内部存储和sd卡”
2. 调用MCS服务的getMinimalPackageInfo方法来得到apk的推荐安装位置，并检查是否能够进行正常的安装。在这一步，有可能抛出一些无法安装的状态位：存储空间不足、程序已经安装、无效的apk文件等，这个时候安装过程终止
3. 到这一步，表示程序可以正常安装，同时MCS服务服务可能会根据需要调整安装位置，在InstallParams的installLocationPolicy中完成
4. 文件的复制过程，PMS针对内部存储和sd卡分别提供了一个类：FileInstallArgs和AsecInstallArgs，并分别调用二者的copyApk方法来完成apk的复制过程
经过了上面4步，待安装apk已经被复制到了/data/app/目录了。

</rich_text><rich_text scale="h2">apk的解析过程</rich_text><rich_text>
    上面，apk已经被复制到了/data/app/目录，安装的第一步已经完成，那么系统是什么时候对apk进行dex提取和解析的呢，这还要从PMS说起， 在PMS内部有一个AppDirObserver类，顾名思义，它的作用是应用目录观察者，它时刻观察着应用目录/data/app/，当目录内部结构改 变的时候（创建文件和删除文件）它会做出相应行为，下面看下它的代码：
1. private final class AppDirObserver extends FileObserver {  
2.     public AppDirObserver(String path, int mask, boolean isrom) {  
3.         super(path, mask);  
4.         mRootDir = path;  
5.         mIsRom = isrom;  
6.     }  
7.     //在/data/app/目录下添加或删除apk的时候，此方法会被调用  
8.     public void onEvent(int event, String path) {  
9.         String removedPackage = null;  
10.         int removedAppId = -1;  
11.         int[] removedUsers = null;  
12.         String addedPackage = null;  
13.         int addedAppId = -1;  
14.         int[] addedUsers = null;  
15.   
16.         // TODO post a message to the handler to obtain serial ordering  
17.         synchronized (mInstallLock) {  
18.             String fullPathStr = null;  
19.             File fullPath = null;  
20.             if (path != null) {  
21.                 fullPath = new File(mRootDir, path);  
22.                 fullPathStr = fullPath.getPath();  
23.             }  
24.   
25.             if (DEBUG_APP_DIR_OBSERVER)  
26.                 Log.v(TAG, &quot;File &quot; + fullPathStr + &quot; changed: &quot; + Integer.toHexString(event));  
27.   
28.             if (!isPackageFilename(path)) {  
29.                 if (DEBUG_APP_DIR_OBSERVER)  
30.                     Log.v(TAG, &quot;Ignoring change of non-package file: &quot; + fullPathStr);  
31.                 return;  
32.             }  
33.   
34.             // Ignore packages that are being installed or  
35.             // have just been installed.  
36.             if (ignoreCodePath(fullPathStr)) {  
37.                 return;  
38.             }  
39.             PackageParser.Package p = null;  
40.             PackageSetting ps = null;  
41.             // reader  
42.             synchronized (mPackages) {  
43.                 p = mAppDirs.get(fullPathStr);  
44.                 if (p != null) {  
45.                     ps = mSettings.mPackages.get(p.applicationInfo.packageName);  
46.                     if (ps != null) {  
47.                         removedUsers = ps.queryInstalledUsers(sUserManager.getUserIds(), true);  
48.                     } else {  
49.                         removedUsers = sUserManager.getUserIds();  
50.                     }  
51.                 }  
52.                 addedUsers = sUserManager.getUserIds();  
53.             }  
54.             //当apk被删除的时候，往往意味着这个apk被卸载  
55.             if ((event&amp;REMOVE_EVENTS) != 0) {  
56.                 if (ps != null) {  
57.                     if (DEBUG_REMOVE) Slog.d(TAG, &quot;Package disappeared: &quot; + ps);  
58.                     //removePackageLI方法完成卸载apk的主要功能  
59.                     removePackageLI(ps, true);  
60.                     removedPackage = ps.name;  
61.                     removedAppId = ps.appId;  
62.                 }  
63.             }  
64.               
65.             //新添加了一个apk，往往意味着一个新的apk被安装  
66.             if ((event&amp;ADD_EVENTS) != 0) {  
67.                 if (p == null) {  
68.                     if (DEBUG_INSTALL) Slog.d(TAG, &quot;New file appeared: &quot; + fullPath);  
69.                     //scanPackageLI方法完成了apk安装的第二个步骤  
70.                     p = scanPackageLI(fullPath,  
71.                             (mIsRom ? PackageParser.PARSE_IS_SYSTEM  
72.                                     | PackageParser.PARSE_IS_SYSTEM_DIR: 0) |  
73.                             PackageParser.PARSE_CHATTY |  
74.                             PackageParser.PARSE_MUST_BE_APK,  
75.                             SCAN_MONITOR | SCAN_NO_PATHS | SCAN_UPDATE_TIME,  
76.                             System.currentTimeMillis(), UserHandle.ALL);  
77.                     if (p != null) {  
78.                         /* 
79.                          * TODO this seems dangerous as the package may have 
80.                          * changed since we last acquired the mPackages 
81.                          * lock. 
82.                          */  
83.                         // writer  
84.                         synchronized (mPackages) {  
85.                             updatePermissionsLPw(p.packageName, p,  
86.                                     p.permissions.size() &gt; 0 ? UPDATE_PERMISSIONS_ALL : 0);  
87.                         }  
88.                         addedPackage = p.applicationInfo.packageName;  
89.                         addedAppId = UserHandle.getAppId(p.applicationInfo.uid);  
90.                     }  
91.                 }  
92.             }  
93.   
94.             // reader  
95.             synchronized (mPackages) {  
96.                 mSettings.writeLPr();  
97.             }  
98.         }  
99.   
100.         //下面两个if语句块大家应用不陌生吧，在我们的应用中想监听应用的安装和卸载，  
101.         //就是通过收听ACTION_PACKAGE_ADDED和ACTION_PACKAGE_REMOVED这两个广播来实现的  
102.         if (removedPackage != null) {  
103.             Bundle extras = new Bundle(1);  
104.             extras.putInt(Intent.EXTRA_UID, removedAppId);  
105.             extras.putBoolean(Intent.EXTRA_DATA_REMOVED, false);  
106.             sendPackageBroadcast(Intent.ACTION_PACKAGE_REMOVED, removedPackage,  
107.                     extras, null, null, removedUsers);  
108.         }  
109.         if (addedPackage != null) {  
110.             Bundle extras = new Bundle(1);  
111.             extras.putInt(Intent.EXTRA_UID, addedAppId);  
112.             sendPackageBroadcast(Intent.ACTION_PACKAGE_ADDED, addedPackage,  
113.                     extras, null, null, addedUsers);  
114.         }  
115.     }  
116.   
117.     private final String mRootDir;  
118.     private final boolean mIsRom;  
119. }  
    下面，我们主要分析一下scanPackageLI方法，还是仅仅分析，不帖代码，因为代码太长了，帖出来没法看了，这个方法不仅仅是完成apk包的扫描， 还解析AndroidManifest.xml文件并提取出所有的intent-filter和permission信息，apk安装的主要功能都由它来 完成的，当apk包扫描完成后，系统会调用updatePermissionsLPw方法更新系统所具有的权限。
scanPackageLI方法有两个，其第一个参数分别接受File和PackageParser.Package类型，第一个方法会从File中提取出package信息然后再调用第二个方法，下面分析第二个scanPackageLI方法，其完成的事情如下：
1. 如果包名是android，则会做一些特殊处理，这个包名为android的应用是系统内部应用的，其他应用的包名如果叫android则安装会有问题，大家可以试一下
2. 解析常见的use-feature、shared-userId、use-library标签并保存到成员变量中
3. 进行签名验证，对应的方法是verifySignaturesLP，验证失败则应用无法安装
4. 创建应用程序目录/data/data/包名，同时将apk中提取出dex文件并保存到/data/dalvik-cache，把apk当做zip解压就能得到dex文件
5. 解析AndroidManifest.xml文件，提取出所需信息，包括具有intent-filter的四大组件信息（Activity、Service、BroadcastReceiver、ContentProvider）和声明的系统权限等
    到 此为止，scanPackageLI方法结束了。而updatePermissionsLPw的作用是对系统中所有的权限进行更新，大家可以查看下 /system/etc/permissons目录，下面定义了android系统中所有的权限，开发中最常用的权限定义在目录下的 platform.xml里面，大家可以打开看看，可以看到常见的访问网络、读写外部存储等权限等都是在这里定义的。权限更新完毕以后，系统就会发送 ACTION_PACKAGE_ADDED广播，告知所有应用有新应用安装了。另外，大家可以查看下data/system/目录，里面有两个文件 packages.list和packages.xml，在packages.list里面放的是手机上安装的所有应用列表，而packages.xml 中存放的是所有应用的设置应用，比如一个应用声明了哪些系统权限就定义在这里面。关于应用的卸载，我们可以想到是应用安装过程的逆过程，大致要做的是：停 止应用、删除各种文件，更新系统设置、权限等，大家感兴趣自己看一下，完全是安装过程的逆过程，这里不介绍了。
</rich_text></node></node><node name="camera driver" prog_lang="custom-colors" readonly="False" tags="" unique_id="15"><rich_text>
</rich_text><rich_text scale="h3">1  手机摄像头功能概述</rich_text><rich_text>
    手机摄像头功能由多个功能模块组成，主要三个部分，采集，加工，显示。
    （1）采集部分由感光的sensor完成，通过CAM IF接口与手机芯片内的CAM连接。
    （2）CAM对CAM IF数据进行加工，主要是格式转换，特殊效果等。最终处理出来的一帧数据，存在内存中。
    （3） 手机的刷新线程，使用手机内部的DMA功能，或者OVERLAY技术，把处理好的camera图像，显示到LCD上。刷新部分，不在camera框架范围内，后面只做简单讨论。
    图1：Camera典型硬件模块图

</rich_text><rich_text scale="h3">2  Sensor简介</rich_text><rich_text>
    Sensor是对图像的采集系统，通常采用的是ov系列的芯片。如ov2655等。通常包含两路接口：
    （1）控制总线：Sensor也是一个智能嵌入式系统，一般通过I2C总线与手机芯片通信。手机可以通过I2C读写Sensor的寄存器，改变Sensor的参数，从而改变其工作方式。
    （2）数据总线：Sensor通过CAM IF接口与CAM联系。
     
    图2：sensor硬件连接图
     
    由图可知，sensor工作的条件需要：
    （1）电压供应，一般模拟电压，数字电压。
    （2）工作时钟，通常为24M HZ的正弦波。一般为手机芯片产生
    （3）SDA,SCL，i2c总线连接，sensor通常为从设备。
    （4）standby控制线，手机芯片通过这条GPIO控制线，控制sensor的工作是否开启。
    （5）Sensor输出给手机芯片的接口，CAM IF接口：
    （6）并行数据线，通常8位，10位。分辨率高的sensor数据线需要更多。
    （7）提供给手机芯片内集成的camera模块的PCLK,HCLK,VCLK.(像素同步信号，行同步信号，帧同步信号)。
    Sensor通常产出稳定频率的数据图像流，手机芯片可以通过I2C总线接口，修改寄存器，改变帧频率。也可以改变sensor的输出流的格式，通常采用yuv422格式。

</rich_text><rich_text scale="h3">3  CAM简介</rich_text><rich_text>
    CAM就是将Sensor采集过来的数据，转换相应格式，及其他加工，最后存放到内存中。CAM核心就是个DSP。这个阶段，dsp可以做很多图像处理的事情。比如颜色纠正，自动对焦，scaler等。不同平台会有不同。
    由于Sensor的核心也是dsp，对于这些特效工作，一般Sensor中也会提供。
    高通平台的Sensor的特效（反色）就可以在Sensor中设置。
    由图可知
    CAM consists ofthe following elements:
    • Image Signal Processing (ISP)1
    • Color Processing
    • Image effects
    • Luminance / Chrominance Splitter (Y/C Split)
    • Resize (Down/Up-Scalers)
    • JPEG Encoder
    • YCbCr to RGB conversion for preview
    • Memory Interface
    • Control Unit
    具体详解，可见ste6715 datesheet。
    这些模块看似很复杂，对于我们开发者来说，也不复杂。我们知道它们相应的流程，并且知道每个子模块提供了什么功能。这些模块的功能可以通过相应模块的寄存器进行相应调整的]。这同sensor的参数调整的思想是一样的。硬件提供功能，通过寄存器进行参数调整。
     
    Camera的native层软件接口，在Camera在native层中，提供了/dev/video*的设备节点。Native层通过打开设备 文件，关联上camera，申请一串帧缓冲区，建立循环队列，并把这些内存地址传给内核的camera模块，并等待内核camera的处理结束。 Camera模块一帧处理结束，native层就会返回。 

</rich_text><rich_text scale="h3">4  LCD显示</rich_text><rich_text>
    LCD的显示，就是将lcd的framebuffer的数据映射到LCD屏上，而我们camera的数据要在屏幕上显示，就只需建立camera帧 buffer到framebuffer的映射关系。可以使用内核的DMA，也可以使用overlay。通常的preview过程都是在native层以上 开个线程，waiting kernel的处理完成，然后push到lcd屏上，如此循环。
    （1）软件设计思想


</rich_text><rich_text scale="h3">5  V4l2驱动框架：</rich_text><rich_text>
    关联文件：V4l2-dev.c(src\linux\kernel\linux\drivers\media\video)
    Videodev2.h(src\linux\kernel\linux\include\linux) Cam-core分析
    V4l2.c（src/linux/modules/v4l2cam）
    V4L2是linux的标准接口，提供了众多的标准IOCTL接口，这样不管内核驱动如何改变，风格各异，都可以让应用程序native程序稳定工作。IOCTL接口标准定义于Videodev2.h，这个文件也会被android系统所引用。
    V4L2层的意义在于：让平台的驱动，通过char字符设备层能够与应用关联起来。首先对v4l2.c和v4l2-dev.c两个文件的内容做个简单介绍：
    （1）V4l2.c文件主要工作：在模块加载的时候，调用v4l2_init()函数，该函数完成camera_sensor的获取和对 video_device设备的创建，初始化和注册。实际上完成一个video_device设备驱动，最重要的是v4l2_ioctrl()函数的实 现，根据android的HAL层传下来的操作类型调用不同的控制函数，而这些控制函数通过调用cameraa_sensor和camIF接口来实现。
    （2）V4l2-dev.c文件的主要工作：完成一个字符设备驱动，并实现了video_device注册的工作。字符设备驱动中的主要工作是通过调用video_device设备驱动来完成的。
        这里请注意：camera驱动分为三个部分，最后生成cam.ko，v4l2cam.ko和sensor.ko三个模块，v4l2cam.ko依赖于cam.ko和sensor.ko模块，因此，v4l2cam.ko后于cam.ko和sensor.ko模块加载。
    下面来分析v4l2框架的工作流程。
    （1）v4l2-dev.c
    v4l2-dev.c文件中初始化函数申请了v4l2的字符设备号，但是并没有注册和关联具体驱动。
    static int __init videodev_init(void){  
        dev_t dev =MKDEV(VIDEO_MAJOR, 0);  
        int ret;
        ……  
        ret =register_chrdev_region(dev, VIDEO_NUM_DEVICES, VIDEO_NAME);  //申请一组设备号
        ……  
        ret =class_register(&amp;video_class);              //注册一个类设备
    } 
    提供了2个函数供其他具体驱动进行注册
    video_register_device_index（）;
    video_register_device（）;
    int video_register_device_index(struct video_device *vdev, int type,int nr,                              
            int index){
            ……  
            vdev-&gt;cdev= cdev_alloc();  
            if (vdev-&gt;cdev == NULL) {         
                ret =-ENOMEM;         
                gotocleanup;  
            }  
            
            if (vdev-&gt;fops-&gt;unlocked_ioctl)         
                vdev-&gt;cdev-&gt;ops= &amp;v4l2_unlocked_fops;  
            else         
                vdev-&gt;cdev-&gt;ops= &amp;v4l2_fops;
                  
            vdev-&gt;cdev-&gt;owner= vdev-&gt;fops-&gt;owner;  
            ret = cdev_add(vdev-&gt;cdev,MKDEV(VIDEO_MAJOR, vdev-&gt;minor), 1);  //注册一个字符设备
            ……
            memset(&amp;vdev-&gt;dev, 0, sizeof(vdev-&gt;dev));  
            /* The memsetabove cleared the device's drvdata, so     
            put back the copy we made earlier. */  
            video_set_drvdata(vdev,priv);  
            vdev-&gt;dev.class= &amp;video_class;  
            vdev-&gt;dev.devt= MKDEV(VIDEO_MAJOR, vdev-&gt;minor);  
            if (vdev-&gt;parent)         
                vdev-&gt;dev.parent= vdev-&gt;parent;  
            dev_set_name(&amp;vdev-&gt;dev,&quot;%s%d&quot;, name_base, vdev-&gt;num);  
            ret = device_register(&amp;vdev-&gt;dev);  //注册video_deice设备，将其添加到sysfs文件系统
            ……
            mutex_lock(&amp;videodev_lock);  
            video_device[vdev-&gt;minor] = vdev;   //本地管理的一个video_device数组  
            mutex_unlock(&amp;videodev_lock);
            ……
    }
    该文件中核心对象为：static struct video_device *video_device[VIDEO_NUM_DEVICES];
    设备文件就是根据index与相应的video_device[index]指针关联。
    在videodev_init()初始化函数中，申请了一组设备号，并注册了一个类 video_class，在注册视频设备时，首先注册了一个字符设备，然后用相同的设备号注册了一个设备节点。这里的字符设备是让平台的驱动通过char 字符设备层能够与应用关联起来，V4l2框架核心文件为v4l2-dev.c。  
    v4l2-dev.c文件的核心对象为：static struct video_device  *video_device[VIDEO_NUM_DEVICES]，它维护每个注册了的video_device设备，设备文件就是根据index与相 应的video_device[index]指针关联。所以，这个文件的主要工作就是：字符设备的驱动内容。
字符设备驱动最后还是调用video_device的fops来实现的，这个fops就是v4l2.c中的cam_fops结构体，不过它只实现了 打开，关闭，映射和io控制四个函数。这里要注意的是：在注册video_device前是通过config_a_device（）来初始化 video_device的fops的成员的。
 
（2）V4l2.c：
    文件中重要的数据对象：
    struct acq_device_t {       
        structvideo_device *vfd;           //视频设备对象指针
        
        #define NAME_LENGTH 16    
        char name[NAME_LENGTH];       
        
        ……        
        
        structacq_session_cxt_t *streaming;              //打开camera的一个上下文
               
        video_frame_t *stream_vdf[V4L2_MAX_VDF];       
        
        /* Hardware dependant parts */       
        
        /* The Camera object plugged to our CAMIF*/       
        
        structcamera_sensor *camera;        //sensor对象指针  
             
        /* specific to sensor */       
        void *camera_priv_data;       
        ……
    }; 
    
    struct acq_session_cxt_t {   //代表一个打开的camera设备       
        structacq_device_t *dev;      
         /* handle to control session of CAM hardware bloc */       
         void *camhdl;       
         /* data pool handle (framemem) */       
         void *pool_hdl;       
         /* jpeg buffers */
      #ifdef CONFIG_V4L2CAM_PMEM       
         memblock_t blocks[V4L2_MAX_BUF];
      #else       
         struct v4l2_buffer bufs[V4L2_MAX_BUF];
      #endif       
      /* CameraPixfmt defines the size andpixel format of the sensor. */       
      struct v4l2_pix_format CameraPixfmt;       
      /* CamPixfmt defines the size and pixelformat at the output of CAM bloc */       
      struct v4l2_pix_format CamPixfmt;      
      /* CamPixfmt defines the size and pixelformat of thumbnail at the output of CAM bloc*/       
      struct v4l2_pix_format CamThumbfmt;       
      /* video frame use to preview session */       
      video_frame_t *cur_vdf;       
      video_frame_t *next_vdf;      
      int count;
  }; 
  
    V4l2cam驱动模块的初始化函数流程如下：
    int v4l2_init(void){
        ……  
        while (1) {         
            dev =kzalloc(sizeof(struct acq_device_t), GFP_KERNEL);         
            dev-&gt;camera = v4l2_detect(dev);             //检测并获得camera_sensor设备         
            /* openthe cam bloc interface */         
            cam_open(&amp;hdl);         
            /* wegot a camera plugged ! */         
            /*initialiseprivate fields of the sensor, for cmos coprocessor we try to find the cameraplugged to it */         
            dev-&gt;camera_priv_data= dev-&gt;camera-&gt;init();          
            /*close the cam bloc interface */         
            cam_close(hdl);         
            dev-&gt;vfd = video_device_alloc();              //为video_device分配内存         
            if (config_a_device(dev)) {                //初始化video_device设备结构，包括fops成员                
                unconfig_a_device(dev);                
                ret= -ENODEV;                
                gotobail;         
            }          
            
            if (video_register_device(dev-&gt;vfd,VFL_TYPE_GRABBER, dev-&gt;vfd-&gt;minor) != 0) {                                //注册video_device设备                
                CRITICAL(&quot;Couldn'tregister video driver.&quot;);                
                unconfig_a_device(dev);                
                ret= -ENODEV;                
                gotobail;         
             }         
             
             dev-&gt;is_registered= 1;         
             dev-&gt;preview_running= FALSE;         
             dev-&gt;snapshot_running= FALSE;         
             dev-&gt;snapshot_done= FALSE;          
             /* initcompletion */         
             init_completion(&amp;dev-&gt;complete);          
             video_set_drvdata(dev-&gt;vfd, dev);
          }
     }
     该函数中出现一个config_a_device(dev)函数，这个函数是video_device设备的初始化配置函数，包括对文件操作指针的赋值，这里是一个初始化封装。
    先来看看v4l2_detect()函数：
    structcamera_sensor *v4l2_detect(structacq_device_t *dev){       
        struct camera_sensor **Cams = NULL;       
        struct camera_sensor *cam = NULL;       
        void *hdl = 0;      
        int i = 0;       
        
        PROLOG(&quot;&quot;);        
        dev-&gt;camera = NULL;       
        
        cam_open(&amp;hdl);        
        Cams= sensor_get_cameras();         //获取camera_sensor数组       
        if (Cams) {              
            while (Cams[i] != NULL) {                     
                cam = Cams[i];                     
                if (!cam-&gt;isProbed) {                            
                    cam-&gt;isProbed =1;                            
                    if (cam-&gt;detect() == 0) {            //创建和初始化camera_sensor就在这里，这是sensor驱动部分的内容，后面会有详细的介绍                                   
                        goto detect_exit;                            
                    }                     
                }                     
                
                i++;              
            }                   
        }       
        dev-&gt;camera = NULL;       
        cam = NULL;      
         
    detect_exit:       
        cam_close(hdl);       
        EPILOG(&quot;&quot;);       
        return cam;
    }
    该函数中调用了cam-&gt;detect()函数，这个函数在camera的sensor部分被实现，后面会有详细说明，下面看看如何注册 video_device设备的，video_register_device（）函数，该函数代码在前面已经列出，这里简单描述：
    intvideo_register_device(struct video_device *vdev, int type, int nr){       
        return __video_register_device(vdev,type, nr, 1);
    }
     
    static int __video_register_device(struct video_device *vdev, int type, int nr,              
            int warn_if_nr_in_use){       
            
            ……       
            
            ret= cdev_add(vdev-&gt;cdev, MKDEV(VIDEO_MAJOR, vdev-&gt;minor), 1);       
            
            ……       
            
            ret= device_register(&amp;vdev-&gt;dev);       
            
            ……       
            
            video_device[vdev-&gt;minor]= vdev;       
            
            ……
    }
    该文件中核心对象为：static struct video_device *video_device[VIDEO_NUM_DEVICES];设备文件就是根据index与相应的video_device[index]指针关联。
    由驱动框架我们了解到，平台驱动就是初始化video_device结构，然后注册到V4L2框架中。

在V4l2框架中有几个重要内容有必要提出来：
（1）capture_callback（）
     void capture_callback(void *userdata){ 
        struct acq_session_cxt_t*acq_cxt = (struct acq_session_cxt_t *)userdata; 
        struct acq_device_t *dev; 
        
        BUG_ON(!acq_cxt); 
        dev = acq_cxt-&gt;dev; BUG_ON(!dev); 
        dev-&gt;it_frame_nb++;  
        if (dev-&gt;wait_end_of_frame) {         
            dev-&gt;wait_end_of_frame= 0;        
            complete(&amp;dev-&gt;complete); 
        } else {        
            if(dev-&gt;wait_first_frame) {               
                dev-&gt;wait_first_frame= 0;               
                complete(&amp;dev-&gt;complete);        
            } 
        }
    }
    这是一个回调函数，当一帧数据完成时候，中断函数会响应，从而callback函数也会被调用，唤醒comple等待的函数。此callback函数通过cam_streaming_start函数，注册到底层cam驱动中，下面是启动camera数据流的函数。
    static inline int v4l2_stream_on(structacq_device_t *dev, struct acq_session_cxt_t *acq_cxt, void *arg) {
        
        ……
        
        cam_streaming_start(acq_cxt-&gt;camhdl,                         
            acq_cxt-&gt;cur_vdf, (void*)capture_callback, (void *)data_loss_callback, (void *)acq_cxt);
         
         ……
    } 

（2）v4l2_do_ioct（）
      static long v4l2_do_ioctl(struct file *file, unsigned intcmd, void *arg)；此函数相当庞大，在此不列出了，就是IOCTL的实现函数，每个命令都会有个处理函数，也在此文件中。
      
（3）v4l2_mmap（）
    static int v4l2_mmap(struct file *file, structvm_area_struct *vma)；此函数把内核的cam数据映射到用户空间，用户空间可以读取。

（4）v4l2_open（）
    static int v4l2_open(struct file *file)
    此函数就是创建一次与具体sensor的连接，重要的是创建了acq_session_cxt_t上下文对象。但此时cam的采集转换工作并没有启 动。启动工作是通过ioctl在v4l2_do_ioctl调用v4l2_stream_on函数启动的，就是刚才的那个设置回调函数的函数。
    这里的核心对象为：struct acq_device_t *devices[] = { NULL, NULL, NULL, NULL,  NULL,NULL, NULL, NULL }；每个 acq_device_t  标识唯一camera设备，而acq_session_cxt_t标识一次打开的上下文。
    V4L2平台驱动，调用了2个子模块驱动：Sensor驱动和cam模块驱动，使两者协调工作，从而组成个完成的摄像头工作模块。不过这里要注意的是，v4l2.c 指出同一时间只能打开一次，不能重复打开。

</rich_text><rich_text scale="h3">6  Sensor驱动部分：</rich_text><rich_text>
（一）sensor的核心部分
    Sensor-core驱动很简单。此文件维护一个camera_sensor数组，以供v4l2.c使用。它还实现了关联sensor对象的i2c驱动句柄对象（camera_serial_bus类型）。
    初始化函数流程：
    int sensor_init(void) {
        /* +LMSqc15648 Update i2c mechanism to avoid static registering in kernel */
        #ifdef CONFIG_I2C_NEW_PROBE  
            struct i2c_board_info board_info = {         
                type :&quot;i2ccamera&quot;,         
                addr :0x30  
            };    
            
            struct i2c_adapter* i2c_adap=NULL;  
            PROLOG(&quot;&quot;);     
            i2c_adap = i2c_get_adapter(1);            //获取一号总线适配器    
            if ( i2c_adap==NULL ) {       
                CRITICAL(&quot;Can't get i2cadapter&quot;);    
            } else {          
                i2c_new_device(i2c_adap, &amp;board_info);  //创建一个新i2c设备}
        #endif
        /* -LMSqc15648 Update i2c mechanism to avoid static registering in kernel */  
        EPILOG(&quot;&quot;);  
        return 0;
   }       
   
   这个函数主要是根据borad_info创建了一个i2c_client设备，这在后面的i2c_init（）函数被调用时会匹配到该设备。
    文件中有一个camera_sensor数组，用来保存每个sensor实例：
        struct camera_sensor *Cams[] = {       
            &amp;camera_gc2015,       
            NULL
         };
         
    获取sensor数组的重要函数：
    structcamera_sensor **sensor_get_cameras() {
        return Cams;
    }       
    
    该文件的主要工作还是实现了一个camera_serial_bus结构对象camera_sbus_i2c，它是sensor同i2c总线通信的实现。
    struct camera_serial_bus camera_sbus_i2c = {
        /* +LMSqc11271'probe' is not working in device driver. */
        #ifdef CONFIG_I2C_NEW_PROBE      
            client:NULL,
        #endif
        /* -LMSqc11271'probe' is not working in device driver. */      
        init:i2c_init,      
        cleanup:i2c_cleanup,      
        set_devid:i2c_set_devid,      
        read:i2c_read,      
        write:i2c_write,      
        read:i2c_read,      
        read8:i2c_read8,      
        write8:i2c_write8,
   }; 
    
（二）sensor部分
       Sensor驱动部分的内容就是：根据sensor的datesheet填写出camera_sensor数据结构的函数实现，并创建个 camera_sensor对象，此对象会被sensor-core引用，下面以gc2015为例。
       Gc2015的驱动代码实现文件为gc2015.c，该文件中定义了一个camera_sensor对象：
    struct camera_sensor camera_gc2015 = {     
        name:&quot;gc2015&quot;,     
        detect:gc2015_detect,     
        isProbed:0,     
        clock:24,     
        yuvOrder:INPUT_SEQ_CbYCrY,//INPUT_SEQ_CrYCbY,     
        hsyncPol:INPUT_POL_VSYNC_HIGH,//INPUT_POL_VSYNC_HIGH,//INPUT_POL_VSYNC_LOW,     
        vsyncPol:INPUT_POL_HSYNC_LOW,//INPUT_POL_HSYNC_HIGH,//INPUT_POL_HSYNC_LOW,      
        sampleEdge:INPUT_SAMPLE_EDGE_POS,     
        fullrange:false,     
        init:gc2015_init,     
        cleanup:gc2015_cleanup,     
        open:gc2015_open,     
        close:gc2015_close,     
        enum_pixformat:gc2015_enum_pixformat,     
        try_format:gc2015_try_format,     
        set_format:gc2015_set_format,     
        stop_sensor:gc2015_stop_sensor,     
        start_sensor:gc2015_start_sensor,     
        query_control:gc2015_query_control,     
        get_control:gc2015_get_control,     
        set_control:gc2015_set_control,     
        
        ……     
        
        query_wb_mode:gc2015_query_wb_mode,     
        get_wb_mode:gc2015_get_wb_mode,     
        set_wb_mode:gc2015_set_wb_mode,     
        check_frame:gc2015_check_frame,     
        check_short_circuit:NULL,
    }; 
    
    这个文件的主要内容就是实现这些初始化函数，其中最为重要的是gc2015_detect（）函数，前文有介绍过，在v4l2框架里面的v4l2.c文件 的v4l2_init()函数中调用v4l2_detect()函数，它既是调用的这个gc2015_detect（）函数完成对 camera_sensor的检测和初始化的，下面来看看这个函数的具体实现。
    static int gc2015_detect(void) {       
        extern struct camera_serial_bus camera_sbus_i2c;       
        structcamera_serial_bus *sbus;          
        
        u6_gpio_write_pin(GC2015_GPIO_PD,GC2015_GPIO_PD_OFF);       
        msleep(100);        
        /*set the output camera clock (camclko) */       
        gc2015_set_Mclk(camera_gc2015.clock);           
        msleep(200);   
        printk(&quot;gc2015_detect\n&quot;);       
        
        if((rc = sbus-&gt;init())) {              //该函数调用注册一个i2c驱动              
            CRITICAL(&quot;Couldn'taccess I2c part ofcamera&quot;);              
            gotoerror;       
        }           
        
        sbus-&gt;set_devid(CAM_GC2015_I2C_ID);              //重新设定sensor设备的i2c地址        
        if ((rc = gc2015_write_reglist(gc2015_init_global)))              
            gotoerror;   
                    
        /*DeviceID*/       
        if((rc = gc2015_read_reg(0x00, &amp;pidh)))              
            gotoerror;       
            
        if((rc = gc2015_read_reg(0x01, &amp;pidl)))              
            gotoerror;    
              
    error:           
        sbus-&gt;cleanup();           
        /*activate the power down mode */       
        u6_gpio_write_pin(GC2015_GPIO_PD,GC2015_GPIO_PD_ON);        
        gc2015_unset_Mclk();        
        
        ……
        
    }       
     
    这个函数调用了sensor-core.c中的i2c关联对象的初始化函数，然后调用set_devid()函数设置sensor的硬件地址。
    static int i2c_init(void){       
        int err = 0;
        /* +LMSqc11271 'probe' is not working indevice driver. */
     #ifdef CONFIG_I2C_NEW_PROBE       
        structi2c_client *cam_i2c_client = NULL;
     #endif
     /* -LMSqc11271 'probe' is not working indevice driver. */       
     
        PROLOG(&quot;&quot;);        
        err = i2c_add_driver(&amp;i2c_driver);   //注册一个i2c驱动       
        if (err)              
            CRITICAL(&quot;Failedto add Camera I2Cdriver&quot;);
        /* +LMSqc11271 'probe' is not working indevice driver. */
     #ifdef CONFIG_I2C_NEW_PROBE       
        cam_i2c_client = camera_sbus_i2c.client;
     #endif
        /* -LMSqc11271 'probe' is not working indevice driver. */              
        if (cam_i2c_client ==NULL) {              
            i2c_del_driver(&amp;i2c_driver);              
            err= -ENODEV;       
        }        
        
        EPILOG(&quot;&quot;);       
        
        return err;
    }       
    
    注册一个i2c驱动，这册过程伴随着设备与驱动的匹配过程，当匹配成功后就调用相应的probe（）函数。
    static int sensor_i2c_probe(struct i2c_client *new_client, const struct i2c_device_id *id) {       
        PROLOG(&quot;&quot;);       
        
        i2c_set_clientdata(new_client, &amp;camera_sbus_i2c);       
        
        camera_sbus_i2c.client = new_client;       
        
        EPILOG(&quot;&quot;);       
        
        return 0;
        
    }       

    至此，sensor设备已准备好，v4l2框架便可访问sensor设备了。
     

</rich_text><rich_text scale="h3">7  Cam驱动部分：</rich_text><rich_text>
    涉及的文件：Cam-core.c (src\linux\modules\cam)
    Cam-lib.c (src\linux\modules\cam) 
    此驱动就是cam寄存器的函数封装，以及时钟信号的开关。本文件中的最重要数据cam_interface结构如下：
    struct cam_interface cam = {
        camPwr:NULL,     
        camClk:NULL,     
        jpegClk:NULL,     
        IsInit:0,     
        open_counter:0,      
        whendone_cb:NULL,      
        onerror_cb:NULL,      
        data_cb:NULL,     
        vdf:NULL,     
        wait_encode:0,     
        wait_header_generation:0,     
        wait_data_transfert:0,     
        wait_vsync:0,     
        preview_hdl:0,     
        zoom:1000,     
        brightness:CAM_BRIGHT_DFT,     
        saturation:CAM_SAT_DFT,     
        contrast:CAM_CONTRAST_DFT,     
        efx:NO_EFX,     
        previewRunning:FALSE,     
        immediateUpdate:FALSE,
    }       
    
    该模块的初始化函数：
    int cam_init(void) {       
        PROLOG(&quot;&quot;);        
        /* Reserve I/O addresses */       
        if (!request_mem_region(CAM_IF_START,CAM_IF_SIZE, &quot;CAM_IF&quot;)) {                   
            CRITICAL(&quot;request_mem_regionfailed&quot;);              
            return -EBUSY;       
        }        
        
        if (!cam.IsInit) {    /* do it one time */               
            /* Get the CAM &amp; CAMJPEGclocks */              
            cam.camClk = clk_get(0, &quot;CAM&quot;);              
            if (IS_ERR(cam.camClk)) {                     
                CRITICAL(&quot;Failed !(Could not get the CAM clock)&quot;);                     
                return -ENXIO;              
            }               
            
            cam.jpegClk = clk_get(0,&quot;CAMJPE&quot;);              
            if (IS_ERR(cam.jpegClk)) {                     
                CRITICAL(&quot;Failed !(Could not get the CAMJPEG clock)&quot;);                     
                return -ENXIO;              
            }               
            /* Get the CAMpower */              
            cam.camPwr = pwr_get(NULL, &quot;CAM&quot;);              
            if (IS_ERR(cam.camPwr)) {                     
                CRITICAL(&quot;Failed !(Could not get the CAM power)&quot;);                     
                return -ENXIO;              
             }              
             ……       
         }        
         
         EPILOG(&quot;&quot;);       
         
         return 0;
     }
     
     该函数就是对cam成员进行初始化，如申请内存，获取时钟和电源等。下面是驱动中重要的函数：
 
（1）cam模块的启动函数
    int cam_streaming_start(void *hdl,video_frame_t * frame, void *whendone_cb, void *onerror_cb, void *data_cb)
    在这里面（前面有说过）上层v4l2.c中的callback函数就是通过cam_streaming_start函数，注册到底层cam驱动中，当一帧数据完成时候，中断函数会响应，从而callback函数也会被调用，唤醒comple等待的函数。
 
（2）切换到下一帧
    void cam_update_stream_path(void *hdl,video_frame_t * frame)
 
（3）中断函数（cam_lib.c文件中定义）
    irqreturn_t cam_int_irq(int irq, void *client_data) {  
        u32isp_itstat, mem_itstat;   
        
        isp_itstat = cam_isp_isr_regs-&gt;cam_isp_mis;  
        mem_itstat =cam_mem_isr_regs-&gt;cam_mem_mis;  
        cam_jpe_regs-&gt;cam_jpe_status_mis; 
        
        ……   
        
        /***************** Memory interrupts ***********************/
        else if (mem_itstat &amp; CAM_IMSC_SP_FRAME_END) {                
            PDEBUG(&quot;SP_FRAME_END,%lx&quot;, jiffies);                
            cam_int_clear(0,CAM_IMSC_SP_FRAME_END, 0);                
            /*call of whendonecallback */                
            if (cam.whendone_cb != NULL) {                       
                if (isp_itstat &amp; CAM_IMSC_V_START) {                              
                    PTRACE(&quot;corruptedframe&quot;);                       
                } else {
                    ……                              
                    /*call user whendone */                              
                    cam.whendone_cb(cam.data_cb);                       
                    
                }                
             }         
          }  
       } 
       
       ……
    
    }
    所有cam模块内部的中断，都是此函数，红色标注部分为一帧数据到来，并最终调用到平台驱动的capture_callback（）。
</rich_text></node><node name="android启动流程" prog_lang="custom-colors" readonly="False" tags="" unique_id="1"><rich_text>
</rich_text><node name="bootloader" prog_lang="custom-colors" readonly="False" tags="" unique_id="2"><rich_text>摘要：本文讲解Android系统在启动过程中的关键动作，摈弃特定平台之间的差异，讨论共性的部分，至于启动更加详细的过程，需要结合代码分析，这里给出流程框架，旨在让大家对开机过程更明了。
 
关键词：U-boot、Linux、Android
 
目录：
       第一部分：Bootloader启动
一、Bootloader的定义和种类
二、Arm特定平台的Bootloader
三、U-boot启动流程分析
 
       第二部分：Linux启动
一、zImage是怎样炼成的？
二、linux的c启动阶段
 
       第三部分：Android启动
一、init进程
二、init启动的各种服务
              三、android启动图示
              
       对于Android整个启动过程来说，基本可以划分成三个阶段：Bootloader引导、Linux kernel启动、Android启动。下面分别对每个阶段一一展开讨论。
 
第一部分：Bootloader启动
一、             Bootloader的定义和种类
简单地说，BootLoader是在操作系统运行之前运行的一段程序，它可以将系统的软硬件
环境带到一个合适状态，为运行操作系统做好准备。这样描述是比较抽象的，但是它的任务确实不多，终极目标就是把OS拉起来运行。
 
在嵌入式系统世界里存在各种各样的Bootloader，种类划分也有多种方式。除了按照处
理器体系结构不同划分以外，还有功能复杂程度的不同。
先区分一下Bootloader和</rich_text><rich_text link="webs http://blog.csdn.net/lizhiguo0532/article/details/7017503#_msocom_1">Monitor[l1] </rich_text><rich_text>： 严格来说，Bootloader只是引导OS运行起来的代
码；而Monitor另外还提供了很多的命令行接口，可以进行调试、读写内存、烧写Flash、配置环境变量等。在开发过程中Monitor提供了 很好地调试功能，不过在开发结束之后，可以完全将其设置成一个Bootloader。所以习惯上将其叫做Bootloader。
 
 
</rich_text><rich_text justification="left"></rich_text><rich_text>

       更多bootloader还有：ROLO、Etherboot、ARMboot 、LinuxBIOS等。
       
       对于每种体系结构，都有一系列开放源码Bootloader可以选用:
       X86：X86的工作站和服务器上一般使用LILO和GRUB。
       ARM：最早有为ARM720处理器开发板所做的固件，又有了armboot，StrongARM平
台的blob，还有S3C2410处理器开发板上的vivi等。现在armboot已经并入了U-Boot，所以U-Boot也支持ARM/XSCALE平台。U-Boot已经成为ARM平台事实上的标准Bootloader。
       PowerPC：最早使用于ppcboot，不过现在大多数直接使用U-boot。
       MIPS：最早都是MIPS开发商自己写的bootloader，不过现在U-boot也支持MIPS架构。
       M68K：Redboot能够支持m68k系列的系统。
       
二、             Arm特定平台的bootloader
到目前为止，我们公司已经做过多个Arm平台的android方案，包括：marvell(pxa935)、
informax(im9815)、mediatek(mt6516/6517)、broadcom(bcm2157)。由于不同处理器芯片厂商对 arm  core的封装差异比较大，所以不同的arm处理器，对于上电引导都是由特定处理器芯片厂商自己开发的程序，这个上电引导程序通常比较简单，会初始化硬 件，提供下载模式等，然后才会加载通常的bootloader。
下面是几个arm平台的bootloader方案：
marvell(pxa935) :                bootROM + </rich_text><rich_text link="webs http://blog.csdn.net/lizhiguo0532/article/details/7017503#_msocom_4">OBM [l4] </rich_text><rich_text>+ BLOB
informax(im9815) :             bootROM + barbox + U-boot
mediatek(mt6516/6517) :     bootROM + </rich_text><rich_text link="webs http://blog.csdn.net/lizhiguo0532/article/details/7017503#_msocom_5">pre-loader[l5]</rich_text><rich_text>  + U-boot
broadcom(bcm2157) :          bootROM + boot1/boot2 + U-boot
 
为了明确U-boot之前的两个loader的作用，下面以broadcom平台为例，看下在上电之
后到U-boot的流程，如图1.2.1：
</rich_text><rich_text justification="left"></rich_text><rich_text>
                                          图1.2.1 broadcom平台上电流程
 
 
三、             U-boot启动流程分析
最常用的bootloader还是U-boot，可以引导多种操作系统，支持多种架构的CPU。它支持的操作系统有：Linux、NetBSD、 VxWorks、QNX、RTEMS、ARTOS、LynxOS等，支持的CPU架构有：ARM、PowerPC、MISP、X86、NIOS、 Xscale等。
 
手机系统不像其他的嵌入式系统，它还需要在启动的过程中关心CP的启动，这个时候就涉及到CP的image和唤醒时刻，而一般的嵌入式系统的uboot只负责引导OS内核。所以这里我们也暂不关心CP的启动，而主要关心AP侧。
从上面第二小节中可以看出，bootloader通常都包含有处理器厂商开发的上电引导程序，不过也不是所有的处理都是这样，比如三星的 S3C24X0系列，它的bootROM直接跳到U-boot中执行，首先由bootROM将U-boot的前4KB拷贝到处理器ISRAM，接着在U- boot的前4KB中必须保证要完成的两项主要工作：初始化DDR，nand和nand控制器，接着将U-boot剩余的code拷贝到SDRAM中，然 后跳到SDRAM的对应地址上去继续跑U-boot。
所以</rich_text><rich_text link="webs http://blog.csdn.net/lizhiguo0532/article/details/7017503#_msocom_6">U-boot[l6] </rich_text><rich_text>的启动过程，大致上可以分成两个阶段：第一阶段，汇编代码；第二阶段，c代码。
       
3.1 第一阶段
       U-boot的第一条指令从cpu/arm920t/start.S文件开始，第一阶段主要做了如下事情：
       
       1. 设置CPU进入SVC模式(系统管理模式)，cpsr[4:0]=0xd3。
       2. 关中断，INTMSK=0xFFFFFFFF, INTSUBMSK=0x3FF。
       3. 关看门狗，WTCON=0x0。
4. 调用s3c2410_cache_flush_all函数，使TLBS，I、D Cache，WB中数据失效。
5. 时钟设置CLKDIVN=0x3 , FCLK:HCLK:PCLK = 1:2:4。
6. 读取mp15的c1寄存器，将最高两位改成11，表示选择了异步时钟模型。
7. 检查系统的复位状态，以确定是不是从睡眠唤醒。
8.  ldr r0,_TEXT_BASE
    adr r1,_start
    cmp r0,r1
    blne cpu_init_crit
    根据这几条语句来判断系统是从nand启动的还是直接将程序下载到SDRAM中运行
的，这里涉及到</rich_text><rich_text link="webs http://blog.csdn.net/lizhiguo0532/article/details/7017503#_msocom_7">运行时域[l7] </rich_text><rich_text>和 位置无关代码的概念，ldr  r0,_TEXT_BASE的作用是将board/nextdvr2410/config.mk文件中定义的TEXT_BASE值 （0x33f80000）装载到r0中，adr  r1,_start该指令是条伪指令，在编译的时候会被转换成ADD或SUB指令根据当前pc值计算出_start标号的地址，这样的话就可以知道当前程 序在什么地址运行（位置无关代码：做成程序的所有指令都是相对寻址的指令，包括跳转指令等，这样代码就可以不在链接所指定的地址上运行）。在上电之后，系 统从nand启动，这里得到r0和r1值是不一样的，r0=0x33f80000，而r1=0x00000000。所以接下来会执行 cpu_init_crit函数。
 
9. cpu_init_crit函数，主要完成了两个工作：首先使ICache and Dcache，TLBs中早期内容失效，再设置p15  control register c1，关闭MMU，Dcache，但是打开了Icache和Fault  checking，（要求mmu和Dcache是必须要关闭的，而Icache可以打开可以关闭）；其次调用/board/nextdvr2410 /memsetup.S文件中的memsetup函数来建立对SDRAM的访问时序。
 
10. Relocate函数，加载nand flash中的uboot到SDRAM中，代码会加载到0x33f80000开始的地址，空间大小是512。
1). ndf2ram函数
a.  设置NFCONF，使能2410的nand 控制器，初始化ECC，disable chip等
b.  enable chip，复位chip，读nand状态，判断是否busy，空闲的话再次disable chip；
c.  为调用c函数准备堆栈空间，这里的堆栈是放在uboot代码在SDRAM空间的最后位置armboot_end开始的128KB地址处（包含3 words for abort-stack，实际的SP位置是128*1024-12B处）。
d.  调用c函数copy_uboot_to_ram():nandll_reset()  设置NFCONF（新增设置了时间参数，其余设置和前面一样），复位nand  flash；nandll_read_blocks(),传递了3个参数给它，0x33f80000,0x0,  9*NAND_BLOCK_SIZE.这里在读的过程中检查每个块的坏块标志，如果是坏块，则跳过不读。详情不叙，请看uboot的注释。该部分的c代码 在cpu/arm920t/Nand_cp.c文件中
e.  ok_nand_read函数：读取SDRAM的前4k内容和SRAM的4K内容进行比较，只要出现不一样的地方就会进入死循环状态，目的就是为了确保转移代码的正确性。
f.  跳回到调用ndf2ram函数处继续执行

2). ldr pc, _start_armboot
    _start_armboot: .word start_armboot
    这里将会进入第二阶段的c代码部分：start_armboot()函数，/lib_arm/board.c。
 
3.2 第二阶段
    第二阶段从文件/lib_arm/board.c的start_armboot()函数开始。
    
1.     定义一个struct global_data结构体指针gd，struct global_data结构体对象gd_data，
    定义一个struct bd_info结构体对象bd_data，
    定义一个指向函数的二级指针init_fnc_ptr，
    定义的全局结构体对象都是放在堆栈中的,gd是放在寄存器中的。
2.     gd=&amp;gd_data，gd-&gt;bd = &amp;bd_data，并且全部空间清0。
3.     init_fnc_ptr = init_sequence(一个初始化函数指针数组)。将会在接下来的for循环中提取出每一个函数来依次执行完。
init_fnc_t *init_sequence[] = {
    cpu_init,       /* 基本的处理器相关配置 -- cpu/arm920t/cpu.c */
    board_init,         
/* 基本的板级相关配置 -- board/nextdvr2410/nextdvr2410.c */
    interrupt_init,/* 初始化中断处理 -- cpu/arm920t/interrupt.c */
    env_init,       /* 初始化环境变量 -- common/env_flash.c */
    init_baudrate,  /* 初始化波特率设置 -- lib_arm/board.c */
    serial_init,    /* 串口通讯设置 -- cpu/arm920t/serial.c */
    console_init_f,/* 控制台初始化阶段1 -- common/console.c */
    display_banner,/* 打印u-boot信息 -- lib_arm/board.c */
    dram_init,  /* 配置可用的RAM -- board/nextdvr2410/nextdvr2410.c */
    display_dram_config,/* 显示RAM的配置大小 -- lib_arm/board.c */
#if defined(CONFIG_VCMA9)
         checkboard,     /* display board info */
#endif
    NULL,
};

cpu_init：根据需要设定IRQ，FIR堆栈。如果使用中断的话，中断堆栈就接在后面。 
board_init：设置LOCKTIME，配置MPLL，UPLL，配置IO  ports，设置gd-&gt;bd-&gt;bi_arch_number（553），gd-&gt;bd-&gt;bi_boot_params =  0x30000100设置boot参数地址，使能Icache和Dcache。
interrupt_init：使用timer 4来作为系统clock， 即时钟滴答， 10ms一次，到点就产生一个中断，但由于此时中断还没打开所以这个中断不会响应。
env_init：该函数主要做关于环境变量的工作，这个环境变量可以不用存放在nor或者nand  flash上，直接在内存中生成(default_environment)。不过对于那些掉电需要保存的参数来说，保存在flash上无疑是最可靠的方 式。有的uboot还支持冗余存储，也就是存两份做备份。
        在env初始化的时候，是通过env_init—&gt;nandll_read_blocks将位于nand第9块上的环境变量（16K）全部读入到0x33ef0000这个起始地址中来，在接下来将堆空间分配好之后，在函数env_relocate中，通过 在堆中获得一块区域来存放环境变量，env_ptr指向这块区域，接下来所谓的重新获得环境变量无非就是将原来0x33ef0000开始的16K数据拷贝 到env_ptr所指的区域中去。这里分第一次uboot启动（泛指只要在第一次运行saveenv指令之前所启动的uboot过程）和保存过环境变量的 情况，但实质是一样的，所不同的是，第一次uboot启动，nand第9块区域中的数据肯定不是什么环境变量，所以这是的crc校验肯定出错，所以这时系 统使用了默认的环境变量，但是只要这个默认的环境变量没有写到nand中(运行saveenv)的话，uboot的每次启动都被认为是第一次启动。而保存 过环境变量之后的话，在执行env_init的时候，就是从nand中读出了实际存在的环境变量参数，至于修不修改环境变量，保不保存，都没有上面的那种 情况出现了。
 
    init_baudrate：第一次启动uboot的时候，采用nextdvr2410nand.h中定义的115200默认波特率，后面的启动如果说在参数里设置了新的波特率的话就会用新的波特率来初始化。    
    display_banner：打印uboot的一些信息，版本信息：NC-Boot 1.5 日期-时间 ，coed范围，bss开始地址，IRQ、FIR堆栈地址。
    dram_init: gd-&gt;bd-&gt;bi_dram[0].start = PHYS_SDRAM_1;
    
    gd-&gt;bd-&gt;bi_dram[0].size  = PHYS_SDRAM_1_SIZE;设置板级数据中
    的SDRAM开始地址和大小
    display_dram_config：打印SDRAM的配置信息，如下：
                    …
    RAM Configuration:
    Bank#0: 30000000 64 MB
    …
    Checkboard: NULL
 
4.     配置可用的flash空间，并且打印出相关信息，flash_init()和display_flash_config()。
 
5.     mem_malloc_init()函数,分配堆空间
    CFG_MALLOC_LEN = 16K(CFG_ENV_SIZE)+128K
    mem_malloc_start = _armboot_start(0x33f80000)- CFG_MALLOC_LEN
    mem_malloc_end = _armboot_start(0x33f80000)
 
6.     env_relocate该函数的作用是将0x33ef0000开始16K的环境参数拷贝到堆空间中去。
 
7.    gd-&gt;bd-&gt;bi_ip_addr = getenv_IPaddr  (&quot;ipaddr&quot;)通过这中方式获得环境变量列表中的ipaddr参数（开发板ip），获得环境变量中的MAC地址，设置到 gd-&gt;bd-&gt;bi_enetaddr[reg]中。
8.     devices_init函数，创建了devlist，但是只有一个串口设备注册在内。
9.     console_init_r函数：控制台完全初始化，此后可以使用函数serial_getc和serial_putc或者putc和getc来输出log。
 
10.  使能中断，如果有网卡设备，设置网卡MAC和IP地址。
 
11.  main_loop ()；定义于common/main.c。到此所有的初始化工作已经完成，main_loop在标准输入设备中接受命令，然后分析，查找和执行。
去掉所有无关紧要的宏和代码，main_loop()函数如下：
void main_loop()
{
    static char lastcommand[CFG_CBSIZE] = { 0, };
    int len;
    int rc = 1;
    int flag;
    char *s;
    int bootdelay;
 
    s = getenv (&quot;bootdelay&quot;);   //自动启动内核等待延时
    bootdelay = 
        s ? (int)simple_strtol(s, NULL, 10) : CONFIG_BOOTDELAY;
     
    s = getenv (&quot;bootcmd&quot;);  //取得环境中设置的启动命令行    
    if (bootdelay &gt;= 0 &amp;&amp; s &amp;&amp; !abortboot (bootdelay)){
        run_command (s, 0);
        //执行启动命令行,smdk2410.h中没有定义CONFIG_BOOTCOMMAND，所以没有命令执行。
    }
    
    for (;;) {
        len = readline(CFG_PROMPT);
        //读取键入的命令行到console_buffer
         
         flag = 0;       /* assume no special flags for now */
         if (len &gt; 0)
             strcpy (lastcommand, console_buffer);
            //拷贝命令行到lastcommand.
         else if (len == 0)
             flag |= CMD_FLAG_REPEAT;
             if (len == -1)
             puts (&quot;\n&quot;);
         else
             rc = run_command (lastcommand, flag);　//执行这个命令行。
   
     if (rc &lt;= 0) {
      /* invalid command or not repeatable, forget it */
      lastcommand[0] = 0;
    }
}
12.  在上面的main_loop函数中，通常在开发完成的阶段都会设置一个bootcmd的环境
变量，然后将延时bootdelay设置成0，这样当u-boot跑到这里的时候就不会因为用户按下了任意键就进入了命令行模式，可以直接运行 bootcmd的命令来直接加载kernel的Image然后移交控制权。如果进入了命令行模式，我们也可以手动输入命令来启动系统，输入的命令也是基本 和bootcmd一样。
 
不过值得一提的是，从这里开始到引导内核的函数do_bootimg_linux()之前，不同
厂商之间做的都和原始的U-boot代码差别挺大，不过万变不离其宗，都是加载各种各样的Image到SDRAM中，不过关于CP部分的Image 有的厂商是在这里加载，有的是kernel起来后来有kernel来加载，不过都需要加载的Image就是linux  kernel的Image。为了方便，只讨论加载kernel Image的情况。
    
    在继续往下之前，有必要提一下几种不同格式linux kernel编译之后所产生的镜像文件,包括其各种头和ramdisk的混合，容易让人迷糊。
    ramdisk是linux内核启动过程中需要使用的一种临时文件系统，它要么单独编译成ramdisk.img(也有叫initrd或者initramfs)，要么编译进内核。
     Linux编译之后最终会产生zImage文件，不过呢，为了迎合U-boot的要求，所以也有专门为U-boot的引导做一个uImage，这个只是加 了一个U-boot中定义的一个head而已，用于U-boot中检查，当然前面的ramdisk.img也是需要加这个头的，头里面有这个Image的 魔数，大小，类型等信息。现在的android中的u-boot也有要求加头的，他对U-boot进行了改进和优化，做成了自己的一套检查机制，所以现在 android编译出来linux部分的Image的名字叫boot.img。
    这个boot.img是zImage和ramdisk.img合成之后的，而且还加了专门的头，这个head和U-boot原始的不一样，具体的源码路径可以参考：system/core/mkbootimg/。
/*
** +-----------------+ 
** | boot header     | 1 page
** +-----------------+
** | kernel          | n pages  
** +-----------------+
** | ramdisk         | m pages  
** +-----------------+
** | second stage    | o pages
** +-----------------+
**
** n = (kernel_size + page_size - 1) / page_size
** m = (ramdisk_size + page_size - 1) / page_size
** o = (second_size + page_size - 1) / page_size
*/
Android就没有在ramdisk和zImage上单独重复加头了，不过近期做的mtk的平台，他们有点怪，除了上面的额外信息之外，还在这二者上单独加了标志字符串,ROOTFS和KERNEL。    
     了解了上面这些内容之后，对于从nand上加载uImage或者boot.img，都需要经过分离head进行检查，ok之后才会真正地将数据导入 SDRAM。另外别忘了的是，如果ramdisk.img是单独的，那么在加载linux  kernel的镜像的时候也需要将其加载进SDRAM，如果是编译到内核了，那就不用了。
    
    通常我们的uboot起来之后，我们会运行下面的命令之一来启动内核
tftp 0x30800000 uImage;bootm (地址可选)
或者
nand read 0x30800000 0x40000 0x200000 ; bootm
    
    例如informax的平台u-boot的bootcmd是：
    #define BOOTCMD 
&quot;mcu_clk 260;a7vector_SDRAM;dsp_clk 130;nand read 0x46000000 0x200000 0x400000;boot_from_flash boot&quot;
很明显，原始U-boot中没有boot_from_flash命令，是经过他们改造过的。不过功能基本一样。所以还是以bootm来引导uImage为例来讨论。
 
        bootm命令位于cmd_bootm.c文件中:
        U_BOOT_CMD(
            bootm,  CFG_MAXARGS,    1,  do_bootm,
            &quot;bootm   - boot application image from memory\n&quot;,
            &quot;[addr [arg ...]]\n    - boot application image stored in memory\n&quot;
            &quot;        passing arguments 'arg ...'; when booting a Linux kernel,\n&quot;
            &quot;        'arg' can be the address of an initrd image\n&quot;
);

在将nand上0x40000开始的2MB数据拷贝到SDRAM的0x30800000之后，就开始执行bootm命令，其所做的工作大致如下： 
12.1如果bootm命令没有带地址参数，将会采用默认地址0x30800000，带地址则保存下这个参数地址。
12.2 从SDRAM的0x30800000开始拷贝64字节到一个head结构体中进行crc32校验，校验ok之后将会调用调用函数print_image_hdr()打印出如下信息：
    Image Name:   Linux-2.6.8-rc2-nc-v1
    Created:      2010-05-04   4:14:19 UTC
    Image Type:   ARM Linux Kernel Image (uncompressed)
    Data Size:    1054712 Bytes =  1 MB
    Load Address: 30008000
    Entry Point:  30008000
 
12.3 跳过64字节的head，开始校验kernel的Image数据，校验码ok之后会打印：Verifying Checksum ... OK

12.4 核对cpu类型

12.5 检查Image的类型
 
12.6  禁止中断，检查内核的压缩类型，这里不是指的image和zImage的区别，而是有没有在这基础上进行ZIP或ZIP2的压缩。通常这里是没有这样的压缩的。所以接下来将0x30800000+64B开始的zImage数据搬运到ih_load（0x30008000）处，这个数据就是kernel的 Image数据。
 
12.7 根据head中OS的类型，如果是linux，head中类型值就是IH_OS_LINUX，所以接下来会执行u-boot到kernel的过渡程序。
do_bootm_linux (cmdtp, flag, argc, argv, addr, len_ptr, verify);
 
12.8定义thekernel函数指针，获取bootargs参数给commandline指针。
12.9 theKernel = (void (*)(int, int, uint))ntohl(hdr-&gt;ih_ep)，将内核的入口地址赋给thekernel函数指针。
12.10将传递给内核的参数放在0x30000100处，以tag的方式存放，主要放置了memory和cmdline的参数。
12.11关中断，关闭IDCache,同时使ID Cache数据失效。
12.12再次获取bi_arch_number参数为553。
12.13 theKernel (0, bd-&gt;bi_arch_number, bd-&gt;bi_boot_params)进入内核，第一个参数必须为0，第二个参数为机器类型553，第三个参数为传递给内核参数的其实地址0x30000100。
 
总结下，U-Boot调用内核之前，下面的条件必须满足：
a.  R0=0,R1为机器类型ID，参考linux/arch/arm/tools/mach-types,R2为启动参数tag列表在RAM中的基地址。
b.  CPU的工作模式必须为SVC模式,必须禁止中断（IRQS和FIRS）。
c.  数据cache和MMU必须关闭，指令cache可以打开也可以关闭。
 
这里移交控制权之后，u-boot的使命就算是完成了。说起来U-boot命运挺悲惨的，因为它重要而却最不受内核待见。接下来内核的启动更加复杂。
 </rich_text><table char_offset="862" col_max="400" col_min="40"><row><cell>Bootloader
</cell><cell>Monitor?
</cell><cell>描述
</cell><cell>X86
</cell><cell>ARM
</cell><cell>PowerPC
</cell></row><row><cell>U-boot
</cell><cell>是
</cell><cell>通用引导程序
</cell><cell>是
</cell><cell>是
</cell><cell>是
</cell></row><row><cell>RedBoot[l2] 
</cell><cell>是
</cell><cell>基于eCos的引导程序
</cell><cell>是
</cell><cell>是
</cell><cell>是
</cell></row><row><cell>BLOB[l3] 
</cell><cell>否
</cell><cell>(StrongARM构架)LART(主板)等硬件平台的引导程序
</cell><cell>否
</cell><cell>是
</cell><cell>否
</cell></row><row><cell>LILO
</cell><cell>否
</cell><cell>Linux磁盘引导程序
</cell><cell>是
</cell><cell>否
</cell><cell>否
</cell></row><row><cell>GRUB
</cell><cell>否
</cell><cell>GNU的LILO替代程序
</cell><cell>是
</cell><cell>否
</cell><cell>否
</cell></row><row><cell>Loadlin
</cell><cell>否
</cell><cell>从DOS引导Linux
</cell><cell>是
</cell><cell>否
</cell><cell>否
</cell></row><row><cell>Vivi
</cell><cell>是
</cell><cell>韩国mizi 公司开发的bootloader
</cell><cell>否
</cell><cell>是
</cell><cell>否
</cell></row><row><cell>点击这里</cell><cell>点击这里</cell><cell>点击这里</cell><cell>点击这里</cell><cell>点击这里</cell><cell>点击这里</cell></row></table><encoded_png char_offset="1920"></encoded_png></node><node name="linux启动" prog_lang="custom-colors" readonly="False" tags="" unique_id="3"><rich_text scale="h1">第二部分：linux启动 </rich_text><rich_text>
</rich_text><rich_text scale="h2">一、zImage是怎样炼成的？</rich_text><rich_text>
    zImage是linux内核编译之后产生的最终文件，它的生成过程比较复杂，这里不谈编译过程，只聊聊编译的最后阶段：
    1.  arm-linux-gnu-ld用arch/arm/kernel/vmlinux.lds、arch/arm/kernel/head.o、
    arch/arm/kernel/init_task.o、各子目录下的built-in.o、lib/lib.a  、arch/arm/lib/lib.a生成顶层目录下的vmlinux （根据arch/arm/kernel/vmlinux.lds来链接  0xc0008000）
 
    2. 生成system.map, 置于顶层目录之下。
    3. arm-linux-gnu-objcopy，去掉顶层vmlinux两个段-R .note -R .comment
的调试信息，减小映像文件的大小，此时大概3M多，生成arch/arm/boot/Image。
 
    4. gzip -f -9 &lt; arch/arm/boot/compressed/../Image &gt;  arch/arm/boot/compressed/piggy.gz，读入arch/arm/boot/Image的内容，以最大压缩比进行压缩，生成 arch/arm/boot/compressed/目录下的piggy.gz。
 
    5. arm-linux-gnu-gcc，在arch/arm/boot/compressed/piggy.S文件中是直接引入piggy.gz的内容 （piggy.gz其实已经是二进制数据了），然后生成arch/arm/boot/compressed/piggy.o文件。下面是piggy.S的 内容
    其中所选择的行就是加入了piggy.gz的内容，通过编译生成piggy.o文件，以备后面接下来的ld链接。
 
    6.  arm-linux-gnu-ld，在arch/arm/boot/compressed/piggy.o的基础上，加入重定位地址和参数地址的同时，加 入解压缩的代码（arch/arm/boot/compressed/head.o、misc.o）,
    最后生成arch/arm/boot /compressed目录的vmlinux，此时在解压缩代码中还含有调试信息（根据arch/arm/boot/compressed /vmlinux.lds来链接 0x0）vmlinux.lds开始处。
    注意到了27行的吗？*(.piggydata)就表示需要将piggydata这个段放在这个位置，而piggydata这个段放的是什么呢？往后翻翻，看看第五步的图片，呵呵，其实就是将按最大压缩比压缩之后的Image，
    压缩之后叫piggy.gz中的二进制数据。
 
    7. arm-linux-gnu-objcopy，去掉解压缩代码中的调试信息段，最后生成arch/arm/boot/目录下的zImage。
    
    8. /bin/sh 
    /home/farsight/Resources/kernel/linux-2.6.14/scripts/mkuboot.sh -A  arm -O linux -T kernel -C none -a 0x30008000 -e 0x30008000 -n  'Linux-2.6.14' -d arch/arm/boot/zImage arch/arm/boot/uImage
    调用mkimage在arch/arm/boot/zImage的基础上加入64字节的uImage头，和入口地址，装载地址， 最终生成arch/arm/boot/目录下的uImage文件。
        
    实际上zImage是经过了高压缩之后在和解压缩程序合并在一起生成的。知道了这些之后，我们就可以给linux的启动大致分成3段：zImage解压缩、kernel的汇编启动阶段、kernel的c启动阶段。
    前两个阶段因为都是汇编写成的，代码读起来晦涩难懂，内存分布复杂，涉及MMU、解压缩等众多知识。如果有对这部分感兴趣的，可以自行分析，遇到问题可以上网查资料或者找我，这里就不详细分析了。下面是第二阶段汇编启动的主线，可以了解下：
    1. 确定 processor type 
    2. 确定 machine type
    3. 手动创建页表  
    4. 调用平台特定的cpu setup函数,设置中断地址，刷新Cache，开启Cache 
                         (在struct proc_info_list中,in proc-arm920.S) 
    5. 开启mmu I、D cache ，设置cp15的控制寄存器，设置TTB寄存器为0x30004000
    6. 切换数据（根据需要赋值数据段，清bss段，保存processor ID 和 machine type 
        和 cp15的控制寄存器值）
    7. 最终跳转到start_kernel    
(在__switch_data的结束的时候,调用了 b start_kernel)
 
二、linux的c启动阶段
    经过解压缩和汇编启动两个阶段，将会进入init/Main.c中的start_kernel()函数去继续执行。(2.6.1x、2.6.2x和2.6.3x之间的差异比较大，下面的分析基于2.6.14)
    1. printk(linux_banner)打印内核的一些信息，版本，作者，编译器版本，日期等信息。
 
    2. 接下来执行是一个极其重要的函数setup_arch(),主要做一些板级初始化，cpu初始化，tag参数解析，u-boot传递的cmdline解析，建立mmu工作页表(memtable_init)，初始化内存布局， 调用 mmap_io建立GPIO,IRQ,MEMCTRL,UART，及其他外设的静态映射表，对时钟,定时器，uart进行初始化,  
    cpu_init(): {
        打印一些关于cpu的信息，比如cpu id，cache  大小等。
        另外重要的是设置了IRQ、ABT、UND三种模式的stack空间，分别都是12个字节。最后将系统切换到svc模式
    }。
 
    3. sched_init():初始化每个处理器的可运行队列，设置系统初始化进程即0号进程。
 
    4. 建立系统内存页区(zone)链表  build_all_zonelists()。
 
    5. printk(KERN_NOTICE &quot;Kernel command line: %s\n&quot;, saved_command_line);
    打印出从uboot传递过来的command_line字符串，在setup_arch函数中获得的。
 
    6.  parse_early_param()，这里分析的是系统能够辨别的一些早期参数（这个函数甚至可以去掉，__setup形式的参数），
    而且在分析的时候并不是以setup_arch(&amp;command_line)传出来的command_line为基础，而是以最原生态的 saved_command_line为基础的。
 
    7. parse_args(&quot;Booting kernel&quot;, command_line, __start___param,
                __stop___param - __start___param,
                &amp;unknown_bootoption);
    对于比较新的版本真正起作用的函数，与parse_early_param()相比，此处对解析列表的处理范围加大了，解析列表中除了包括系统以setup定义的启动参数，还包括模块中定义的param参数以及系统不能辨别的参数。
    __start___param是param参数的起始地址，在System.map文件中能看到
    __stop___param - __start___param是参数个数
    unknown_bootoption是对应与启动参数不是param的相应处理函数（查看parse_one()就知道怎么回事）。
 
    8. 在前面的setup_arch -&gt; paging_init -&gt; memtable_init函数中为系统创建页表的时候，中断向量表的虚地址init_maps,是用alloc_bootmem_low_pages分配的，
    ARM规定中断向量表的地址只能是0或0xFFFF0000，所以该函数里有部分代码的作用就是映射一个物理页到0或0xFFFF0000。
    trap_init函数做了以下的工作：
    把放在.Lcvectors处的系统8个意外入口跳转指令搬到高端中断向量0xffff0000处，再将__stubs_start到__stubs_end之间的各种意外初始化代码搬到0xffff0200处等。
 
    9. init_IRQ()
     初始化系统中所有的中断描述结构数组：irq_desc[NR_IRQS]。接着执行init_arch_irq函数，该函数是在setup_arch函 数最后初始化的一个全局函数指针，指向了smdk2410_init_irq函数（in  mach-smdk2410.c）,实际上是调用了   s3c24xx_init_irq函数。在该函数中，首先清除所有的中断未决标志，之后就初始化中断的 触发方式和屏蔽位，还有中断句柄初始化，这里不是最终用户的中断函数，而是do_level_IRQ或者do_edge_IRQ函数，在这两个函数中都使 用过__do_irq函数来找到真正最终驱动程序注册在系统中的中断处理函数。
 
    10. softirq_init():内核的软中断机制初始化函数。
 
    12.      console_init():
    初始化系统的控制台结构，该函数执行后调用printk函数将log_buf中所有符合打印级别的系统信息打印到控制台上。
 
    13. profile_init()函数
    /* 对系统剖析做相关初始化， 系统剖析用于系统调用*/
    //profile是用来对系统剖析的，在系统调试的时候有用
    //需要打开内核选项，并且在bootargs中有profile这一项才能开启这个功能/*
    profile只是内核的一个调试性能的工具，这个可以通过menuconfig中profiling support打开。
    
    14. vfs_caches_init()
    该函数主要完成的是文件系统相关的初始化，cache、inode等高速缓存的建立，在mnt_init()函数中有注册并初始化sysfs、rootfs文件系统，这里只是在内存中建立他们的架构，
    创建了超级块，并没有真正挂 载上去。关于这个rootfs需要说明的是，这个文件系统生命期更加短暂的，为什么？之前说的ramdisk大家是否还记得，ramdisk即将在后面释放到内存空间，
    来代替这里的rootfs出现在根目录之下，而这个rootfs则退居二线，隐藏在一个二级目录中。本来在非android的系统上，这个 ramdisk也是一个暂时的文件系统，
    之后也会被真正的yaffs2之类的文件系统替换。不过呢，在android上，这个ramdisk还是挂载在根 目录下的，只是将system、userdata等真实文件系统挂载了对应的二级目录下。
        
     关于这部分ramdisk内容，有兴趣的下来可以继续探讨。
        
    15.      mem_init():
    最后内存初始化，释放前边标志为保留的所有页面,这个函数结束之后就不能再使
    用alloc_bootmem(),alloc_bootmem_low(),alloc_bootmem_pages()等申请低端内存的函数来申请内存，也就不能申请大块的连续物理内存了。
    
    16.     中间还省略了很多内容，涉及到很多东西，这里也没有时间详细讨论，有兴趣的自
    己研究代码吧！下面直接跳到start_kernel()函数的最后的一个重要函数:rest_init()。
    
    17.     rest_init函数创建了两个线程之后，自己调用cpu_idle()函数隐退了。
    创建的第一个线程，习惯上我们将其叫做1号内核线程，第二个线程叫2号内核线程，因为创建它们的父进程叫0号启动进程。
    说明一下：2.6.14的内核这里只创建了一个内核线程叫init线程，而上面创建两
    个线程的内核版本至少都是2.6.2x了，所以为了后面能和android的启动接上，所以这里开始linux转到2.2.29去。
 
    static noinline void __init_refok rest_init(void) __releases(kernel_lock)
    {
        int pid;
         
        …
        kernel_thread(kernel_init, NULL, CLONE_FS | CLONE_SIGHAND);
        pid = kernel_thread(kthreadd, NULL, CLONE_FS | CLONE_FILES);
        kthreadd_task = find_task_by_pid_ns(pid, &amp;init_pid_ns);
        …
        cpu_idle();
    }
    kthreadd这个线程之前的部门交流会上讨论过，新版本的linux将线程创建这个艰巨的工作专门交给了这个叫kthreadd的线程来完成。
    接下来既然0号启动进程idle了，那么剩下的工作就都转移到线程kernel_init中去了。
 
    18. kernel_init()
    这个线程的任务还是比较艰巨的，第一个重要任务就是调用函数do_basic_setup()，先调用driver_init()来构建sysfs的目录架构，然后调用do_initcalls()函数来一次执行linux编译时设置的系统函数。
     这里主要工作就是注册系统设备的驱动程序，关于driver和device的注册顺序，是可以互相交换，
    例如 
        通常的三星平台都有一个struct machine_desc结构体来描述平台相关的启动代码：
        MACHINE_START(SMDK2410, &quot;SMDK2410&quot;) /* @TODO: request a new identifier and switch
                    * to SMDK2410 */
        /* Maintainer: Jonas Dietsche */
        .phys_io    = S3C2410_PA_UART,
        .io_pg_offst    = (((u32)S3C24XX_VA_UART) &gt;&gt; 18) &amp; 0xfffc,
        .boot_params    = S3C2410_SDRAM_PA + 0x100,
        .map_io     = smdk2410_map_io,
        .init_irq   = s3c24xx_init_irq,
        .init_machine   = smdk2410_init,
        .timer      = &amp;s3c24xx_timer,
        MACHINE_END
    所有devices的注册都是在smdk2410_init()函数中调用函数：
    platform_add_devices(smdk2410_devices, ARRAY_SIZE(smdk2410_devices));
    来完成，所以drivers的注册就放在后面了。不过这样注册是有一个坏处的，就是不能准确地控制driver代码中probe的执行先后顺序。
    现在mtk平台上的devices和drivers注册顺序想法，也就是先注册上drivers，然后再注册devices，这样的话，就可以控制probe函数的执行先后。
    
    include/linux/init.h文件中有这些优先级的定义：
    #define pure_initcall(fn)        __define_initcall(&quot;0&quot;,fn,0)
     
    #define core_initcall(fn)        __define_initcall(&quot;1&quot;,fn,1)
    #define core_initcall_sync(fn)       __define_initcall(&quot;1s&quot;,fn,1s)
    #define postcore_initcall(fn)        __define_initcall(&quot;2&quot;,fn,2)
    #define postcore_initcall_sync(fn)   __define_initcall(&quot;2s&quot;,fn,2s)
    #define arch_initcall(fn)        __define_initcall(&quot;3&quot;,fn,3)
    #define arch_initcall_sync(fn)       __define_initcall(&quot;3s&quot;,fn,3s)
    #define subsys_initcall(fn)      __define_initcall(&quot;4&quot;,fn,4)
    #define subsys_initcall_sync(fn) __define_initcall(&quot;4s&quot;,fn,4s)
    #define fs_initcall(fn)          __define_initcall(&quot;5&quot;,fn,5)
    #define fs_initcall_sync(fn)     __define_initcall(&quot;5s&quot;,fn,5s)
    #define rootfs_initcall(fn)      __define_initcall(&quot;rootfs&quot;,fn,rootfs)
    #define device_initcall(fn)      __define_initcall(&quot;6&quot;,fn,6)
    #define device_initcall_sync(fn) __define_initcall(&quot;6s&quot;,fn,6s)
    #define late_initcall(fn)        __define_initcall(&quot;7&quot;,fn,7)
    #define late_initcall_sync(fn)       __define_initcall(&quot;7s&quot;,fn,7s)
    当然函数的执行属性从1~7，通常我们见到的设备都是6、7级的。另外系统中所有的initcalll函数都是可以从linux根目录下的system.map中查看得到。
 
    接下来的一段代码就是来释放前面提到的ramdisk.img的：
    if (!ramdisk_execute_command)
         ramdisk_execute_command = &quot;/init&quot;;
     
    if (sys_access((const char __user *) ramdisk_execute_command, 0) != 0) {
         ramdisk_execute_command = NULL;
         prepare_namespace();
    }
    释放出来的ramdisk呈现出来的目录就是android编译出来之后，在out/…/root的目录一样了，这个目录下有一个init可执行程序，下面就准备启动它。
     
    接着调用init_post()函数，来打开console设备，这个时候我们的控制台就可以操作了，最后会执行以下代码来寻找和启动init程序：
    if (execute_command) {
         run_init_process(execute_command);
         printk(KERN_WARNING &quot;Failed to execute %s.  Attempting &quot;
                     &quot;defaults...\n&quot;, execute_command);
    }
    run_init_process(&quot;/sbin/init&quot;);
    run_init_process(&quot;/etc/init&quot;);
    run_init_process(&quot;/bin/init&quot;);
    run_init_process(&quot;/bin/sh&quot;);
     
    panic(&quot;No init found.  Try passing init= option to kernel.&quot;);
     
    这里执行的init程序需要我们在u-boot传给kernel的cmdline中使用init=/init
    来告知kernel，或者kernel启动代码中直接写死。否则在上面的那些目录中找不到init的话，系统就用panic机制将这个警告信息保存在nand的panic分区，在下次启动的时候，会自动将这个分区的信息输出。
     
    init进程是linux起来之后启动的第一个用户进程，android系统也就是在这个进
    程的基础上启动的。进程号是1。
</rich_text></node></node><node name="bus register" prog_lang="custom-colors" readonly="False" tags="" unique_id="4"><rich_text>    上面分析了kobject.kset,ktype.这三个结构联合起来一起构成了整个设备模型的基石.而bus.device.device_driver.则是基于kobject.kset.ktype之上的架构.
    在这里,总线,设备,驱动被有序的组和在一起.Bus.device.device_driver三者之间的关系如下图所示: 如上图所示.
      struct bus_type的p-&gt;drivers_kset(struct kset)指向注册在上面的驱动程序.它的p-&gt;device_kset(struct kset)上挂着注册在上面的设备.
    每次有一个新的设备注册到上面,都会去匹配右边的驱动,看是否能匹配上.如果匹配成功,则将设备结构的is_registerd域置为0.然后将设备添加到驱动的p-&gt;klist_devices域.
    同理,每注册一个驱动,都会去匹配左边的设备,.如果匹配成功,将则设备加到驱动的p-&gt;klist_devices域.再将设备的is_registerd置为0/这就是linux设备模型用来管理设备和驱动的基本架构. 我们来跟踪一下代码来看下详细的操作. 
    注册一个总线的接口为bus_register().我们照例分段分析: 
    int bus_register(struct bus_type *bus){     
        int retval;     struct bus_type_private *priv;     //分配存储空间
             
        priv = kzalloc(sizeof(struct bus_type_private), GFP_KERNEL);    
        if (!priv)         
            return -ENOMEM;      
            
        priv-&gt;bus = bus;     
        bus-&gt;p = priv;      
        BLOCKING_INIT_NOTIFIER_HEAD(&amp;priv-&gt;bus_notifier); 
             
        retval = kobject_set_name(&amp;priv-&gt;subsys.kobj, &quot;%s&quot;, bus-&gt;name);     
        if (retval)         
            goto out;      
            
        priv-&gt;subsys.kobj.kset = bus_kset;                          
        priv-&gt;subsys.kobj.ktype = &amp;bus_ktype;    
        priv-&gt;drivers_autoprobe = 1;      
        retval = kset_register(&amp;priv-&gt;subsys);     
        if (retval)         
            goto out;
            
     首先,先为struct bus_type的私有区分配空间,然后将其和struct bus_type关联起来.由于struct bus_type也要在sysfs文件中表示一个节点,因此,它也内嵌也一个kset的结构.这就是priv-&gt;subsys.
     首先,它为这个kset的名称赋值为bus的名称,然后将priv-&gt;subsys.kobj.kset指向bus_kset. priv-&gt;subsys.kobj.ktype指向bus_ktype;然后调用kset_reqister()将priv-&gt;subsys注册.这里涉及到的接口都在之前分析过.注册过后,应该会在bus_kset所表示的目录下创建一个总线名称的目录.并且用户空间的hotplug应该会检测到一个add事件.我们来看一下bus_kset到底指向的是什么:     
     bus_kset = kset_create_and_add(&quot;bus&quot;, &amp;bus_uevent_ops, NULL);
   从此可以看出.这个bus_kset在sysfs中的结点就是/sys/bus.在这里注册的struct bus_types就会在/sys/bus/下面出现.      
    retval = bus_create_file(bus, &amp;bus_attr_uevent);     
    if (retval)         
        goto bus_uevent_fail;
        
    bus_create_file()就是在priv-&gt;subsys.kobj的这个kobject上建立一个普通属性的文件.这个文件的属性对应在bus_attr_uevent.
   读写操作对应在priv-&gt;subsys.kobj.ktype中.我们到后面才统一分析bus注册时候的文件创建      
    priv-&gt;devices_kset = kset_create_and_add(&quot;devices&quot;, NULL, 
                                &amp;priv-&gt;subsys.kobj);     
    if (!priv-&gt;devices_kset) {         
        retval = -ENOMEM;         
        goto bus_devices_fail;     
    }
          
    priv-&gt;drivers_kset = kset_create_and_add(&quot;drivers&quot;, NULL, 
                                &amp;priv-&gt;subsys.kobj); 
    if (!priv-&gt;drivers_kset) {         
        retval = -ENOMEM;         
        goto bus_drivers_fail;     
    }
          
    klist_init(&amp;priv-&gt;klist_devices, klist_devices_get, klist_devices_put); 
    klist_init(&amp;priv-&gt;klist_drivers, NULL, NULL);
   这段代码会在bus所在的目录下建立两个目录,分别为devices和drivers.并初始化挂载设备和驱动的链表      
    retval = add_probe_files(bus);     
    if (retval)         
        goto bus_probe_files_fail;
        
    retval = bus_add_attrs(bus);     
    if (retval)         
        goto bus_attrs_fail;      
        
    pr_debug(&quot;bus: '%s': registered/n&quot;, bus-&gt;name);     
    
    return 0;
    
   在这里,会为bus_attr_drivers_probe, bus_attr_drivers_autoprobe.注册bus_type中的属性建立文件 
    bus_attrs_fail:     
        remove_probe_files(bus);
    bus_probe_files_fail:     
        kset_unregister(bus-&gt;p-&gt;drivers_kset);
    bus_drivers_fail:     
        kset_unregister(bus-&gt;p-&gt;devices_kset);
    bus_devices_fail:     
        bus_remove_file(bus, &amp;bus_attr_uevent);
    bus_uevent_fail:     
        kset_unregister(&amp;bus-&gt;p-&gt;subsys);     
        kfree(bus-&gt;p);
    out:     
    return retval;
}
    这段代码为出错处理; 
    struct kset *kset_create_and_add(const char *name,  struct kset_uevent_ops *uevent_ops, 
                                                             struct kobject *parent_kobj){     
        struct kset *kset;     
        int error;
             
     //创建一个kset     
        kset = kset_create(name, uevent_ops, parent_kobj);     
        if (!kset)         
            return NULL;
                 
      //注册kset     
        error = kset_register(kset);     
        if (error) {        
         //如果注册失败,释放kset         
            kfree(kset);         
            return NULL;     
        }     
        
        return kset;
        }
         
        kset_create()用来创建一个struct kset结构.代码如下:
        static struct kset *kset_create(const char *name,                   
                                    struct kset_uevent_ops *uevent_ops,                   
                                    struct kobject *parent_kobj) {     
                                    struct kset *kset;      
                                    
            kset = kzalloc(sizeof(*kset), GFP_KERNEL);     
            if (!kset)         
                return NULL;
                     
            kobject_set_name(&amp;kset-&gt;kobj, name);     
            kset-&gt;uevent_ops = uevent_ops;     
            kset-&gt;kobj.parent = parent_kobj;      
            kset-&gt;kobj.ktype = &amp;kset_ktype;     
            kset-&gt;kobj.kset = NULL;      
            return kset;
        }
        
     我们注意,在这里创建kset时.为其内嵌的kobject指定其struct kobj_type ktype结构为kset_ktype.这个结构的定义如下:
        static struct kobj_type kset_ktype = {     
                .sysfs_ops    = &amp;kobj_sysfs_ops,
                .release = kset_release,
        };
        
      属性文件的读写操作全部都包含在sysfs_ops成员里.kobj_sysfs_ops的定义如下:
      struct sysfs_ops kobj_sysfs_ops = {     
            .show    = kobj_attr_show,     
            .store   = kobj_attr_store,
     }; 
     
     创建好了kset之后,会调用kset_register().这个函数就是kset操作的核心代码了.如下:
     int kset_register(struct kset *k) {     
        int err;
              
        if (!k)         
            return -EINVAL;
                  
        kset_init(k);     
        err = kobject_add_internal(&amp;k-&gt;kobj);     
        if (err)         
            return err;
                 
       kobject_uevent(&amp;k-&gt;kobj, KOBJ_ADD);     
       return 0;
    }
     
    void kset_init(struct kset *k)
    {
        kobject_init_internal(&amp;k-&gt;kobj);             //只是对kobj中的成员变量做一些赋值的初始化
        INIT_LIST_HEAD(&amp;k-&gt;list);
        spin_lock_init(&amp;k-&gt;list_lock);
    }  
    
    static int kobject_add_internal(struct kobject *kobj) {     
        int error = 0;     
        struct kobject *parent;
              
        if (!kobj)         
            return -ENOENT;     //如果kobject的名字为空.退出
                 
        if (!kobj-&gt;name || !kobj-&gt;name[0]) {         
            pr_debug(&quot;kobject: (%p): attempted to be registered with empty &quot;               &quot;name!/n&quot;, kobj);         
            WARN_ON(1);         
            return -EINVAL;     
      }
           
    //取kobject的父结点     
    parent = kobject_get(kobj-&gt;parent);
         
   //如果kobject的父结点没有指定，就将kset-&gt;kobject做为它的父结点     
    /* join kset if set, use it as parent if we do not already have one */     
    if (kobj-&gt;kset) {         
        if (!parent)              
            parent = kobject_get(&amp;kobj-&gt;kset-&gt;kobj);         
        kobj_kset_join(kobj);         
        kobj-&gt;parent = parent;     
    }     
   //调试用     
    pr_debug(&quot;kobject: '%s' (%p): %s: parent: '%s', set: '%s'/n&quot;,          kobject_name(kobj), kobj, __FUNCTION__,          parent ? kobject_name(parent) : &quot;&lt;NULL&gt;&quot;,          kobj-&gt;kset ? kobject_name(&amp;kobj-&gt;kset-&gt;kobj) : &quot;&lt;NULL&gt;&quot;);      
   //在sysfs中创建kobject的相关元素     
   error = create_dir(kobj);                              
   if (error) {         
        //v如果创建失败。减少相关的引用计数         
        kobj_kset_leave(kobj);         
        kobject_put(parent);         
        kobj-&gt;parent = NULL;          /* be noisy on error issues */         
        if (error == -EEXIST)              
            printk(KERN_ERR &quot;%s failed for %s with &quot;
                                    &quot;-EEXIST, don't try to register things with &quot;
                                    &quot;the same name in the same directory./n&quot;,                     __FUNCTION__, kobject_name(kobj));
        else              
            printk(KERN_ERR &quot;%s failed for %s (%d)/n&quot;,
                                 __FUNCTION__, kobject_name(kobj), error);         
            dump_stack();     
    } else         
     //如果创建成功。将state_in_sysfs建为1。表示该object已经在sysfs中了         
        kobj-&gt;state_in_sysfs = 1;      
     return error;
  } 
 这段代码比较简单，它主要完成kobject父结点的判断和选定，然后再调用create_dir（）在sysfs创建相关信息。该函数代码如下：
  static int create_dir(struct kobject *kobj) {     
    int error = 0;     
    
    if (kobject_name(kobj)) {          
      //为kobject创建目录         
      error = sysfs_create_dir(kobj);         
      if (!error) {              
      //为kobject-&gt;ktype中的属性创建文件              
        error = populate_dir(kobj);              
        if (error)                   
            sysfs_remove_dir(kobj);         
    }     
 }     
 
 return error;
 } 
 
 int sysfs_create_dir(struct kobject * kobj){     
    struct sysfs_dirent *parent_sd, *sd;     
    int error = 0;      
    
    BUG_ON(!kobj);     /*如果kobject的parnet存在。就在目录点的目录下创建这个目录。如果没有父结点不存在，就在/sys下面创建结点。*/     
    if (kobj-&gt;parent)         
        parent_sd = kobj-&gt;parent-&gt;sd;     
    else         
        parent_sd = &amp;sysfs_root;      //在sysfs中创建目录     
     //create_dir（）就是在sysfs中创建目录的接口，在之前已经详细分析过了     
     error = create_dir(kobj, parent_sd, kobject_name(kobj), &amp;sd);     
     if (!error)         
        kobj-&gt;sd = sd;     
     return error;
  }
  接着看为kobject-&gt;ktype中的属性创建文件。这是在populate_dir（）中完成的。代码如下：
  static int populate_dir(struct kobject *kobj){     
    struct kobj_type *t = get_ktype(kobj);     
    struct attribute *attr;     
    int error = 0;     
    int i;      
    
    if (t &amp;&amp; t-&gt;default_attrs) {         
        for (i = 0; (attr = t-&gt;default_attrs[i]) != NULL; i++) {              
            error = sysfs_create_file(kobj, attr);              
            if (error)                   
                break;         
        }     
    }
         
    return error;
 }
 这段代码比较简单。它遍历ktype中的属性。然后为其建立文件。请注意：文件的操作最后都会回溯到ktype-&gt;sysfs_ops的show和store这两个函数中.假如对于上面的bus_register()函数传入的参数为：
 struct bus_type ldd_bus_type = {
        .name = &quot;ldd&quot;,
        .match = ldd_match,
        .hotplug  = ldd_hotplug,
};
则通过bus_register()函数调用后，在/sys/bus/目录下出现的框图大概是这样的：。。。。在kset_init()里会初始化kset中的其它字段.然后调用kobject_add_internal()为其内嵌的kobject结构建立空间层次结构.
之后因为添加了kset.会产生一个事件.这个事件是通过用户空间的hotplug程序处理的.这就是kset明显不同于kobject的地方.</rich_text></node><node name="device register" prog_lang="custom-colors" readonly="False" tags="" unique_id="5"><rich_text>    这篇文章也是从别的地方转载的，我的目的是搞清楚：当调用device_register()函数向系统注册一个设备的时候，我注册进去的设备是如何和他 父设备关联起来的，以及如何加入到他所在的总线设备中的，但针对这个问题，好像通过这篇文章了解的并不透彻。但具体到代码分析的最后关于设备和驱动是如何 绑定的，这并不是我这篇文章的重点，但大概看了一下，有点类型i2c总线上设备和驱动的匹配过程。
看下图：
 
</rich_text><rich_text justification="left"></rich_text><rich_text>
在分析程序的过程中看到了把kobj-&gt;kset赋值为(kset)device_kset(即图中黑线实现的部分),但没有看到什么时候把 dev-&gt;kobj-&gt;parent赋值为device_kset-&gt;kobj(图中的红线实现的部分)，在调用函数 setup_parent()中是对dev-&gt;kobject-&gt;parent赋值了，但不明白在setup_parent()函数中是怎么 找到device_kset的。说实在话，对setup_parent()函数不明白，也没分析清楚。（在此补充一下，分析了一下 setup_parent()函数，实现了红线的部分）
 
这篇文章将那个3个注册函数说说，把整个设备模型框架搭建起来，当然，是重点部分了。在这之前希望你已经懂得总线、设备、驱动的数据结构及其里面的有关数据结构。关于调用的函数，如果显示为粗体，那么在下面我有分析。
 
转载于：</rich_text><rich_text link="webs http://student.csdn.net/space.php?uid=111596&amp;do=blog&amp;id=56043">http://student.csdn.net/space.php?uid=111596&amp;do=blog&amp;id=56043</rich_text><rich_text>

来自：drivers/base/core.c
int device_register(struct device *dev)
{
    device_initialize(dev);                 //初始化设备
    return device_add(dev);              //添加设备
}

void device_initialize(struct device *dev)
{
    //图中的黑线实现部分的代码
    dev-&gt;kobj.kset = devices_kset;                //设置设备的kobject所属集合，devices_kset其实在第一层，sys/devices/
    kobject_init(&amp;dev-&gt;kobj, &amp;device_ktype);       //初始化设备的kobject
    INIT_LIST_HEAD(&amp;dev-&gt;dma_pools);           //初始化设备的DMA池，用于传递大数据
    mutex_init(&amp;dev-&gt;mutex);                              //初始化互斥锁
    lockdep_set_novalidate_class(&amp;dev-&gt;mutex);
    spin_lock_init(&amp;dev-&gt;devres_lock);               //初始化自旋锁，用于同步子设备链表
    INIT_LIST_HEAD(&amp;dev-&gt;devres_head);         //初始化子设备链表头
    device_pm_init(dev);
    set_dev_node(dev, -1);
}

int device_add(struct device *dev)
{
    struct device *parent = NULL;
    struct class_interface *class_intf;
    int error = -EINVAL;

    dev = get_device(dev);         //增加设备的kobject的引用计数
    if (!dev)
        goto done;

    if (!dev-&gt;p) {                  
        error = device_private_init(dev);             //初始化设备的私有成员
        if (error)
            goto done;
    }

    /*
     * for statically allocated devices, which should all be converted
     * some day, we need to initialize the name. We prevent reading back
     * the name, and force the use of dev_name()
     */
    if (dev-&gt;init_name) {
        dev_set_name(dev, &quot;%s&quot;, dev-&gt;init_name);         //设置设备kobject的名称
        dev-&gt;init_name = NULL;
    }

    if (!dev_name(dev)) {
        error = -EINVAL;
        goto name_error;
    }

    pr_debug(&quot;device: '%s': %s/n&quot;, dev_name(dev), __func__);

    parent = get_device(dev-&gt;parent);         //增加父设备kobject的引用
    setup_parent(dev, parent);                    //设置该设备kobject父对象（父对象是谁呢）

    /* use parent numa_node */
    if (parent)
        set_dev_node(dev, dev_to_node(parent));

    /* first, register with generic layer. */
    /* we require the name to be set before, and pass NULL */
    error = kobject_add(&amp;dev-&gt;kobj, dev-&gt;kobj.parent, NULL);          //将设备kobject添加进父对象设备模型
    if (error)
        goto Error;

    /* notify platform of device entry */
    if (platform_notify)
        platform_notify(dev);

    error = device_create_file(dev, &amp;uevent_attr);
    if (error)
        goto attrError;

    if (MAJOR(dev-&gt;devt)) {
        error = device_create_file(dev, &amp;devt_attr);
        if (error)
            goto ueventattrError;

        error = device_create_sys_dev_entry(dev);
        if (error)
            goto devtattrError;

        devtmpfs_create_node(dev);
    }

    error = device_add_class_symlinks(dev);
    if (error)
        goto SymlinkError;
    error = device_add_attrs(dev);
    if (error)
        goto AttrsError;
   调用bus_add_device在sysfs中添加两个链接：一个在总线目录下指向设备，另一个在设备的目录下指向总线子系统。
    error = bus_add_device(dev);          //将设备添加进总线中
    if (error)
        goto BusError;
    error = dpm_sysfs_add(dev);
    if (error)
        goto DPMError;
    device_pm_add(dev);

    /* Notify clients of device addition.  This call must come
     * after dpm_sysf_add() and before kobject_uevent().
     */
    if (dev-&gt;bus)
        blocking_notifier_call_chain(&amp;dev-&gt;bus-&gt;p-&gt;bus_notifier,
                         BUS_NOTIFY_ADD_DEVICE, dev);

    kobject_uevent(&amp;dev-&gt;kobj, KOBJ_ADD);
    bus_probe_device试图自动探测设备。如果能够找到合适的驱动程序，则将设备添加到bus-&gt;klist_devices.设备还需要添加到父结点的子结点链表中，图中蓝色线的实现部分（此前，设备知道其父结点，但父结点不知道子结点的存在）
    bus_probe_device(dev);                                       //现在该为设备在总线上寻找合适的驱动了
    if (parent)
        klist_add_tail(&amp;dev-&gt;p-&gt;knode_parent,
                   &amp;parent-&gt;p-&gt;klist_children);                   //将设备添加到父设备的子设备链表中

    if (dev-&gt;class) {
        mutex_lock(&amp;dev-&gt;class-&gt;p-&gt;class_mutex);
        /* tie the class to the device */
        klist_add_tail(&amp;dev-&gt;knode_class,
                   &amp;dev-&gt;class-&gt;p-&gt;class_devices);

        /* notify any interfaces that the device is here */
        list_for_each_entry(class_intf,
                    &amp;dev-&gt;class-&gt;p-&gt;class_interfaces, node)
            if (class_intf-&gt;add_dev)
                class_intf-&gt;add_dev(dev, class_intf);
        mutex_unlock(&amp;dev-&gt;class-&gt;p-&gt;class_mutex);
    }
done:
    put_device(dev);
    return error;
 DPMError:
    bus_remove_device(dev);
 BusError:
    device_remove_attrs(dev);
 AttrsError:
    device_remove_class_symlinks(dev);
 SymlinkError:
    if (MAJOR(dev-&gt;devt))
        devtmpfs_delete_node(dev);
    if (MAJOR(dev-&gt;devt))
        device_remove_sys_dev_entry(dev);
 devtattrError:
    if (MAJOR(dev-&gt;devt))
        device_remove_file(dev, &amp;devt_attr);
 ueventattrError:
    device_remove_file(dev, &amp;uevent_attr);
 attrError:
    kobject_uevent(&amp;dev-&gt;kobj, KOBJ_REMOVE);
    kobject_del(&amp;dev-&gt;kobj);
 Error:
    cleanup_device_parent(dev);
    if (parent)
        put_device(parent);
name_error:
    kfree(dev-&gt;p);
    dev-&gt;p = NULL;
    goto done;
}
 
int device_private_init(struct device *dev)
{
    dev-&gt;p = kzalloc(sizeof(*dev-&gt;p), GFP_KERNEL);
    if (!dev-&gt;p)
        return -ENOMEM;
    dev-&gt;p-&gt;device = dev;                                                //指向设备自己
    klist_init(&amp;dev-&gt;p-&gt;klist_children, klist_children_get,
           klist_children_put);             //初始化设备私有成员的子设备链表，还有两个函数，关于增加和减少子设备引用计数的
    return 0;
}
static void setup_parent(struct device *dev, struct device *parent)
{
    struct kobject *kobj;
    kobj = get_device_parent(dev, parent);        //得到设备kobject的父对象
    if (kobj)
        dev-&gt;kobj.parent = kobj;
}
int bus_add_device(struct device *dev)
{
    struct bus_type *bus = bus_get(dev-&gt;bus);
    int error = 0;

    if (bus) {
        pr_debug(&quot;bus: '%s': add device %s/n&quot;, bus-&gt;name, dev_name(dev));
        error = device_add_attrs(bus, dev);
        if (error)
            goto out_put;
        error = sysfs_create_link(&amp;bus-&gt;p-&gt;devices_kset-&gt;kobj,
                        &amp;dev-&gt;kobj, dev_name(dev));
        if (error)
            goto out_id;
        error = sysfs_create_link(&amp;dev-&gt;kobj,
                &amp;dev-&gt;bus-&gt;p-&gt;subsys.kobj, &quot;subsystem&quot;);
        if (error)
            goto out_subsys;
        error = make_deprecated_bus_links(dev);
        if (error)
            goto out_deprecated;
        klist_add_tail(&amp;dev-&gt;p-&gt;knode_bus, &amp;bus-&gt;p-&gt;klist_devices);      //关键点了，将设备添加进总线的设备链表
    }
    return 0;

out_deprecated:
    sysfs_remove_link(&amp;dev-&gt;kobj, &quot;subsystem&quot;);
out_subsys:
    sysfs_remove_link(&amp;bus-&gt;p-&gt;devices_kset-&gt;kobj, dev_name(dev));
out_id:
    device_remove_attrs(bus, dev);
out_put:
    bus_put(dev-&gt;bus);
    return error;
}
void bus_probe_device(struct device *dev)
{
    struct bus_type *bus = dev-&gt;bus;
    int ret;

    if (bus &amp;&amp; bus-&gt;p-&gt;drivers_autoprobe) {        //如果需要自动匹配驱动
        ret = device_attach(dev);                          //为设备寻找驱动
        WARN_ON(ret &lt; 0);
    }
}
int device_attach(struct device *dev)
{
    int ret = 0;

    device_lock(dev);          //锁住设备
    if (dev-&gt;driver) {                                    //如果设备有驱动
        ret = device_bind_driver(dev);          //那么将设备和驱动绑定
        if (ret == 0)
            ret = 1;
        else {
            dev-&gt;driver = NULL;
            ret = 0;
        }
    } else {
        pm_runtime_get_noresume(dev);
        ret = bus_for_each_drv(dev-&gt;bus, NULL, dev, __device_attach); //否则，在总线上寻找驱动与该设备进行匹配
        pm_runtime_put_sync(dev);
    }
    device_unlock(dev);
    return ret;
}
int device_bind_driver(struct device *dev)
{
    int ret;

    ret = driver_sysfs_add(dev);    
    if (!ret)
        driver_bound(dev);   //驱动绑定设备
    return ret;
}
int bus_for_each_drv(struct bus_type *bus, struct device_driver *start,
             void *data, int (*fn)(struct device_driver *, void *))
{
    struct klist_iter i;
    struct device_driver *drv;
    int error = 0;

    if (!bus)
        return -EINVAL;

    klist_iter_init_node(&amp;bus-&gt;p-&gt;klist_drivers, &amp;i,
                 start ? &amp;start-&gt;p-&gt;knode_bus : NULL);   //初始化i结构体
    while ((drv = next_driver(&amp;i)) &amp;&amp; !error)   //遍历总线上的驱动
        error = fn(drv, data);                            //将驱动和设备进行匹配，这里的fn=__device_attach
    klist_iter_exit(&amp;i);
    return error;
}
 
static int __device_attach(struct device_driver *drv, void *data)
{
    struct device *dev = data;

    if (!driver_match_device(drv, dev))     //现用总线上的match匹配函数进行低级匹配
        return 0;

    return driver_probe_device(drv, dev);   //在来高级匹配
}
 
static inline int driver_match_device(struct device_driver *drv,  struct device *dev)
{
    return drv-&gt;bus-&gt;match ? drv-&gt;bus-&gt;match(dev, drv) : 1;      //看到没，这里要调用总线上定义的match函数
}
 
int driver_probe_device(struct device_driver *drv, struct device *dev)
{
    int ret = 0;

    if (!device_is_registered(dev))  //设备是否注册
        return -ENODEV;

    pr_debug(&quot;bus: '%s': %s: matched device %s with driver %s/n&quot;,
         drv-&gt;bus-&gt;name, __func__, dev_name(dev), drv-&gt;name);

    pm_runtime_get_noresume(dev);
    pm_runtime_barrier(dev);
    ret = really_probe(dev, drv);  //调用真正的匹配
    pm_runtime_put_sync(dev);

    return ret;
}
 
static int really_probe(struct device *dev, struct device_driver *drv)
{
    int ret = 0;

    atomic_inc(&amp;probe_count);
    pr_debug(&quot;bus: '%s': %s: probing driver %s with device %s/n&quot;,
         drv-&gt;bus-&gt;name, __func__, drv-&gt;name, dev_name(dev));
    WARN_ON(!list_empty(&amp;dev-&gt;devres_head));

    dev-&gt;driver = drv;
    if (driver_sysfs_add(dev)) {
        printk(KERN_ERR &quot;%s: driver_sysfs_add(%s) failed/n&quot;,
            __func__, dev_name(dev));
        goto probe_failed;
    }

    if (dev-&gt;bus-&gt;probe) {         //现用总线上定义的probe函数尝试一下
        ret = dev-&gt;bus-&gt;probe(dev);
        if (ret)
            goto probe_failed;
    } else if (drv-&gt;probe) {       //如果不行，在用驱动上的probe尝试
        ret = drv-&gt;probe(dev);
        if (ret)
            goto probe_failed;
    }

    driver_bound(dev);      //驱动绑定设备
    ret = 1;
    pr_debug(&quot;bus: '%s': %s: bound device %s to driver %s/n&quot;,
         drv-&gt;bus-&gt;name, __func__, dev_name(dev), drv-&gt;name);
    goto done;

probe_failed:
    devres_release_all(dev);
    driver_sysfs_remove(dev);
    dev-&gt;driver = NULL;

    if (ret != -ENODEV &amp;&amp; ret != -ENXIO) {
        /* driver matched but the probe failed */
        printk(KERN_WARNING
               &quot;%s: probe of %s failed with error %d/n&quot;,
               drv-&gt;name, dev_name(dev), ret);
    }
    /*
     * Ignore errors returned by -&gt;probe so that the next driver can try
     * its luck.
     */
    ret = 0;
done:
    atomic_dec(&amp;probe_count);
    wake_up(&amp;probe_waitqueue);
    return ret;
}
 
</rich_text><encoded_png char_offset="204"></encoded_png></node><node name="i2c" prog_lang="custom-colors" readonly="False" tags="" unique_id="6"><rich_text>
</rich_text><node name="i2c bus" prog_lang="custom-colors" readonly="False" tags="" unique_id="7"><rich_text>在drivers/i2c/busses下包含各种I2C总线驱动，如S3C2440的I2C总线驱动i2c-s3c2410.c，使用GPIO模拟I2C总线的驱动i2c-gpio.c，这里只分析i2c-gpio.c。
i2c-gpio.c它是gpio模拟I2C总线的驱动，总线也是个设备，在这里将总线当作平台设备处理，那驱动当然是平台设备驱动，看它的驱动注册和注销函数。

1. static int __init i2c_gpio_init(void)  
2. {  
3.     int ret;  
4.   
5.     ret = platform_driver_register(&amp;i2c_gpio_driver);  
6.     if (ret)  
7.         printk(KERN_ERR &quot;i2c-gpio: probe failed: %d\n&quot;, ret);  
8.   
9.     return ret;  
10. }  
11. module_init(i2c_gpio_init);  
12.   
13. static void __exit i2c_gpio_exit(void)  
14. {  
15.     platform_driver_unregister(&amp;i2c_gpio_driver);  
16. }  
17. module_exit(i2c_gpio_exit);  

没有什么好说的，它的初始化和注销函数就是注册和注销一个平台设备驱动，直接看它的platform_driver结构i2c_gpio_driver
1. static struct platform_driver i2c_gpio_driver = {  
2.     .driver     = {  
3.         .name   = &quot;i2c-gpio&quot;,  
4.         .owner  = THIS_MODULE,  
5.     },  
6.     .probe      = i2c_gpio_probe,  
7.     .remove     = __devexit_p(i2c_gpio_remove),  
8. };  
小提示：是不是我们应该注册一个平台设备，以和这个驱动匹配，那先来注册这个平台设备。
先定义这个平台设备结构，至于怎么注册平台设备我想大家都应该知道吧。
1. #if defined(CONFIG_I2C_GPIO) | \   
2.     defined(CONFIG_I2C_GPIO_MODULE)   
3. static struct i2c_gpio_platform_data i2c_gpio_adapter_data = {   
4.     .sda_pin = PINID_GPMI_D05,   
5.     .scl_pin = PINID_GPMI_D04,   
6.     .udelay = 5, //100KHz   
7.     .timeout = 100,   
8.     .sda_is_open_drain = 1,   
9.     .scl_is_open_drain = 1,   
10. };   
11.   
12. static struct platform_device i2c_gpio = {   
13.     .name = &quot;i2c-gpio&quot;,   
14.     .id = 0,   
15.     .dev = {   
16.         .platform_data = &amp;i2c_gpio_adapter_data,   
17.         .release = mxs_nop_release,   
18.         },   
19. };   
20. #endif  
在这里struct platform_device结构中的name字段要和struct platform_driver中driver字段中name字段要相同，因为平台总线就是通过这个来判断设备和驱动是否匹配的。注意这里的id将它赋值了0，至于到底有什么用，后面再来细看。这个结构里面还包含一个最重要的数据i2c_gpio_adapter_data，它struct  i2c_gpio_platform_data结构类型变量，这个结构体类型定义在include/linux/i2c-gpio.h中。
1. struct i2c_gpio_platform_data {  
2.     unsigned int    sda_pin;  
3.     unsigned int    scl_pin;  
4.     int     udelay;  
5.     int     timeout;  
6.     unsigned int    sda_is_open_drain:1;  
7.     unsigned int    scl_is_open_drain:1;  
8.     unsigned int    scl_is_output_only:1;  
9. };  
这个结构体主要描述gpio模拟i2c总线，sda_pin和scl_pin表示使用哪两个IO管脚来模拟I2C总线，udelay和timeout分别为它的时钟频率和超时时间，sda_is_open_drain和scl_is_open_drain表示sda、scl这两个管脚是否是开漏(opendrain)电路，如果是设置为1，scl_is_output_only表示scl这个管脚是否只是作为输出，如果是设置为1。
回到驱动中，看其中最重要的i2c_gpio_probe。
1. static int __devinit i2c_gpio_probe(struct platform_device *pdev)  
2. {  
3.     struct i2c_gpio_platform_data *pdata;  
4.     struct i2c_algo_bit_data *bit_data;  
5.     struct i2c_adapter *adap;  
6.     int ret;  
7.   
8.     pdata = pdev-&gt;dev.platform_data;  
9.     if (!pdata)  
10.         return -ENXIO;  
11.   
12.     ret = -ENOMEM;  
13.     adap = kzalloc(sizeof(struct i2c_adapter), GFP_KERNEL);  
14.     if (!adap)  
15.         goto err_alloc_adap;  
16.     bit_data = kzalloc(sizeof(struct i2c_algo_bit_data), GFP_KERNEL);  
17.     if (!bit_data)  
18.         goto err_alloc_bit_data;  
19.   
20.     ret = gpio_request(pdata-&gt;sda_pin, &quot;sda&quot;);  
21.     if (ret)  
22.         goto err_request_sda;  
23.     ret = gpio_request(pdata-&gt;scl_pin, &quot;scl&quot;);  
24.     if (ret)  
25.         goto err_request_scl;  
26.   
27.     if (pdata-&gt;sda_is_open_drain) {  
28.         gpio_direction_output(pdata-&gt;sda_pin, 1);  
29.         bit_data-&gt;setsda = i2c_gpio_setsda_val;  
30.     } else {  
31.         gpio_direction_input(pdata-&gt;sda_pin);  
32.         bit_data-&gt;setsda = i2c_gpio_setsda_dir;  
33.     }  
34.   
35.     if (pdata-&gt;scl_is_open_drain || pdata-&gt;scl_is_output_only) {  
36.         gpio_direction_output(pdata-&gt;scl_pin, 1);  
37.         bit_data-&gt;setscl = i2c_gpio_setscl_val;  
38.     } else {  
39.         gpio_direction_input(pdata-&gt;scl_pin);  
40.         bit_data-&gt;setscl = i2c_gpio_setscl_dir;  
41.     }  
42.   
43.     if (!pdata-&gt;scl_is_output_only)  
44.         bit_data-&gt;getscl = i2c_gpio_getscl;  
45.     bit_data-&gt;getsda = i2c_gpio_getsda;  
46.   
47.     if (pdata-&gt;udelay)  
48.         bit_data-&gt;udelay = pdata-&gt;udelay;  
49.     else if (pdata-&gt;scl_is_output_only)  
50.         bit_data-&gt;udelay = 50;           /* 10 kHz */  
51.     else  
52.         bit_data-&gt;udelay = 5;            /* 100 kHz */  
53.   
54.     if (pdata-&gt;timeout)  
55.         bit_data-&gt;timeout = pdata-&gt;timeout;  
56.     else  
57.         bit_data-&gt;timeout = HZ / 10;     /* 100 ms */  
58.   
59.     bit_data-&gt;data = pdata;  
60.   
61.     adap-&gt;owner = THIS_MODULE;  
62.     snprintf(adap-&gt;name, sizeof(adap-&gt;name), &quot;i2c-gpio%d&quot;, pdev-&gt;id);  
63.     adap-&gt;algo_data = bit_data;  
64.     adap-&gt;class = I2C_CLASS_HWMON | I2C_CLASS_SPD;  
65.     adap-&gt;dev.parent = &amp;pdev-&gt;dev;  
66.   
67.     /* 
68.      * If &quot;dev-&gt;id&quot; is negative we consider it as zero. 
69.      * The reason to do so is to avoid sysfs names that only make 
70.      * sense when there are multiple adapters. 
71.      */  
72.     adap-&gt;nr = (pdev-&gt;id != -1) ? pdev-&gt;id : 0;  
73.     ret = i2c_bit_add_numbered_bus(adap);  
74.     if (ret)  
75.         goto err_add_bus;  
76.   
77.     platform_set_drvdata(pdev, adap);  
78.   
79.     dev_info(&amp;pdev-&gt;dev, &quot;using pins %u (SDA) and %u (SCL%s)\n&quot;,  
80.          pdata-&gt;sda_pin, pdata-&gt;scl_pin,  
81.          pdata-&gt;scl_is_output_only  
82.          ? &quot;, no clock stretching&quot; : &quot;&quot;);  
83.   
84.     return 0;  
85.   
86. err_add_bus:  
87.     gpio_free(pdata-&gt;scl_pin);  
88. err_request_scl:  
89.     gpio_free(pdata-&gt;sda_pin);  
90. err_request_sda:  
91.     kfree(bit_data);  
92. err_alloc_bit_data:  
93.     kfree(adap);  
94. err_alloc_adap:  
95.     return ret;  
96. }  
从这句开始pdata= pdev-&gt;dev.platform_data;这不正是我们在平台设备结构中定义的数据吗。然后是使用kzalloc申请两段内存空间，一个是为结构struct  i2c_adapter申请的，另一个是为结构structi2c_algo_bit_data申请的。
struct i2c_adapter结构定义在include/linux/i2c.h中
1. struct i2c_adapter {  
2.     struct module *owner;  
3.     unsigned int id;  
4.     unsigned int class;       /* classes to allow probing for */  
5.     const struct i2c_algorithm *algo; /* the algorithm to access the bus */  
6.     void *algo_data;  
7.   
8.     /* data fields that are valid for all devices   */  
9.     u8 level;           /* nesting level for lockdep */  
10.     struct mutex bus_lock;  
11.   
12.     int timeout;            /* in jiffies */  
13.     int retries;  
14.     struct device dev;      /* the adapter device */  
15.   
16.     int nr;  
17.     char name[48];  
18.     struct completion dev_released;  
19. };  
在I2C子系统中，I2C适配器使用结构struct i2c_adapter描述，代表一条实际的I2C总线。
struct i2c_algo_bit_data结构定义在include/linux/i2c-algo-bit.h中
1. struct i2c_algo_bit_data {  
2.     void *data;     /* private data for lowlevel routines */  
3.     void (*setsda) (void *data, int state);  
4.     void (*setscl) (void *data, int state);  
5.     int  (*getsda) (void *data);  
6.     int  (*getscl) (void *data);  
7.   
8.     /* local settings */  
9.     int udelay;     /* half clock cycle time in us, 
10.                    minimum 2 us for fast-mode I2C, 
11.                    minimum 5 us for standard-mode I2C and SMBus, 
12.                    maximum 50 us for SMBus */  
13.     int timeout;        /* in jiffies */  
14. };  
这个结构主要用来定义对GPIO管脚的一些操作，还是回到probe中
接下来使用gpio_request去申请这个两个GPIO管脚，申请的目的是为了防止重复使用管脚。然后是根据struct i2c_gpio_platform_data结构中定义的后面三个数据对struct  i2c_algo_bit_data结构中的函数指针做一些赋值操作。接下来是I2C时钟频率和超时设置，如果在struct i2c_gpio_platform_data结构中定义了值，那么就采用定义的值，否则就采用默认的值。然后是对struct  i2c_adapter结构的一些赋值操作，比如指定它的父设备为这里的平台设备，前面在平台设备中定义了一个id，这里用到了，赋给了struct i2c_adapter中的nr成员，这个值表示总线号，这里的总线号和硬件无关，只是在软件上的区分。然后到了最后的主角i2c_bit_add_numbered_bus，这个函数定义在drivers/i2c/algos/i2c-algo-bit.c中
1. int i2c_bit_add_numbered_bus(struct i2c_adapter *adap)  
2. {  
3.     int err;  
4.   
5.     err = i2c_bit_prepare_bus(adap);  
6.     if (err)  
7.         return err;  
8.   
9.     return i2c_add_numbered_adapter(adap);  
10. }  
先看i2c_bit_prepare_bus函数
1. static int i2c_bit_prepare_bus(struct i2c_adapter *adap)  
2. {  
3.     struct i2c_algo_bit_data *bit_adap = adap-&gt;algo_data;  
4.   
5.     if (bit_test) {  
6.         int ret = test_bus(bit_adap, adap-&gt;name);  
7.         if (ret &lt; 0)  
8.             return -ENODEV;  
9.     }  
10.   
11.     /* register new adapter to i2c module... */  
12.     adap-&gt;algo = &amp;i2c_bit_algo;  
13.     adap-&gt;retries = 3;  
14.   
15.     return 0;  
16. }  
bit_test为模块参数，这里不管它，看这样一句adap-&gt;algo= &amp;i2c_bit_algo;
来看这个结构定义
1. static const struct i2c_algorithm i2c_bit_algo = {  
2.     .master_xfer    = bit_xfer,  
3.     .functionality  = bit_func,  
4. };  
先看这个结构类型在哪里定义的include/linux/i2c.h
1. struct i2c_algorithm {  
2.     /* If an adapter algorithm can't do I2C-level access, set master_xfer 
3.        to NULL. If an adapter algorithm can do SMBus access, set 
4.        smbus_xfer. If set to NULL, the SMBus protocol is simulated 
5.        using common I2C messages */  
6.     /* master_xfer should return the number of messages successfully 
7.        processed, or a negative value on error */  
8.     int (*master_xfer)(struct i2c_adapter *adap, struct i2c_msg *msgs,  
9.                int num);  
10.     int (*smbus_xfer) (struct i2c_adapter *adap, u16 addr,  
11.                unsigned short flags, char read_write,  
12.                u8 command, int size, union i2c_smbus_data *data);  
13.   
14.     /* To determine what the adapter supports */  
15.     u32 (*functionality) (struct i2c_adapter *);  
16. };  
其实也没什么，就三个函数指针外加一长串注释
这个结构的master_xfer指针为主机的数据传输，具体来看bit_xfer这个函数，这个函数和I2C协议相关，I2C协议规定要先发送起始信号，才能开始进行数据的传输，最后数据传输完成后发送停止信号，看接下来代码对I2C协议要熟悉，所以这里的关键点是I2C协议。
1. static int bit_xfer(struct i2c_adapter *i2c_adap,  
2.             struct i2c_msg msgs[], int num)  
3. {  
4.     struct i2c_msg *pmsg;  
5.     struct i2c_algo_bit_data *adap = i2c_adap-&gt;algo_data;  
6.     int i, ret;  
7.     unsigned short nak_ok;  
8.   
9.     bit_dbg(3, &amp;i2c_adap-&gt;dev, &quot;emitting start condition\n&quot;);  
10.     /*发送起始信号*/  
11.     i2c_start(adap);  
12.     for (i = 0; i &lt; num; i++) {  
13.         pmsg = &amp;msgs[i];  
14.         nak_ok = pmsg-&gt;flags &amp; I2C_M_IGNORE_NAK;  
15.         if (!(pmsg-&gt;flags &amp; I2C_M_NOSTART)) {  
16.             if (i) {  
17.                 bit_dbg(3, &amp;i2c_adap-&gt;dev, &quot;emitting &quot;  
18.                     &quot;repeated start condition\n&quot;);  
19.                 i2c_repstart(adap);  
20.             }  
21.             ret = bit_doAddress(i2c_adap, pmsg);  
22.             if ((ret != 0) &amp;&amp; !nak_ok) {  
23.                 bit_dbg(1, &amp;i2c_adap-&gt;dev, &quot;NAK from &quot;  
24.                     &quot;device addr 0x%02x msg #%d\n&quot;,  
25.                     msgs[i].addr, i);  
26.                 goto bailout;  
27.             }  
28.         }  
29.         if (pmsg-&gt;flags &amp; I2C_M_RD) {  
30.             /* read bytes into buffer*/  
31.             ret = readbytes(i2c_adap, pmsg);  
32.             if (ret &gt;= 1)  
33.                 bit_dbg(2, &amp;i2c_adap-&gt;dev, &quot;read %d byte%s\n&quot;,  
34.                     ret, ret == 1 ? &quot;&quot; : &quot;s&quot;);  
35.             if (ret &lt; pmsg-&gt;len) {  
36.                 if (ret &gt;= 0)  
37.                     ret = -EREMOTEIO;  
38.                 goto bailout;  
39.             }  
40.         } else {  
41.             /* write bytes from buffer */  
42.             ret = sendbytes(i2c_adap, pmsg);  
43.             if (ret &gt;= 1)  
44.                 bit_dbg(2, &amp;i2c_adap-&gt;dev, &quot;wrote %d byte%s\n&quot;,  
45.                     ret, ret == 1 ? &quot;&quot; : &quot;s&quot;);  
46.             if (ret &lt; pmsg-&gt;len) {  
47.                 if (ret &gt;= 0)  
48.                     ret = -EREMOTEIO;  
49.                 goto bailout;  
50.             }  
51.         }  
52.     }  
53.     ret = i;  
54.   
55. bailout:  
56.     bit_dbg(3, &amp;i2c_adap-&gt;dev, &quot;emitting stop condition\n&quot;);  
57.     i2c_stop(adap);  
58.     return ret;  
59. }  
1.发送起始信号
i2c_start(adap);
看这个函数前，先看I2C协议怎么定义起始信号的
</rich_text><rich_text justification="left"></rich_text><rich_text>
起始信号就是在SCL为高电平期间，SDA从高到低的跳变，再来看代码是怎么实现的
1. static void i2c_start(struct i2c_algo_bit_data *adap)  
2. {  
3.     /* assert: scl, sda are high */  
4.     setsda(adap, 0);  
5.     udelay(adap-&gt;udelay);  
6.     scllo(adap);  
7. }  
这些setsda和setscl这些都是使用的总线的函数，在这里是使用的i2c-gpio.c中定义的函数，还记得那一系列判断赋值吗。
1. #define setsda(adap, val)   adap-&gt;setsda(adap-&gt;data, val)  
2. #define setscl(adap, val)   adap-&gt;setscl(adap-&gt;data, val)  
3. #define getsda(adap)        adap-&gt;getsda(adap-&gt;data)  
4. #define getscl(adap)        adap-&gt;getscl(adap-&gt;data)  
2.往下是个大的for循环
到了这里又不得不说这个struct i2c_msg结构，这个结构定义在include/linux/i2c.h中
1. struct i2c_msg {  
2.     __u16 addr; /* slave address            */  
3.     __u16 flags;  
4. #define I2C_M_TEN       0x0010  /* this is a ten bit chip address */  
5. #define I2C_M_RD        0x0001  /* read data, from slave to master */  
6. #define I2C_M_NOSTART       0x4000  /* if I2C_FUNC_PROTOCOL_MANGLING */  
7. #define I2C_M_REV_DIR_ADDR  0x2000  /* if I2C_FUNC_PROTOCOL_MANGLING */  
8. #define I2C_M_IGNORE_NAK    0x1000  /* if I2C_FUNC_PROTOCOL_MANGLING */  
9. #define I2C_M_NO_RD_ACK     0x0800  /* if I2C_FUNC_PROTOCOL_MANGLING */  
10. #define I2C_M_RECV_LEN      0x0400  /* length will be first received byte */  
11.     __u16 len;      /* msg length               */  
12.     __u8 *buf;      /* pointer to msg data          */  
13. };  
这个结构专门用于数据传输相关的addr为I2C设备地址，flags为一些标志位，len为数据的长度，buf为数据。这里宏定义的一些标志还是需要了解一下。
I2C_M_TEN表示10位设备地址
I2C_M_RD读标志
I2C_M_NOSTART无起始信号标志
I2C_M_IGNORE_NAK忽略应答信号标志
回到for，这里的num代表有几个struct i2c_msg，进入for语句，接下来是个if语句，判断这个设备是否定义了I2C_M_NOSTART标志，这个标志主要用于写操作时，不必重新发送起始信号和设备地址，但是对于读操作就不同了，要调用i2c_repstart这个函数去重新发送起始信号，调用bit_doAddress函数去重新构造设备地址字节，来看这个函数。
1. static int bit_doAddress(struct i2c_adapter *i2c_adap, struct i2c_msg *msg)  
2. {  
3.     unsigned short flags = msg-&gt;flags;  
4.     unsigned short nak_ok = msg-&gt;flags &amp; I2C_M_IGNORE_NAK;  
5.     struct i2c_algo_bit_data *adap = i2c_adap-&gt;algo_data;  
6.   
7.     unsigned char addr;  
8.     int ret, retries;  
9.   
10.     retries = nak_ok ? 0 : i2c_adap-&gt;retries;  
11.   
12.     if (flags &amp; I2C_M_TEN) {  
13.         /* a ten bit address */  
14.         addr = 0xf0 | ((msg-&gt;addr &gt;&gt; 7) &amp; 0x03);  
15.         bit_dbg(2, &amp;i2c_adap-&gt;dev, &quot;addr0: %d\n&quot;, addr);  
16.         /* try extended address code...*/  
17.         ret = try_address(i2c_adap, addr, retries);  
18.         if ((ret != 1) &amp;&amp; !nak_ok)  {  
19.             dev_err(&amp;i2c_adap-&gt;dev,  
20.                 &quot;died at extended address code\n&quot;);  
21.             return -EREMOTEIO;  
22.         }  
23.         /* the remaining 8 bit address */  
24.         ret = i2c_outb(i2c_adap, msg-&gt;addr &amp; 0x7f);  
25.         if ((ret != 1) &amp;&amp; !nak_ok) {  
26.             /* the chip did not ack / xmission error occurred */  
27.             dev_err(&amp;i2c_adap-&gt;dev, &quot;died at 2nd address code\n&quot;);  
28.             return -EREMOTEIO;  
29.         }  
30.         if (flags &amp; I2C_M_RD) {  
31.             bit_dbg(3, &amp;i2c_adap-&gt;dev, &quot;emitting repeated &quot;  
32.                 &quot;start condition\n&quot;);  
33.             i2c_repstart(adap);  
34.             /* okay, now switch into reading mode */  
35.             addr |= 0x01;  
36.             ret = try_address(i2c_adap, addr, retries);  
37.             if ((ret != 1) &amp;&amp; !nak_ok) {  
38.                 dev_err(&amp;i2c_adap-&gt;dev,  
39.                     &quot;died at repeated address code\n&quot;);  
40.                 return -EREMOTEIO;  
41.             }  
42.         }  
43.     } else {        /* normal 7bit address  */  
44.         addr = msg-&gt;addr &lt;&lt; 1;  
45.         if (flags &amp; I2C_M_RD)  
46.             addr |= 1;  
47.         if (flags &amp; I2C_M_REV_DIR_ADDR)  
48.             addr ^= 1;  
49.         ret = try_address(i2c_adap, addr, retries);  
50.         if ((ret != 1) &amp;&amp; !nak_ok)  
51.             return -ENXIO;  
52.     }  
53.   
54.     return 0;  
55. }  
这里先做了一个判断，10位设备地址和7位设备地址分别做不同的处理，通常一条I2C总线上不会挂那么多I2C设备，所以10位地址不常用，直接看对7位地址的处理。struct  i2c_msg中addr中是真正的设备地址，而这里发送的addr高7位才是设备地址，最低位为读写位，如果为读，最低位为1，如果为写，最低位为0。所以要将struct  i2c_msg中addr向左移1位，如果定义了I2C_M_RD标志，就将addr或上1，前面就说过，这个标志就代表读，如果是写，这里就不用处理，因为最低位本身就是0。最后调用try_address函数将这个地址字节发送出去。
1. static int try_address(struct i2c_adapter *i2c_adap,  
2.                unsigned char addr, int retries)  
3. {  
4.     struct i2c_algo_bit_data *adap = i2c_adap-&gt;algo_data;  
5.     int i, ret = 0;  
6.   
7.     for (i = 0; i &lt;= retries; i++) {  
8.         ret = i2c_outb(i2c_adap, addr);  
9.         if (ret == 1 || i == retries)  
10.             break;  
11.         bit_dbg(3, &amp;i2c_adap-&gt;dev, &quot;emitting stop condition\n&quot;);  
12.         i2c_stop(adap);  
13.         udelay(adap-&gt;udelay);  
14.         yield();  
15.         bit_dbg(3, &amp;i2c_adap-&gt;dev, &quot;emitting start condition\n&quot;);  
16.         i2c_start(adap);  
17.     }  
18.     if (i &amp;&amp; ret)  
19.         bit_dbg(1, &amp;i2c_adap-&gt;dev, &quot;Used %d tries to %s client at &quot;  
20.             &quot;0x%02x: %s\n&quot;, i + 1,  
21.             addr &amp; 1 ? &quot;read from&quot; : &quot;write to&quot;, addr &gt;&gt; 1,  
22.             ret == 1 ? &quot;success&quot; : &quot;failed, timeout?&quot;);  
23.     return ret;  
24. }  
最主要的就是调用i2c_outb发送一个字节，retries为重复次数，看前面adap-&gt;retries= 3;
如果发送失败，也就是设备没有给出应答信号，那就发送停止信号，发送起始信号，再发送这个地址字节，这就叫retries。来看这个具体的i2c_outb函数
1. static int i2c_outb(struct i2c_adapter *i2c_adap, unsigned char c)  
2. {  
3.     int i;  
4.     int sb;  
5.     int ack;  
6.     struct i2c_algo_bit_data *adap = i2c_adap-&gt;algo_data;  
7.   
8.     /* assert: scl is low */  
9.     for (i = 7; i &gt;= 0; i--) {  
10.         sb = (c &gt;&gt; i) &amp; 1;  
11.         setsda(adap, sb);  
12.         udelay((adap-&gt;udelay + 1) / 2);  
13.         if (sclhi(adap) &lt; 0) { /* timed out */  
14.             bit_dbg(1, &amp;i2c_adap-&gt;dev, &quot;i2c_outb: 0x%02x, &quot;  
15.                 &quot;timeout at bit #%d\n&quot;, (int)c, i);  
16.             return -ETIMEDOUT;  
17.         }  
18.         /* FIXME do arbitration here: 
19.          * if (sb &amp;&amp; !getsda(adap)) -&gt; ouch! Get out of here. 
20.          * 
21.          * Report a unique code, so higher level code can retry 
22.          * the whole (combined) message and *NOT* issue STOP. 
23.          */  
24.         scllo(adap);  
25.     }  
26.     sdahi(adap);  
27.     if (sclhi(adap) &lt; 0) { /* timeout */  
28.         bit_dbg(1, &amp;i2c_adap-&gt;dev, &quot;i2c_outb: 0x%02x, &quot;  
29.             &quot;timeout at ack\n&quot;, (int)c);  
30.         return -ETIMEDOUT;  
31.     }  
32.   
33.     /* read ack: SDA should be pulled down by slave, or it may 
34.      * NAK (usually to report problems with the data we wrote). 
35.      */  
36.     ack = !getsda(adap);    /* ack: sda is pulled low -&gt; success */  
37.     bit_dbg(2, &amp;i2c_adap-&gt;dev, &quot;i2c_outb: 0x%02x %s\n&quot;, (int)c,  
38.         ack ? &quot;A&quot; : &quot;NA&quot;);  
39.   
40.     scllo(adap);  
41.     return ack;  
42.     /* assert: scl is low (sda undef) */  
43. }  
这个函数有两个参数，一个是structi2c_adapter代表I2C主机，一个是发送的字节数据。那么I2C是怎样将一个字节数据发送出去的呢，那再来看看协议。
</rich_text><rich_text justification="left"></rich_text><rich_text>

首先是发送字节数据的最高位，在时钟为高电平期间将一位数据发送出去，最后是发送字节数据的最低位。发送完成之后，我们需要一个ACK信号，要不然我怎么知道发送成功没有，ACK信号就是在第九个时钟周期时数据线为低，所以在一个字节数据传送完成后，还要将数据线拉高，我们看程序中就是这一句sdahi(adap);等待这个ACK信号的到来，这样一个字节数据就发送完成。
回到bit_xfer函数中，前面只是将设备地址字节发送出去了，那么接下来就是该发送数据了。
注意：这里的数据包括操作设备的基地址
如果是读则调用readbytes函数去读，如果是写则调用sendbytes去写，先看readbytes函数
1. static int readbytes(struct i2c_adapter *i2c_adap, struct i2c_msg *msg)  
2. {  
3.     int inval;  
4.     int rdcount = 0;    /* counts bytes read */  
5.     unsigned char *temp = msg-&gt;buf;  
6.     int count = msg-&gt;len;  
7.     const unsigned flags = msg-&gt;flags;  
8.   
9.     while (count &gt; 0) {  
10.         inval = i2c_inb(i2c_adap);  
11.         if (inval &gt;= 0) {  
12.             *temp = inval;  
13.             rdcount++;  
14.         } else {   /* read timed out */  
15.             break;  
16.         }  
17.   
18.         temp++;  
19.         count--;  
20.   
21.         /* Some SMBus transactions require that we receive the 
22.            transaction length as the first read byte. */  
23.         if (rdcount == 1 &amp;&amp; (flags &amp; I2C_M_RECV_LEN)) {  
24.             if (inval &lt;= 0 || inval &gt; I2C_SMBUS_BLOCK_MAX) {  
25.                 if (!(flags &amp; I2C_M_NO_RD_ACK))  
26.                     acknak(i2c_adap, 0);  
27.                 dev_err(&amp;i2c_adap-&gt;dev, &quot;readbytes: invalid &quot;  
28.                     &quot;block length (%d)\n&quot;, inval);  
29.                 return -EREMOTEIO;  
30.             }  
31.             /* The original count value accounts for the extra 
32.                bytes, that is, either 1 for a regular transaction, 
33.                or 2 for a PEC transaction. */  
34.             count += inval;  
35.             msg-&gt;len += inval;  
36.         }  
37.   
38.         bit_dbg(2, &amp;i2c_adap-&gt;dev, &quot;readbytes: 0x%02x %s\n&quot;,  
39.             inval,  
40.             (flags &amp; I2C_M_NO_RD_ACK)  
41.                 ? &quot;(no ack/nak)&quot;  
42.                 : (count ? &quot;A&quot; : &quot;NA&quot;));  
43.   
44.         if (!(flags &amp; I2C_M_NO_RD_ACK)) {  
45.             inval = acknak(i2c_adap, count);  
46.             if (inval &lt; 0)  
47.                 return inval;  
48.         }  
49.     }  
50.     return rdcount;  
51. }  
其中一个大的while循环，调用i2c_inb去读一个字节，count为数据的长度，单位为多少个字节，
那就来看i2c_inb函数。
1. static int i2c_inb(struct i2c_adapter *i2c_adap)  
2. {  
3.     /* read byte via i2c port, without start/stop sequence  */  
4.     /* acknowledge is sent in i2c_read.         */  
5.     int i;  
6.     unsigned char indata = 0;  
7.     struct i2c_algo_bit_data *adap = i2c_adap-&gt;algo_data;  
8.   
9.     /* assert: scl is low */  
10.     sdahi(adap);  
11.     for (i = 0; i &lt; 8; i++) {  
12.         if (sclhi(adap) &lt; 0) { /* timeout */  
13.             bit_dbg(1, &amp;i2c_adap-&gt;dev, &quot;i2c_inb: timeout at bit &quot;  
14.                 &quot;#%d\n&quot;, 7 - i);  
15.             return -ETIMEDOUT;  
16.         }  
17.         indata *= 2;  
18.         if (getsda(adap))  
19.             indata |= 0x01;  
20.         setscl(adap, 0);  
21.         udelay(i == 7 ? adap-&gt;udelay / 2 : adap-&gt;udelay);  
22.     }  
23.     /* assert: scl is low */  
24.     return indata;  
25. }  
再来看sendbytes函数
1. static int sendbytes(struct i2c_adapter *i2c_adap, struct i2c_msg *msg)  
2. {  
3.     const unsigned char *temp = msg-&gt;buf;  
4.     int count = msg-&gt;len;  
5.     unsigned short nak_ok = msg-&gt;flags &amp; I2C_M_IGNORE_NAK;  
6.     int retval;  
7.     int wrcount = 0;  
8.   
9.     while (count &gt; 0) {  
10.         retval = i2c_outb(i2c_adap, *temp);  
11.   
12.         /* OK/ACK; or ignored NAK */  
13.         if ((retval &gt; 0) || (nak_ok &amp;&amp; (retval == 0))) {  
14.             count--;  
15.             temp++;  
16.             wrcount++;  
17.   
18.         /* A slave NAKing the master means the slave didn't like 
19.          * something about the data it saw.  For example, maybe 
20.          * the SMBus PEC was wrong. 
21.          */  
22.         } else if (retval == 0) {  
23.             dev_err(&amp;i2c_adap-&gt;dev, &quot;sendbytes: NAK bailout.\n&quot;);  
24.             return -EIO;  
25.   
26.         /* Timeout; or (someday) lost arbitration 
27.          * 
28.          * FIXME Lost ARB implies retrying the transaction from 
29.          * the first message, after the &quot;winning&quot; master issues 
30.          * its STOP.  As a rule, upper layer code has no reason 
31.          * to know or care about this ... it is *NOT* an error. 
32.          */  
33.         } else {  
34.             dev_err(&amp;i2c_adap-&gt;dev, &quot;sendbytes: error %d\n&quot;,  
35.                     retval);  
36.             return retval;  
37.         }  
38.     }  
39.     return wrcount;  
40. }  
也是一个大的while循环，同发送地址字节一样，也是调用i2c_outb去发送一个字节，count也是数据长度，由于i2c_outb函数在前面发送设备地址那里已经介绍了，这里也就不贴出来了。
还是回到bit_xfer函数，数据传输完成后，调用i2c_stop函数发送停止信号。我们看停止信号函数怎么去实现的。
1. static void i2c_stop(struct i2c_algo_bit_data *adap)  
2. {  
3.     /* assert: scl is low */  
4.     sdalo(adap);  
5.     sclhi(adap);  
6.     setsda(adap, 1);  
7.     udelay(adap-&gt;udelay);  
8. }  
看前面发送起始信号的那张图，停止信号就是在时钟为高电平期间，数据线从低到高的跳变。我们看程序是先将数据线拉低，将时钟线拉高，最后将数据拉高，这样就够成了一个停止信号。
还是回到i2c_bit_add_numbered_bus这个函数中来，看另外一个函数调用i2c_add_numbered_adapter。
1. int i2c_add_numbered_adapter(struct i2c_adapter *adap)  
2. {  
3.     int id;  
4.     int status;  
5.   
6.     if (adap-&gt;nr &amp; ~MAX_ID_MASK)  
7.         return -EINVAL;  
8.   
9. retry:  
10.     if (idr_pre_get(&amp;i2c_adapter_idr, GFP_KERNEL) == 0)  
11.         return -ENOMEM;  
12.   
13.     mutex_lock(&amp;core_lock);  
14.     /* &quot;above&quot; here means &quot;above or equal to&quot;, sigh; 
15.      * we need the &quot;equal to&quot; result to force the result 
16.      */  
17.     status = idr_get_new_above(&amp;i2c_adapter_idr, adap, adap-&gt;nr, &amp;id);  
18.     if (status == 0 &amp;&amp; id != adap-&gt;nr) {  
19.         status = -EBUSY;  
20.         idr_remove(&amp;i2c_adapter_idr, id);  
21.     }  
22.     mutex_unlock(&amp;core_lock);  
23.     if (status == -EAGAIN)  
24.         goto retry;  
25.   
26.     if (status == 0)  
27.         status = i2c_register_adapter(adap);  
28.     return status;  
29. }  
最重要的是这句i2c_register_adapter，注册这条I2C总线，进去看看
1. static int i2c_register_adapter(struct i2c_adapter *adap)  
2. {  
3.     int res = 0, dummy;  
4.   
5.     /* Can't register until after driver model init */  
6.     if (unlikely(WARN_ON(!i2c_bus_type.p))) {  
7.         res = -EAGAIN;  
8.         goto out_list;  
9.     }  
10.   
11.     mutex_init(&amp;adap-&gt;bus_lock);  
12.   
13.     /* Set default timeout to 1 second if not already set */  
14.     if (adap-&gt;timeout == 0)  
15.         adap-&gt;timeout = HZ;  
16.   
17.     dev_set_name(&amp;adap-&gt;dev, &quot;i2c-%d&quot;, adap-&gt;nr);  
18.     adap-&gt;dev.bus = &amp;i2c_bus_type;  
19.     adap-&gt;dev.type = &amp;i2c_adapter_type;  
20.     res = device_register(&amp;adap-&gt;dev);  
21.     if (res)  
22.         goto out_list;  
23.   
24.     dev_dbg(&amp;adap-&gt;dev, &quot;adapter [%s] registered\n&quot;, adap-&gt;name);  
25.   
26. #ifdef CONFIG_I2C_COMPAT  
27.     res = class_compat_create_link(i2c_adapter_compat_class, &amp;adap-&gt;dev,  
28.                        adap-&gt;dev.parent);  
29.     if (res)  
30.         dev_warn(&amp;adap-&gt;dev,  
31.              &quot;Failed to create compatibility class link\n&quot;);  
32. #endif  
33.   
34.     /* create pre-declared device nodes */  
35.     if (adap-&gt;nr &lt; __i2c_first_dynamic_bus_num)  
36.         i2c_scan_static_board_info(adap);  
37.   
38.     /* Notify drivers */  
39.     mutex_lock(&amp;core_lock);  
40.     dummy = bus_for_each_drv(&amp;i2c_bus_type, NULL, adap,  
41.                  i2c_do_add_adapter);  
42.     mutex_unlock(&amp;core_lock);  
43.   
44.     return 0;  
45.   
46. out_list:  
47.     mutex_lock(&amp;core_lock);  
48.     idr_remove(&amp;i2c_adapter_idr, adap-&gt;nr);  
49.     mutex_unlock(&amp;core_lock);  
50.     return res;  
51. }  
看内核代码有时就会这样，会陷入内核代码的汪洋大海中，而拔不出来，直接后果是最后都忘记看这段代码的目的，丧失继续看下去的信心。所以为了避免这样情况出现，所以最好在开始看代码的时候要明确目标，我通过这段代码到底要了解什么东西，主干要抓住，其它枝叶就不要看了。
在这里我认为主要的有
1.注册这个I2C总线设备
1. adap-&gt;dev.bus = &amp;i2c_bus_type;  
2. adap-&gt;dev.type = &amp;i2c_adapter_type;  
3. res = device_register(&amp;adap-&gt;dev);  
这个设备的总线类型为i2c_bus_type
1. struct bus_type i2c_bus_type = {  
2.     .name       = &quot;i2c&quot;,  
3.     .match      = i2c_device_match,  
4.     .probe      = i2c_device_probe,  
5.     .remove     = i2c_device_remove,  
6.     .shutdown   = i2c_device_shutdown,  
7.     .suspend    = i2c_device_suspend,  
8.     .resume     = i2c_device_resume,  
9. };  
看一下它的match函数
1. static int i2c_device_match(struct device *dev, struct device_driver *drv)  
2. {  
3.     struct i2c_client   *client = i2c_verify_client(dev);  
4.     struct i2c_driver   *driver;  
5.   
6.     if (!client)  
7.         return 0;  
8.   
9.     driver = to_i2c_driver(drv);  
10.     /* match on an id table if there is one */  
11.     if (driver-&gt;id_table)  
12.         return i2c_match_id(driver-&gt;id_table, client) != NULL;  
13.   
14.     return 0;  
15. }  
这个match函数主要用来匹配我们的I2C设备和I2C驱动的，如果匹配成功，最后会调用驱动的probe函数，来看它如何匹配的。
1. static const struct i2c_device_id *i2c_match_id(const struct i2c_device_id *id,  
2.                         const struct i2c_client *client)  
3. {  
4.     while (id-&gt;name[0]) {  
5.         if (strcmp(client-&gt;name, id-&gt;name) == 0)  
6.             return id;  
7.         id++;  
8.     }  
9.     return NULL;  
10. }  
就是判断I2C设备的name字段和驱动中id_table中定义的name字段是否相等。
2.往这条总线上添加设备
1. static void i2c_scan_static_board_info(struct i2c_adapter *adapter)  
2. {  
3.     struct i2c_devinfo  *devinfo;  
4.   
5.     down_read(&amp;__i2c_board_lock);  
6.     list_for_each_entry(devinfo, &amp;__i2c_board_list, list) {  
7.         if (devinfo-&gt;busnum == adapter-&gt;nr  
8.                 &amp;&amp; !i2c_new_device(adapter,  
9.                         &amp;devinfo-&gt;board_info))  
10.             dev_err(&amp;adapter-&gt;dev,  
11.                 &quot;Can't create device at 0x%02x\n&quot;,  
12.                 devinfo-&gt;board_info.addr);  
13.     }  
14.     up_read(&amp;__i2c_board_lock);  
15. }  
遍历__i2c_board_list这条链表，看下面的if语句，首先要让struct i2c_devinfo结构中的busnum等于struct  i2c_adapter中的nr，我们前面也说了，这个nr就是i2c总线的总线号，这里可以理解为是在往这条总线上添加设备。所以，如果我们要向I2C注册一个I2C设备的话，直接向__i2c_board_list添加一个设备信息就可以了，先来看这个设备信息结构是怎么定义的。
1. struct i2c_board_info {  
2.     char        type[I2C_NAME_SIZE];  
3.     unsigned short  flags;  
4.     unsigned short  addr;  
5.     void        *platform_data;  
6.     struct dev_archdata *archdata;  
7.     int     irq;  
8. };  
定义这样一个信息呢一般使用一个宏I2C_BOARD_INFO
1. #define I2C_BOARD_INFO(dev_type, dev_addr) \  
2.     .type = dev_type, .addr = (dev_addr)  
dev_type为设备的名字，前面也说了，这个name一定要和I2C驱动相同。addr为设备的地址。
定义了这样一组信息之后呢，接下来当然是往链表添加这些信息了。
1. int __init  
2. i2c_register_board_info(int busnum,  
3.     struct i2c_board_info const *info, unsigned len)  
4. {  
5.     int status;  
6.   
7.     down_write(&amp;__i2c_board_lock);  
8.   
9.     /* dynamic bus numbers will be assigned after the last static one */  
10.     if (busnum &gt;= __i2c_first_dynamic_bus_num)  
11.         __i2c_first_dynamic_bus_num = busnum + 1;  
12.   
13.     for (status = 0; len; len--, info++) {  
14.         struct i2c_devinfo  *devinfo;  
15.   
16.         devinfo = kzalloc(sizeof(*devinfo), GFP_KERNEL);  
17.         if (!devinfo) {  
18.             pr_debug(&quot;i2c-core: can't register boardinfo!\n&quot;);  
19.             status = -ENOMEM;  
20.             break;  
21.         }  
22.   
23.         devinfo-&gt;busnum = busnum;  
24.         devinfo-&gt;board_info = *info;  
25.         list_add_tail(&amp;devinfo-&gt;list, &amp;__i2c_board_list);  
26.     }  
27.   
28.     up_write(&amp;__i2c_board_lock);  
29.   
30.     return status;  
31. }  
第一个参数呢需要注意，它是I2C总线号，一定要和具体的I2C总线对应。我们看又定义了这样一个结构struct i2c_devinfo。
1. struct i2c_devinfo {  
2.     struct list_head    list;  
3.     int         busnum;  
4.     struct i2c_board_info   board_info;  
5. };  
最后是调用list_add_tail往__i2c_board_list这条链表添加设备信息。
然后是i2c_new_device
1. struct i2c_client *  
2. i2c_new_device(struct i2c_adapter *adap, struct i2c_board_info const *info)  
3. {  
4.     struct i2c_client   *client;  
5.     int         status;  
6.   
7.     /*为I2C设备申请内存*/  
8.     client = kzalloc(sizeof *client, GFP_KERNEL);  
9.     if (!client)  
10.         return NULL;  
11.   
12.     /*指定I2C设备的总线*/  
13.     client-&gt;adapter = adap;  
14.   
15.     client-&gt;dev.platform_data = info-&gt;platform_data;  
16.   
17.     if (info-&gt;archdata)  
18.         client-&gt;dev.archdata = *info-&gt;archdata;  
19.   
20.     client-&gt;flags = info-&gt;flags;  
21.     client-&gt;addr = info-&gt;addr; /*I2C设备地址*/  
22.     client-&gt;irq = info-&gt;irq;  
23.   
24.     strlcpy(client-&gt;name, info-&gt;type, sizeof(client-&gt;name));  
25.   
26.     /*检查这个地址有没有被设备占用*/  
27.     /* Check for address business */  
28.     status = i2c_check_addr(adap, client-&gt;addr);  
29.     if (status)  
30.         goto out_err;  
31.   
32.     client-&gt;dev.parent = &amp;client-&gt;adapter-&gt;dev; /*指定设备的父设备*/  
33.     client-&gt;dev.bus = &amp;i2c_bus_type; /*指定设备的总线类型*/  
34.     client-&gt;dev.type = &amp;i2c_client_type;  
35.   
36.     dev_set_name(&amp;client-&gt;dev, &quot;%d-%04x&quot;, i2c_adapter_id(adap),  
37.              client-&gt;addr);  
38.     status = device_register(&amp;client-&gt;dev); /*注册设备*/  
39.     if (status)  
40.         goto out_err;  
41.   
42.     dev_dbg(&amp;adap-&gt;dev, &quot;client [%s] registered with bus id %s\n&quot;,  
43.         client-&gt;name, dev_name(&amp;client-&gt;dev));  
44.   
45.     return client;  
46.   
47. out_err:  
48.     dev_err(&amp;adap-&gt;dev, &quot;Failed to register i2c client %s at 0x%02x &quot;  
49.         &quot;(%d)\n&quot;, client-&gt;name, client-&gt;addr, status);  
50.     kfree(client);  
51.     return NULL;  
52. }  
这个函数的功能是新建一个I2C设备并注册它，在I2C子系统中，I2C设备使用结构structi2c_client描述，那么首先要申请内存空间，I2C设备的主机是谁，必须知道挂载到哪条总线上的，然后就是一些赋值操作，最后就是注册设备，那么这个设备就实实在在的挂在到这条总线上了，这也是新的I2C设备注册方式。
3.i2c_do_add_adapter
你看说着说着就跑远了
1. static int i2c_do_add_adapter(struct device_driver *d, void *data)  
2. {  
3.     struct i2c_driver *driver = to_i2c_driver(d);  
4.     struct i2c_adapter *adap = data;  
5.   
6.     /* Detect supported devices on that bus, and instantiate them */  
7.     i2c_detect(adap, driver);  
8.   
9.     /* Let legacy drivers scan this bus for matching devices */  
10.     if (driver-&gt;attach_adapter) {  
11.         /* We ignore the return code; if it fails, too bad */  
12.         driver-&gt;attach_adapter(adap);  
13.     }  
14.     return 0;  
15. }  
前面通过i2c_scan_static_board_info往I2C总线上添加设备是新的方式，而这里调用每个I2C设备驱动的attach_adapter函数，然后在attach_adapter函数中去实现设备的注册，这是老的方式，i2c-dev.c中就是采用的这种方式。至此，总线这块就看完了。
</rich_text><encoded_png char_offset="11945"></encoded_png><encoded_png char_offset="18895">iVBORw0KGgoAAAANSUhEUgAAAX4AAADYCAIAAABjih/sAAAAA3NCSVQICAjb4U/gAAAgAElEQVR4nO3daUAT1/ow8AMEwqYiiqAIBEQU0YKyuYAsKiCUJcG9tEWscqvWXatXakVLbV2qrUvVVty3ahJA/2xaCwXZLYpIURBQUVCQgAgECJn3w/SdmwYM2ZhR8/w+heEsD4E8zMyZc44ahmEIAADIpU51AAAAVQSpBwBAAUg9AAAKQOoBAFAAUg8AgAKQegAAFIDUAwCgAKQeAAAFaFQHQIbo6GhtbW3RIxEREUZGRsSXhYWFqampb6q+atUqOp1OfJmenp6TkyNWhs/nf/3110qKF4D3n0qknl7zwvjx48ePHy9lax4eHh4eHmIHN23aJGdwAKgkuOACAFAAUg8AgAKQegAAFFCJ1LNgwQKqQwAA/ItKpJ5x48ZRHQIA4F9UIvUAAN42kHoAABSA1AMAoACkHgAABVQi9dy9e5fqEAAA/6ISqefcuXNUhwAA+BeVSD0AgLcNpB7lWL58OdUhAPAugdSjHKamplSHAMC7BFIPAIAC7+R6PVwuNzk5WfryeXl5DQ0Nkst89dVXw4cPVywuRQmFwhUrVnR2dpLT3bx587y8vMQO/vLLLwUFBeQEYGNjs3btWrGDf/3115EjR0SPjBs3jrieLS8v37VrF/7a1NR0y5Yt+OuGhgZiySQdHZ19+/YR1SMjI4nXjo6OS5YsEesxPT2dtIEIGo32008/aWhoiB58/fp19/eh70RGRk6YMIG07t7knUw9bW1tPB5P+vJ8Pl9CeaFQyGazx4wZs3LlSmVEJ7/MzMyDBw+6uLhYWFj0dV+XLl2qr68XSz1CoXD9+vVNTU2zZ8/u6wAuX76MYVhkZKS+vr7o8djY2KNHj4oG8Pr1a+K1QCAgfpX9+vUjjguFQuJ4e3u7aIPE8UuXLvXr12/RokVin/wDBw5cvnyZhB/56dOnWVlZs2fP9vT0FD2emJh49OjRmTNnir0VfeHSpUuamppvQ+pBmArYuHGj5AJz58718PAgJRZJVq1aNXLkSHL6OnTokK6ubktLi+jBzMxMhNDt27dJCKCmpkZdXf3SpUuiB4VCoampaVRUVF/0WFxcjBBKS0sTPdja2qqvr//TTz/1RY/d2drafvHFF2IHyfzz27Jly7Bhw7q6usjpTgK414MQQiwWKzMz88WLFxTGgGEYl8tlMpnkdBcSEsLn88WuWzkcjrW1tb29PQkBmJiYTJ48mc1mix7Mzc19+vQpi8Xqix7t7OxsbGy4XK7owdTU1JaWFtLedhaLxeVyMQwjjrS3tycmJpIWAJPJfPbsWW5uLjndSQCpByGE/P39NTU14+PjKYzh1q1bjx49Cg0NJae7oUOHTpw4UexzSGbuQwixWKzExETR6yMOh2NpaSn9Otly9MjhcEQ/+XFxcc7OzqTd5mMymdXV1fn5+cSR1NTU169f91G27c7BwcHKyorD4ZDTnQSQehBCSF9f38fHh9rfB5fLHT58uLOzM2k9hoaGXrlypaOjA/+ysLCwsrKStM8AQojJZL569er69evEkb7OfSwW68mTJ8R99M7OzoSEBNLSPUJowoQJFhYWoud6XC7XycnJzMyMtBjw/Etad28CqecfTCbzxo0bTU1N8lXftm2bggGw2Wwmk6mmpqZgO9JjMplNTU03btzAv+RwOKampq6urqQFwGAwHB0diY/BnTt3ysvL+zQR4B9yosf09PSGhgYyT/TU1NSYTCZxsikQCBISEkJCQkgLACHEYrEqKipu375NZqfdqUTqkWaB1KCgIAzDrly5Il8XbW1t8lXElZSU3L9/n8wzDoQQfmlDfA45HA7JuQ8hxGQyExISurq6EEJcLhe/DOy77tTU1ET/53M4nHHjxo0cObLveuyOyWSWlZXhU5rT09NfvnxJ5mkXQsjV1XXo0KFi19rkU4nUI80CqYaGhh4eHlT9PjgcjpGRkbu7O8n9MpnM+Pj4rq6u+/fvl5SUkPn/H8diserr69PT0xFCHA4nJCREXb1v/yaZTOaDBw/u3bsnFArj4uJITvcIITc3N2NjYzz9cbncMWPGjBo1iswA1NXVQ0JCxG7wk0/5v+aMjAwvL68xY8bY2touW7bs1atXCCFHR0cHBwcHBwcXF5fly5fX1NSIVmlvb580adKKFSuUHoxMWCxWcnJya2sr+V1zOJygoCCx501IwGKxXrx4kZmZyWazBw0a1H1rw75ma2tra2vL5XLxEwESEoGbm9uQIUO4XG5OTk5NTQ352VZdXT04OJjL5QqFQi6XS37uQwixWKx79+49ePCA/K7/R7lj9Twez8DAICMjA8Owtra2yMjIxYsXYximoaFRWlrK4/EePXq0detWKyurV69eEbV+++23cePG6enpvXz5UrnxyOTZs2fq6upsNluOur0+OiRBRUUFQigxMVHuFhRhY2OzcuVKJyenhQsXUhLA5s2bTU1Nv/vuO0NDw46ODhJ6XLx48fjx49esWWNtbU1Cd93hzzScOnUKIfTXX3+RH0BHR4ehoeGOHTvI75qg5NRTVFRkYGDQ2tqKf/n06dNffvkFwzANDY2amhqi2MyZM3/++WfiSz8/v9jY2A8//PDgwYPKjUdWkydPDgsLk6OiIqlnz549AwYM4PP5cregiI0bN+L/hBISEigJgBhvCg8PJ6fHpKQkvMf169eT06OYjo4OAwMDhJClpSUlAWAYFh4e7uzsTFXvmNIfKbS1tXV0dBw9evTKlSu5XK62tvZnn33WvZi7uzvxB1ddXZ2dnT179uyPP/74xIkTyo1HViwWS3S8mRxsNjsgIIBOp5PZKYE44ffx8aEkAEdHRxqNhhAi7drH29sbf0HJxQ5CSFNTMzAwEJH4I3fHZDILCgqePHlCVQBKTj00Gu3atWsJCQmWlpYnTpxgMBjffvtt92KamprEJMlTp05Nnjy5vLzczMzszp079+7dU25ISJYFUsXGm0lQW1ubk5ND1WcAIeTk5IS/oCr3EUjLfVpaWvgLMp8kEGNpaYkQ6tPhPMl8fHz09PQofMBHyaknNzc3JSXF3t5+1apV8fHxt27d2rp168uXL8WK3b59e8yYMQghDMOOHz+OEPruu+9+/PHHkSNH9sWJj/Tzkq2srBwcHMj8fcTHx9PpdD8/P9J6FEPt9BFRZWVlJPdYW1tLco8E/GkMsfEWMmlra/v7+1M4xK7k1NPU1LRu3bqWlpZ/WldX19bW1tHRIQpgGHblypWUlJRPPvkEIZSRkdHW1nblypULFy5cuHBh//79p0+fFggEyo1KJsR4MzndsdlsPz8/PT09crrrjpg+0hfnm9Koq6vD323SMv79+/fxF3FxceT02F1iYiISefMpQe3URSWnnhkzZvj5+Y0ZM2bevHmzZs3y8vL6+eefdXV1EULOzs4MBsPU1HTHjh1Xr14dOnQoQig2NvbTTz8lBpU9PDy0tLRkWotH6UJDQ/HxZhL64vF4aWlpFF7wI4Q4HE5AQAA+3kxJAAkJCVpaWvPnzyctAPxJgqCgIKouN/AHixYuXJienl5fX09JDAghf39/Go1GWfrri3vXdXV1GRkZubm5YmsyUEXW4Sd8vLlPu8CdPHlSU1OTx+PJUVcpGhsbNTU1jx8/jo83UxLDzJkzAwICUlNTEUJlZWUk9Ig/SXD69GlNTU1KnufYsWOHoaFhXV0dnU4/duwY+QEQAgMD/fz8KOm6T54cHTx4sJubm4uLC36+887pPr+5j3A4HG9vb3yclRL4xJGgoCAWi4VPHyU5APymPovF8vT0HDhwIAknPo8ePbp16xaTyQwMDFRTU0tISOjrHrvDnyAdPHiwt7c3hRd9SOGpi4pQiYkUshKb39xHXr9+nZqaSuHYFkKIy+V6eHgYGhp6e3sPGDCA/Guu//u//xMIBEFBQfh4MwlXQFwuF1+oYMCAAd7e3uT/yNXV1QUFBfhVdmhoaGpqanNzM8kxEIKCgoRCodxTFxUBqacHYvObpUEsEiy95OTk9vb24OBgWSsqS2tra3JyMp77tLS0AgMDyZ/Xw+FwPDw8Bg8ejBBisVj4UmF92iOXy/X398efJGCxWPhyOX3aY/cA9PT08CcJgoKCBAIBfsuZEvjsGUrOvCD19EBsfrM0REfxpMRms/GZhLJWVJbk5GQ+n0+s2MBkMvFpTaQF0NbWlpycTNxlx5806dPTkOfPn2dmZhJnmkFBQR0dHSR/8jkcjr+/v7a2NkIInzNM7eo5TCYzOTlZwaUX5ACpp2fE/OY+ap/kZTF7xOVyJ06ciA81IoT8/PzodDqZ/wDxybrEm6Cjo+Pr69unqSc+Pl5LS8vf3x//0tjY2M3NjcxPPj4CI3qVjS/VyOfzSYtBDJPJxP8HkNwvpJ6e4fOb++4C5Pr1683NzRSmno6OjitXroiuFKOrq+vn50fm55DL5bq6uorunshisfp0vJnD4fj4+Ihu/MBkMsUWae1TCQkJNBqNyH14AC0tLfgAHyWGDRvm6upK/j0vSD0909DQwFc26KP2ORwOvlZmH7XfK3xcQ2x9PCaTiS/cR0IAnZ2dV65cEbvLHhAQQKPR+mjUqbGx8caNG2Lpnslk4vf7+6LH7thsto+Pj+g2PviquNQu3IVPXSRtAzjcO7kPFzlYLNYvv/xy9OhRKysr5bbc1dUVGxvr6ekpuiwxyTZs2ICvEC56MDAwUCAQrFixIjw8vK8DSElJaWxsFEsE+KjTli1bzM3NiYODBw92cHDAXzc2NhIjj/r6+sQcKD6fTzwFSqPRRDe6It5k/EH5oKAg0R4tLCwcHR2//PJLOe7WyaqpqSkpKSk2NlbseGho6JdffjlnzhxNTc2+jqFH/fv3b2xsdHFx8fX1Ja9XSp4mIllubq4ctUg7CadKdHR095+amNVNAgsLi+4B/Prrr2LFAgICiO9mZGQQx8eNG0ccf/ToEXF8wIABog2KNtXjdlcxMTF9+mOKqa+vFwuA4iW7KKKG9f2Dc6pg06ZNO3bsoDoKAN4ZcK8HAEABSD0AAApA6gEAUABSDwCAAiqResrLy6kOAQDwLyqReo4dO0Z1CABQ4Nq1a9HR0UpssKioqMeNHsTcvHlz3bp1ksuoROoBQDU1NTUpd8+J1tZWaa4hmpubq6qqJJeB1PM2evz4sYODw9GjR4kjGIb5+PhERkbiX3bf4rW+vt7h/3N0dIyMjCRnPgSg0JkzZ/z8/KZOnbpp0yb8CdjExMSAgIAZM2aIbYXw+PHjlStXvnz5sqqq6sCBA7t37546deqnn36KL8yckpISGBjo7e39008/CYVChFBUVBS+btzZs2d37tyJEOLz+UuWLBF9zjYnJyc0NNTT0/P777/H11M/ffr09OnTg4ODb926hZfBJ82xWCw2m03s+IBXVImnmRXZn4+SLsrKynR1de3t7YkjWVlZ+vr606ZNw96wxWtNTY2WlhaPx+PxeNXV1R999NHHH3+sxJDA26akpGT48OGlpaU1NTU+Pj5nzpzJy8uztra+e/duaWmplZVVdnb2pUuXFi1aVFpaamdn98cff2AYlp+fr6ure/ny5dbW1oiIiI0bNxYWFg4fPjwvL6+ystLDw2P//v0YhkVGRu7btw/DMCcnJyMjo46OjuvXr0+aNCk7Oxt/Ivzhw4fm5uY3b9588uRJSEhIVFTU1atXrays/vrrr+LiYltb29DQ0IyMDBsbm3v37hUXF9vY2CxatEi0Ipz1vKWMjIwMDAyKiorwL8+cOUPMMsdPoR0dHRFC2traW7ZscXFxQQipqakZGBgYGBiYmpoGBwdTuNEKIIGNjU1paSmNRisqKmpra2tubj537lxkZOTYsWNHjRp19epVMzMzhFBJSYm7uzu+BC1e0draOjQ0VEdHx9PTs7m5+bfffouIiMB3bdiyZcuFCxcQQiEhIcnJyS9fvhQKhc7Ozjk5OSkpKaKTjS9fvuzq6ioUCquqqgIDA7lc7sWLFzds2DB+/Hg7O7u1a9cihM6ePfvFF1+MGTPGzs6OuENEVITU8/b6+OOPT58+jRDq7OxMSkoi5j2+aYtXgUCwe/fu3bt3b9++PSYmRo6FE8E7pLy83NnZefv27Xfu3DEyMkIINTY2Ghoa4t+1tbXFVyN58eLFpUuXjh49Siy8TcybV1NTQwg1NzcPGjQIPzJo0CB8nWYvL6/CwsKkpCQvLy9fX99r166JpR4ej9fY2JiWlpaWlvbs2bMlS5aItoMvOykaD/GCqAip5+01a9YsLpfb1dWVkpIydepUYo19CVu80mg0Go2mp6dnamqKpy3wvrp48WJgYOCJEyfWr1+P/23Y29v/+eef+HcXL158/vx5hJCnp6eHh8fmzZsXLVqE38cRY29v//vvv2MYhhC6fv06vkgAnU739PTcvn37tGnTfH19L1y40NXVZWNjQ9RycHCg0+mbN2+Oiopydnbu6OgYP348sZk9vgiJg4MDsZFvenq6WEVYNEM5FixYoPQ2BwwY4OjoeOPGjbNnz0ZERBC7Eubm5vJ4PD8/P3yX17KyMjs7u+DgYBqNtmrVKrzM8uXLBwwY8PXXX4suxAXeJ9OmTZs3b15HR8ejR4/q6uqqq6tPnjx56dKlwMBAOp1eWVm5d+9eYu3BZcuWXb58+fDhw/i1uaiwsLDz58/7+PgYGRnl5+cTVUJCQthstru7u56eXkdHx5w5c0RrhYaGnjt3zsvLi8FgZGZmstlsc3NzT09PPz8/LS2t169fGxoafv75515eXsHBwerq6k1NTSNHjhStCLeZ30ZlZWX4ghJXrlwJCQkZMWKEQCBISkrCbzOnpKTY2dm9fv0aL1xeXt6vX7+HDx/S6XSihcLCQj09PaIMeC/V1tZmZGTU19e3tbVlZmby+fyurq7CwsKCggKBQCB9O0KhsKioKDc3l8/ny1SrpKQkKyuL2G6vs7MzPz//7t27QqEQw7CSkpLc3Nzc3NyKioqYmJjt27eLVoSznrear69vREREWFgYsUErEtniddKkSQKBIC8vD9/itb29ncFgIIQwDEMInThxgsL9lAEJjI2NiW0FpkyZgr8gllWTnpqa2rhx4+SoZWtrK3qERqM5OTkRXwqFwgULFixatKijo+Ps2bPXrl0TragS6/W8l4vp1NfXl5aWamlpjR079h3dahG89+rq6m7evKmpqTl16lTRZWERPFL47nrXt3gFfaegoGDp0qWKtNB9wkRUVJSHh4es7RgZGYWEhAQEBIjlHaQiazNTu+cMACRjMBhhYWGKtNB9wsTevXuV+3y8SqSe7nf1le7u3btyXC0DoDiBQPD9999fu3ZNT09vzZo106ZN4/F4ubm5kydPRghxOJzDhw/r6+t/9NFHzc3Nnp6eV69e5fP5+MMZu3btGjJkyJkzZ86cOdPa2jplypStW7fiW7OK2r59e3t7+5o1aw4ePFhVVZWYmNjQ0NDS0uLp6XngwIGWlpaQkJDly5erq6tXVVXFxcXV1dWlp6e7u7tPmzZt165d6urqMTExEyZMEI1ZJUa4SPDODaKB98bx48dnzJhRU1OTnp5uZmYmFAozMjJ8fX0xDOs+laH7RIruEzIwDCMmTOBqa2t1dHSqq6sxDMvPz+/fv//u3bs5HE73GRj5+fk6OjoZGRl1dXWWlpbz589/9erVzp07g4KCxGKGez0AvNv09fUfPXqUlpY2YsSIx48f488o43qcyiA2kaL7hIzuXRgbG6urqxPPiDEYjLVr1+bn53efgYEQ+uCDD9zc3AYPHmxraxsREdGvXz83N7eWlhaxmFXigguA99isWbMGDhzI5XJjYmKMjIyuXLlCfKvHqQxiEynKy8uZTKaLi4udnR0+IaNXAwcORAg1NzfjTwkikRkYCCEajUa0j78WzYZEzHDWA8C7LTY2trGx8cCBA0VFRQ0NDYWFhcS3epzKIKb7hAwp9TgDQ/qYVeKsp7y83NramuooAOgTo0aNmjVr1tWrV3k8nq6urpOTE7FBa49TGcR0n5Axe/Zsafp90wwMKWOGRwrfmS4AeBMej1dSUtK/f387Ozt19f9dyvz999/4vRsjI6Pz588LhcKoqKju1Z8/f15WVmZra6unp3fr1i0nJ6fug1w9wjCsuLi4ra3N3t5eyioElTjrAeD9NnDgQGIihag3TWUQ0+OEDGnINwMDB/d6AHhv2dnZZWdn29raOjk53bp1y8LCguqI/gfOegB4n+FTGaiOogdw1gMAoACkHgAABSD1AAAoAKkHAEABSD3KQcLkeADeJ5B6lAOWBAJAJpB6AAAUgNQDAKCASqQeuBoC4G2jEtNHAQBvG5U46yFBW1sb1SEA8C6B1KMc27ZtozoEAN4lkHoAABSA1AMA6FlCQkKvC+AJhcKysjI5GleJ1CO2mRkAQBoNDQ1Pnz6VXKajo2PSpElyNK4SqefYsWNUhwDAO+nVq1dLly51d3ffsGFDa2vrkSNHcnJy8G8dPnw4Ozs7Ojq6ubl5zZo1CKGcnJzQ0FBPT8/vv/9eIBCINZWYmBgQEDBjxoxz584hhFRiC0AS9ueDLQDB++f48eN0Oj0+Pv7Ro0ezZ8/+7LPPTp48GRYWhmFYS0vLkCFD6urqqqqqDAwMnj59+vDhQ3Nz85s3bz558iQkJCQqKkq0qby8PGtr67t375aWllpZWWVnZ6vEWQ8AQD4BAQFBQUHm5uZ79uxhs9lMJjM1NbW1tZXD4Xh7ew8ePNjY2FhDQ2PYsGGXL192dXUVCoVVVVWBgYFcLle0nXPnzkVGRo4dO3bUqFFXr141MzODBVIBAG9EbBxoZGTU0tLSr1+/6dOnX7lyJTY2VmxzCx6P19jYmJaWhn+5ZMkS0e82NjYSC8jb2toiFbnXAwCQT3p6ekdHB0IoKSnJyckJIRQWFrZz584nT554enqKlnRwcKDT6Zs3b46KinJ2dsZrEezt7f/880/89eLFi8+fPw9nPQCANzIwMHB3d7e2tk5PT2ez2QihGTNmhIeHr1q1Ct/wS0NDo6Oj4+uvv/7qq6/OnTvn5eXFYDAyMzPxwoTFixf7+PgEBgbS6fTKysq9e/dC6gEA9Cw8PDw8PPzZs2eVlZU///xz//79EUJdXV00Gi08PBwvo6mpWVRUVFdXR6PR4uLiSktLGxsbDx06JLaHsp6eXkZGRlFRUVdXl4ODg4aGBqQeAIAkw4YNGzZsGP46Nzc3JiZm+vTpQ4cOJQowGAwGg4EQUlNTw+/j9EhdXV10X3ZIPQAAaQ0fPnzx4sW+vr6KNwWpRzmIgQAA3mOmpqampqZKaQpGuJRj/fr1VIcAQO8KCgqWLl3a47fkno3Vqx5bhtQDgAphMBhhYWE9fkvu2Vi96rFllbjgggVSAcDxeLzc3Nxhw4ZdvXqVz+cnJCRYWlru2rVryJAhxGysH374IScnZ9euXS9fvpw5c+batWurq6sTExMbGhpaWloiIyOJ1+Hh4SkpKStWrEAI3bhxg8fjmZiYVFZW5uTk3LlzZ8qUKVu3btXW1hZtGQ8jKipKJc56YJMsAHDPnz9PSUmpr6//8ssvLS0tU1JSaDTa3r17EUL/+c9/dHV1161bV1FRMXfu3LVr1545cyYnJyc6Orq+vn7Tpk06OjpLliwRfV1TU5Oamoq3XFJSkp+fX1ZWFhkZOWPGjLNnz1ZUVKxbt060ZSKM+vp6lUg9AAAx1tbWoaGhOjo6np6ezc3NCCHJs7EYDMbatWstLS3FXnfn6+sbHByMT/u6ePGiaMtEmZCQEJW44AIAiOnXrx/+Qk1NTexbPc7GGjhwIFFA9DVBKBTiLwYNGoS/MDIyampq6rF3Ly8vOOtRjgMHDlAdAgDKIXk2lpjW1lb8RX5+Pv4iLS2tvb0dIZSUlCT6DKEoOp0OZz3K0etibgC85STMxurs7Oyxyrhx4+7fvx8eHt7e3s7j8fBHfmg0moeHx4gRI27cuIFfcBEtR0dHE3VVYh+u8vJya2vrPu1i06ZNva5iC8Bbrqqqqq6uztnZGcMwfDaWvb292GwsMc3NzXfu3DE3Nzc3N0cInThxoqCgICoq6uHDh3Z2dgYGBmItExVV4qzn2LFjkBcA6JWUs7FE9evXz83NTeygiYmJiYlJjy0TVCL1AADI4eHhQSwJJhmkHgCA0lhaWr5p0F0MjHABACgAqQcAQAFIPQAACkDqAQBQAFIPAIACkHoAABSA1AMAoACkHgAABSD1KAeszQyATFQi9ZCwQCrsSAGATFRi5joA4G2jEmc9AIC3DaQeAAAFIPUAACgAqUc5kpOTqQ4BgHeJSqSe8vLyvu4iPT29r7sA4H2iEqnn2LFjVIcAAPgXlUg9AIC3DaQeAAAFIPUAACgAqQcAQAFIPQAACkDqAQBQAFIPAIACkHoAABSA1AMAoACkHgAABSD1AAAooBKph4QFUknoAoD3CSyQCgCggEqc9QAA3jaQegAAFIDUAwCgAKQeAAAFVCL1kLBAKgldAPA+UYnUQ8ICqbAGKwAyUYnUAwB420DqAQBQAFIPAIACkHoAABSA1AMAoACkHgAABSD1AAAoAKkHAEABSD0AAApA6gEAUIBGdQDyKC8vr6qqkr58VVXV9evX+yycf3VhZWVlZWXVR710dHT8+eefUhZmMBjW1tZKj+HWrVs8Hk+akrq6upMnT1Z6AOR7+PBhZWWllIWnTp2qpaWl3ACam5tzc3OlLGxjY2Nubq7cABBCWVlZra2t0pQcOHCgo6Nj7+Wwd9DGjRsVfSP7TFBQUN/94ImJidJHMn36dKUH0NHRIdO7UV9fr/QYyOfn5yf9jxwfH6/0AH799VfpA/j444+VHkB9fb1Mv/f29vZe23wnU89b6OzZsxiGHTlyRFtbu7m5uY96WbRokaOjozQlT506pamp+fLlS+UGkJycjBB6+PBhryUbGxvpdHpsbKxyAyBfY2OjlpaWlD+Is7NzeHi40mOYOXNmQECANCV37txpYNcSzBgAABOGSURBVGDQ0dGh3ACOHz+upaXV2NjYa8mHDx8ihJKSknotCalHmWpra9XV1S9dutQXjQsEAiMjo2+++UaawjweT1NT8/jx48qNYcmSJQ4ODlIWnjlzZmBgoHIDIN/p06dpNJqUp287duwYNGhQZ2enEgNoamqi0+nHjh2TpnBZWRlCKDk5WYkBYBgWFBTk5+cnZWEHB4fFixf3WgxuMyuTsbGxm5sbm83ui8YzMjLq6upYLJY0hQ0MDLy9vblcrhIDEAqF8fHx0u+9ERoampqa2tzcrMQYyMflcj08PAYNGiRNYRaL9fLly/T0dCUGkJiYKBAIgoKCpClsbW1tb2/P4XCUGMDr169TU1Ol/MNDCDGZzPj4+K6url7KKZYNgbi9e/f279+fz+crveUvvvjC1tZW+vJKv/rDP1HFxcVSln/x4oWGhsaFCxeUFQD5WlpadHV1Dxw4IH0VOzu7ZcuWKTGGWbNmeXt7S19+69atJiYmXV1dygrg4sWLGhoaz58/l7J8cXExQigtLU1yMTjrUTImk9nc3Kz0ATUMw7hcrvT/eRBCwcHBHR0dMt2ZlozL5drY2NjZ2UlZ3sjIyN3dXbn/gUmWnJzM5/Nl2mQtNDSUy+UKhUKlBNDW1pacnCxTACwWq7a2NisrSykBIIQ4HI6bm9uQIUOkLG9nZ2djY9PrGbdKpB6ZVi89ceKEk5PT4MGDGQzGkiVLZL23b2Fh4ejoqPTPW35+fnV1tUx/gvjVn7KuufDcFxISIlOtkJCQxMREPp+vlBjIx+VyXV1dhw0bJn0VJpP57Nkz6cfCJUtNTW1paZHp9z5u3LiRI0cq6y+wvb09MTFR1h0uWSwWh8PBJO/xp9i52Lth48aNUpa8du0aQujDDz88efLk5s2baTSaHEPUMTExgwcPFggEslaUYMOGDQwGQ9ZaSrz6y8/PRwjl5ubKVOvx48dqamp9Md5Mgvb29gEDBuzatUvWilZWVuvWrVNKDJ988snEiRNlrSXfX0uPEhIS1NTUHj9+LFOtvLw8hFBeXp6EMipx1iO9W7duIYTWr1//ySeffPPNNwcOHJgwYYI0FTdt2kS8ZrFY9fX1yr3XKMcZB1Lq1R+Xyx0+fLizs7NMtczMzJycnJR7t5s0N27caGpqkukiF4f/z1c8gM7OzitXrsgRQGhoaFVVFf7HrCAul+vk5GRmZiZTLbyK5DdB+aknIyPDy8trzJgxtra2y5Yte/XqFX6cz+dHRUWNHj3azMzMxcUF/3Pk8XhSPfhIFk9PT01NTV9fX19f3y+//HLw4MHR0dGyNjJ69GhbW1slft7u3r1bVlYmx7buSrz6Y7PZTCZTTU1N1oosFishIaGzs1PxGEjG4XAcHBzkeDadxWJVVFTcvn1bwQDS0tJ4PJ4c/3KcnZ2HDx+u+F+gQCBISEiQI/epqan1nn8VOx0Tx+PxDAwMMjIyMAxra2uLjIwkRvjnz58/f/78+vp6oVCYk5MzZMiQgoKCuro6DQ0N5cbQnfQXXBiGlZaWbtu2LSQkxNTUFCFkZ2fX2toqaxebN282NTUVCoUyx9qTrVu3GhsbyzdmoZSrv3v37iGE/vjjDznq3r9/HyF07do1RQIgn0AgGDJkSHR0tBx1u7q6hg0btmXLFgVjiIyMHDdunHx1ZR0P7RF+vnz//n056qalpSGJ46FKTj1FRUUGBgbEZ/Xp06e//PILhmHFxcXGxsZtbW1EydOnT3M4nLct9eTk5Jw/fx6/OSIUClesWIEQwjOpTF0UFBQghLKzs+WItjt7e/slS5bIV7e0tBQh9PvvvysSwPbt242MjOTOX3Z2dp9//rkiAZCv10+OZMuWLbOzs1MkgK6uLhMTk6+//lq+6n/88QdCqKSkRJEYFPkpes3dSr7gsrW1dXR0HD169MqVK7lcrra29meffYYQyszMdHd319bWJkqGhYXJcQXR17KysubPn//tt9++ePGiurq6qqpKTU1N1gtdhJCjoyODwVDKlU55efmdO3fkOOnFjRo1asyYMQqee3M4nKCgIA0NDfmqh4aGxsXFKWu8mRxxcXEyPUkghslk3rt378GDB3IHkJWVVVtbK/dnxN3d3cjISJG/QKFQKOvzHKI0NDSCg4Ml/OEpOfXQaLRr164lJCRYWlqeOHGCwWB8++23CKG2tjbRvPPW+vzzz+fMmbNt2zZjY2Nzc/Pff//9wIEDFhYWcjTFZDKVcruHy+XijybL3QIeCSZ5pPPNKisrCwsLQ0NDFQmgpqYmJydH7hZIhsn+FJUYDw8PQ0NDRT75HA4HfzRZvuoaGhpBQUGK/AXm5uY+e/ZMkfMDFot1+/btN076l+9s6k1ycnJEZ449ePBAU1Ozvr4+KSlp7Nixovc+Tp48uWzZsrftggtXU1OTkZGRn5/f0tIidxcZGRkIodu3b8vUdXcTJ05UcC6ygld/e/bsGTBggIIj9FZWVmvWrFGkBTLhTxJIHhvuVXh4uLOzs9zVGQzG+vXrFQkAf5q0srJSvurr1q2ztLRUJAD86YQ9e/b0+F0ln/U0NTWtW7eupaUF/1JdXV1bW1tHR2fatGnt7e3E3P/W1tYffvhBynFr8pmYmLi5uTk5Oenq6srdyOTJk01MTBQ88Xn69Glubq6CV6YKXv2x2eyAgAA6na5IDCwW6x0aYudyufhjAYo0wmQyCwoKnjx5IkfdW7duVVVVKXLahRDy9vbu37+/3G87h8NR8A9PS0srMDDwjVMaFclq3QmFwrVr15qbm8+dOzc0NNTMzOzMmTP4t/7++29bW9vJkyfPnz/fwsJi0aJFAoGgrq4OIWQh4tmzZ8oNCZP9rEdZXURGRtrb2yvS7P79+/X09KQZYpNs9erV1tbWclR89uyZurr65cuXFQwAf67/r7/+UrAdcowaNWrlypUKNtLW1qavr79v3z456kZFRSllhHTevHlubm5yVCwsLEQI3bx5U8EA2Gy2urp6jx/qPnmaua6uLiMjIzc3V+yCpaur686dOxkZGX2RXySgKvWkpqYihMrKyuRu1tvbOzQ0VIG4/iH31d+hQ4d0dHRev36tYAD4eHNUVJSC7ZAAf5Kg19mP0pgzZ46Hh4ccFceMGbN8+XLFA7h06ZK6unpNTY2sFbds2TJ06FDF56Di828PHTrU/VswkaIPu+jo6Bg4cODOnTvlaxO/EYYvQibZ999/L7mA3CO106dPZzKZEgo8fPjwq6++Wr58+blz5yT/pS5btmzMmDGyBkC+7du3DxkyRMKTBElJSZEiJMxTv3DhgkxzvnHSPA+Bv+2rV6+W/MBUc3Ozjo7O4cOHZQoAk+J5iAcPHmzevHnNmjVZWVmSm2KxWD3ORlKJiRRUjeJramoGBgbKfZMlISGBRqMFBARIKFNVVXXo0KGoqCjJTamrqwcHB8saSUNDQ3p6uoR3r6amZvLkycOGDQsKCjp48OC2bdsktMZkMktKShQZbyYHh8MJDg6W8CQBg8GY/v/p6+vj6/L1yN/fn0ajxcfHyxQAm80ePHiwh4fHmwrU19dPmTLFzMxs2rRpK1askHA3R19f38fHR9YFpB48eHDv3j0Jd5rKysq8vb1HjRo1derUTz/9VPJ64UwmMz09vaGhQfwbsqbD91tycvKHH37o5eX1448/dnV1VVZWHjx4cPv27b2eN72pQFxcnJqaWnV1tRzBBAQEzJw5U3KZ6OjoRYsWSTNKKMfV38mTJzU1NXk83psKxMbGzp07F3+dlZUl+aSms7Nz0KBBO3bskD4A8lVUVCDp1vfEMOzVq1cuLi6ST2oCAwOlX98P5+TkFBERIaHA9evXibGzb7755osvvpBQGP8lNjQ0SB/Ajh07DA0NJayyumXLFmL07ezZs7Nnz5bQGr7CbPcFMyH1/E9hYeHw4cPz8vIqKys9PDz279+fn5/fv3//3bt3V1RUSK77pqc2W1tb9fX19+/fL2swr169otPpv/76a68l29rapEk9clz9BQcH+/r6SijQ2dmJ/4EKhcLNmzd/9NFHkhtcuHChIuPNJMCfJJBmVXMMw5YvX37q1CnJZWJjY6Vc1RiHP8V69epVCWVev349ZcqUjRs37tu374MPPsjPz5dQuKGhQVNT8+TJk1IGgEmxwnR0dDRxOXb48OEPPvhAcoN+fn7dt0uA1PM/mzZtIubd/P7771OmTMnPz+/1be2VrKvM4fDbBC9evOi1pJSpB5NxBQb8NsGRI0d6LZmfnz9jxgx/f/9e/7XKtwIDmSZPnhwWFiZNyb///nvChAm93oitr6+n0WinT5+WMgBp1jmpqalxdXVds2ZNTEyMg4NDSkqK5DZnzJgRHBwsZQDSrHPy5MkTCwuLpUuXrl27dvTo0b3ewjt69Gj3BTMh9fzP8uXLf/zxR/z17du3x44dm5+fL98Ihahz585paGjU1dXJVGvOnDmenp7SlJQ+9ch09YcPjtTW1koog5/sODs7SzkexOfz+/XrJ994MwnwJwnYbLY0hSMiIqTcpmLatGksFkvKGKZOnTpv3jzJZf773/+uXbsWf33jxo2xY8dKLn/48GEdHR0pl8rdt2+fvr6+6HTLHjU2Nl6+fDkhIYHD4fS6ptXz5881NDQuXrwoelAlbjNLyd7eHh9WQAhdv37dwcFBKc3i9xoTEhKkr8Ln8xMTExV8oqw7Hx8fPT09KZ8xY7PZbm5uxsbGEsokJSX98ccfmZmZEu6JiqLT6f7+/m/ts4VxcXF0Ot3X17fXkq2trVwuV8rJJUwmMzk5WZr9854/f56ZmdnrqIienh6xCyOPx+v1wdfg4OD29nZ8I6Necblcf39/ydOecnJyoqOjQ0NDAwMD4+LiJI+EIISGDBkyZcoUsVEONUzeqT3vkPLycmn24eTz+QEBAerq6kZGRvn5+cnJyTweb926dfgkZkX4+/snJSVJv/ILfrPzyZMnw4cP77Uwn8/X19cXCATStDx79uzLly9LE0lFRcXevXtXrVoloczq1avxB3/wLx0cHHp9r3777be5c+eam5vTaNLufOvl5UU8B19QUDB37lz89ahRo4iVp589e+bu7o6/7tevn+haOSNGjJCyo4qKCiaTKc04YGJiYkxMzM2bN6Vp9tmzZ/gCLL2+7fjvvbm5WV9fX0IxHo/n5+dnaGg4cODArKys06dPEz/7m7i7u2dmZvYagEAgePz48YULF4g3uUd8Pt/Ly8vQ0BC/3oyPj+91hua+fftWr14tGoBKpJ5Nmzbt2LFDmpIYhhUXF7e1tdnb2ys4dUBUYWEhPi1Ievr6+gsWLFBWAIS7d+9mZ2dLWTgkJET6xcCl1NLScvbsWZmqmJubE/t/1tbWEuePhoaGs2bNwl+/fv363Llz+GstLa3w8HCi+tGjR6Xvy9XVVe4ZmxKcP39eyk2BjIyMpHkWBP9DbWlp+eCDD6SZ7pObm3vnzh1pAkAILViwQHLuQwh1dXUVFhbS6fSxY8dKs4Dcixcv4uLiRI9A6gEAUADu9SjHsWPHqA4BgHcJpB7lkGm/HQAApJ7/UXAHLgCA9CD1/OP69esLFy4cOnToDz/8EBYWdvz48fnz51MdFADvLWkHON97xA5cU6dORQiZmZnhI53Z2dmrV69euHDhqVOndu/ePWnSJIoDBeC9AKnnH8QOXFOnTnVwcHBxcfn0008RQk1NTbm5uRUVFTNmzDAwMKA6TADeE3DB9Q9XV9e7d+/+97//1dXVPXv27KxZs5ycnNra2vDvRkdHnz171tbWltogAXhvwFnPP3JzcysrKzds2ECn0zEMW7Vq1U8//URsHWtkZERteAC8Z+Cs5x/K2oELACANSD3/UOIOXACAXkHq+Ye2tvbFixeJHbhevHixdOlShBC+xBwxVwgAFdTe3j5p0iR8H3Acn8+PiooaPXq0mZmZi4sLvhpBfX29i4sLUSY9Pd3Ly6uqqqrHNuFez7+YmJiYmJhQHQUAb5eEhISWlpbY2NitW7caGhoihCIiIhBCN2/eNDQ0zMvLCwoKMjc3NzU1LSoqwqskJSX95z//4XK5DAajxzbhrAcA0IvY2NjVq1d7eXlduHABIXTv3r0bN27ExsYOGjRITU3N1dV1z549jx8/Jspfvnx5+fLlycnJErb5hLMeAIAk1dXV2dnZly5d0tPT271799KlSzMzM93d3UXX6AkLC0MI1dbWIoROnjwZERFx8eJFyQ+jwFkPAECSU6dOTZ48uby83MzM7M6dO/fu3Wtra3vT2mDt7e2nT58+d+7c+vXre9gAR4RKrNdz8uTJv//+u/txAwODjRs34q/5fP7WrVt7rL5161bijf7uu+8aGxu7l7G1tcWffgbgfYJhmI2NzciRI/v3748QKi4unjlz5rRp09avX19UVEQsEnbq1Km8vLyoqCgzM7Pm5mZtbe21a9c+fPiQy+W+cSExaVaKBgCopvT0dFNTU2Iv1hs3bhgbG7e2to4cOfLo0aP4wZaWFnt7+2PHjtXU1OBP5GIY1t7e7ujoSOyz0J1KnPUAAOQTHh5uamoaExODfykUChkMxqFDh6ytrVks1sCBAy0sLLKysqZPn37kyJG6ujoGg8Hn8/HC5eXlEydOTE5OdnJy6t4ypB4AgDyEQmFxcfGrV69GjBgxdOhQWatD6gEAUABGuAAAFIDUAwCgwP8DD/LoOtB2EkEAAAAASUVORK5CYII=</encoded_png></node><node name="i2c driver" prog_lang="custom-colors" readonly="False" tags="" unique_id="8"><rich_text>struct i2c_driver {
	unsigned int class;

	/* Notifies the driver that a new bus has appeared or is about to be
	 * removed. You should avoid using this, it will be removed in a
	 * near future.
	 */
	int (*attach_adapter)(struct i2c_adapter *) __deprecated;
	int (*detach_adapter)(struct i2c_adapter *) __deprecated;

	/* Standard driver model interfaces */
	int (*probe)(struct i2c_client *, const struct i2c_device_id *);
	int (*remove)(struct i2c_client *);

	/* driver model interfaces that don't relate to enumeration  */
	void (*shutdown)(struct i2c_client *);
	int (*suspend)(struct i2c_client *, pm_message_t mesg);
	int (*resume)(struct i2c_client *);

	/* Alert callback, for example for the SMBus alert protocol.
	 * The format and meaning of the data value depends on the protocol.
	 * For the SMBus alert protocol, there is a single bit of data passed
	 * as the alert response's low bit (&quot;event flag&quot;).
	 */
	void (*alert)(struct i2c_client *, unsigned int data);

	/* a ioctl like command that can be used to perform specific functions
	 * with the device.
	 */
	int (*command)(struct i2c_client *client, unsigned int cmd, void *arg);

	struct device_driver driver;
	const struct i2c_device_id *id_table;

	/* Device detection callback for automatic device creation */
	int (*detect)(struct i2c_client *, struct i2c_board_info *);
	const unsigned short *address_list;
	struct list_head clients;
};

</rich_text><rich_text scale="h3" weight="heavy">1.以ft5x_ts.c为范例:</rich_text><rich_text>
static const struct i2c_device_id ft5x_ts_id[] = {
	{ CTP_NAME, 0 },
	{}
};
MODULE_DEVICE_TABLE(i2c, ft5x_ts_id);

static struct i2c_driver ft5x_ts_driver = {
	.class          = I2C_CLASS_HWMON,
	.probe		= ft5x_ts_probe,
	.remove		= __devexit_p(ft5x_ts_remove),
	.id_table	= ft5x_ts_id,
	.suspend        = ft5x_ts_suspend,
	.resume         = ft5x_ts_resume,
	.driver	= {
		.name	= CTP_NAME,
		.owner	= THIS_MODULE,
	},
	.address_list	= normal_i2c,
};

static int __init ft5x_ts_init(void) {
    ft5x_ts_driver.detect = ctp_detect;
    ret = i2c_add_driver(&amp;ft5x_ts_driver);
}

i2c_add_driver定义在linux/i2c.h中的一个宏，它实际调用
int i2c_register_driver(struct module *owner, struct i2c_driver *driver)
{
	int res;

	/* Can't register until after driver model init */
	if (unlikely(WARN_ON(!i2c_bus_type.p)))
		return -EAGAIN;

	/* add the driver to the list of i2c drivers in the driver core */
	driver-&gt;driver.owner = owner;
	driver-&gt;driver.bus = &amp;i2c_bus_type;

	/* When registration returns, the driver core
	 * will have called probe() for all matching-but-unbound devices.
	 */
	res = driver_register(&amp;driver-&gt;driver);
	if (res)
		return res;

	/* Drivers should switch to dev_pm_ops instead. */
	if (driver-&gt;suspend)
		pr_warn(&quot;i2c-core: driver [%s] using legacy suspend method\n&quot;,
			driver-&gt;driver.name);
	if (driver-&gt;resume)
		pr_warn(&quot;i2c-core: driver [%s] using legacy resume method\n&quot;,
			driver-&gt;driver.name);

	pr_debug(&quot;i2c-core: driver [%s] registered\n&quot;, driver-&gt;driver.name);

	INIT_LIST_HEAD(&amp;driver-&gt;clients);
	/* Walk the adapters that are already present */
	i2c_for_each_dev(driver, __process_new_driver); 

	return 0;
}

扫描i2c bus的adapter设备。
int i2c_for_each_dev(void *data, int (*fn)(struct device *, void *))
{
	int res;

	mutex_lock(&amp;core_lock);
	res = bus_for_each_dev(&amp;i2c_bus_type, NULL, data, fn);
	mutex_unlock(&amp;core_lock);

	return res;
}
EXPORT_SYMBOL_GPL(i2c_for_each_dev);

static int __process_new_driver(struct device *dev, void *data)
{
	if (dev-&gt;type != &amp;i2c_adapter_type)
		return 0;
	return i2c_do_add_adapter(data, to_i2c_adapter(dev));
}

i2c_do_add_adapter调用
static int i2c_detect(struct i2c_adapter *adapter, struct i2c_driver *driver)
{
	const unsigned short *address_list;
	struct i2c_client *temp_client;
	int i, err = 0;
	int adap_id = i2c_adapter_id(adapter);

	address_list = driver-&gt;address_list;            //ft5x_ts的address_list!=NULL, driver-&gt;detect != NULL
	if (!driver-&gt;detect || !address_list)
		return 0;

	/* Stop here if the classes do not match */
	if (!(adapter-&gt;class &amp; driver-&gt;class))
		return 0;

	/* Set up a temporary client to help detect callback */
	temp_client = kzalloc(sizeof(struct i2c_client), GFP_KERNEL);
	if (!temp_client)
		return -ENOMEM;
	temp_client-&gt;adapter = adapter;

	for (i = 0; address_list[i] != I2C_CLIENT_END; i += 1) {
		dev_dbg(&amp;adapter-&gt;dev, &quot;found normal entry for adapter %d, &quot;
			&quot;addr 0x%02x\n&quot;, adap_id, address_list[i]);
		temp_client-&gt;addr = address_list[i];
		err = i2c_detect_address(temp_client, driver);
		if (unlikely(err))
			break;
	}

	kfree(temp_client);
	return err;
}

static int i2c_detect_address(struct i2c_client *temp_client,
			      struct i2c_driver *driver)
{
	struct i2c_board_info info;
	struct i2c_adapter *adapter = temp_client-&gt;adapter;
	int addr = temp_client-&gt;addr;
	int err;

	/* Make sure the address is valid */
	err = i2c_check_addr_validity(addr);
	if (err) {
		dev_warn(&amp;adapter-&gt;dev, &quot;Invalid probe address 0x%02x\n&quot;,
			 addr);
		return err;
	}

	/* Skip if already in use */
	if (i2c_check_addr_busy(adapter, addr))
		return 0;
#ifndef CONFIG_ARCH_SUN7I
	/* Make sure there is something at this address */
	if (!i2c_default_probe(adapter, addr))
		return 0;
#endif

	/* Finally call the custom detection function */
	memset(&amp;info, 0, sizeof(struct i2c_board_info));
	info.addr = addr;
	err = driver-&gt;detect(temp_client, &amp;info);                   //调用ctp_detect()
	if (err) {
		/* -ENODEV is returned if the detection fails. We catch it
		   here as this isn't an error. */
		return err == -ENODEV ? 0 : err;
	}

	/* Consistency check */
	if (info.type[0] == '\0') {
		dev_err(&amp;adapter-&gt;dev, &quot;%s detection function provided &quot;
			&quot;no name for 0x%x\n&quot;, driver-&gt;driver.name,
			addr);
	} else {
		struct i2c_client *client;

		/* Detection succeeded, instantiate the device */
		dev_dbg(&amp;adapter-&gt;dev, &quot;Creating %s at 0x%02x\n&quot;,
			info.type, info.addr);
		client = i2c_new_device(adapter, &amp;info);                //注册新的设备, 注册的过程中匹配相应的驱动
		if (client)
			list_add_tail(&amp;client-&gt;detected, &amp;driver-&gt;clients);
		else
			dev_err(&amp;adapter-&gt;dev, &quot;Failed creating %s at 0x%02x\n&quot;,
				info.type, info.addr);
	}
	return 0;
}

struct i2c_client *
i2c_new_device(struct i2c_adapter *adap, struct i2c_board_info const *info)
{
	struct i2c_client	*client;
	int			status;

	client = kzalloc(sizeof *client, GFP_KERNEL);
	if (!client)
		return NULL;

	client-&gt;adapter = adap;

	client-&gt;dev.platform_data = info-&gt;platform_data;

	if (info-&gt;archdata)
		client-&gt;dev.archdata = *info-&gt;archdata;

	client-&gt;flags = info-&gt;flags;
	client-&gt;addr = info-&gt;addr;
	client-&gt;irq = info-&gt;irq;

	strlcpy(client-&gt;name, info-&gt;type, sizeof(client-&gt;name));

	/* Check for address validity */
	status = i2c_check_client_addr_validity(client);
	if (status) {
		dev_err(&amp;adap-&gt;dev, &quot;Invalid %d-bit I2C address 0x%02hx\n&quot;,
			client-&gt;flags &amp; I2C_CLIENT_TEN ? 10 : 7, client-&gt;addr);
		goto out_err_silent;
	}

	/* Check for address business */
	status = i2c_check_addr_busy(adap, client-&gt;addr);
	if (status)
		goto out_err;

	client-&gt;dev.parent = &amp;client-&gt;adapter-&gt;dev;
	client-&gt;dev.bus = &amp;i2c_bus_type;
	client-&gt;dev.type = &amp;i2c_client_type;
	client-&gt;dev.of_node = info-&gt;of_node;

	/* For 10-bit clients, add an arbitrary offset to avoid collisions */
	dev_set_name(&amp;client-&gt;dev, &quot;%d-%04x&quot;, i2c_adapter_id(adap),
		     client-&gt;addr | ((client-&gt;flags &amp; I2C_CLIENT_TEN)
				     ? 0xa000 : 0));
	status = device_register(&amp;client-&gt;dev);
	if (status)
		goto out_err;

	dev_dbg(&amp;adap-&gt;dev, &quot;client [%s] registered with bus id %s\n&quot;,
		client-&gt;name, dev_name(&amp;client-&gt;dev));

	return client;

out_err:
	dev_err(&amp;adap-&gt;dev, &quot;Failed to register i2c client %s at 0x%02x &quot;
		&quot;(%d)\n&quot;, client-&gt;name, client-&gt;addr, status);
out_err_silent:
	kfree(client);
	return NULL;
}

</rich_text><rich_text scale="h1" weight="heavy">2. i2c数据结构</rich_text><rich_text>
static const struct dev_pm_ops i2c_device_pm_ops = {
	.suspend = i2c_device_pm_suspend,
	.resume = i2c_device_pm_resume,
	.freeze = i2c_device_pm_freeze,
	.thaw = i2c_device_pm_thaw,
	.poweroff = i2c_device_pm_poweroff,
	.restore = i2c_device_pm_restore,
	SET_RUNTIME_PM_OPS(
		pm_generic_runtime_suspend,
		pm_generic_runtime_resume,
		pm_generic_runtime_idle
	)
};

struct bus_type i2c_bus_type = {
	.name		= &quot;i2c&quot;,
	.match		= i2c_device_match,
	.probe		= i2c_device_probe,
	.remove		= i2c_device_remove,
	.shutdown	= i2c_device_shutdown,
	.pm		= &amp;i2c_device_pm_ops,
};
EXPORT_SYMBOL_GPL(i2c_bus_type);

static struct device_type i2c_client_type = {
	.groups		= i2c_dev_attr_groups,
	.uevent		= i2c_device_uevent,
	.release	= i2c_client_dev_release,
};
</rich_text></node></node><node name="linux设备模型" prog_lang="custom-colors" readonly="False" tags="" unique_id="9"><rich_text>
</rich_text><node name="kobject，kset，ktype" prog_lang="custom-colors" readonly="False" tags="" unique_id="13"><rich_text>一、sysfs文件系统下的每个目录对应于一个kobj，kset是kobj的封装，内嵌了一个kobj，其代表kset自身，ktype代表属性 操作集，但由于通用性，因此把ktype单独剥离出来，kobj，kset，ktype成为了各个驱动模型最底层的关联元素，并由此形成了sys下的各种 拓扑结构。
二、关于kobject
      首先看一下kobject的原型
          
 </rich_text><rich_text foreground="#008080">1</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> kobject {
</rich_text><rich_text foreground="#008080"> 2</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">const</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">char</rich_text><rich_text>        *name;         </rich_text><rich_text foreground="#008000">//名字
</rich_text><rich_text foreground="#008080"> 3</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> list_head    entry;         </rich_text><rich_text foreground="#008000">//连接到kset建立层次结构
</rich_text><rich_text foreground="#008080"> 4</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> kobject        *parent;       </rich_text><rich_text foreground="#008000">//指向父节点，面向对象的层次架构
</rich_text><rich_text foreground="#008080"> 5</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> kset        *kset;        
</rich_text><rich_text foreground="#008080"> 6</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> kobj_type    *ktype;        </rich_text><rich_text foreground="#008000">//属性文件
</rich_text><rich_text foreground="#008080"> 7</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> sysfs_dirent    *sd;
</rich_text><rich_text foreground="#008080"> 8</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> kref        kref;          </rich_text><rich_text foreground="#008000">//引用计数
</rich_text><rich_text foreground="#008080"> 9</rich_text><rich_text>     unsigned </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> state_initialized:</rich_text><rich_text foreground="#800080">1</rich_text><rich_text>;      </rich_text><rich_text foreground="#008000">//初始化状态...
</rich_text><rich_text foreground="#008080">10</rich_text><rich_text>     unsigned </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> state_in_sysfs:</rich_text><rich_text foreground="#800080">1</rich_text><rich_text>;
</rich_text><rich_text foreground="#008080">11</rich_text><rich_text>     unsigned </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> state_add_uevent_sent:</rich_text><rich_text foreground="#800080">1</rich_text><rich_text>;
</rich_text><rich_text foreground="#008080">12</rich_text><rich_text>     unsigned </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> state_remove_uevent_sent:</rich_text><rich_text foreground="#800080">1</rich_text><rich_text>;
</rich_text><rich_text foreground="#008080">13</rich_text><rich_text>     unsigned </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> uevent_suppress:</rich_text><rich_text foreground="#800080">1</rich_text><rich_text>;
</rich_text><rich_text foreground="#008080">14</rich_text><rich_text> };

   分析一下kobject的初始化过程
   初始化函数为
          
  </rich_text><rich_text foreground="#008080">1</rich_text><rich_text> ---</rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> kobject_init_and_add(</rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> kobject *kobj, </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> kobj_type *ktype,  </rich_text><rich_text foreground="#008000">//参数为kobject和属性结构体
</rich_text><rich_text foreground="#008080">  2</rich_text><rich_text>              </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> kobject *parent, </rich_text><rich_text foreground="#0000ff">const</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">char</rich_text><rich_text> *fmt, ...)
</rich_text><rich_text foreground="#008080">  3</rich_text><rich_text> {
</rich_text><rich_text foreground="#008080">  4</rich_text><rich_text>     va_list args;
</rich_text><rich_text foreground="#008080">  5</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> retval;
</rich_text><rich_text foreground="#008080">  6</rich_text><rich_text>     kobject_init(kobj, ktype);   
</rich_text><rich_text foreground="#008080">  7</rich_text><rich_text>     va_start(args, fmt);
</rich_text><rich_text foreground="#008080">  8</rich_text><rich_text>     retval = kobject_add_varg(kobj, parent, fmt, args);
</rich_text><rich_text foreground="#008080">  9</rich_text><rich_text>     va_end(args);
</rich_text><rich_text foreground="#008080"> 10</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text> retval;
</rich_text><rich_text foreground="#008080"> 11</rich_text><rich_text> }
</rich_text><rich_text foreground="#008080"> 12</rich_text><rich_text> ---</rich_text><rich_text foreground="#0000ff">void</rich_text><rich_text> kobject_init(</rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> kobject *kobj, </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> kobj_type *ktype)
</rich_text><rich_text foreground="#008080"> 13</rich_text><rich_text> {
</rich_text><rich_text foreground="#008080"> 14</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">char</rich_text><rich_text> *err_str;
</rich_text><rich_text foreground="#008080"> 15</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (!kobj) {                        </rich_text><rich_text foreground="#008000">//kobj为NULL错误退出
</rich_text><rich_text foreground="#008080"> 16</rich_text><rich_text>         err_str = </rich_text><rich_text foreground="#800000">&quot;invalid kobject pointer!&quot;</rich_text><rich_text>;
</rich_text><rich_text foreground="#008080"> 17</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">goto</rich_text><rich_text> error;
</rich_text><rich_text foreground="#008080"> 18</rich_text><rich_text>     }
</rich_text><rich_text foreground="#008080"> 19</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (!ktype) {                       </rich_text><rich_text foreground="#008000">//ktype为NULL错误退出
</rich_text><rich_text foreground="#008080"> 20</rich_text><rich_text>         err_str = </rich_text><rich_text foreground="#800000">&quot;must have a ktype to be initialized properly!/n&quot;</rich_text><rich_text>;
</rich_text><rich_text foreground="#008080"> 21</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">goto</rich_text><rich_text> error;
</rich_text><rich_text foreground="#008080"> 22</rich_text><rich_text>     }
</rich_text><rich_text foreground="#008080"> 23</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (kobj-&gt;state_initialized) {   </rich_text><rich_text foreground="#008000">//如果初始化状态为1报错
</rich_text><rich_text foreground="#008080"> 24</rich_text><rich_text>         </rich_text><rich_text foreground="#008000">/* do not error out as sometimes we can recover */</rich_text><rich_text>
</rich_text><rich_text foreground="#008080"> 25</rich_text><rich_text>         printk(KERN_ERR </rich_text><rich_text foreground="#800000">&quot;kobject (%p): tried to init an initialized &quot;</rich_text><rich_text>
</rich_text><rich_text foreground="#008080"> 26</rich_text><rich_text>                </rich_text><rich_text foreground="#800000">&quot;object, something is seriously wrong./n&quot;</rich_text><rich_text>, kobj);
</rich_text><rich_text foreground="#008080"> 27</rich_text><rich_text>         dump_stack();
</rich_text><rich_text foreground="#008080"> 28</rich_text><rich_text>     }
</rich_text><rich_text foreground="#008080"> 29</rich_text><rich_text>     kobject_init_internal(kobj);       </rich_text><rich_text foreground="#008000">//初始化kobj 
</rich_text><rich_text foreground="#008080"> 30</rich_text><rich_text>     kobj-&gt;ktype = ktype;            </rich_text><rich_text foreground="#008000">//关联obj和ktype
</rich_text><rich_text foreground="#008080"> 31</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text>;
</rich_text><rich_text foreground="#008080"> 32</rich_text><rich_text> error:
</rich_text><rich_text foreground="#008080"> 33</rich_text><rich_text>     printk(KERN_ERR </rich_text><rich_text foreground="#800000">&quot;kobject (%p): %s/n&quot;</rich_text><rich_text>, kobj, err_str);
</rich_text><rich_text foreground="#008080"> 34</rich_text><rich_text>     dump_stack();
</rich_text><rich_text foreground="#008080"> 35</rich_text><rich_text> }
</rich_text><rich_text foreground="#008080"> 36</rich_text><rich_text> -------</rich_text><rich_text foreground="#0000ff">static</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">void</rich_text><rich_text> kobject_init_internal(</rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> kobject *kobj)
</rich_text><rich_text foreground="#008080"> 37</rich_text><rich_text> {
</rich_text><rich_text foreground="#008080"> 38</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (!kobj)
</rich_text><rich_text foreground="#008080"> 39</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text>;
</rich_text><rich_text foreground="#008080"> 40</rich_text><rich_text>     kref_init(&amp;kobj-&gt;kref);        </rich_text><rich_text foreground="#008000">//计数变成1
</rich_text><rich_text foreground="#008080"> 41</rich_text><rich_text>     INIT_LIST_HEAD(&amp;kobj-&gt;entry);  </rich_text><rich_text foreground="#008000">//都指向自己，prev和next
</rich_text><rich_text foreground="#008080"> 42</rich_text><rich_text>     kobj-&gt;state_in_sysfs = </rich_text><rich_text foreground="#800080">0</rich_text><rich_text>;
</rich_text><rich_text foreground="#008080"> 43</rich_text><rich_text>     kobj-&gt;state_add_uevent_sent = </rich_text><rich_text foreground="#800080">0</rich_text><rich_text>;
</rich_text><rich_text foreground="#008080"> 44</rich_text><rich_text>     kobj-&gt;state_remove_uevent_sent = </rich_text><rich_text foreground="#800080">0</rich_text><rich_text>;
</rich_text><rich_text foreground="#008080"> 45</rich_text><rich_text>     kobj-&gt;state_initialized = </rich_text><rich_text foreground="#800080">1</rich_text><rich_text>;
</rich_text><rich_text foreground="#008080"> 46</rich_text><rich_text> }
</rich_text><rich_text foreground="#008080"> 47</rich_text><rich_text> -------</rich_text><rich_text foreground="#0000ff">static</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> kobject_add_varg(</rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> kobject *kobj, </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> kobject *parent,
</rich_text><rich_text foreground="#008080"> 48</rich_text><rich_text>                 </rich_text><rich_text foreground="#0000ff">const</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">char</rich_text><rich_text> *fmt, va_list vargs)
</rich_text><rich_text foreground="#008080"> 49</rich_text><rich_text> {
</rich_text><rich_text foreground="#008080"> 50</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> retval;
</rich_text><rich_text foreground="#008080"> 51</rich_text><rich_text>     retval = kobject_set_name_vargs(kobj, fmt, vargs);  </rich_text><rich_text foreground="#008000">//设置名字，名字中不能有“/”
</rich_text><rich_text foreground="#008080"> 52</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (retval) {
</rich_text><rich_text foreground="#008080"> 53</rich_text><rich_text>         printk(KERN_ERR </rich_text><rich_text foreground="#800000">&quot;kobject: can not set name properly!/n&quot;</rich_text><rich_text>);
</rich_text><rich_text foreground="#008080"> 54</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text> retval;
</rich_text><rich_text foreground="#008080"> 55</rich_text><rich_text>     }
</rich_text><rich_text foreground="#008080"> 56</rich_text><rich_text>     kobj-&gt;parent = parent;                 </rich_text><rich_text foreground="#008000">//设置parent，其父节点
</rich_text><rich_text foreground="#008080"> 57</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text> kobject_add_internal(kobj);
</rich_text><rich_text foreground="#008080"> 58</rich_text><rich_text> }
</rich_text><rich_text foreground="#008080"> 59</rich_text><rich_text> ----</rich_text><rich_text foreground="#0000ff">static</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> kobject_add_internal(</rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> kobject *kobj)
</rich_text><rich_text foreground="#008080"> 60</rich_text><rich_text> {
</rich_text><rich_text foreground="#008080"> 61</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> error = </rich_text><rich_text foreground="#800080">0</rich_text><rich_text>;
</rich_text><rich_text foreground="#008080"> 62</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> kobject *parent;
</rich_text><rich_text foreground="#008080"> 63</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (!kobj)
</rich_text><rich_text foreground="#008080"> 64</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text> -ENOENT;
</rich_text><rich_text foreground="#008080"> 65</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (!kobj-&gt;name || !kobj-&gt;name[</rich_text><rich_text foreground="#800080">0</rich_text><rich_text>]) {             </rich_text><rich_text foreground="#008000">//名字不能为空
</rich_text><rich_text foreground="#008080"> 66</rich_text><rich_text>         WARN(</rich_text><rich_text foreground="#800080">1</rich_text><rich_text>, </rich_text><rich_text foreground="#800000">&quot;kobject: (%p): attempted to be registered with empty &quot;</rich_text><rich_text>
</rich_text><rich_text foreground="#008080"> 67</rich_text><rich_text>              </rich_text><rich_text foreground="#800000">&quot;name!/n&quot;</rich_text><rich_text>, kobj);
</rich_text><rich_text foreground="#008080"> 68</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text> -EINVAL;
</rich_text><rich_text foreground="#008080"> 69</rich_text><rich_text>     }
</rich_text><rich_text foreground="#008080"> 70</rich_text><rich_text>     parent = kobject_get(kobj-&gt;parent);  </rich_text><rich_text foreground="#008000">//如果parent为真，则增加kobj-&gt;kref计数，也就是父节点的引用计数
</rich_text><rich_text foreground="#008080"> 71</rich_text><rich_text>     </rich_text><rich_text foreground="#008000">/* join kset if set, use it as parent if we do not already have one */</rich_text><rich_text>
</rich_text><rich_text foreground="#008080"> 72</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (kobj-&gt;kset) {                   
</rich_text><rich_text foreground="#008080"> 73</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (!parent)
</rich_text><rich_text foreground="#008080"> 74</rich_text><rich_text>             parent = kobject_get(&amp;kobj-&gt;kset-&gt;kobj);  </rich_text><rich_text foreground="#008000">//如果kobj-parent父节点为NULL那么就用kobj-&gt;kset-&gt;kobj
</rich_text><rich_text foreground="#008080"> 75</rich_text><rich_text> </rich_text><rich_text foreground="#008000">//  作其父节点，并增加其引用计数
</rich_text><rich_text foreground="#008080"> 76</rich_text><rich_text>         kobj_kset_join(kobj);                         </rich_text><rich_text foreground="#008000">//把kobj的entry成员添加到kobj-&gt;kset&gt;list的尾部，现在的层次就是
</rich_text><rich_text foreground="#008080"> 77</rich_text><rich_text>         kobj-&gt;parent = parent;                     </rich_text><rich_text foreground="#008000">//kobj-&gt;kset-&gt;list指向kobj-&gt;parent 
</rich_text><rich_text foreground="#008080"> 78</rich_text><rich_text>     }                                                     </rich_text><rich_text foreground="#008000">//    -&gt;parent 指向kset-&gt;kobj                          
</rich_text><rich_text foreground="#008080"> 79</rich_text><rich_text>     pr_debug(</rich_text><rich_text foreground="#800000">&quot;kobject: '%s' (%p): %s: parent: '%s', set: '%s'/n&quot;</rich_text><rich_text>,
</rich_text><rich_text foreground="#008080"> 80</rich_text><rich_text>          kobject_name(kobj), kobj, __func__,
</rich_text><rich_text foreground="#008080"> 81</rich_text><rich_text>          parent ? kobject_name(parent) : </rich_text><rich_text foreground="#800000">&quot;&lt;NULL&gt;&quot;</rich_text><rich_text>,
</rich_text><rich_text foreground="#008080"> 82</rich_text><rich_text>          kobj-&gt;kset ? kobject_name(&amp;kobj-&gt;kset-&gt;kobj) : </rich_text><rich_text foreground="#800000">&quot;&lt;NULL&gt;&quot;</rich_text><rich_text>);
</rich_text><rich_text foreground="#008080"> 83</rich_text><rich_text>     error = create_dir(kobj);   </rich_text><rich_text foreground="#008000">//利用kobj创建目录和属性文件，其中会判断，如果parent为NULL那么就在sysfs_root下创建
</rich_text><rich_text foreground="#008080"> 84</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (error) {
</rich_text><rich_text foreground="#008080"> 85</rich_text><rich_text>         kobj_kset_leave(kobj);
</rich_text><rich_text foreground="#008080"> 86</rich_text><rich_text>         kobject_put(parent);
</rich_text><rich_text foreground="#008080"> 87</rich_text><rich_text>         kobj-&gt;parent = NULL;
</rich_text><rich_text foreground="#008080"> 88</rich_text><rich_text>         </rich_text><rich_text foreground="#008000">/* be noisy on error issues */</rich_text><rich_text>
</rich_text><rich_text foreground="#008080"> 89</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (error == -EEXIST)
</rich_text><rich_text foreground="#008080"> 90</rich_text><rich_text>             printk(KERN_ERR </rich_text><rich_text foreground="#800000">&quot;%s failed for %s with &quot;</rich_text><rich_text>
</rich_text><rich_text foreground="#008080"> 91</rich_text><rich_text>                    </rich_text><rich_text foreground="#800000">&quot;-EEXIST, don't try to register things with &quot;</rich_text><rich_text>
</rich_text><rich_text foreground="#008080"> 92</rich_text><rich_text>                    </rich_text><rich_text foreground="#800000">&quot;the same name in the same directory./n&quot;</rich_text><rich_text>,
</rich_text><rich_text foreground="#008080"> 93</rich_text><rich_text>                    __func__, kobject_name(kobj));
</rich_text><rich_text foreground="#008080"> 94</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">else</rich_text><rich_text>
</rich_text><rich_text foreground="#008080"> 95</rich_text><rich_text>             printk(KERN_ERR </rich_text><rich_text foreground="#800000">&quot;%s failed for %s (%d)/n&quot;</rich_text><rich_text>,
</rich_text><rich_text foreground="#008080"> 96</rich_text><rich_text>                    __func__, kobject_name(kobj), error);
</rich_text><rich_text foreground="#008080"> 97</rich_text><rich_text>         dump_stack();
</rich_text><rich_text foreground="#008080"> 98</rich_text><rich_text>     } </rich_text><rich_text foreground="#0000ff">else</rich_text><rich_text>
</rich_text><rich_text foreground="#008080"> 99</rich_text><rich_text>         kobj-&gt;state_in_sysfs = </rich_text><rich_text foreground="#800080">1</rich_text><rich_text>;
</rich_text><rich_text foreground="#008080">100</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text> error;
</rich_text><rich_text foreground="#008080">101</rich_text><rich_text> }
</rich_text><rich_text foreground="#008080">102</rich_text><rich_text> ---</rich_text><rich_text foreground="#0000ff">static</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> create_dir(</rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> kobject *kobj)
</rich_text><rich_text foreground="#008080">103</rich_text><rich_text> {
</rich_text><rich_text foreground="#008080">104</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> error = </rich_text><rich_text foreground="#800080">0</rich_text><rich_text>;
</rich_text><rich_text foreground="#008080">105</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (kobject_name(kobj)) {
</rich_text><rich_text foreground="#008080">106</rich_text><rich_text>         error = sysfs_create_dir(kobj);       </rich_text><rich_text foreground="#008000">//创建目录
</rich_text><rich_text foreground="#008080">107</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (!error) {
</rich_text><rich_text foreground="#008080">108</rich_text><rich_text>             error = populate_dir(kobj);   </rich_text><rich_text foreground="#008000">//创建属性文件
</rich_text><rich_text foreground="#008080">109</rich_text><rich_text>             </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (error)
</rich_text><rich_text foreground="#008080">110</rich_text><rich_text>                 sysfs_remove_dir(kobj);
</rich_text><rich_text foreground="#008080">111</rich_text><rich_text>         }
</rich_text><rich_text foreground="#008080">112</rich_text><rich_text>     }
</rich_text><rich_text foreground="#008080">113</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text> error;
</rich_text><rich_text foreground="#008080">114</rich_text><rich_text> }
 
三、关于 kset
      首先看一下kset的原型
         
</rich_text><rich_text foreground="#008080">1</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> kset {
</rich_text><rich_text foreground="#008080">2</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> list_head list;  </rich_text><rich_text foreground="#008000">//连接着他下面的kobj成员，与kobj-entry关联
</rich_text><rich_text foreground="#008080">3</rich_text><rich_text>     spinlock_t list_lock;
</rich_text><rich_text foreground="#008080">4</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> kobject kobj;    </rich_text><rich_text foreground="#008000">//代表kset自己
</rich_text><rich_text foreground="#008080">5</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">const</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> kset_uevent_ops *uevent_ops;
</rich_text><rich_text foreground="#008080">6</rich_text><rich_text> };

       再来看一下kset的初始化操作，kset表现为更高级一点的kobj，其初始化操作仍然是围绕其内部的kobj展开的。
 </rich_text><rich_text foreground="#008080">1</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> kset *kset_create_and_add(</rich_text><rich_text foreground="#0000ff">const</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">char</rich_text><rich_text> *name,
</rich_text><rich_text foreground="#008080"> 2</rich_text><rich_text>                  </rich_text><rich_text foreground="#0000ff">const</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> kset_uevent_ops *uevent_ops,
</rich_text><rich_text foreground="#008080"> 3</rich_text><rich_text>                  </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> kobject *parent_kobj)
</rich_text><rich_text foreground="#008080"> 4</rich_text><rich_text> {
</rich_text><rich_text foreground="#008080"> 5</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> kset *kset;
</rich_text><rich_text foreground="#008080"> 6</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> error;
</rich_text><rich_text foreground="#008080"> 7</rich_text><rich_text>     kset = kset_create(name, uevent_ops, parent_kobj);  </rich_text><rich_text foreground="#008000">//创建kset，关联操作函数和其父节点
</rich_text><rich_text foreground="#008080"> 8</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (!kset)
</rich_text><rich_text foreground="#008080"> 9</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text> NULL;
</rich_text><rich_text foreground="#008080">10</rich_text><rich_text>     error = kset_register(kset);
</rich_text><rich_text foreground="#008080">11</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (error) {
</rich_text><rich_text foreground="#008080">12</rich_text><rich_text>         kfree(kset);
</rich_text><rich_text foreground="#008080">13</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text> NULL;
</rich_text><rich_text foreground="#008080">14</rich_text><rich_text>     }
</rich_text><rich_text foreground="#008080">15</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text> kset;
</rich_text><rich_text foreground="#008080">16</rich_text><rich_text> }
</rich_text><rich_text foreground="#008080">17</rich_text><rich_text> ---</rich_text><rich_text foreground="#0000ff">static</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> kset *kset_create(</rich_text><rich_text foreground="#0000ff">const</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">char</rich_text><rich_text> *name,
</rich_text><rich_text foreground="#008080">18</rich_text><rich_text>                 </rich_text><rich_text foreground="#0000ff">const</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> kset_uevent_ops *uevent_ops,
</rich_text><rich_text foreground="#008080">19</rich_text><rich_text>                 </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> kobject *parent_kobj)
</rich_text><rich_text foreground="#008080">20</rich_text><rich_text> {
</rich_text><rich_text foreground="#008080">21</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> kset *kset;
</rich_text><rich_text foreground="#008080">22</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> retval;
</rich_text><rich_text foreground="#008080">23</rich_text><rich_text>     kset = kzalloc(</rich_text><rich_text foreground="#0000ff">sizeof</rich_text><rich_text>(*kset), GFP_KERNEL);  </rich_text><rich_text foreground="#008000">//申请结构体内存
</rich_text><rich_text foreground="#008080">24</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (!kset)
</rich_text><rich_text foreground="#008080">25</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text> NULL;
</rich_text><rich_text foreground="#008080">26</rich_text><rich_text>     retval = kobject_set_name(&amp;kset-&gt;kobj, name);  </rich_text><rich_text foreground="#008000">//设置名字
</rich_text><rich_text foreground="#008080">27</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (retval) {
</rich_text><rich_text foreground="#008080">28</rich_text><rich_text>         kfree(kset);
</rich_text><rich_text foreground="#008080">29</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text> NULL;
</rich_text><rich_text foreground="#008080">30</rich_text><rich_text>     }
</rich_text><rich_text foreground="#008080">31</rich_text><rich_text>     kset-&gt;uevent_ops = uevent_ops;               </rich_text><rich_text foreground="#008000">//关联操作函数
</rich_text><rich_text foreground="#008080">32</rich_text><rich_text>     kset-&gt;kobj.parent = parent_kobj;             </rich_text><rich_text foreground="#008000">//关联父节点
</rich_text><rich_text foreground="#008080">33</rich_text><rich_text>     </rich_text><rich_text foreground="#008000">/*
</rich_text><rich_text foreground="#008080">34</rich_text><rich_text> </rich_text><rich_text foreground="#008000">     * The kobject of this kset will have a type of kset_ktype and belong to
</rich_text><rich_text foreground="#008080">35</rich_text><rich_text> </rich_text><rich_text foreground="#008000">     * no kset itself.  That way we can properly free it when it is
</rich_text><rich_text foreground="#008080">36</rich_text><rich_text> </rich_text><rich_text foreground="#008000">     * finished being used.
</rich_text><rich_text foreground="#008080">37</rich_text><rich_text> </rich_text><rich_text foreground="#008000">*/</rich_text><rich_text>
</rich_text><rich_text foreground="#008080">38</rich_text><rich_text>     kset-&gt;kobj.ktype = &amp;kset_ktype;            </rich_text><rich_text foreground="#008000">//关联属性文件
</rich_text><rich_text foreground="#008080">39</rich_text><rich_text>     kset-&gt;kobj.kset = NULL;                    
</rich_text><rich_text foreground="#008080">40</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text> kset;
</rich_text><rich_text foreground="#008080">41</rich_text><rich_text> }
</rich_text><rich_text foreground="#008080">42</rich_text><rich_text> ----</rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> kset_register(</rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> kset *k)
</rich_text><rich_text foreground="#008080">43</rich_text><rich_text> {
</rich_text><rich_text foreground="#008080">44</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> err;
</rich_text><rich_text foreground="#008080">45</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (!k)
</rich_text><rich_text foreground="#008080">46</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text> -EINVAL;
</rich_text><rich_text foreground="#008080">47</rich_text><rich_text>     kset_init(k);
</rich_text><rich_text foreground="#008080">48</rich_text><rich_text>     err = kobject_add_internal(&amp;k-&gt;kobj);     </rich_text><rich_text foreground="#008000">//调用kobj操作函数    
</rich_text><rich_text foreground="#008080">49</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (err)
</rich_text><rich_text foreground="#008080">50</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text> err;
</rich_text><rich_text foreground="#008080">51</rich_text><rich_text>     kobject_uevent(&amp;k-&gt;kobj, KOBJ_ADD);
</rich_text><rich_text foreground="#008080">52</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text> </rich_text><rich_text foreground="#800080">0</rich_text><rich_text>;
</rich_text><rich_text foreground="#008080">53</rich_text><rich_text> }
</rich_text><rich_text foreground="#008080">54</rich_text><rich_text> ----</rich_text><rich_text foreground="#0000ff">void</rich_text><rich_text> kset_init(</rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> kset *k)
</rich_text><rich_text foreground="#008080">55</rich_text><rich_text> {
</rich_text><rich_text foreground="#008080">56</rich_text><rich_text>     kobject_init_internal(&amp;k-&gt;kobj);          </rich_text><rich_text foreground="#008000">//调用kobj操作函数
</rich_text><rich_text foreground="#008080">57</rich_text><rich_text>     INIT_LIST_HEAD(&amp;k-&gt;list);
</rich_text><rich_text foreground="#008080">58</rich_text><rich_text>     spin_lock_init(&amp;k-&gt;list_lock);
</rich_text><rich_text foreground="#008080">59</rich_text><rich_text> }</rich_text></node><node name="bus，device，driver分析(一)" prog_lang="custom-colors" readonly="False" tags="" unique_id="12"><rich_text>  内核的开发者将总线，设备，驱动这三者用软件思想抽象了出来，巧妙的建立了其间的关系，使之更形象化。结合前面所学的知识，总的来说其三者间的关系为 bus有两条链表，分别用于挂接设备和驱动，指定了其自身bus的device或者driver最后都会分别连接到对应bus的这两条链表上，而总线又有 其始端，为bus_kset，一个driver可以对应于几个设备，因此driver同样有其设备链表，用于挂接可以操作的设备，其自身也有bus挂接 点，用于将自身挂接到对应bus（每个driver只属于一条总线），而对于device，一个设备只属于一条总线，只能有一个driver与其对应，因 此对于device，都是单一的，一个driver挂接点，一个bus挂接点，device与bus相同的是都有始端，device为 devices_kset，因此device的注册同时会出现在对应的bus目录和device总目录下。好了，下面就以源码为例分别分析一下 bus，device，driver的注册过程。
 
一、bus的注册
      bus的注册比较简单，首先来看一下bus的结构：
     
 </rich_text><rich_text foreground="#008080">1</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> bus_type {
</rich_text><rich_text foreground="#008080"> 2</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">const</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">char</rich_text><rich_text>        *name;                </rich_text><rich_text foreground="#008000">//名字
</rich_text><rich_text foreground="#008080"> 3</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> bus_attribute    *bus_attrs;           </rich_text><rich_text foreground="#008000">//bus属性集
</rich_text><rich_text foreground="#008080"> 4</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device_attribute    *dev_attrs;           </rich_text><rich_text foreground="#008000">//device属性集
</rich_text><rich_text foreground="#008080"> 5</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> driver_attribute    *drv_attrs;           </rich_text><rich_text foreground="#008000">//driver属性集
</rich_text><rich_text foreground="#008080"> 6</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> (*match)(</rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device *dev, </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device_driver *drv);
</rich_text><rich_text foreground="#008080"> 7</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> (*uevent)(</rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device *dev, </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> kobj_uevent_env *env);
</rich_text><rich_text foreground="#008080"> 8</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> (*probe)(</rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device *dev);
</rich_text><rich_text foreground="#008080"> 9</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> (*remove)(</rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device *dev);
</rich_text><rich_text foreground="#008080">10</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">void</rich_text><rich_text> (*shutdown)(</rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device *dev);
</rich_text><rich_text foreground="#008080">11</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> (*suspend)(</rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device *dev, pm_message_t state);
</rich_text><rich_text foreground="#008080">12</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> (*resume)(</rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device *dev);
</rich_text><rich_text foreground="#008080">13</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">const</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> dev_pm_ops *pm;
</rich_text><rich_text foreground="#008080">14</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> bus_type_private *p;                   </rich_text><rich_text foreground="#008000">//bus的私有成员
</rich_text><rich_text foreground="#008080">15</rich_text><rich_text> };
</rich_text><rich_text foreground="#008080">16</rich_text><rich_text> </rich_text><rich_text foreground="#008000">//其中重点看一下私有成员结构体：
</rich_text><rich_text foreground="#008080">17</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> bus_type_private {
</rich_text><rich_text foreground="#008080">18</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> kset subsys;                           </rich_text><rich_text foreground="#008000">//bus内嵌的kset，代表其自身
</rich_text><rich_text foreground="#008080">19</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> kset *drivers_kset;                    
</rich_text><rich_text foreground="#008080">20</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> kset *devices_kset;
</rich_text><rich_text foreground="#008080">21</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> klist klist_devices;                   </rich_text><rich_text foreground="#008000">//包含devices链表及其操作函数
</rich_text><rich_text foreground="#008080">22</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> klist klist_drivers;                   </rich_text><rich_text foreground="#008000">//driver链表及其操作函数
</rich_text><rich_text foreground="#008080">23</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> blocking_notifier_head bus_notifier;
</rich_text><rich_text foreground="#008080">24</rich_text><rich_text>     unsigned </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> drivers_autoprobe:</rich_text><rich_text foreground="#800080">1</rich_text><rich_text>;              </rich_text><rich_text foreground="#008000">//匹配成功自动初始化标志
</rich_text><rich_text foreground="#008080">25</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> bus_type *bus;                          
</rich_text><rich_text foreground="#008080">26</rich_text><rich_text> };
  无论是bus，driver，还是device其本身特征都放在私有成员里，其注册时，都会申请并填充这个结构体，下面具体分析一下bus的注册流程，从bus_register开始：
     
</rich_text><rich_text foreground="#008080">1</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> bus_register(</rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> bus_type *bus)
</rich_text><rich_text foreground="#008080"> 2</rich_text><rich_text> {
</rich_text><rich_text foreground="#008080"> 3</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> retval;
</rich_text><rich_text foreground="#008080"> 4</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> bus_type_private *priv;
</rich_text><rich_text foreground="#008080"> 5</rich_text><rich_text>     priv = kzalloc(</rich_text><rich_text foreground="#0000ff">sizeof</rich_text><rich_text>(</rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> bus_type_private), GFP_KERNEL);    </rich_text><rich_text foreground="#008000">//进入时bus_type-&gt;bus_type_private为NULL
</rich_text><rich_text foreground="#008080"> 6</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (!priv)                                                      </rich_text><rich_text foreground="#008000">//该函数主要是对其的设置
</rich_text><rich_text foreground="#008080"> 7</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text> -ENOMEM;
</rich_text><rich_text foreground="#008080"> 8</rich_text><rich_text>     priv-&gt;bus = bus;                                                </rich_text><rich_text foreground="#008000">//私有成员的bus回指该bus
</rich_text><rich_text foreground="#008080"> 9</rich_text><rich_text>     bus-&gt;p = priv;                                                  </rich_text><rich_text foreground="#008000">//初始化bus-&gt;p,即其私有属性
</rich_text><rich_text foreground="#008080">10</rich_text><rich_text>     BLOCKING_INIT_NOTIFIER_HEAD(&amp;priv-&gt;bus_notifier);
</rich_text><rich_text foreground="#008080">11</rich_text><rich_text>     retval = kobject_set_name(&amp;priv-&gt;subsys.kobj, </rich_text><rich_text foreground="#800000">&quot;%s&quot;</rich_text><rich_text>, bus-&gt;name);  </rich_text><rich_text foreground="#008000">//设置该bus的名字，bus是kset的封装
</rich_text><rich_text foreground="#008080">12</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (retval)
</rich_text><rich_text foreground="#008080">13</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">goto</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">out</rich_text><rich_text>;
</rich_text><rich_text foreground="#008080">14</rich_text><rich_text>                                                       </rich_text><rich_text foreground="#008000">//bus_kset即为所有bus的总起始端点
</rich_text><rich_text foreground="#008080">15</rich_text><rich_text> </rich_text><rich_text foreground="#008000">//围绕bus内嵌的kset初始化，和kset的初始化时围绕
</rich_text><rich_text foreground="#008080">16</rich_text><rich_text>     priv-&gt;subsys.kobj.kset = bus_kset;                </rich_text><rich_text foreground="#008000">//kobj相似，没有parent时，就会用kset的kobj，此处即是
</rich_text><rich_text foreground="#008080">17</rich_text><rich_text>     priv-&gt;subsys.kobj.ktype = &amp;bus_ktype;                    </rich_text><rich_text foreground="#008000">//属性操作级别统一为bus_ktype
</rich_text><rich_text foreground="#008080">18</rich_text><rich_text>     priv-&gt;drivers_autoprobe = </rich_text><rich_text foreground="#800080">1</rich_text><rich_text>;                                    </rich_text><rich_text foreground="#008000">//设置该标志，当有driver注册时，会自动匹配devices
</rich_text><rich_text foreground="#008080">19</rich_text><rich_text> </rich_text><rich_text foreground="#008000">//上的设备并用probe初始化，
</rich_text><rich_text foreground="#008080">20</rich_text><rich_text> </rich_text><rich_text foreground="#008000">//当有device注册时也同样找到  driver并会初始化
</rich_text><rich_text foreground="#008080">21</rich_text><rich_text>     retval = kset_register(&amp;priv-&gt;subsys);                          </rich_text><rich_text foreground="#008000">//注册kset，创建目录结构，以及层次关系
</rich_text><rich_text foreground="#008080">22</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (retval)
</rich_text><rich_text foreground="#008080">23</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">goto</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">out</rich_text><rich_text>;
</rich_text><rich_text foreground="#008080">24</rich_text><rich_text>     retval = bus_create_file(bus, &amp;bus_attr_uevent);                </rich_text><rich_text foreground="#008000">//当前bus目录下生成bus_attr_uevent属性文件
</rich_text><rich_text foreground="#008080">25</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (retval)
</rich_text><rich_text foreground="#008080">26</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">goto</rich_text><rich_text> bus_uevent_fail;
</rich_text><rich_text foreground="#008080">27</rich_text><rich_text>     priv-&gt;devices_kset = kset_create_and_add(</rich_text><rich_text foreground="#800000">&quot;devices&quot;</rich_text><rich_text>, NULL,       </rich_text><rich_text foreground="#008000">//初始化bus目录下的devices目录，里面级联了该bus下设备，
</rich_text><rich_text foreground="#008080">28</rich_text><rich_text>                          &amp;priv-&gt;subsys.kobj);                    </rich_text><rich_text foreground="#008000">//仍然以kset为原型
</rich_text><rich_text foreground="#008080">29</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (!priv-&gt;devices_kset) {
</rich_text><rich_text foreground="#008080">30</rich_text><rich_text>         retval = -ENOMEM;
</rich_text><rich_text foreground="#008080">31</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">goto</rich_text><rich_text> bus_devices_fail;
</rich_text><rich_text foreground="#008080">32</rich_text><rich_text>     }
</rich_text><rich_text foreground="#008080">33</rich_text><rich_text>     priv-&gt;drivers_kset = kset_create_and_add(</rich_text><rich_text foreground="#800000">&quot;drivers&quot;</rich_text><rich_text>, NULL,       </rich_text><rich_text foreground="#008000">//初始化bus目录下的drivers目录，里面级联了该bus下设备的driver
</rich_text><rich_text foreground="#008080">34</rich_text><rich_text>                          &amp;priv-&gt;subsys.kobj);
</rich_text><rich_text foreground="#008080">35</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (!priv-&gt;drivers_kset) {
</rich_text><rich_text foreground="#008080">36</rich_text><rich_text>         retval = -ENOMEM;
</rich_text><rich_text foreground="#008080">37</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">goto</rich_text><rich_text> bus_drivers_fail;
</rich_text><rich_text foreground="#008080">38</rich_text><rich_text>     }
</rich_text><rich_text foreground="#008080">39</rich_text><rich_text>     klist_init(&amp;priv-&gt;klist_devices, klist_devices_get, klist_devices_put);  </rich_text><rich_text foreground="#008000">//初始化klist_devices里的操作函数成员
</rich_text><rich_text foreground="#008080">40</rich_text><rich_text>     klist_init(&amp;priv-&gt;klist_drivers, NULL, NULL);                            </rich_text><rich_text foreground="#008000">//klist_drivers里的操作函数置空
</rich_text><rich_text foreground="#008080">41</rich_text><rich_text>     retval = add_probe_files(bus);                                           </rich_text><rich_text foreground="#008000">//增加bus_attr_drivers_probe和bus_attr_drivers_autoprobe
</rich_text><rich_text foreground="#008080">42</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (retval)                                                              </rich_text><rich_text foreground="#008000">//属性文件
</rich_text><rich_text foreground="#008080">43</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">goto</rich_text><rich_text> bus_probe_files_fail;
</rich_text><rich_text foreground="#008080">44</rich_text><rich_text>     retval = bus_add_attrs(bus);                                             </rich_text><rich_text foreground="#008000">//增加默认的属性文件
</rich_text><rich_text foreground="#008080">45</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (retval)
</rich_text><rich_text foreground="#008080">46</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">goto</rich_text><rich_text> bus_attrs_fail;
</rich_text><rich_text foreground="#008080">47</rich_text><rich_text>     pr_debug(</rich_text><rich_text foreground="#800000">&quot;bus: '%s': registered/n&quot;</rich_text><rich_text>, bus-&gt;name);
</rich_text><rich_text foreground="#008080">48</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text> </rich_text><rich_text foreground="#800080">0</rich_text><rich_text>;
</rich_text><rich_text foreground="#008080">49</rich_text><rich_text> bus_attrs_fail:                                                               </rich_text><rich_text foreground="#008000">//以下为错误处理
</rich_text><rich_text foreground="#008080">50</rich_text><rich_text>     remove_probe_files(bus);
</rich_text><rich_text foreground="#008080">51</rich_text><rich_text> bus_probe_files_fail:
</rich_text><rich_text foreground="#008080">52</rich_text><rich_text>     kset_unregister(bus-&gt;p-&gt;drivers_kset);
</rich_text><rich_text foreground="#008080">53</rich_text><rich_text> bus_drivers_fail:
</rich_text><rich_text foreground="#008080">54</rich_text><rich_text>     kset_unregister(bus-&gt;p-&gt;devices_kset);
</rich_text><rich_text foreground="#008080">55</rich_text><rich_text> bus_devices_fail:
</rich_text><rich_text foreground="#008080">56</rich_text><rich_text>     bus_remove_file(bus, &amp;bus_attr_uevent);
</rich_text><rich_text foreground="#008080">57</rich_text><rich_text> bus_uevent_fail:
</rich_text><rich_text foreground="#008080">58</rich_text><rich_text>     kset_unregister(&amp;bus-&gt;p-&gt;subsys);
</rich_text><rich_text foreground="#008080">59</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">out</rich_text><rich_text>:
</rich_text><rich_text foreground="#008080">60</rich_text><rich_text>     kfree(bus-&gt;p);
</rich_text><rich_text foreground="#008080">61</rich_text><rich_text>     bus-&gt;p = NULL;
</rich_text><rich_text foreground="#008080">62</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text> retval;
</rich_text><rich_text foreground="#008080">63</rich_text><rich_text> }
    由此可见，bus又是kset的封装，bus_register主要完成了其私有成员bus_type_private的初始化，并初始化了其下的两个目 录devices和drivers，及其属性文件，bus有个自己的根目录也就是bus有个起始端点，是bus_kset，经过此番的注册，bus目录下 将会出现我们注册的bus，并且其下会有device和driver两个子目录，代表它下面的driver和device链表。
二、driver的注册
  下面看一下driver是怎么和bus关联起来的，首先看下driver的结构：
    
 </rich_text><rich_text foreground="#008080">1</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device_driver {
</rich_text><rich_text foreground="#008080"> 2</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">const</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">char</rich_text><rich_text>        *name;            </rich_text><rich_text foreground="#008000">//名字
</rich_text><rich_text foreground="#008080"> 3</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> bus_type        *bus;        </rich_text><rich_text foreground="#008000">//其所在的bus
</rich_text><rich_text foreground="#008080"> 4</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> module        *owner;
</rich_text><rich_text foreground="#008080"> 5</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">const</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">char</rich_text><rich_text>        *mod_name;    </rich_text><rich_text foreground="#008000">/* used for built-in modules */</rich_text><rich_text>
</rich_text><rich_text foreground="#008080"> 6</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">bool</rich_text><rich_text> suppress_bind_attrs;    </rich_text><rich_text foreground="#008000">/* disables bind/unbind via sysfs */</rich_text><rich_text>
</rich_text><rich_text foreground="#008080"> 7</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">#if</rich_text><rich_text> defined(CONFIG_OF)
</rich_text><rich_text foreground="#008080"> 8</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">const</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> of_device_id    *of_match_table;
</rich_text><rich_text foreground="#008080"> 9</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">#endif</rich_text><rich_text>
</rich_text><rich_text foreground="#008080">10</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> (*probe) (</rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device *dev);        </rich_text><rich_text foreground="#008000">//匹配成功时可能会调用到的函数
</rich_text><rich_text foreground="#008080">11</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> (*remove) (</rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device *dev);
</rich_text><rich_text foreground="#008080">12</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">void</rich_text><rich_text> (*shutdown) (</rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device *dev);
</rich_text><rich_text foreground="#008080">13</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> (*suspend) (</rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device *dev, pm_message_t state);
</rich_text><rich_text foreground="#008080">14</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> (*resume) (</rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device *dev);
</rich_text><rich_text foreground="#008080">15</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">const</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> attribute_group **groups;
</rich_text><rich_text foreground="#008080">16</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">const</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> dev_pm_ops *pm;
</rich_text><rich_text foreground="#008080">17</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> driver_private *p;                 </rich_text><rich_text foreground="#008000">//私有成员，表示driver
</rich_text><rich_text foreground="#008080">18</rich_text><rich_text> };
</rich_text><rich_text foreground="#008080">19</rich_text><rich_text> </rich_text><rich_text foreground="#008000">//重点看下driver的私有成员
</rich_text><rich_text foreground="#008080">20</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> driver_private {
</rich_text><rich_text foreground="#008080">21</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> kobject kobj;                      </rich_text><rich_text foreground="#008000">//代表driver自身
</rich_text><rich_text foreground="#008080">22</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> klist klist_devices;               </rich_text><rich_text foreground="#008000">//可以操控的设备链表
</rich_text><rich_text foreground="#008080">23</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> klist_node knode_bus;              </rich_text><rich_text foreground="#008000">//挂接到bus的节点
</rich_text><rich_text foreground="#008080">24</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> module_kobject *mkobj;             </rich_text><rich_text foreground="#008000">//模块相关
</rich_text><rich_text foreground="#008080">25</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device_driver *driver;             </rich_text><rich_text foreground="#008000">//回指该driver
</rich_text><rich_text foreground="#008080">26</rich_text><rich_text> };
  如同bus一样，重点的仍是可以代表其自身的私有属性，下面具体看一下driver的注册过程，从driver_register开始：
    
  </rich_text><rich_text foreground="#008080">1</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> driver_register(</rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device_driver *drv)
</rich_text><rich_text foreground="#008080">  2</rich_text><rich_text> {
</rich_text><rich_text foreground="#008080">  3</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> ret;
</rich_text><rich_text foreground="#008080">  4</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device_driver *other;
</rich_text><rich_text foreground="#008080">  5</rich_text><rich_text>     BUG_ON(!drv-&gt;bus-&gt;p);
</rich_text><rich_text foreground="#008080">  6</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> ((drv-&gt;bus-&gt;probe &amp;&amp; drv-&gt;probe) ||           </rich_text><rich_text foreground="#008000">//driver和bus的同名操作函数如果同时存在，会出现警告
</rich_text><rich_text foreground="#008080">  7</rich_text><rich_text>         (drv-&gt;bus-&gt;remove &amp;&amp; drv-&gt;remove) ||         </rich_text><rich_text foreground="#008000">//并且会优先选用bus的
</rich_text><rich_text foreground="#008080">  8</rich_text><rich_text>         (drv-&gt;bus-&gt;shutdown &amp;&amp; drv-&gt;shutdown))
</rich_text><rich_text foreground="#008080">  9</rich_text><rich_text>         printk(KERN_WARNING </rich_text><rich_text foreground="#800000">&quot;Driver '%s' needs updating - please use &quot;</rich_text><rich_text>
</rich_text><rich_text foreground="#008080"> 10</rich_text><rich_text>             </rich_text><rich_text foreground="#800000">&quot;bus_type methods/n&quot;</rich_text><rich_text>, drv-&gt;name);
</rich_text><rich_text foreground="#008080"> 11</rich_text><rich_text>     other = driver_find(drv-&gt;name, drv-&gt;bus);        </rich_text><rich_text foreground="#008000">//进入bus的driver链表，确认该driver是否已经注册
</rich_text><rich_text foreground="#008080"> 12</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (other) {
</rich_text><rich_text foreground="#008080"> 13</rich_text><rich_text>         put_driver(other);                            </rich_text><rich_text foreground="#008000">//找到了再减少引用计数，并且报错退出
</rich_text><rich_text foreground="#008080"> 14</rich_text><rich_text>         printk(KERN_ERR </rich_text><rich_text foreground="#800000">&quot;Error: Driver '%s' is already registered, &quot;</rich_text><rich_text>
</rich_text><rich_text foreground="#008080"> 15</rich_text><rich_text>             </rich_text><rich_text foreground="#800000">&quot;aborting.../n&quot;</rich_text><rich_text>, drv-&gt;name);
</rich_text><rich_text foreground="#008080"> 16</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text> -EBUSY;
</rich_text><rich_text foreground="#008080"> 17</rich_text><rich_text>     }
</rich_text><rich_text foreground="#008080"> 18</rich_text><rich_text>     ret = bus_add_driver(drv);                       </rich_text><rich_text foreground="#008000">//如果没有注册，那么把该driver加入所在bus
</rich_text><rich_text foreground="#008080"> 19</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (ret)
</rich_text><rich_text foreground="#008080"> 20</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text> ret;
</rich_text><rich_text foreground="#008080"> 21</rich_text><rich_text>     ret = driver_add_groups(drv, drv-&gt;groups);
</rich_text><rich_text foreground="#008080"> 22</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (ret)
</rich_text><rich_text foreground="#008080"> 23</rich_text><rich_text>         bus_remove_driver(drv);
</rich_text><rich_text foreground="#008080"> 24</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text> ret;
</rich_text><rich_text foreground="#008080"> 25</rich_text><rich_text> }
</rich_text><rich_text foreground="#008080"> 26</rich_text><rich_text> </rich_text><rich_text foreground="#008000">/****************************************************
</rich_text><rich_text foreground="#008080"> 27</rich_text><rich_text> </rich_text><rich_text foreground="#008000">× 跟踪一下driver_find(drv-&gt;name, drv-&gt;bus)
</rich_text><rich_text foreground="#008080"> 28</rich_text><rich_text> </rich_text><rich_text foreground="#008000">****************************************************/</rich_text><rich_text>
</rich_text><rich_text foreground="#008080"> 29</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device_driver *driver_find(</rich_text><rich_text foreground="#0000ff">const</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">char</rich_text><rich_text> *name, </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> bus_type *bus)
</rich_text><rich_text foreground="#008080"> 30</rich_text><rich_text> {
</rich_text><rich_text foreground="#008080"> 31</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> kobject *k = kset_find_obj(bus-&gt;p-&gt;drivers_kset, name);  </rich_text><rich_text foreground="#008000">//bus-&gt;p-&gt;drivers_kset代表bus下
</rich_text><rich_text foreground="#008080"> 32</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> driver_private *priv;                                    </rich_text><rich_text foreground="#008000">//的driver目录，此处会遍历bus的    
</rich_text><rich_text foreground="#008080"> 33</rich_text><rich_text> </rich_text><rich_text foreground="#008000">//driver链表，通过driver内嵌的
</rich_text><rich_text foreground="#008080"> 34</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (k) {                                                        </rich_text><rich_text foreground="#008000">//kobj名字比较
</rich_text><rich_text foreground="#008080"> 35</rich_text><rich_text>         priv = to_driver(k);
</rich_text><rich_text foreground="#008080"> 36</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text> priv-&gt;driver;                                 </rich_text><rich_text foreground="#008000">//如果找到同名的kobj那么返回该driver
</rich_text><rich_text foreground="#008080"> 37</rich_text><rich_text>     }
</rich_text><rich_text foreground="#008080"> 38</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text> NULL;
</rich_text><rich_text foreground="#008080"> 39</rich_text><rich_text> }
</rich_text><rich_text foreground="#008080"> 40</rich_text><rich_text> </rich_text><rich_text foreground="#008000">//看一下kset_find_obj吧:
</rich_text><rich_text foreground="#008080"> 41</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> kobject *kset_find_obj(</rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> kset *kset, </rich_text><rich_text foreground="#0000ff">const</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">char</rich_text><rich_text> *name)
</rich_text><rich_text foreground="#008080"> 42</rich_text><rich_text> {
</rich_text><rich_text foreground="#008080"> 43</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> kobject *k;
</rich_text><rich_text foreground="#008080"> 44</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> kobject *ret = NULL;
</rich_text><rich_text foreground="#008080"> 45</rich_text><rich_text>     spin_lock(&amp;kset-&gt;list_lock);
</rich_text><rich_text foreground="#008080"> 46</rich_text><rich_text>     list_for_each_entry(k, &amp;kset-&gt;list, entry) {                   </rich_text><rich_text foreground="#008000">//遍历bus下的driver链表，如果
</rich_text><rich_text foreground="#008080"> 47</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (kobject_name(k) &amp;&amp; !strcmp(kobject_name(k), name)) {   </rich_text><rich_text foreground="#008000">//找到那么返回找到的kobj，并且把
</rich_text><rich_text foreground="#008080"> 48</rich_text><rich_text>             ret = kobject_get(k);                                  </rich_text><rich_text foreground="#008000">//该driver的kobj引用计数+1
</rich_text><rich_text foreground="#008080"> 49</rich_text><rich_text>             </rich_text><rich_text foreground="#0000ff">break</rich_text><rich_text>;
</rich_text><rich_text foreground="#008080"> 50</rich_text><rich_text>         }
</rich_text><rich_text foreground="#008080"> 51</rich_text><rich_text>     }
</rich_text><rich_text foreground="#008080"> 52</rich_text><rich_text>     spin_unlock(&amp;kset-&gt;list_lock);
</rich_text><rich_text foreground="#008080"> 53</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text> ret;
</rich_text><rich_text foreground="#008080"> 54</rich_text><rich_text> }
</rich_text><rich_text foreground="#008080"> 55</rich_text><rich_text> </rich_text><rich_text foreground="#008000">/************************************************
</rich_text><rich_text foreground="#008080"> 56</rich_text><rich_text> </rich_text><rich_text foreground="#008000">× 再来跟踪一下driver_register里面的另外一个函数
</rich_text><rich_text foreground="#008080"> 57</rich_text><rich_text> </rich_text><rich_text foreground="#008000">× bus_add_driver(drv)
</rich_text><rich_text foreground="#008080"> 58</rich_text><rich_text> </rich_text><rich_text foreground="#008000">************************************************/</rich_text><rich_text>
</rich_text><rich_text foreground="#008080"> 59</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> bus_add_driver(</rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device_driver *drv) 
</rich_text><rich_text foreground="#008080"> 60</rich_text><rich_text> {
</rich_text><rich_text foreground="#008080"> 61</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> bus_type *bus;
</rich_text><rich_text foreground="#008080"> 62</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> driver_private *priv;
</rich_text><rich_text foreground="#008080"> 63</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> error = </rich_text><rich_text foreground="#800080">0</rich_text><rich_text>;
</rich_text><rich_text foreground="#008080"> 64</rich_text><rich_text>     bus = bus_get(drv-&gt;bus);                                        </rich_text><rich_text foreground="#008000">//取得其所在bus的指针
</rich_text><rich_text foreground="#008080"> 65</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (!bus)
</rich_text><rich_text foreground="#008080"> 66</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text> -EINVAL;
</rich_text><rich_text foreground="#008080"> 67</rich_text><rich_text>     pr_debug(</rich_text><rich_text foreground="#800000">&quot;bus: '%s': add driver %s/n&quot;</rich_text><rich_text>, bus-&gt;name, drv-&gt;name);   </rich_text><rich_text foreground="#008000">//开始初始化这个driver的私有成员，
</rich_text><rich_text foreground="#008080"> 68</rich_text><rich_text> </rich_text><rich_text foreground="#008000">//和bus类似
</rich_text><rich_text foreground="#008080"> 69</rich_text><rich_text>     priv = kzalloc(</rich_text><rich_text foreground="#0000ff">sizeof</rich_text><rich_text>(*priv), GFP_KERNEL);
</rich_text><rich_text foreground="#008080"> 70</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (!priv) {
</rich_text><rich_text foreground="#008080"> 71</rich_text><rich_text>         error = -ENOMEM;
</rich_text><rich_text foreground="#008080"> 72</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">goto</rich_text><rich_text> out_put_bus;
</rich_text><rich_text foreground="#008080"> 73</rich_text><rich_text>     }
</rich_text><rich_text foreground="#008080"> 74</rich_text><rich_text>     klist_init(&amp;priv-&gt;klist_devices, NULL, NULL);                   </rich_text><rich_text foreground="#008000">//设备操作函数清空，设备链表初始化
</rich_text><rich_text foreground="#008080"> 75</rich_text><rich_text>     priv-&gt;driver = drv;                                             
</rich_text><rich_text foreground="#008080"> 76</rich_text><rich_text>     drv-&gt;p = priv;
</rich_text><rich_text foreground="#008080"> 77</rich_text><rich_text>     priv-&gt;kobj.kset = bus-&gt;p-&gt;drivers_kset;                          </rich_text><rich_text foreground="#008000">//kset指定到bus下面
</rich_text><rich_text foreground="#008080"> 78</rich_text><rich_text>     error = kobject_init_and_add(&amp;priv-&gt;kobj, &amp;driver_ktype, NULL,   </rich_text><rich_text foreground="#008000">//建立层次结构和属性文件
</rich_text><rich_text foreground="#008080"> 79</rich_text><rich_text>                      </rich_text><rich_text foreground="#800000">&quot;%s&quot;</rich_text><rich_text>, drv-&gt;name);
</rich_text><rich_text foreground="#008080"> 80</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (error)
</rich_text><rich_text foreground="#008080"> 81</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">goto</rich_text><rich_text> out_unregister;
</rich_text><rich_text foreground="#008080"> 82</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (drv-&gt;bus-&gt;p-&gt;drivers_autoprobe) {                            </rich_text><rich_text foreground="#008000">//bus的自动匹配如果设置为真，
</rich_text><rich_text foreground="#008080"> 83</rich_text><rich_text>         error = driver_attach(drv);                                  </rich_text><rich_text foreground="#008000">//那么到bus的devices上去匹配设备
</rich_text><rich_text foreground="#008080"> 84</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (error)
</rich_text><rich_text foreground="#008080"> 85</rich_text><rich_text>             </rich_text><rich_text foreground="#0000ff">goto</rich_text><rich_text> out_unregister;
</rich_text><rich_text foreground="#008080"> 86</rich_text><rich_text>     }
</rich_text><rich_text foreground="#008080"> 87</rich_text><rich_text>     klist_add_tail(&amp;priv-&gt;knode_bus, &amp;bus-&gt;p-&gt;klist_drivers);        </rich_text><rich_text foreground="#008000">//把driver挂接到bus的driver链表
</rich_text><rich_text foreground="#008080"> 88</rich_text><rich_text>     module_add_driver(drv-&gt;owner, drv);
</rich_text><rich_text foreground="#008080"> 89</rich_text><rich_text>     error = driver_create_file(drv, &amp;driver_attr_uevent);            </rich_text><rich_text foreground="#008000">//以下添加该driver相关属性文件
</rich_text><rich_text foreground="#008080"> 90</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (error) {
</rich_text><rich_text foreground="#008080"> 91</rich_text><rich_text>         printk(KERN_ERR </rich_text><rich_text foreground="#800000">&quot;%s: uevent attr (%s) failed/n&quot;</rich_text><rich_text>,
</rich_text><rich_text foreground="#008080"> 92</rich_text><rich_text>             __func__, drv-&gt;name);
</rich_text><rich_text foreground="#008080"> 93</rich_text><rich_text>     }
</rich_text><rich_text foreground="#008080"> 94</rich_text><rich_text>     error = driver_add_attrs(bus, drv);
</rich_text><rich_text foreground="#008080"> 95</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (error) {
</rich_text><rich_text foreground="#008080"> 96</rich_text><rich_text>         </rich_text><rich_text foreground="#008000">/* How the hell do we get out of this pickle? Give up */</rich_text><rich_text>
</rich_text><rich_text foreground="#008080"> 97</rich_text><rich_text>         printk(KERN_ERR </rich_text><rich_text foreground="#800000">&quot;%s: driver_add_attrs(%s) failed/n&quot;</rich_text><rich_text>,
</rich_text><rich_text foreground="#008080"> 98</rich_text><rich_text>             __func__, drv-&gt;name);
</rich_text><rich_text foreground="#008080"> 99</rich_text><rich_text>     }
</rich_text><rich_text foreground="#008080">100</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (!drv-&gt;suppress_bind_attrs) {
</rich_text><rich_text foreground="#008080">101</rich_text><rich_text>         error = add_bind_files(drv);
</rich_text><rich_text foreground="#008080">102</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (error) {
</rich_text><rich_text foreground="#008080">103</rich_text><rich_text>             </rich_text><rich_text foreground="#008000">/* Ditto */</rich_text><rich_text>
</rich_text><rich_text foreground="#008080">104</rich_text><rich_text>             printk(KERN_ERR </rich_text><rich_text foreground="#800000">&quot;%s: add_bind_files(%s) failed/n&quot;</rich_text><rich_text>,
</rich_text><rich_text foreground="#008080">105</rich_text><rich_text>                 __func__, drv-&gt;name);
</rich_text><rich_text foreground="#008080">106</rich_text><rich_text>         }
</rich_text><rich_text foreground="#008080">107</rich_text><rich_text>     }
</rich_text><rich_text foreground="#008080">108</rich_text><rich_text>     kobject_uevent(&amp;priv-&gt;kobj, KOBJ_ADD);
</rich_text><rich_text foreground="#008080">109</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text> </rich_text><rich_text foreground="#800080">0</rich_text><rich_text>;
</rich_text><rich_text foreground="#008080">110</rich_text><rich_text> out_unregister:
</rich_text><rich_text foreground="#008080">111</rich_text><rich_text>     kobject_put(&amp;priv-&gt;kobj);
</rich_text><rich_text foreground="#008080">112</rich_text><rich_text>     kfree(drv-&gt;p);
</rich_text><rich_text foreground="#008080">113</rich_text><rich_text>     drv-&gt;p = NULL;
</rich_text><rich_text foreground="#008080">114</rich_text><rich_text> out_put_bus:
</rich_text><rich_text foreground="#008080">115</rich_text><rich_text>     bus_put(bus);
</rich_text><rich_text foreground="#008080">116</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text> error;
</rich_text><rich_text foreground="#008080">117</rich_text><rich_text> }
</rich_text><rich_text foreground="#008080">118</rich_text><rich_text> </rich_text><rich_text foreground="#008000">/****************************************************************
</rich_text><rich_text foreground="#008080">119</rich_text><rich_text> </rich_text><rich_text foreground="#008000">× 接下来就剩下最终要的匹配函数driver_attach(drv)了，我们来看一下：
</rich_text><rich_text foreground="#008080">120</rich_text><rich_text> </rich_text><rich_text foreground="#008000">****************************************************************/</rich_text><rich_text>
</rich_text><rich_text foreground="#008080">121</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> driver_attach(</rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device_driver *drv)                            </rich_text><rich_text foreground="#008000">//遍历bus的设备链表找到
</rich_text><rich_text foreground="#008080">122</rich_text><rich_text> {                                                                       </rich_text><rich_text foreground="#008000">//合适的设备就调用__driver_attach，
</rich_text><rich_text foreground="#008080">123</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text> bus_for_each_dev(drv-&gt;bus, NULL, drv, __driver_attach);      </rich_text><rich_text foreground="#008000">//NULL表示从头开始遍历
</rich_text><rich_text foreground="#008080">124</rich_text><rich_text> }  
</rich_text><rich_text foreground="#008080">125</rich_text><rich_text> </rich_text><rich_text foreground="#008000">//============
</rich_text><rich_text foreground="#008080">126</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> bus_for_each_dev(</rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> bus_type *bus, </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device *start,
</rich_text><rich_text foreground="#008080">127</rich_text><rich_text>              </rich_text><rich_text foreground="#0000ff">void</rich_text><rich_text> *data, </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> (*fn)(</rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device *, </rich_text><rich_text foreground="#0000ff">void</rich_text><rich_text> *))
</rich_text><rich_text foreground="#008080">128</rich_text><rich_text> {
</rich_text><rich_text foreground="#008080">129</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> klist_iter i;
</rich_text><rich_text foreground="#008080">130</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device *dev;
</rich_text><rich_text foreground="#008080">131</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> error = </rich_text><rich_text foreground="#800080">0</rich_text><rich_text>;
</rich_text><rich_text foreground="#008080">132</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (!bus)
</rich_text><rich_text foreground="#008080">133</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text> -EINVAL;
</rich_text><rich_text foreground="#008080">134</rich_text><rich_text>     klist_iter_init_node(&amp;bus-&gt;p-&gt;klist_devices, &amp;i,              </rich_text><rich_text foreground="#008000">//进入bus的devices链表
</rich_text><rich_text foreground="#008080">135</rich_text><rich_text>                  (start ? &amp;start-&gt;p-&gt;knode_bus : NULL));
</rich_text><rich_text foreground="#008080">136</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">while</rich_text><rich_text> ((dev = next_device(&amp;i)) &amp;&amp; !error)                     </rich_text><rich_text foreground="#008000">//设备存在则调用fn即__driver_attach
</rich_text><rich_text foreground="#008080">137</rich_text><rich_text>         error = fn(dev, data);                                    </rich_text><rich_text foreground="#008000">//进行匹配
</rich_text><rich_text foreground="#008080">138</rich_text><rich_text>     klist_iter_exit(&amp;i);
</rich_text><rich_text foreground="#008080">139</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text> error;
</rich_text><rich_text foreground="#008080">140</rich_text><rich_text> } 
</rich_text><rich_text foreground="#008080">141</rich_text><rich_text> </rich_text><rich_text foreground="#008000">/*********************************************
</rich_text><rich_text foreground="#008080">142</rich_text><rich_text> </rich_text><rich_text foreground="#008000">× 接着看一下__driver_attach这个函数
</rich_text><rich_text foreground="#008080">143</rich_text><rich_text> </rich_text><rich_text foreground="#008000">*********************************************/</rich_text><rich_text>
</rich_text><rich_text foreground="#008080">144</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">static</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> __driver_attach(</rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device *dev, </rich_text><rich_text foreground="#0000ff">void</rich_text><rich_text> *data)
</rich_text><rich_text foreground="#008080">145</rich_text><rich_text> {
</rich_text><rich_text foreground="#008080">146</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device_driver *drv = data;
</rich_text><rich_text foreground="#008080">147</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (!driver_match_device(drv, dev))                </rich_text><rich_text foreground="#008000">//进行匹配
</rich_text><rich_text foreground="#008080">148</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text> </rich_text><rich_text foreground="#800080">0</rich_text><rich_text>;
</rich_text><rich_text foreground="#008080">149</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (dev-&gt;parent)    </rich_text><rich_text foreground="#008000">/* Needed for USB */</rich_text><rich_text>
</rich_text><rich_text foreground="#008080">150</rich_text><rich_text>         device_lock(dev-&gt;parent);
</rich_text><rich_text foreground="#008080">151</rich_text><rich_text>     device_lock(dev);
</rich_text><rich_text foreground="#008080">152</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (!dev-&gt;driver)                               </rich_text><rich_text foreground="#008000">//如果设备没有指定driver
</rich_text><rich_text foreground="#008080">153</rich_text><rich_text>         driver_probe_device(drv, dev);              </rich_text><rich_text foreground="#008000">//那么需要初始化匹配到的这个设备
</rich_text><rich_text foreground="#008080">154</rich_text><rich_text>     device_unlock(dev);
</rich_text><rich_text foreground="#008080">155</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (dev-&gt;parent)
</rich_text><rich_text foreground="#008080">156</rich_text><rich_text>         device_unlock(dev-&gt;parent);
</rich_text><rich_text foreground="#008080">157</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text> </rich_text><rich_text foreground="#800080">0</rich_text><rich_text>;
</rich_text><rich_text foreground="#008080">158</rich_text><rich_text> }
</rich_text><rich_text foreground="#008080">159</rich_text><rich_text> </rich_text><rich_text foreground="#008000">/*********************************************
</rich_text><rich_text foreground="#008080">160</rich_text><rich_text> </rich_text><rich_text foreground="#008000">× 又遇到两个分支，囧，先看一下driver_match_device 
</rich_text><rich_text foreground="#008080">161</rich_text><rich_text> </rich_text><rich_text foreground="#008000">*********************************************/</rich_text><rich_text> 
</rich_text><rich_text foreground="#008080">162</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">static</rich_text><rich_text> inline </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> driver_match_device(</rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device_driver *drv,      </rich_text><rich_text foreground="#008000">//bus的match存在就用bus的
</rich_text><rich_text foreground="#008080">163</rich_text><rich_text>                                       </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device *dev)             </rich_text><rich_text foreground="#008000">//，否则就直接匹配成功...
</rich_text><rich_text foreground="#008080">164</rich_text><rich_text> {                                                                     </rich_text><rich_text foreground="#008000">//match通常实现为首先扫描
</rich_text><rich_text foreground="#008080">165</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text> drv-&gt;bus-&gt;match ? drv-&gt;bus-&gt;match(dev, drv) : </rich_text><rich_text foreground="#800080">1</rich_text><rich_text>;           </rich_text><rich_text foreground="#008000">//driver支持的id设备表，如果
</rich_text><rich_text foreground="#008080">166</rich_text><rich_text> }                                                                     </rich_text><rich_text foreground="#008000">//为NULL就用名字进行匹配
</rich_text><rich_text foreground="#008080">167</rich_text><rich_text> </rich_text><rich_text foreground="#008000">/************************************
</rich_text><rich_text foreground="#008080">168</rich_text><rich_text> </rich_text><rich_text foreground="#008000">× 再来看一下driver_probe_device这个函数 
</rich_text><rich_text foreground="#008080">169</rich_text><rich_text> </rich_text><rich_text foreground="#008000">************************************/</rich_text><rich_text> 
</rich_text><rich_text foreground="#008080">170</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> driver_probe_device(</rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device_driver *drv, </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device *dev)
</rich_text><rich_text foreground="#008080">171</rich_text><rich_text> {
</rich_text><rich_text foreground="#008080">172</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> ret = </rich_text><rich_text foreground="#800080">0</rich_text><rich_text>;
</rich_text><rich_text foreground="#008080">173</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (!device_is_registered(dev))                              </rich_text><rich_text foreground="#008000">//判断该设备是否已经注册
</rich_text><rich_text foreground="#008080">174</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text> -ENODEV;
</rich_text><rich_text foreground="#008080">175</rich_text><rich_text>     pr_debug(</rich_text><rich_text foreground="#800000">&quot;bus: '%s': %s: matched device %s with driver %s/n&quot;</rich_text><rich_text>,
</rich_text><rich_text foreground="#008080">176</rich_text><rich_text>          drv-&gt;bus-&gt;name, __func__, dev_name(dev), drv-&gt;name);
</rich_text><rich_text foreground="#008080">177</rich_text><rich_text>     pm_runtime_get_noresume(dev);
</rich_text><rich_text foreground="#008080">178</rich_text><rich_text>     pm_runtime_barrier(dev);
</rich_text><rich_text foreground="#008080">179</rich_text><rich_text>     ret = really_probe(dev, drv);                               </rich_text><rich_text foreground="#008000">//调用really_probe
</rich_text><rich_text foreground="#008080">180</rich_text><rich_text>     pm_runtime_put_sync(dev);
</rich_text><rich_text foreground="#008080">181</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text> ret;
</rich_text><rich_text foreground="#008080">182</rich_text><rich_text> }
</rich_text><rich_text foreground="#008080">183</rich_text><rich_text> </rich_text><rich_text foreground="#008000">/************************************
</rich_text><rich_text foreground="#008080">184</rich_text><rich_text> </rich_text><rich_text foreground="#008000">× 看一下device_is_registered
</rich_text><rich_text foreground="#008080">185</rich_text><rich_text> </rich_text><rich_text foreground="#008000">************************************/</rich_text><rich_text>
</rich_text><rich_text foreground="#008080">186</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">static</rich_text><rich_text> inline </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> device_is_registered(</rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device *dev)
</rich_text><rich_text foreground="#008080">187</rich_text><rich_text> {
</rich_text><rich_text foreground="#008080">188</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text> dev-&gt;kobj.state_in_sysfs;                           </rich_text><rich_text foreground="#008000">//在sysfs中表示已经注册
</rich_text><rich_text foreground="#008080">189</rich_text><rich_text> }
</rich_text><rich_text foreground="#008080">190</rich_text><rich_text> </rich_text><rich_text foreground="#008000">/************************************
</rich_text><rich_text foreground="#008080">191</rich_text><rich_text> </rich_text><rich_text foreground="#008000">× 再看really_probe
</rich_text><rich_text foreground="#008080">192</rich_text><rich_text> </rich_text><rich_text foreground="#008000">************************************/</rich_text><rich_text>
</rich_text><rich_text foreground="#008080">193</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">static</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> really_probe(</rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device *dev, </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device_driver *drv)
</rich_text><rich_text foreground="#008080">194</rich_text><rich_text> {
</rich_text><rich_text foreground="#008080">195</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> ret = </rich_text><rich_text foreground="#800080">0</rich_text><rich_text>;
</rich_text><rich_text foreground="#008080">196</rich_text><rich_text>     atomic_inc(&amp;probe_count);
</rich_text><rich_text foreground="#008080">197</rich_text><rich_text>     pr_debug(</rich_text><rich_text foreground="#800000">&quot;bus: '%s': %s: probing driver %s with device %s/n&quot;</rich_text><rich_text>,
</rich_text><rich_text foreground="#008080">198</rich_text><rich_text>          drv-&gt;bus-&gt;name, __func__, drv-&gt;name, dev_name(dev));
</rich_text><rich_text foreground="#008080">199</rich_text><rich_text>     WARN_ON(!list_empty(&amp;dev-&gt;devres_head));
</rich_text><rich_text foreground="#008080">200</rich_text><rich_text>     dev-&gt;driver = drv;                                     </rich_text><rich_text foreground="#008000">//device的driver初始化成该driver
</rich_text><rich_text foreground="#008080">201</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (driver_sysfs_add(dev)) {                      
</rich_text><rich_text foreground="#008080">202</rich_text><rich_text>                  printk(KERN_ERR </rich_text><rich_text foreground="#800000">&quot;%s: driver_sysfs_add(%s) failed/n&quot;</rich_text><rich_text>,
</rich_text><rich_text foreground="#008080">203</rich_text><rich_text>             __func__, dev_name(dev));
</rich_text><rich_text foreground="#008080">204</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">goto</rich_text><rich_text> probe_failed;
</rich_text><rich_text foreground="#008080">205</rich_text><rich_text>     }
</rich_text><rich_text foreground="#008080">206</rich_text><rich_text>                                                          </rich_text><rich_text foreground="#008000">//利用probe初始化设备
</rich_text><rich_text foreground="#008080">207</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (dev-&gt;bus-&gt;probe) {                               </rich_text><rich_text foreground="#008000">//如果bus的probe存在就用bus的，
</rich_text><rich_text foreground="#008080">208</rich_text><rich_text>         ret = dev-&gt;bus-&gt;probe(dev);                      </rich_text><rich_text foreground="#008000">//如果bus的不存在driver的存在
</rich_text><rich_text foreground="#008080">209</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (ret)                                         </rich_text><rich_text foreground="#008000">//再用driver的
</rich_text><rich_text foreground="#008080">210</rich_text><rich_text>             </rich_text><rich_text foreground="#0000ff">goto</rich_text><rich_text> probe_failed;
</rich_text><rich_text foreground="#008080">211</rich_text><rich_text>     } </rich_text><rich_text foreground="#0000ff">else</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (drv-&gt;probe) {
</rich_text><rich_text foreground="#008080">212</rich_text><rich_text>         ret = drv-&gt;probe(dev);
</rich_text><rich_text foreground="#008080">213</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (ret)
</rich_text><rich_text foreground="#008080">214</rich_text><rich_text>             </rich_text><rich_text foreground="#0000ff">goto</rich_text><rich_text> probe_failed;
</rich_text><rich_text foreground="#008080">215</rich_text><rich_text>     }
</rich_text><rich_text foreground="#008080">216</rich_text><rich_text>     driver_bound(dev);                              </rich_text><rich_text foreground="#008000">//调用driver_bound进行绑定
</rich_text><rich_text foreground="#008080">217</rich_text><rich_text>     ret = </rich_text><rich_text foreground="#800080">1</rich_text><rich_text>;
</rich_text><rich_text foreground="#008080">218</rich_text><rich_text>     pr_debug(</rich_text><rich_text foreground="#800000">&quot;bus: '%s': %s: bound device %s to driver %s/n&quot;</rich_text><rich_text>,
</rich_text><rich_text foreground="#008080">219</rich_text><rich_text>          drv-&gt;bus-&gt;name, __func__, dev_name(dev), drv-&gt;name);
</rich_text><rich_text foreground="#008080">220</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">goto</rich_text><rich_text> done;
</rich_text><rich_text foreground="#008080">221</rich_text><rich_text> probe_failed:
</rich_text><rich_text foreground="#008080">222</rich_text><rich_text>     devres_release_all(dev);
</rich_text><rich_text foreground="#008080">223</rich_text><rich_text>     driver_sysfs_remove(dev);
</rich_text><rich_text foreground="#008080">224</rich_text><rich_text>     dev-&gt;driver = NULL;
</rich_text><rich_text foreground="#008080">225</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (ret != -ENODEV &amp;&amp; ret != -ENXIO) {
</rich_text><rich_text foreground="#008080">226</rich_text><rich_text>         </rich_text><rich_text foreground="#008000">/* driver matched but the probe failed */</rich_text><rich_text>
</rich_text><rich_text foreground="#008080">227</rich_text><rich_text>         printk(KERN_WARNING
</rich_text><rich_text foreground="#008080">228</rich_text><rich_text>                </rich_text><rich_text foreground="#800000">&quot;%s: probe of %s failed with error %d/n&quot;</rich_text><rich_text>,
</rich_text><rich_text foreground="#008080">229</rich_text><rich_text>                drv-&gt;name, dev_name(dev), ret);
</rich_text><rich_text foreground="#008080">230</rich_text><rich_text>     }
</rich_text><rich_text foreground="#008080">231</rich_text><rich_text>     </rich_text><rich_text foreground="#008000">/*
</rich_text><rich_text foreground="#008080">232</rich_text><rich_text> </rich_text><rich_text foreground="#008000">     * Ignore errors returned by -&gt;probe so that the next driver can try
</rich_text><rich_text foreground="#008080">233</rich_text><rich_text> </rich_text><rich_text foreground="#008000">     * its luck.
</rich_text><rich_text foreground="#008080">234</rich_text><rich_text> </rich_text><rich_text foreground="#008000">*/</rich_text><rich_text>
</rich_text><rich_text foreground="#008080">235</rich_text><rich_text>     ret = </rich_text><rich_text foreground="#800080">0</rich_text><rich_text>;
</rich_text><rich_text foreground="#008080">236</rich_text><rich_text> done:
</rich_text><rich_text foreground="#008080">237</rich_text><rich_text>     atomic_dec(&amp;probe_count);
</rich_text><rich_text foreground="#008080">238</rich_text><rich_text>     wake_up(&amp;probe_waitqueue);
</rich_text><rich_text foreground="#008080">239</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text> ret;
</rich_text><rich_text foreground="#008080">240</rich_text><rich_text> }
</rich_text><rich_text foreground="#008080">241</rich_text><rich_text> </rich_text><rich_text foreground="#008000">/**********************************
</rich_text><rich_text foreground="#008080">242</rich_text><rich_text> </rich_text><rich_text foreground="#008000">* 最后跟一下driver_bound(dev)这个函数
</rich_text><rich_text foreground="#008080">243</rich_text><rich_text> </rich_text><rich_text foreground="#008000">**********************************/</rich_text><rich_text>
</rich_text><rich_text foreground="#008080">244</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">static</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">void</rich_text><rich_text> driver_bound(</rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device *dev)
</rich_text><rich_text foreground="#008080">245</rich_text><rich_text> {
</rich_text><rich_text foreground="#008080">246</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (klist_node_attached(&amp;dev-&gt;p-&gt;knode_driver)) {                   </rich_text><rich_text foreground="#008000">//判断是否已经绑定
</rich_text><rich_text foreground="#008080">247</rich_text><rich_text>         printk(KERN_WARNING </rich_text><rich_text foreground="#800000">&quot;%s: device %s already bound/n&quot;</rich_text><rich_text>,
</rich_text><rich_text foreground="#008080">248</rich_text><rich_text>             __func__, kobject_name(&amp;dev-&gt;kobj));
</rich_text><rich_text foreground="#008080">249</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text>;
</rich_text><rich_text foreground="#008080">250</rich_text><rich_text>     }
</rich_text><rich_text foreground="#008080">251</rich_text><rich_text>     pr_debug(</rich_text><rich_text foreground="#800000">&quot;driver: '%s': %s: bound to device '%s'/n&quot;</rich_text><rich_text>, dev_name(dev),
</rich_text><rich_text foreground="#008080">252</rich_text><rich_text>          __func__, dev-&gt;driver-&gt;name);
</rich_text><rich_text foreground="#008080">253</rich_text><rich_text>     klist_add_tail(&amp;dev-&gt;p-&gt;knode_driver, &amp;dev-&gt;driver-&gt;p-&gt;klist_devices);  </rich_text><rich_text foreground="#008000">//将设备添加
</rich_text><rich_text foreground="#008080">254</rich_text><rich_text> </rich_text><rich_text foreground="#008000">//到driver的链表
</rich_text><rich_text foreground="#008080">255</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (dev-&gt;bus)
</rich_text><rich_text foreground="#008080">256</rich_text><rich_text>         blocking_notifier_call_chain(&amp;dev-&gt;bus-&gt;p-&gt;bus_notifier,
</rich_text><rich_text foreground="#008080">257</rich_text><rich_text>                          BUS_NOTIFY_BOUND_DRIVER, dev);
</rich_text><rich_text foreground="#008080">258</rich_text><rich_text> }
</rich_text><rich_text foreground="#008080">259</rich_text><rich_text> </rich_text><rich_text foreground="#008000">//all end</rich_text><rich_text>
   总结一下，driver的注册，主要涉及将自身挂接到bus的driver链表，并将匹配到的设备加入自己的device链表，并且将匹配到的 device的driver成员初始化为该driver，私有属性的driver节点也挂到driver的设备链表下，其中匹配函数是利用利用bus的 match函数，该函数通常判断如果driver有id表，就查表匹配，如果没有就用driver和device名字匹配。当匹配成功后如果自动初始化标 志允许则调用初始化函数probe，bus的probe优先级始终高于driver的。另外注意一点driver是没有总的起始端点的，driver不是 可具体描述的事物。
</rich_text></node><node name="bus，device，driver分析(二)" prog_lang="custom-colors" readonly="False" tags="" unique_id="11"><rich_text>上篇分析了bus，driver的注册过程，这篇主要分析device的注册，并总结给出个流程图。
三、device的注册
   还是照例先看一下device的结构：
 </rich_text><rich_text foreground="#008080">1</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device {
</rich_text><rich_text foreground="#008080"> 2</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device        *parent;
</rich_text><rich_text foreground="#008080"> 3</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device_private    *p;                                              </rich_text><rich_text foreground="#008000">//私有属性结构，重点
</rich_text><rich_text foreground="#008080"> 4</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> kobject kobj;
</rich_text><rich_text foreground="#008080"> 5</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">const</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">char</rich_text><rich_text>        *init_name; </rich_text><rich_text foreground="#008000">/* initial name of the device */</rich_text><rich_text>
</rich_text><rich_text foreground="#008080"> 6</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device_type    *type;
</rich_text><rich_text foreground="#008080"> 7</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> mutex        mutex;    </rich_text><rich_text foreground="#008000">/* mutex to synchronize calls to
</rich_text><rich_text foreground="#008080"> 8</rich_text><rich_text> </rich_text><rich_text foreground="#008000">                     * its driver.
</rich_text><rich_text foreground="#008080"> 9</rich_text><rich_text> </rich_text><rich_text foreground="#008000">*/</rich_text><rich_text>
</rich_text><rich_text foreground="#008080">10</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> bus_type    *bus;        </rich_text><rich_text foreground="#008000">/* type of bus device is on */</rich_text><rich_text>            </rich_text><rich_text foreground="#008000">//所在bus
</rich_text><rich_text foreground="#008080">11</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device_driver *driver;    </rich_text><rich_text foreground="#008000">/* which driver has allocated this    //匹配的driver
</rich_text><rich_text foreground="#008080">12</rich_text><rich_text> </rich_text><rich_text foreground="#008000">                       device */</rich_text><rich_text>
</rich_text><rich_text foreground="#008080">13</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">void</rich_text><rich_text>        *platform_data;    </rich_text><rich_text foreground="#008000">/* Platform specific data, device
</rich_text><rich_text foreground="#008080">14</rich_text><rich_text> </rich_text><rich_text foreground="#008000">                       core doesn't touch it */</rich_text><rich_text>
</rich_text><rich_text foreground="#008080">15</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> dev_pm_info    power;
</rich_text><rich_text foreground="#008080">16</rich_text><rich_text> #ifdef CONFIG_NUMA
</rich_text><rich_text foreground="#008080">17</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text>        numa_node;    </rich_text><rich_text foreground="#008000">/* NUMA node this device is close to */</rich_text><rich_text>
</rich_text><rich_text foreground="#008080">18</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">#endif</rich_text><rich_text>
</rich_text><rich_text foreground="#008080">19</rich_text><rich_text>     u64        *dma_mask;    </rich_text><rich_text foreground="#008000">/* dma mask (if dma'able device) */</rich_text><rich_text>
</rich_text><rich_text foreground="#008080">20</rich_text><rich_text>     u64        coherent_dma_mask;</rich_text><rich_text foreground="#008000">/* Like dma_mask, but for
</rich_text><rich_text foreground="#008080">21</rich_text><rich_text> </rich_text><rich_text foreground="#008000">                         alloc_coherent mappings as
</rich_text><rich_text foreground="#008080">22</rich_text><rich_text> </rich_text><rich_text foreground="#008000">                         not all hardware supports
</rich_text><rich_text foreground="#008080">23</rich_text><rich_text> </rich_text><rich_text foreground="#008000">                         64 bit addresses for consistent
</rich_text><rich_text foreground="#008080">24</rich_text><rich_text> </rich_text><rich_text foreground="#008000">                         allocations such descriptors. */</rich_text><rich_text>
</rich_text><rich_text foreground="#008080">25</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device_dma_parameters *dma_parms;
</rich_text><rich_text foreground="#008080">26</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> list_head    dma_pools;    </rich_text><rich_text foreground="#008000">/* dma pools (if dma'ble) */</rich_text><rich_text>
</rich_text><rich_text foreground="#008080">27</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> dma_coherent_mem    *dma_mem; </rich_text><rich_text foreground="#008000">/* internal for coherent mem
</rich_text><rich_text foreground="#008080">28</rich_text><rich_text> </rich_text><rich_text foreground="#008000">                         override */</rich_text><rich_text>
</rich_text><rich_text foreground="#008080">29</rich_text><rich_text>     </rich_text><rich_text foreground="#008000">/* arch specific additions */</rich_text><rich_text>
</rich_text><rich_text foreground="#008080">30</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> dev_archdata    archdata;
</rich_text><rich_text foreground="#008080">31</rich_text><rich_text> #ifdef CONFIG_OF
</rich_text><rich_text foreground="#008080">32</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device_node    *of_node;
</rich_text><rich_text foreground="#008080">33</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">#endif</rich_text><rich_text>
</rich_text><rich_text foreground="#008080">34</rich_text><rich_text>     dev_t            devt;    </rich_text><rich_text foreground="#008000">/* dev_t, creates the sysfs &quot;dev&quot; */</rich_text><rich_text>
</rich_text><rich_text foreground="#008080">35</rich_text><rich_text>     spinlock_t        devres_lock;
</rich_text><rich_text foreground="#008080">36</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> list_head    devres_head;
</rich_text><rich_text foreground="#008080">37</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> klist_node    knode_class;
</rich_text><rich_text foreground="#008080">38</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">class</rich_text><rich_text>        *</rich_text><rich_text foreground="#0000ff">class</rich_text><rich_text>;
</rich_text><rich_text foreground="#008080">39</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">const</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> attribute_group **groups;    </rich_text><rich_text foreground="#008000">/* optional groups */</rich_text><rich_text>
</rich_text><rich_text foreground="#008080">40</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">void</rich_text><rich_text>    (*release)(</rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device *dev);
</rich_text><rich_text foreground="#008080">41</rich_text><rich_text> };
</rich_text><rich_text foreground="#008080">42</rich_text><rich_text> </rich_text><rich_text foreground="#008000">//重点看一下私有属性结构
</rich_text><rich_text foreground="#008080">43</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device_private {
</rich_text><rich_text foreground="#008080">44</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> klist klist_children;             </rich_text><rich_text foreground="#008000">//子集结构
</rich_text><rich_text foreground="#008080">45</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> klist_node knode_parent;          </rich_text><rich_text foreground="#008000">//父级挂接点
</rich_text><rich_text foreground="#008080">46</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> klist_node knode_driver;          </rich_text><rich_text foreground="#008000">//driver挂接点
</rich_text><rich_text foreground="#008080">47</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> klist_node knode_bus;             </rich_text><rich_text foreground="#008000">//bus挂接点
</rich_text><rich_text foreground="#008080">48</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">void</rich_text><rich_text> *driver_data;
</rich_text><rich_text foreground="#008080">49</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device *device;                   </rich_text><rich_text foreground="#008000">//回指
</rich_text><rich_text foreground="#008080">50</rich_text><rich_text> };

接下来详细看一下device的注册device_register:
  </rich_text><rich_text foreground="#008080">1</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> device_register(</rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device *dev)
</rich_text><rich_text foreground="#008080">  2</rich_text><rich_text> {
</rich_text><rich_text foreground="#008080">  3</rich_text><rich_text>     device_initialize(dev);                </rich_text><rich_text foreground="#008000">//初始化dev
</rich_text><rich_text foreground="#008080">  4</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text> device_add(dev);                </rich_text><rich_text foreground="#008000">//添加dev
</rich_text><rich_text foreground="#008080">  5</rich_text><rich_text> }
</rich_text><rich_text foreground="#008080">  6</rich_text><rich_text> </rich_text><rich_text foreground="#008000">/******************************
</rich_text><rich_text foreground="#008080">  7</rich_text><rich_text> </rich_text><rich_text foreground="#008000">* 先看一下device_initialize(dev)
</rich_text><rich_text foreground="#008080">  8</rich_text><rich_text> </rich_text><rich_text foreground="#008000">******************************/</rich_text><rich_text>
</rich_text><rich_text foreground="#008080">  9</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">void</rich_text><rich_text> device_initialize(</rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device *dev)
</rich_text><rich_text foreground="#008080"> 10</rich_text><rich_text> {
</rich_text><rich_text foreground="#008080"> 11</rich_text><rich_text>     dev-&gt;kobj.kset = devices_kset;                  </rich_text><rich_text foreground="#008000">//可见device和bus都有其起始的kset，而driver没有
</rich_text><rich_text foreground="#008080"> 12</rich_text><rich_text>     kobject_init(&amp;dev-&gt;kobj, &amp;device_ktype);        </rich_text><rich_text foreground="#008000">//初始化这个kobj并建立层次关系以及属性文件，此时
</rich_text><rich_text foreground="#008080"> 13</rich_text><rich_text>     INIT_LIST_HEAD(&amp;dev-&gt;dma_pools);                </rich_text><rich_text foreground="#008000">//是放到了总的device文件目录下面
</rich_text><rich_text foreground="#008080"> 14</rich_text><rich_text>     mutex_init(&amp;dev-&gt;mutex);
</rich_text><rich_text foreground="#008080"> 15</rich_text><rich_text>     lockdep_set_novalidate_class(&amp;dev-&gt;mutex);
</rich_text><rich_text foreground="#008080"> 16</rich_text><rich_text>     spin_lock_init(&amp;dev-&gt;devres_lock);
</rich_text><rich_text foreground="#008080"> 17</rich_text><rich_text>     INIT_LIST_HEAD(&amp;dev-&gt;devres_head);
</rich_text><rich_text foreground="#008080"> 18</rich_text><rich_text>     device_pm_init(dev);
</rich_text><rich_text foreground="#008080"> 19</rich_text><rich_text>     set_dev_node(dev, -</rich_text><rich_text foreground="#800080">1</rich_text><rich_text>);
</rich_text><rich_text foreground="#008080"> 20</rich_text><rich_text> }
</rich_text><rich_text foreground="#008080"> 21</rich_text><rich_text> </rich_text><rich_text foreground="#008000">/******************************
</rich_text><rich_text foreground="#008080"> 22</rich_text><rich_text> </rich_text><rich_text foreground="#008000">* 再来看一下device_add(dev)
</rich_text><rich_text foreground="#008080"> 23</rich_text><rich_text> </rich_text><rich_text foreground="#008000">******************************/</rich_text><rich_text>
</rich_text><rich_text foreground="#008080"> 24</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> device_add(</rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device *dev)
</rich_text><rich_text foreground="#008080"> 25</rich_text><rich_text> {
</rich_text><rich_text foreground="#008080"> 26</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device *parent = NULL;
</rich_text><rich_text foreground="#008080"> 27</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> class_interface *class_intf;
</rich_text><rich_text foreground="#008080"> 28</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> error = -EINVAL;
</rich_text><rich_text foreground="#008080"> 29</rich_text><rich_text>     dev = get_device(dev);
</rich_text><rich_text foreground="#008080"> 30</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (!dev)
</rich_text><rich_text foreground="#008080"> 31</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">goto</rich_text><rich_text> done;
</rich_text><rich_text foreground="#008080"> 32</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (!dev-&gt;p) {
</rich_text><rich_text foreground="#008080"> 33</rich_text><rich_text>         error = device_private_init(dev);                        </rich_text><rich_text foreground="#008000">//初始化dev的私有成员，及其链表操作函数
</rich_text><rich_text foreground="#008080"> 34</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (error)
</rich_text><rich_text foreground="#008080"> 35</rich_text><rich_text>             </rich_text><rich_text foreground="#0000ff">goto</rich_text><rich_text> done;
</rich_text><rich_text foreground="#008080"> 36</rich_text><rich_text>     }
</rich_text><rich_text foreground="#008080"> 37</rich_text><rich_text>     </rich_text><rich_text foreground="#008000">/*
</rich_text><rich_text foreground="#008080"> 38</rich_text><rich_text> </rich_text><rich_text foreground="#008000">     * for statically allocated devices, which should all be converted
</rich_text><rich_text foreground="#008080"> 39</rich_text><rich_text> </rich_text><rich_text foreground="#008000">     * some day, we need to initialize the name. We prevent reading back
</rich_text><rich_text foreground="#008080"> 40</rich_text><rich_text> </rich_text><rich_text foreground="#008000">     * the name, and force the use of dev_name()
</rich_text><rich_text foreground="#008080"> 41</rich_text><rich_text> </rich_text><rich_text foreground="#008000">*/</rich_text><rich_text>
</rich_text><rich_text foreground="#008080"> 42</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (dev-&gt;init_name) {
</rich_text><rich_text foreground="#008080"> 43</rich_text><rich_text>         dev_set_name(dev, </rich_text><rich_text foreground="#800000">&quot;%s&quot;</rich_text><rich_text>, dev-&gt;init_name);                 </rich_text><rich_text foreground="#008000">//设置名字，给kobj
</rich_text><rich_text foreground="#008080"> 44</rich_text><rich_text>         dev-&gt;init_name = NULL;
</rich_text><rich_text foreground="#008080"> 45</rich_text><rich_text>     }
</rich_text><rich_text foreground="#008080"> 46</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (!dev_name(dev)) {                                         </rich_text><rich_text foreground="#008000">//名字为空出错退出
</rich_text><rich_text foreground="#008080"> 47</rich_text><rich_text>         error = -EINVAL;
</rich_text><rich_text foreground="#008080"> 48</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">goto</rich_text><rich_text> name_error;
</rich_text><rich_text foreground="#008080"> 49</rich_text><rich_text>     }
</rich_text><rich_text foreground="#008080"> 50</rich_text><rich_text>     pr_debug(</rich_text><rich_text foreground="#800000">&quot;device: '%s': %s/n&quot;</rich_text><rich_text>, dev_name(dev), __func__);
</rich_text><rich_text foreground="#008080"> 51</rich_text><rich_text>     parent = get_device(dev-&gt;parent);                          </rich_text><rich_text foreground="#008000">//返回父节点，如果有返回，没有返回NULL
</rich_text><rich_text foreground="#008080"> 52</rich_text><rich_text>     setup_parent(dev, parent);                   
</rich_text><rich_text foreground="#008080"> 53</rich_text><rich_text>     </rich_text><rich_text foreground="#008000">/* use parent numa_node */</rich_text><rich_text>
</rich_text><rich_text foreground="#008080"> 54</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (parent)
</rich_text><rich_text foreground="#008080"> 55</rich_text><rich_text>         set_dev_node(dev, dev_to_node(parent));
</rich_text><rich_text foreground="#008080"> 56</rich_text><rich_text>     </rich_text><rich_text foreground="#008000">/* first, register with generic layer. */</rich_text><rich_text>
</rich_text><rich_text foreground="#008080"> 57</rich_text><rich_text>     </rich_text><rich_text foreground="#008000">/* we require the name to be set before, and pass NULL */</rich_text><rich_text>
</rich_text><rich_text foreground="#008080"> 58</rich_text><rich_text>     error = kobject_add(&amp;dev-&gt;kobj, dev-&gt;kobj.parent, NULL);   </rich_text><rich_text foreground="#008000">//初始化kobj与其父节点的连接
</rich_text><rich_text foreground="#008080"> 59</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (error)
</rich_text><rich_text foreground="#008080"> 60</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">goto</rich_text><rich_text> Error;
</rich_text><rich_text foreground="#008080"> 61</rich_text><rich_text>     </rich_text><rich_text foreground="#008000">/* notify platform of device entry */</rich_text><rich_text>
</rich_text><rich_text foreground="#008080"> 62</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (platform_notify)
</rich_text><rich_text foreground="#008080"> 63</rich_text><rich_text>         platform_notify(dev);
</rich_text><rich_text foreground="#008080"> 64</rich_text><rich_text>     error = device_create_file(dev, &amp;uevent_attr);             </rich_text><rich_text foreground="#008000">//产生属性文件
</rich_text><rich_text foreground="#008080"> 65</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (error)
</rich_text><rich_text foreground="#008080"> 66</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">goto</rich_text><rich_text> attrError;
</rich_text><rich_text foreground="#008080"> 67</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (MAJOR(dev-&gt;devt)) {
</rich_text><rich_text foreground="#008080"> 68</rich_text><rich_text>         error = device_create_file(dev, &amp;devt_attr);             </rich_text><rich_text foreground="#008000">//在sys下产生dev属性文件
</rich_text><rich_text foreground="#008080"> 69</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (error)
</rich_text><rich_text foreground="#008080"> 70</rich_text><rich_text>             </rich_text><rich_text foreground="#0000ff">goto</rich_text><rich_text> ueventattrError;
</rich_text><rich_text foreground="#008080"> 71</rich_text><rich_text>         error = device_create_sys_dev_entry(dev);
</rich_text><rich_text foreground="#008080"> 72</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (error)
</rich_text><rich_text foreground="#008080"> 73</rich_text><rich_text>             </rich_text><rich_text foreground="#0000ff">goto</rich_text><rich_text> devtattrError;
</rich_text><rich_text foreground="#008080"> 74</rich_text><rich_text>         devtmpfs_create_node(dev);                               
</rich_text><rich_text foreground="#008080"> 75</rich_text><rich_text>     }
</rich_text><rich_text foreground="#008080"> 76</rich_text><rich_text>     error = device_add_class_symlinks(dev);                    
</rich_text><rich_text foreground="#008080"> 77</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (error)
</rich_text><rich_text foreground="#008080"> 78</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">goto</rich_text><rich_text> SymlinkError;
</rich_text><rich_text foreground="#008080"> 79</rich_text><rich_text>     error = device_add_attrs(dev);                             </rich_text><rich_text foreground="#008000">//增加属性文件
</rich_text><rich_text foreground="#008080"> 80</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (error)
</rich_text><rich_text foreground="#008080"> 81</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">goto</rich_text><rich_text> AttrsError;
</rich_text><rich_text foreground="#008080"> 82</rich_text><rich_text>     error = bus_add_device(dev);                               </rich_text><rich_text foreground="#008000">//把device的bus节点挂到bus的设备节点上
</rich_text><rich_text foreground="#008080"> 83</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (error)
</rich_text><rich_text foreground="#008080"> 84</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">goto</rich_text><rich_text> BusError;
</rich_text><rich_text foreground="#008080"> 85</rich_text><rich_text>     error = dpm_sysfs_add(dev);
</rich_text><rich_text foreground="#008080"> 86</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (error)
</rich_text><rich_text foreground="#008080"> 87</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">goto</rich_text><rich_text> DPMError;
</rich_text><rich_text foreground="#008080"> 88</rich_text><rich_text>     device_pm_add(dev);
</rich_text><rich_text foreground="#008080"> 89</rich_text><rich_text>     </rich_text><rich_text foreground="#008000">/* Notify clients of device addition.  This call must come
</rich_text><rich_text foreground="#008080"> 90</rich_text><rich_text> </rich_text><rich_text foreground="#008000">     * after dpm_sysf_add() and before kobject_uevent().
</rich_text><rich_text foreground="#008080"> 91</rich_text><rich_text> </rich_text><rich_text foreground="#008000">*/</rich_text><rich_text>
</rich_text><rich_text foreground="#008080"> 92</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (dev-&gt;bus)
</rich_text><rich_text foreground="#008080"> 93</rich_text><rich_text>         blocking_notifier_call_chain(&amp;dev-&gt;bus-&gt;p-&gt;bus_notifier,
</rich_text><rich_text foreground="#008080"> 94</rich_text><rich_text>                          BUS_NOTIFY_ADD_DEVICE, dev);
</rich_text><rich_text foreground="#008080"> 95</rich_text><rich_text>     kobject_uevent(&amp;dev-&gt;kobj, KOBJ_ADD);
</rich_text><rich_text foreground="#008080"> 96</rich_text><rich_text>     bus_probe_device(dev);                                    </rich_text><rich_text foreground="#008000">//匹配driver
</rich_text><rich_text foreground="#008080"> 97</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (parent)
</rich_text><rich_text foreground="#008080"> 98</rich_text><rich_text>         klist_add_tail(&amp;dev-&gt;p-&gt;knode_parent,                 </rich_text><rich_text foreground="#008000">//把该设备的节点挂到其父节点的链表
</rich_text><rich_text foreground="#008080"> 99</rich_text><rich_text>                    &amp;parent-&gt;p-&gt;klist_children);
</rich_text><rich_text foreground="#008080">100</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (dev-&gt;</rich_text><rich_text foreground="#0000ff">class</rich_text><rich_text>) {
</rich_text><rich_text foreground="#008080">101</rich_text><rich_text>         mutex_lock(&amp;dev-&gt;</rich_text><rich_text foreground="#0000ff">class</rich_text><rich_text>-&gt;p-&gt;class_mutex);
</rich_text><rich_text foreground="#008080">102</rich_text><rich_text>         </rich_text><rich_text foreground="#008000">/* tie the class to the device */</rich_text><rich_text>
</rich_text><rich_text foreground="#008080">103</rich_text><rich_text>         klist_add_tail(&amp;dev-&gt;knode_class,
</rich_text><rich_text foreground="#008080">104</rich_text><rich_text>                    &amp;dev-&gt;</rich_text><rich_text foreground="#0000ff">class</rich_text><rich_text>-&gt;p-&gt;class_devices);
</rich_text><rich_text foreground="#008080">105</rich_text><rich_text>         </rich_text><rich_text foreground="#008000">/* notify any interfaces that the device is here */</rich_text><rich_text>
</rich_text><rich_text foreground="#008080">106</rich_text><rich_text>         list_for_each_entry(class_intf,
</rich_text><rich_text foreground="#008080">107</rich_text><rich_text>                     &amp;dev-&gt;</rich_text><rich_text foreground="#0000ff">class</rich_text><rich_text>-&gt;p-&gt;class_interfaces, node)
</rich_text><rich_text foreground="#008080">108</rich_text><rich_text>             </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (class_intf-&gt;add_dev)
</rich_text><rich_text foreground="#008080">109</rich_text><rich_text>                 class_intf-&gt;add_dev(dev, class_intf);
</rich_text><rich_text foreground="#008080">110</rich_text><rich_text>         mutex_unlock(&amp;dev-&gt;</rich_text><rich_text foreground="#0000ff">class</rich_text><rich_text>-&gt;p-&gt;class_mutex);
</rich_text><rich_text foreground="#008080">111</rich_text><rich_text>     }
</rich_text><rich_text foreground="#008080">112</rich_text><rich_text> done:
</rich_text><rich_text foreground="#008080">113</rich_text><rich_text>     put_device(dev);
</rich_text><rich_text foreground="#008080">114</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text> error;
</rich_text><rich_text foreground="#008080">115</rich_text><rich_text>  DPMError:
</rich_text><rich_text foreground="#008080">116</rich_text><rich_text>     bus_remove_device(dev);
</rich_text><rich_text foreground="#008080">117</rich_text><rich_text>  BusError:
</rich_text><rich_text foreground="#008080">118</rich_text><rich_text>     device_remove_attrs(dev);
</rich_text><rich_text foreground="#008080">119</rich_text><rich_text>  AttrsError:
</rich_text><rich_text foreground="#008080">120</rich_text><rich_text>     device_remove_class_symlinks(dev);
</rich_text><rich_text foreground="#008080">121</rich_text><rich_text>  SymlinkError:
</rich_text><rich_text foreground="#008080">122</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (MAJOR(dev-&gt;devt))
</rich_text><rich_text foreground="#008080">123</rich_text><rich_text>         devtmpfs_delete_node(dev);
</rich_text><rich_text foreground="#008080">124</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (MAJOR(dev-&gt;devt))
</rich_text><rich_text foreground="#008080">125</rich_text><rich_text>         device_remove_sys_dev_entry(dev);
</rich_text><rich_text foreground="#008080">126</rich_text><rich_text>  devtattrError:
</rich_text><rich_text foreground="#008080">127</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (MAJOR(dev-&gt;devt))
</rich_text><rich_text foreground="#008080">128</rich_text><rich_text>         device_remove_file(dev, &amp;devt_attr);
</rich_text><rich_text foreground="#008080">129</rich_text><rich_text>  ueventattrError:
</rich_text><rich_text foreground="#008080">130</rich_text><rich_text>     device_remove_file(dev, &amp;uevent_attr);
</rich_text><rich_text foreground="#008080">131</rich_text><rich_text>  attrError:
</rich_text><rich_text foreground="#008080">132</rich_text><rich_text>     kobject_uevent(&amp;dev-&gt;kobj, KOBJ_REMOVE);
</rich_text><rich_text foreground="#008080">133</rich_text><rich_text>     kobject_del(&amp;dev-&gt;kobj);
</rich_text><rich_text foreground="#008080">134</rich_text><rich_text>  Error:
</rich_text><rich_text foreground="#008080">135</rich_text><rich_text>     cleanup_device_parent(dev);
</rich_text><rich_text foreground="#008080">136</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (parent)
</rich_text><rich_text foreground="#008080">137</rich_text><rich_text>         put_device(parent);
</rich_text><rich_text foreground="#008080">138</rich_text><rich_text> name_error:
</rich_text><rich_text foreground="#008080">139</rich_text><rich_text>     kfree(dev-&gt;p);
</rich_text><rich_text foreground="#008080">140</rich_text><rich_text>     dev-&gt;p = NULL;
</rich_text><rich_text foreground="#008080">141</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">goto</rich_text><rich_text> done;
</rich_text><rich_text foreground="#008080">142</rich_text><rich_text> }
</rich_text><rich_text foreground="#008080">143</rich_text><rich_text> </rich_text><rich_text foreground="#008000">/***********************************************
</rich_text><rich_text foreground="#008080">144</rich_text><rich_text> </rich_text><rich_text foreground="#008000">* 重点看一下bus_probe_device匹配driver以及初始化过程
</rich_text><rich_text foreground="#008080">145</rich_text><rich_text> </rich_text><rich_text foreground="#008000">***********************************************/</rich_text><rich_text>
</rich_text><rich_text foreground="#008080">146</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">void</rich_text><rich_text> bus_probe_device(</rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device *dev)
</rich_text><rich_text foreground="#008080">147</rich_text><rich_text> {
</rich_text><rich_text foreground="#008080">148</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> bus_type *bus = dev-&gt;bus;
</rich_text><rich_text foreground="#008080">149</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> ret;
</rich_text><rich_text foreground="#008080">150</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (bus &amp;&amp; bus-&gt;p-&gt;drivers_autoprobe) {         </rich_text><rich_text foreground="#008000">//设置了自动匹配初始化那么就开始匹配
</rich_text><rich_text foreground="#008080">151</rich_text><rich_text>         ret = device_attach(dev);
</rich_text><rich_text foreground="#008080">152</rich_text><rich_text>         WARN_ON(ret &lt; </rich_text><rich_text foreground="#800080">0</rich_text><rich_text>);
</rich_text><rich_text foreground="#008080">153</rich_text><rich_text>     }
</rich_text><rich_text foreground="#008080">154</rich_text><rich_text> }
</rich_text><rich_text foreground="#008080">155</rich_text><rich_text> </rich_text><rich_text foreground="#008000">/******************
</rich_text><rich_text foreground="#008080">156</rich_text><rich_text> </rich_text><rich_text foreground="#008000">* 继续device_attach
</rich_text><rich_text foreground="#008080">157</rich_text><rich_text> </rich_text><rich_text foreground="#008000">******************/</rich_text><rich_text>
</rich_text><rich_text foreground="#008080">158</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> device_attach(</rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device *dev)
</rich_text><rich_text foreground="#008080">159</rich_text><rich_text> {
</rich_text><rich_text foreground="#008080">160</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> ret = </rich_text><rich_text foreground="#800080">0</rich_text><rich_text>;
</rich_text><rich_text foreground="#008080">161</rich_text><rich_text>     device_lock(dev);
</rich_text><rich_text foreground="#008080">162</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (dev-&gt;driver) {                            </rich_text><rich_text foreground="#008000">//默认指定了driver就直接绑定
</rich_text><rich_text foreground="#008080">163</rich_text><rich_text>         ret = device_bind_driver(dev);
</rich_text><rich_text foreground="#008080">164</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (ret == </rich_text><rich_text foreground="#800080">0</rich_text><rich_text>)
</rich_text><rich_text foreground="#008080">165</rich_text><rich_text>             ret = </rich_text><rich_text foreground="#800080">1</rich_text><rich_text>;
</rich_text><rich_text foreground="#008080">166</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">else</rich_text><rich_text> {
</rich_text><rich_text foreground="#008080">167</rich_text><rich_text>             dev-&gt;driver = NULL;
</rich_text><rich_text foreground="#008080">168</rich_text><rich_text>             ret = </rich_text><rich_text foreground="#800080">0</rich_text><rich_text>;
</rich_text><rich_text foreground="#008080">169</rich_text><rich_text>         }
</rich_text><rich_text foreground="#008080">170</rich_text><rich_text>     } </rich_text><rich_text foreground="#0000ff">else</rich_text><rich_text> {                                      </rich_text><rich_text foreground="#008000">//没有指定就进行遍历匹配
</rich_text><rich_text foreground="#008080">171</rich_text><rich_text>         pm_runtime_get_noresume(dev);
</rich_text><rich_text foreground="#008080">172</rich_text><rich_text>         ret = bus_for_each_drv(dev-&gt;bus, NULL, dev, __device_attach);
</rich_text><rich_text foreground="#008080">173</rich_text><rich_text>         pm_runtime_put_sync(dev);
</rich_text><rich_text foreground="#008080">174</rich_text><rich_text>     }
</rich_text><rich_text foreground="#008080">175</rich_text><rich_text>     device_unlock(dev);
</rich_text><rich_text foreground="#008080">176</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text> ret;
</rich_text><rich_text foreground="#008080">177</rich_text><rich_text> }
</rich_text><rich_text foreground="#008080">178</rich_text><rich_text> </rich_text><rich_text foreground="#008000">/**************************
</rich_text><rich_text foreground="#008080">179</rich_text><rich_text> </rich_text><rich_text foreground="#008000">* 再来看device_bind_driver分支
</rich_text><rich_text foreground="#008080">180</rich_text><rich_text> </rich_text><rich_text foreground="#008000">**************************/</rich_text><rich_text>
</rich_text><rich_text foreground="#008080">181</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> device_bind_driver(</rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device *dev)
</rich_text><rich_text foreground="#008080">182</rich_text><rich_text> {
</rich_text><rich_text foreground="#008080">183</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> ret;
</rich_text><rich_text foreground="#008080">184</rich_text><rich_text>     ret = driver_sysfs_add(dev);
</rich_text><rich_text foreground="#008080">185</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (!ret)
</rich_text><rich_text foreground="#008080">186</rich_text><rich_text>         driver_bound(dev);              </rich_text><rich_text foreground="#008000">//主要是完成了将私有成员的driver节点挂到
</rich_text><rich_text foreground="#008080">187</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text> ret;                         </rich_text><rich_text foreground="#008000">//了driver的设备链表
</rich_text><rich_text foreground="#008080">188</rich_text><rich_text> }
</rich_text><rich_text foreground="#008080">189</rich_text><rich_text> </rich_text><rich_text foreground="#008000">/**************************
</rich_text><rich_text foreground="#008080">190</rich_text><rich_text> </rich_text><rich_text foreground="#008000">* 先看bus_for_each_drv分支
</rich_text><rich_text foreground="#008080">191</rich_text><rich_text> </rich_text><rich_text foreground="#008000">**************************/</rich_text><rich_text>
</rich_text><rich_text foreground="#008080">192</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> bus_for_each_drv(</rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> bus_type *bus, </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device_driver *start,
</rich_text><rich_text foreground="#008080">193</rich_text><rich_text>              </rich_text><rich_text foreground="#0000ff">void</rich_text><rich_text> *data, </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> (*fn)(</rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device_driver *, </rich_text><rich_text foreground="#0000ff">void</rich_text><rich_text> *))
</rich_text><rich_text foreground="#008080">194</rich_text><rich_text> {
</rich_text><rich_text foreground="#008080">195</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> klist_iter i;
</rich_text><rich_text foreground="#008080">196</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device_driver *drv;
</rich_text><rich_text foreground="#008080">197</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> error = </rich_text><rich_text foreground="#800080">0</rich_text><rich_text>;
</rich_text><rich_text foreground="#008080">198</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (!bus)
</rich_text><rich_text foreground="#008080">199</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text> -EINVAL;
</rich_text><rich_text foreground="#008080">200</rich_text><rich_text>     klist_iter_init_node(&amp;bus-&gt;p-&gt;klist_drivers, &amp;i,           </rich_text><rich_text foreground="#008000">//和driver遍历device类似，从头开始遍历bus的driver链表
</rich_text><rich_text foreground="#008080">201</rich_text><rich_text>                  start ? &amp;start-&gt;p-&gt;knode_bus : NULL);         </rich_text><rich_text foreground="#008000">//发现一个driver就调用fn即__device_attach进行匹配
</rich_text><rich_text foreground="#008080">202</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">while</rich_text><rich_text> ((drv = next_driver(&amp;i)) &amp;&amp; !error)
</rich_text><rich_text foreground="#008080">203</rich_text><rich_text>         error = fn(drv, data);
</rich_text><rich_text foreground="#008080">204</rich_text><rich_text>     klist_iter_exit(&amp;i);
</rich_text><rich_text foreground="#008080">205</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text> error;
</rich_text><rich_text foreground="#008080">206</rich_text><rich_text> }
</rich_text><rich_text foreground="#008080">207</rich_text><rich_text> </rich_text><rich_text foreground="#008000">/*********************************
</rich_text><rich_text foreground="#008080">208</rich_text><rich_text> </rich_text><rich_text foreground="#008000">* 最后来看一下__device_attach这个函数
</rich_text><rich_text foreground="#008080">209</rich_text><rich_text> </rich_text><rich_text foreground="#008000">*********************************/</rich_text><rich_text>
</rich_text><rich_text foreground="#008080">210</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">static</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> __device_attach(</rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device_driver *drv, </rich_text><rich_text foreground="#0000ff">void</rich_text><rich_text> *data)
</rich_text><rich_text foreground="#008080">211</rich_text><rich_text> {
</rich_text><rich_text foreground="#008080">212</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device *dev = data;
</rich_text><rich_text foreground="#008080">213</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (!driver_match_device(drv, dev))    
</rich_text><rich_text foreground="#008080">214</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text> </rich_text><rich_text foreground="#800080">0</rich_text><rich_text>;
</rich_text><rich_text foreground="#008080">215</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text> driver_probe_device(drv, dev);
</rich_text><rich_text foreground="#008080">216</rich_text><rich_text> }
</rich_text><rich_text foreground="#008080">217</rich_text><rich_text> </rich_text><rich_text foreground="#008000">/*
</rich_text><rich_text foreground="#008080">218</rich_text><rich_text> </rich_text><rich_text foreground="#008000">  对比driver的注册最后调用的__driver_attach可以发现其实质是一样的，都最后归宿到了
</rich_text><rich_text foreground="#008080">219</rich_text><rich_text> </rich_text><rich_text foreground="#008000">  这driver_match_device，driver_probe_device两个函数,本质参数的和谐做到了通用
</rich_text><rich_text foreground="#008080">220</rich_text><rich_text> </rich_text><rich_text foreground="#008000">  性在这里就不继续分析了，不是很清楚的可以看前一篇文章driver最后一部分的分析  ^_^
</rich_text><rich_text foreground="#008080">221</rich_text><rich_text> </rich_text><rich_text foreground="#008000">*/</rich_text><rich_text>  </rich_text></node><node name="platform" prog_lang="custom-colors" readonly="False" tags="" unique_id="10"><rich_text>    platform可以说是内核抽象出来的一条虚拟总线平台，内核开发者原意是想把硬件层次上的结构关系用软件抽象模拟出来，但是对一些硬件，这样做 往往不太合适，例如对于片上soc，外围设备的控制器都集成在处理器上，如果过度的剥离抽象，使得原本物理上紧密的结构而在软件上变成的偏于独立，因此 有了platform，对于联系紧密的soc这往往再合适不过，另外对于从soc上直接引出的引脚，难于独立出来，都可以利用platform来表述。
      
    有了前面关于bus，driver，device的理解，platform平台的理解就比较简单，都是以前面为原型进行的再次封装，好了下面就让我们以具体代码为例进行分析。
一、platform的初始化
     platform的初始化代码位于driver/base目录下的platform.c
 
</rich_text><rich_text foreground="#993366">int __init platform_bus_init(void) </rich_text><rich_text>
{
    int error;

    early_platform_cleanup();                               </rich_text><rich_text foreground="#99cc00">// 清除platform设备链表 </rich_text><rich_text>

    error = device_register(&amp;platform_bus);           </rich_text><rich_text foreground="#99cc00">//将平台bus作为一个设备注册，出现在device目录 </rich_text><rich_text>
    if (error)
        return error;
    error =  bus_register(&amp;platform_bus_type);      </rich_text><rich_text foreground="#99cc00">//注册平台类型的bus，将出现在bus目录下
    </rich_text><rich_text foreground="#993366">if (error)</rich_text><rich_text> 
        device_unregister(&amp;platform_bus);
    return error;
} 
</rich_text><rich_text foreground="#003300">先</rich_text><rich_text> 来看一下 </rich_text><rich_text foreground="#000000">early_platform_cleanup() </rich_text><rich_text foreground="#003300">这个函数：</rich_text><rich_text> 
</rich_text><rich_text foreground="#993366">void __init early_platform_cleanup(void)
{
         struct platform_device *pd, *pd2;

        /* clean up the devres list used to chain devices */</rich_text><rich_text> 
</rich_text><rich_text foreground="#993366">   </rich_text><rich_text foreground="#339966">     </rich_text><rich_text foreground="#99cc00">/*</rich_text><rich_text> </rich_text><rich_text foreground="#99cc00">      遍历early_platform_device_list，把连接到此的所有节点清0， </rich_text><rich_text>
</rich_text><rich_text foreground="#99cc00">            平台设备都会挂到该节点，现在是平台设备的初始化阶段，自然不 </rich_text><rich_text>
</rich_text><rich_text foreground="#99cc00">            能有连接到此的设备                                                                */</rich_text><rich_text> </rich_text><rich_text foreground="#993366">
       </rich_text><rich_text> </rich_text><rich_text foreground="#993366">list_for_each_entry_safe(pd, pd2, &amp;early_platform_device_list,  
                 dev.devres_head) {                                                        
        list_del(&amp;pd-&gt;dev.devres_head);                                       
        memset(&amp;pd-&gt;dev.devres_head, 0, sizeof(pd-&gt;dev.devres_head));
       }</rich_text><rich_text> 
</rich_text><rich_text foreground="#993366">}</rich_text><rich_text> 
</rich_text><rich_text foreground="#000000">再来看一下另外两个结构体：</rich_text><rich_text> 
</rich_text><rich_text foreground="#993366">struct device platform_bus = {
    .init_name    = &quot;platform&quot;,
};</rich_text><rich_text> 
</rich_text><rich_text foreground="#000000">以及</rich_text><rich_text> 
</rich_text><rich_text foreground="#993366">struct bus_type platform_bus_type = {
    .name        = &quot;platform&quot;,
    .dev_attrs    = platform_dev_attrs,
    .match        = platform_match,
    .uevent        = platform_uevent,
    .pm        = &amp;platform_dev_pm_ops,
};</rich_text><rich_text> 

 
</rich_text><rich_text foreground="#003300" scale="h2" weight="heavy">二、platform_device的注册</rich_text><rich_text scale="h2" weight="heavy"> </rich_text><rich_text>
</rich_text><rich_text foreground="#003300">     platform_device无疑是device的封装，先给出该结构具体代码：</rich_text><rich_text> 
 
</rich_text><rich_text foreground="#003300">    </rich_text><rich_text foreground="#993366">struct platform_device {
               const char    * name;                              </rich_text><rich_text foreground="#99cc00">//名称</rich_text><rich_text> 
               int        id;                                             </rich_text><rich_text foreground="#99cc00">//id号</rich_text><rich_text> 
               struct device    dev;                                </rich_text><rich_text foreground="#99cc00">//内嵌的标准模型device</rich_text><rich_text> 
               u32        num_resources;                       </rich_text><rich_text foreground="#99cc00">//持有资源数</rich_text><rich_text> 
               struct resource    * resource;             </rich_text><rich_text foreground="#99cc00">    //指向具体资源</rich_text><rich_text> 

               const struct platform_device_id    *id_entry;           

               /* arch specific additions */
               struct pdev_archdata    archdata;
   };  </rich_text><rich_text foreground="#993366">  </rich_text><rich_text> 
</rich_text><rich_text foreground="#003300">    其中的资源结构体代码为：</rich_text><rich_text> 
</rich_text><rich_text foreground="#003300">    </rich_text><rich_text foreground="#993366">struct resource {
           resource_size_t start;                                       </rich_text><rich_text foreground="#00ff00">  </rich_text><rich_text foreground="#99cc00">//资源起始地址，可以是寄存器起始地址等等</rich_text><rich_text> 
           resource_size_t end;                                         </rich_text><rich_text foreground="#00ff00"> </rich_text><rich_text foreground="#99cc00">//结束地址</rich_text><rich_text> 
           const char *name;                                             </rich_text><rich_text foreground="#99cc00"> //名称</rich_text><rich_text> 
           unsigned long flags;                                            </rich_text><rich_text foreground="#99cc00">//标志</rich_text><rich_text> 
           struct resource *parent, *sibling, *child;             </rich_text><rich_text foreground="#00ff00">   </rich_text><rich_text foreground="#99cc00">//层次级联结构指针</rich_text><rich_text> 
    }; </rich_text><rich_text foreground="#993366">      </rich_text><rich_text>
</rich_text><rich_text foreground="#003300">   具体的注册函数为：</rich_text><rich_text> 
 
</rich_text><rich_text foreground="#003300">   </rich_text><rich_text foreground="#993366">  </rich_text><rich_text foreground="#ff00ff">  </rich_text><rich_text foreground="#993366">int platform_device_register(struct platform_device *pdev)
      {
                    device_initialize(&amp;pdev-&gt;dev);                         </rich_text><rich_text foreground="#99cc00"> //和标准设备注册时候初始化是一样，就不多说了，</rich_text><rich_text> </rich_text><rich_text foreground="#993366">
                    return platform_device_add(pdev);                  </rich_text><rich_text foreground="#99cc00">  //</rich_text><rich_text> </rich_text><rich_text foreground="#99cc00">不明白的可以看</rich_text><rich_text> </rich_text><rich_text foreground="#99cc00">前面一篇文章</rich_text><rich_text> </rich_text><rich_text foreground="#99cc00">具,体看一下这个</rich_text><rich_text> 
      } 
===================================================
   </rich_text><rich_text foreground="#993366">  int platform_device_add(struct platform_device *pdev)
    {
                   int i, ret = 0;
                   if (!pdev)
                               return -EINVAL;
                   if (!pdev-&gt;dev.parent)
                               pdev-&gt;dev.parent = &amp;platform_bus;             </rich_text><rich_text foreground="#99cc00">     //挂接到platform_bus下面</rich_text><rich_text> 
                   pdev-&gt;dev.bus = &amp;platform_bus_type;                        </rich_text><rich_text foreground="#99cc00">  //指定bus类型为platform_bus_type</rich_text><rich_text> 
                   if (pdev-&gt;id != -1)
                               dev_set_name(&amp;pdev-&gt;dev, &quot;%s.%d&quot;, 
</rich_text><rich_text foreground="#993366">                                                   pdev-&gt;name,  pdev-&gt;id);            </rich_text><rich_text foreground="#99cc00">  //设置名字，将platform下的名字传到内部device，最终会</rich_text><rich_text> 
                   else                                                                          </rich_text><rich_text foreground="#99cc00">//传到kobj</rich_text><rich_text> 
                               dev_set_name(&amp;pdev-&gt;dev, &quot;%s&quot;, pdev-&gt;name);
                    for (i = 0; i &lt; pdev-&gt;num_resources; i++) {                </rich_text><rich_text foreground="#99cc00">   //设置资源层次结构</rich_text><rich_text> 
                                struct resource *p, *r = &amp;pdev-&gt;resource[i];
                                if (r-&gt;name == NULL)                                     </rich_text><rich_text foreground="#99cc00">//资源名称为NULL则把设备名称设置给它</rich_text><rich_text> 
                                                   r-&gt;name = dev_name(&amp;pdev-&gt;dev);
                                p = r-&gt;parent;                                               </rich_text><rich_text foreground="#99cc00"> //取得资源的父节点，资源在内核中也是层次安排的，</rich_text><rich_text> 
                                if (!p) {                                                           </rich_text><rich_text foreground="#99cc00">//具有父节点，兄弟节点，子节点</rich_text><rich_text> 
                                                   if (resource_type(r) == IORESOURCE_MEM)      </rich_text><rich_text foreground="#99cc00"> //如果父节点为NULL，并且资源类型为</rich_text><rich_text> 
                                                                p = &amp;iomem_resource;                          </rich_text><rich_text foreground="#99cc00">//IORESOURCE_MEM，则把父节点设置</rich_text><rich_text> 
</rich_text><rich_text foreground="#993366">                                                                                                                           </rich_text><rich_text foreground="#99cc00">//为iomem_resource，否则如果类型为</rich_text><rich_text> 
                                                   else if (resource_type(r) == IORESOURCE_IO)     </rich_text><rich_text foreground="#99cc00">//IORESOURCE_IO，则把父节点设置为</rich_text><rich_text> 
</rich_text><rich_text foreground="#993366">                                                                p = &amp;ioport_resource;                            </rich_text><rich_text foreground="#99cc00">//IORESOURCE_IO，由此我们可以看出</rich_text><rich_text> 
                                }                                                                                          </rich_text><rich_text foreground="#99cc00">//内核数据之间的条理性之强</rich_text><rich_text> 
                               if (p &amp;&amp; insert_resource(p, r)) {                     </rich_text><rich_text foreground="#99cc00">  //将资源插入父节点，也就是出现在父节点目录层次下</rich_text><rich_text> 
                                                  printk(KERN_ERR&quot;%s: failed to claim resource %d/n&quot;,
                                                            dev_name(&amp;pdev-&gt;dev), i); 
 
</rich_text><rich_text foreground="#993366">                                                 ret = -EBUSY;
                                                 goto failed;
                               }
                      }
                      pr_debug(&quot;Registering platform device '%s'. Parent at %s/n&quot;,
                      dev_name(&amp;pdev-&gt;dev), dev_name(pdev-&gt;dev.parent));
                      ret = device_add(&amp;pdev-&gt;dev);                                </rich_text><rich_text foreground="#99cc00">//标准设备注册</rich_text><rich_text> 
                      if (ret == 0)
                               return ret;
    failed:
               while (--i &gt;= 0) {
                       struct resource *r = &amp;pdev-&gt;resource[i];
                       unsigned long type = resource_type(r);
                       if (type == IORESOURCE_MEM || type == IORESOURCE_IO)
                                release_resource(r);
               }
                return ret;
   } </rich_text><rich_text foreground="#993366"> </rich_text><rich_text> 

</rich_text><rich_text foreground="#003300" scale="h2" weight="heavy">三、platform_driver的注册</rich_text><rich_text scale="h2" weight="heavy"> </rich_text><rich_text>
</rich_text><rich_text foreground="#003300">      driver部分比较简单，其结构为：</rich_text><rich_text> 
</rich_text><rich_text foreground="#003300">            </rich_text><rich_text foreground="#993366">struct platform_driver {
                      int (*probe)(struct platform_device *);
                      int (*remove)(struct platform_device *);
                      void (*shutdown)(struct platform_device *);
                      int (*suspend)(struct platform_device *, pm_message_t state);
                      int (*resume)(struct platform_device *);
                      struct device_driver driver;                                             </rich_text><rich_text foreground="#99cc00">//内嵌的标准driver结构 </rich_text><rich_text>           
                      const struct platform_device_id *id_table;                      </rich_text><rich_text foreground="#99cc00"> //支持的设备id表</rich_text><rich_text> 
             }; 

</rich_text><rich_text foreground="#003300">  注册函数分析：</rich_text><rich_text> 
</rich_text><rich_text foreground="#993366">  int platform_driver_register(struct platform_driver *drv)
  {
                      drv-&gt;driver.bus = &amp;platform_bus_type;                          </rich_text><rich_text foreground="#99cc00">//设置bus</rich_text><rich_text> 
                      if (drv-&gt;probe)                                                             </rich_text><rich_text foreground="#99cc00">//如果platform_driver下的probe为真，就把内嵌</rich_text><rich_text> 
                                drv-&gt;driver.probe = platform_drv_probe;               </rich_text><rich_text foreground="#99cc00">//的标准driver的probe设置成platform_drv_probe</rich_text><rich_text> 
                      if (drv-&gt;remove)                                                           </rich_text><rich_text foreground="#99cc00">//可见外层的probe比内层的优先级别高</rich_text><rich_text> 
                                drv-&gt;driver.remove = platform_drv_remove;
                      if (drv-&gt;shutdown)
                                 drv-&gt;driver.shutdown = platform_drv_shutdown;

                      return driver_register(&amp;drv-&gt;driver);                               </rich_text><rich_text foreground="#99cc00">//注册标准driver</rich_text><rich_text> 
  } 
</rich_text><rich_text weight="heavy">
</rich_text><rich_text foreground="#000000" scale="h2" weight="heavy">四、总结 </rich_text></node></node><node name="各种总线match匹配函数" prog_lang="custom-colors" readonly="False" tags="" unique_id="14"><rich_text>
</rich_text><rich_text scale="h1">一. 驱动和设备匹配过程常用数据结构</rich_text><rich_text>

</rich_text><rich_text scale="h2">1. of_device_id</rich_text><rich_text>

struct of_device_id
{
    charname[32];
    char type[32];
    char compatible[128];
#ifdef __KERNEL__
    void*data;
#else
    kernel_ulong_t data;
#endif
};

</rich_text><rich_text scale="h2">2. platform_device_id</rich_text><rich_text>
struct platform_device_id {
    char name[PLATFORM_NAME_SIZE];
    kernel_ulong_t driver_data   __attribute__((aligned(sizeof(kernel_ulong_t))));
};
 

</rich_text><rich_text scale="h1">二. 平台设备、驱动匹配platform_match</rich_text><rich_text>
向系统添加平台驱动或添加设备时会调用平台总线platform_bus_type中的platform_match函数来匹配平台驱动和平台设备。
static int platform_match(struct device *dev, struct device_driver *drv)
{
    struct platform_device *pdev = to_platform_device(dev);
    struct platform_driver *pdrv = to_platform_driver(drv);
    /*通过驱动里定义了of_device_id项，则通过这一项来比对；*
    if (of_driver_match_device(dev, drv))
        return 1;
        
    /*如果在平台驱动中定义了id_table项，则通过对比id_table来判断*/
    if (pdrv-&gt;id_table)
        return platform_match_id(pdrv-&gt;id_table, pdev) != NULL;
        
    /*通过对比平台设备名字和平台驱动名字来判断*/
    return (strcmp(pdev-&gt;name, drv-&gt;name) == 0);
}
 
由platform_match可以看出，驱动和设备是否匹配可以通过三种方式来进行判断，首先是通过of_device_id结构：
static inline int of_driver_match_device(struct device *dev, const struct device_driver *drv)
{
    return of_match_device(drv-&gt;of_match_table, dev) != NULL;
}
 
struct of_device_id *of_match_device(const struct of_device_id *matches, const struct device *dev)
{
    if ((!matches) || (!dev-&gt;of_node))
        return NULL;
    
    return of_match_node(matches, dev-&gt;of_node);
}
 
const struct of_device_id *of_match_node(const struct of_device_id *matches, const struct device_node *node)
{
    if (!matches)
        return NULL;

    while (matches-&gt;name[0] || matches-&gt;type[0] || matches-&gt;compatible[0])  {
        int match = 1;
        if (matches-&gt;name[0])
            match &amp;= node-&gt;name &amp;&amp; !strcmp(matches-&gt;name, node-&gt;name);
            
        if (matches-&gt;type[0])
            match &amp;= node-&gt;type &amp;&amp; !strcmp(matches-&gt;type, node-&gt;type);
            
        if (matches-&gt;compatible[0])
            match &amp;= of_device_is_compatible(node, matches-&gt;compatible);
            
        if (match)
            return matches;matches++;
    }
    
    return NULL;
}
 
如果driver中定义了of_device_id，则通过</rich_text><rich_text foreground="#666600">driver中的of_device_id和device中的device_node</rich_text><rich_text>内 容进行匹配判断，匹配工作由of_match_node来完成，该函数会遍历of_device_id列表，查找是否有成员与device_node相匹 配，
具体由matches的name,type和compatioble来进行对比，如果找到则返回相应的表项，否则返回null.如果没有定义 of_device_id,device_node或不能找到对应的匹配项，则通过第二种方式platform_device_id来进行对比匹配,
通过 platform_match_id来完成：
static const struct platform_device_id *platform_match_id( const struct platform_device_id *id, struct platform_device *pdev)
{
    while (id-&gt;name[0]) {
        if (strcmp(pdev-&gt;name, id-&gt;name) == 0) {
            pdev-&gt;id_entry = id;
            return id;
        }
        id++;
    }
    
    return NULL;
}

platform_match_id函数遍历platfrom_device_id列表，通过比对平台设备与id的name来确定是否有匹配项，如果找到 匹配的，则返回对应的id项，否则返回null。如果没有定义platform_device_id或没有找到匹配项，
则通过第三种方式进行匹配，第三种 方式通过比对平台设备和平台驱动的名字，如果相等，则匹配成功，否则失败。

</rich_text><rich_text scale="h1">三. i2c设备、驱动匹配i2c_device_match</rich_text><rich_text>
当向i2c总线添加驱动或设备时会调用i2c_device_match来进行匹配判断，i2c_device_match函数定义如下所示：
static int i2c_device_match(struct device *dev, struct device_driver *drv)
{
    struct i2c_client *client = i2c_verify_client(dev);
    struct i2c_driver *driver;
    
    if (!client)
        return 0;

    /* 通过of_device_id匹配 */
    if (of_driver_match_device(dev, drv))
        return 1;
        
    driver = to_i2c_driver(drv);
    /*如果I2C 驱动中定义了id_table，则通过id_table进行匹配；*/
    if (driver-&gt;id_table)
        return i2c_match_id(driver-&gt;id_table, client) != NULL;
    
    return 0;
}
 
如i2c_device_match所示，i2c通过两种方式进行匹配设备和驱动，一种是of_device_id，另一种是 i2c_device_id，i2c_device_id数据结构和platform_device_id一样。I2C里的两种匹配方式和之前的platform判断方式都是一样，
这里就不展开。

</rich_text><rich_text scale="h1">四. usb设备、驱动匹配usb_device_match</rich_text><rich_text>
当向usb总线上注册驱动或添加设备时，就会调用usb_match_device进行驱动和设备配对，函数如下：
static int usb_device_match(struct device *dev, struct device_driver *drv)
{
    if (is_usb_device(dev)) {
        if (!is_usb_device_driver(drv))
            return 0;
        return 1;
    } else if (is_usb_interface(dev)) {
        struct usb_interface *intf;
        struct usb_driver *usb_drv;
        const struct usb_device_id *id;
        
        if (is_usb_device_driver(drv))
            return 0;
            
        intf = to_usb_interface(dev);
        usb_drv = to_usb_driver(drv);
        id = usb_match_id(intf, usb_drv-&gt;id_table);
        if (id)
            return 1;
            
        id = usb_match_dynamic_id(intf, usb_drv);
        if (id)
            return 1;
    }
    
    return 0;
}
从函数可以看出，match分成两部分，一部分用于匹配usb设备，另一部分用于匹配usb接口，对于usb设备，在初始化时会设置成usb_device_type，而usb接口，则会设成usb_if_device_type。
而函数中的 is_usb_device和is_usb_interface就是通过这两个属性来判别的，如果为判定为设备，则进入到设备分支，否则进入到接口分支继续判断。
usb设备驱动通过usb_register_device_driver接口来注册到系统，而usb接口驱动则通过usb_register来注册到系 统，驱动工程师的工作基本上集中在接口驱动上，所以通常是通过usb_register来注册usb驱动的。 
不管是设备驱动usb_device_driver,还是接口驱动usb_driver数据结构中都包含了struct usbdrv_wrap项，其定义如下：
struct usbdrv_wrap {
    struct device_driver driver;
    int for_devices;
}

数据结构中的for_devices用来表示该驱动是设备驱动还是接口驱动，如果为设备驱动，则在用usb_register_device_driver注册时，会将该变量for_devices设置成1，而接口驱动则设为0.

usb_device_match中的is_usb_device_driver函数就是通过获取上而结构中的for_devices来进行判断是设备还是接口驱动的，函数定义如下：
static inline int is_usb_device_driver(struct device_driver *drv)
{ 
    return container_of(drv, struct usbdrv_wrap, driver)-&gt;for_devices;
}
当进入is_usb_device分支后，再通过is_usb_device_driver来判断是否为设备驱动，如果是则返回1，表示匹配成功，它接受所有usb设备。
当进入到接口分支后，也会先用is_usb_device_driver来进行判断，如果不是设备驱动则继续判断，否则退出；然后再通过 usb_match_id函数来判断设备和驱动中的usb_device_id是否匹配，usb_match_id定义如下：
const struct usb_device_id *usb_match_id(struct usb_interface *interface,  const struct usb_device_id *id)
 {
    if (id == NULL)
        return NULL;
    
    for (; id-&gt;idVendor || id-&gt;idProduct || id-&gt;bDeviceClass ||  id-&gt;bInterfaceClass || id-&gt;driver_info; id++) {
        if (usb_match_one_id(interface, id))
            return id;
    }
    
    return NULL;
}

遍历接口驱动中的usb_device_id列表项，只要usb_device_id结构中的 idVendor,idProduct,DeviceClass,binterfaceClass,driver_info项有效就调用 usb_match_one_id进行判断，如找到匹配项则函数返回1，否则返回0 。
int usb_match_one_id(struct usb_interface *interface,const struct usb_device_id *id)
{
    struct usb_host_interface *intf;
    struct usb_device *dev;
    
    if (id == NULL)
        return 0;
    
    intf = interface-&gt;cur_altsetting;
    dev = interface_to_usbdev(interface);
    if (!usb_match_device(dev, id))
        return 0;

    if (dev-&gt;descriptor.bDeviceClass == USB_CLASS_VENDOR_SPEC &amp;&amp; 
     !(id-&gt;match_flags &amp; USB_DEVICE_ID_MATCH_VENDOR) &amp;&amp;(id-&gt;match_flags &amp;  (USB_DEVICE_ID_MATCH_INT_CLASS | USB_DEVICE_ID_MATCH_INT_SUBCLASS  | USB_DEVICE_ID_MATCH_INT_PROTOCOL)))
        return 0;
    if ((id-&gt;match_flags &amp; USB_DEVICE_ID_MATCH_INT_CLASS) &amp;&amp; (id-&gt;bInterfaceClass != intf-&gt;desc.bInterfaceClass))
        return 0;
    if ((id-&gt;match_flags &amp; USB_DEVICE_ID_MATCH_INT_SUBCLASS) &amp;&amp; 
        (id-&gt;bInterfaceSubClass != intf-&gt;desc.bInterfaceSubClass))
        return 0;
    if ((id-&gt;match_flags &amp; USB_DEVICE_ID_MATCH_INT_PROTOCOL) &amp;&amp; 
        (id-&gt;bInterfaceProtocol != intf-&gt;desc.bInterfaceProtocol))
        return 0;
        
    return 1;
}
 
usb_match_one_id和函数中的usb_match_device都是围绕着usb_device_id进行匹配的，该结构定义如下：
struct usb_device_id {
    /* which fields to match against? */
    __u16  match_flags;
    /* Used for product specific matches; range is inclusive */
    __u16  idVendor;
    __u16  idProduct;
    __u16  bcdDevice_lo;
    __u16  bcdDevice_hi;
    /* Used for device class matches */
    __u8  bDeviceClass;
    __u8  bDeviceSubClass;
    __u8  bDeviceProtocol;
    /* Used for interface class matches */
    __u8  bInterfaceClass;
    __u8  bInterfaceSubClass;
    __u8  bInterfaceProtocol;
    /* not matched against */
    kernel_ulong_tdriver_info;
};
match_flags用来规定驱动匹配时的具体项，如match_flags包含USB_DEVICE_ID_MATCH_VENDOR，则是通过驱动中的usb_device_id和设备dev中的idVendor来判断。
</rich_text></node><node name="suspend" prog_lang="custom-colors" readonly="False" tags="" unique_id="16"><rich_text foreground="#ff0000" scale="h2">一、对于休眠(suspend)的简单介绍</rich_text><rich_text foreground="#ff0000">
 </rich_text><rich_text>   在Linux中,休眠主要分三个主要的步骤:
    1) 冻结用户态进程和内核态任务
    2) 调用注册的设备的suspend的回调函数, 顺序是按照注册顺序
    3) 休眠核心设备和使CPU进入休眠态, 冻结进程是内核把进程列表中所有的进程的状态都设置为停止,并且保存下所有进程的上下文. 当这些进程被解冻的时候,他们是不知道自己被冻结过的,只是简单的继续执行。
    如何让Linux进入休眠呢?用户可以通过读写sys文件/sys /power/state 是实现控制系统进入休眠. 比如
    # echo mem &gt; /sys/power/state
    命令系统进入休眠. 也可以使用
   # cat /sys/power/state
    来得到内核支持哪几种休眠方式.
    
</rich_text><rich_text foreground="#ff0000" scale="h2">二、Linux Suspend 的流程</rich_text><rich_text foreground="#ff0000">
 </rich_text><rich_text foreground="#000000">1. 相关代码</rich_text><rich_text>
     • kernel/kernel/power/main.c
     • kernel/arch/arm/mach-xxx/pm.c
     • kernel/driver/base/power/main.c
     接下来让我们详细的看一下Linux是怎么休眠/唤醒的:
      用户对于/sys/power/state 的读写会调用到  kernel/kernel/power/main.c中的state_store()， 用户可以写入 const char * const  pm_states[] 中定义的字符串， 比如&quot;mem&quot;, &quot;standby&quot;。
const char *const pm_states[PM_SUSPEND_MAX] = {
 #ifdef CONFIG_EARLYSUSPEND
  [PM_SUSPEND_ON]  = &quot;on&quot;,
 #endif
  [PM_SUSPEND_STANDBY] = &quot;standby&quot;,
  [PM_SUSPEND_MEM] = &quot;mem&quot;,
 };
       常见有standby(suspend to RAM)、mem(suspend to RAM)和disk(suspend to disk)，只是standby耗电更多，返回到正常工作状态的时间更短。     
     然后state_store()会调用enter_state()&lt;</rich_text><rich_text foreground="#3333ff">注：这是经典Linux调用流程， 在Android系统中，Kernel将调用request_suspend_state，而不是enter_state</rich_text><rich_text>&gt;，它首先会检查一些状态参数，然后同步文件系统。
  
1. /** 
2.  *  enter_state - Do common work of entering low-power state. 
3.  *  @state:     pm_state structure for state we're entering. 
4.  * 
5.  *  Make sure we're the only ones trying to enter a sleep state. Fail 
6.  *  if someone has beat us to it, since we don't want anything weird to 
7.  *  happen when we wake up. 
8.  *  Then, do the setup for suspend, enter the state, and cleaup (after 
9.  *  we've woken up). 
10.  */  
11. int enter_state(suspend_state_t state)  
12. {  
13.     int error;  
14.   
15.     if (!valid_state(state))  
16.         return -ENODEV;  
17.   
18.     if (!mutex_trylock(&amp;pm_mutex))  
19.         return -EBUSY;  
20.   
21. #ifdef CONFIG_SUSPEND_SYNC_WORKQUEUE  
22.     suspend_sys_sync_queue();  
23. #else  
24.     printk(KERN_INFO &quot;PM: Syncing filesystems ... &quot;);  
25.     sys_sync();  
26.     printk(&quot;done.\n&quot;);  
27. #endif  
28.   
29.     pr_debug(&quot;PM: Preparing system for %s sleep\n&quot;, pm_states[state]);  
30.     error = suspend_prepare();  
31.     if (error)  
32.         goto Unlock;  
33.   
34.     if (suspend_test(TEST_FREEZER))  
35.         goto Finish;  
36.   
37.     pr_debug(&quot;PM: Entering %s sleep\n&quot;, pm_states[state]);  
38.     pm_restrict_gfp_mask();  
39.     error = suspend_devices_and_enter(state);  
40.     pm_restore_gfp_mask();  
41.   
42.  Finish:  
43.     pr_debug(&quot;PM: Finishing wakeup.\n&quot;);  
44.     suspend_finish();  
45.  Unlock:  
46.     mutex_unlock(&amp;pm_mutex);  
47.     return error;  
48. }  

 2. 准备, 冻结进程
        当进入到suspend_prepare()中以后， 它会给suspend分配一个虚拟终端来输出信息，  然后广播一个系统要进入suspend的Notify， 关闭掉用户态的helper进程，  然后一次调用suspend_freeze_processes()冻结所有的进程， 这里会保存所有进程当前的状态，  也许有一些进程会拒绝进入冻结状态， 当有这样的进程存在的时候， 会导致冻结失败,此函数就会放弃冻结进程，并且解冻刚才冻结的所有进程。
 
1. /** 
2.  *  suspend_prepare - Do prep work before entering low-power state. 
3.  * 
4.  *  This is common code that is called for each state that we're entering. 
5.  *  Run suspend notifiers, allocate a console and stop all processes. 
6.  */  
7. static int suspend_prepare(void)  
8. {  
9.     int error;  
10.   
11.     if (!suspend_ops || !suspend_ops-&gt;enter)  
12.         return -EPERM;  
13.   
14.     pm_prepare_console();  
15.   
16.     error = pm_notifier_call_chain(PM_SUSPEND_PREPARE);  
17.     if (error)  
18.         goto Finish;  
19.   
20.     error = usermodehelper_disable();  
21.     if (error)  
22.         goto Finish;  
23.   
24.     error = suspend_freeze_processes();  
25.     if (!error)  
26.         return 0;  
27.   
28.     suspend_thaw_processes();  
29.     usermodehelper_enable();  
30.  Finish:  
31.     pm_notifier_call_chain(PM_POST_SUSPEND);  
32.     pm_restore_console();  
33.     return error;  
34. }  
3. 让外设进入休眠
         现在, 所有的进程(也包括workqueue/kthread)  都已经停止了，内核态人物有可能在停止的时候握有一些信号量，  所以如果这时候在外设里面去解锁这个信号量有可能会发生死锁，所以在外设的suspend()函数里面作lock/unlock锁要非常小心，这里建议设 计的时候就不要在suspend()里面等待锁。而且因为suspend的时候，有一些Log是无法输出的，所以一旦出现问题,非常难调试。
      然后kernel在这里会尝试释放一些内存。
      最后会调用suspend_devices_and_enter()来把所有的外设休眠， 在这个函数中， 如果平台注册了suspend_ops(通常是在板级定义中定义和注册，</rich_text><rich_text foreground="#3333ff">在kernel/arch/arm/mach-xx/pm.c中调用suspend_set_ops</rich_text><rich_text>)， 这里就会调用 suspend_ops-&gt;begin()； 然后调用</rich_text><rich_text foreground="#3333ff">dpm_suspend_start</rich_text><rich_text>，他们会依次调用驱动的suspend()  回调来休眠掉所有的设备。
     当所有的设备休眠以后，  suspend_ops-&gt;prepare()会被调用， 这个函数通常会作一些准备工作来让板机进入休眠。  接下来Linux，在多核的CPU中的非启动CPU会被关掉，通过注释看到是避免这些其他的CPU造成race  condition，接下来的以后只有一个CPU在运行了。
     suspend_ops 是板级的电源管理操作, 通常注册在文件 arch/arch/mach-xxx/pm.c 中.
     接下来， suspend_enter()会被调用，  这个函数会关闭arch irq， 调用 device_power_down()， 它会调用suspend_late()函数，  这个函数是系统真正进入休眠最后调用的函数，通常会在这个函数中作最后的检查。 如果检查没问题， 接下来休眠所有的系统设备和总线，并且调用  suspend_pos-&gt;enter() 来使CPU进入省电状态，这时就已经休眠了。代码的执行也就停在这里了。
 
1. /** 
2.  *  suspend_devices_and_enter - suspend devices and enter the desired system 
3.  *                  sleep state. 
4.  *  @state:       state to enter 
5.  */  
6. int suspend_devices_and_enter(suspend_state_t state)  
7. {  
8.     int error;  
9.   
10.     if (!suspend_ops)  
11.         return -ENOSYS;  
12.   
13.     trace_machine_suspend(state);  
14.   
15.          // 如果平台注册了suspend_ops(通常是在板级定义中定义和注册，  
16.            // 在kernel/arch/arm/mach-xx/pm.c中调用suspend_set_ops)，   
17.            // 这里就会调用 suspend_ops-&gt;begin()；  
18.     if (suspend_ops-&gt;begin) {  
19.         error = suspend_ops-&gt;begin(state);  
20.         if (error)  
21.             goto Close;  
22.     }  
23.     suspend_console();  
24.     suspend_test_start();  
25.   
26.          // 依次调用驱动的suspend() 回调来休眠掉所有的设备。  
27.     error = dpm_suspend_start(PMSG_SUSPEND);  
28.     if (error) {  
29.         printk(KERN_ERR &quot;PM: Some devices failed to suspend\n&quot;);  
30.         goto Recover_platform;  
31.     }  
32.     suspend_test_finish(&quot;suspend devices&quot;);  
33.     if (suspend_test(TEST_DEVICES))  
34.         goto Recover_platform;  
35.           
36.          // 这个函数会关闭arch irq， 调用 device_power_down()， 它会调用suspend_late()函数，   
37.           // 这个函数是系统真正进入休眠最后调用的函数，通常会在这个函数中作最后的检查。  
38.           // 如果检查没问题， 接下来休眠所有的系统设备和总线，并且调用 suspend_pos-&gt;enter()   
39.          // 来使CPU进入省电状态，这时就已经休眠了。代码的执行也就停在这里了。  
40.     error = suspend_enter(state);  
41.   
42.  Resume_devices:  
43.     suspend_test_start();  
44.     dpm_resume_end(PMSG_RESUME);  
45.     suspend_test_finish(&quot;resume devices&quot;);  
46.     resume_console();  
47.  Close:  
48.     if (suspend_ops-&gt;end)  
49.         suspend_ops-&gt;end();  
50.     trace_machine_suspend(PWR_EVENT_EXIT);  
51.     return error;  
52.   
53.  Recover_platform:  
54.     if (suspend_ops-&gt;recover)  
55.         suspend_ops-&gt;recover();  
56.     goto Resume_devices;  
57. }  
58. 

</rich_text><rich_text foreground="#ffff00000000" scale="h2">三、Linux Resume流程</rich_text><rich_text>
        如果在休眠中系统被中断或者其他事件唤醒，接下来的代码就会开始执行，这个唤醒的顺序是和休眠的循序相反的，所以系统设备和总线会首先唤醒，使能系统中 断，使能休眠时候停止掉的非启动CPU， 以及调用suspend_ops-&gt;finish()，  而且在suspend_devices_and_enter()函数中也会继续唤醒每个设备，使能虚拟终端， 最后调用  suspend_ops-&gt;end()。
      在返回到enter_state()函数中的，当  suspend_devices_and_enter() 返回以后，外设已经唤醒了，但是进程和任务都还是冻结状态，  这里会调用suspend_finish()来解冻这些进程和任务， 而且发出Notify来表示系统已经从suspend状态退出， 唤醒终端。
      到这里，所有的休眠和唤醒就已经完毕了，系统继续运行了。
      
      
###########################################################################################
###########################################################################################
</rich_text><rich_text foreground="#ffff00000000" scale="h2">一、简介</rich_text><rich_text>
      Android系统中定义了几种低功耗状态：earlysuspend、suspend、hibernation.
       1) earlysuspend: 是一种低功耗的状态,某些设备可以选择进入某种功耗较低的状态,比如 LCD可以降低亮度或灭掉;  
       2) suspend: 是指除电源管理以外的其他外围模块以及cpu均不工作,只有内存保持自刷新的状态;   
       3)  hibernation是指所有内存镜像都被写入磁盘中,然后系统关机,恢复后系统将能恢复到“关机”之前的状态。是最彻底的低功耗模式，它把所有内存镜 像都写入磁盘中，然后系统关机。该文件还在sysfs文件系统中创建了多个entry，分别是/sys/power/disk，/sys/power /resume和/sys/power/image_size，这样用户可以直接通过 sysfs  来控制系统进出hibernation状态。这块代码跟标准Linux内核没有什么区别。
       
       在打过android补丁的内核中，  state_store()函数会走另外一条路，会进入到request_suspend_state()中，  这个文件在earlysuspend.c中. 这些功能都是android系统加的，后面会对earlysuspend和late resume  进行介绍。
       
</rich_text><rich_text foreground="#ffff00000000" scale="h2">二、用户接口</rich_text><rich_text>
      电源管理内核层给应用层提供的接口就是sysfs 文件系统，所有的相关接口都通过sysfs实现。Android上层frameworks也是基于sysfs做了包装，最终提供给Android java应用程序的是java类的形式。 
 Android系统会在sysfs里面创建以entry：
      /sys/power/state 
      /sys/power/wake_lock 
      /sys/power/wake_unlock
     echo mem &gt; /sys/power/state或echo  standby &gt; /sys/power/state: 命令系统进入earlysuspend状态，那些注册了early suspend  handler的驱动将依次进入各自的earlysuspend 状态。
     echo on &gt; /sys/power/state: 将退出early suspend状态
     echo disk &gt; /sys/power/state: 命令系统进入hibernation状态
    echo lockname &gt; /sys/power/wake_lock: 加锁“lockname”
     echo lockname &gt; /sys/power/wake_unlock: 解锁“lockname”
     上述是分别加锁和解锁的命令，一旦系统中所有wakelock被解锁，系统就会进入suspend状态，可见Linux中原本使系统 suspend 的操作（echo mem &gt; /sys/power/state 等）在Android被替换成使系统进入early  suspend；而wake lock 机制成为用户命令系统进入suspend状态的唯一途径。
 
</rich_text><rich_text foreground="#ffff00000000" scale="h2">三、Android 休眠(suspend)</rich_text><rich_text>
</rich_text><rich_text scale="h3">1. 相关文件</rich_text><rich_text>
      • kernel/kernel/power/main.c
      • kernel/kernel/power/earlysuspend.c
      • kernel/kernel/power/wakelock.c
 
</rich_text><rich_text scale="h3">2. 特性介绍</rich_text><rich_text>
     1) Early Suspend
        Early suspend  是android 引进的一种机制，这种机制在上游备受争议，这里不做评论。  这个机制作用是在关闭显示的时候，一些和显示有关的设备，比如LCD背光、重力感应器、  触摸屏都会关掉，但是系统可能还是在运行状态(这时候还有wake lock)进行任务的处理，例如在扫描 SD卡上的文件等。  在嵌入式设备中，背光是一个很大的电源消耗，所以android会加入这样一种机制。

 </rich_text><rich_text foreground="#000099">     2) Late Resume
 </rich_text><rich_text>         Late Resume 是和suspend 配套的一种机制，是在内核唤醒完毕开始执行的。主要就是唤醒在Early Suspend时休眠的设备。

      </rich_text><rich_text foreground="#000099">3) Wake Lock
 </rich_text><rich_text>         wake_lock  在Android的电源管理系统中扮演一个核心的角色。wake_lock是一种锁的机制，只要有人拿着这个锁，系统就无法进入休眠，可以被用户态程序和 内核获得。这个锁可以是有超时的或者是没有超时的，超时的锁会在超时以后自动解锁。如果没有锁了或者超时了，内核就会启动休眠的那套机制来进入休眠。

</rich_text><rich_text scale="h3">3. Android Suspend</rich_text><rich_text>
        main.c文件是整个框架的入口。用户可以通过读写sys文件/sys/power/state实现控制系统进入低功耗状态。用户对于/sys /power/state的读写会调用到main.c中的state_store()，用户可以写入const char * const  pm_states[] 中定义的字符串， 比如“on”，“mem”，“standby”，“disk”。  
        state_store()首先判断用户写入的是否是“disk”字符串，如果是则调用hibernate()函数命令系统进入hibernation状 态。如果是其他字符串则调用request_suspend_state()（如果定义  CONFIG_EARLYSUSPEND）或者调用enter_state()（如果未定义CONFIG_EARLYSUSPEND）。   request_suspend_state()函数是android相对标准linux改动的地方，它实现在earlysuspend.c中。在标准 linux内核中，用户通过  sysfs 写入“mem”和“standby”时，会直接调用enter_state()进入suspend模式，但在android中则会调用</rich_text><rich_text foreground="#ff0000">request_suspend_state</rich_text><rich_text>()函数进入early suspend状态。request_suspend_state()函数代码如下：    
 
1. void request_suspend_state(suspend_state_t new_state)  
2. {  
3.     unsigned long irqflags;  
4.     int old_sleep;  
5.   
6. #ifdef CONFIG_PLAT_RK  
7.     if (system_state != SYSTEM_RUNNING)  
8.         return;  
9. #endif  
10.   
11.     spin_lock_irqsave(&amp;state_lock, irqflags);  
12.     old_sleep = state &amp; SUSPEND_REQUESTED;  
13.     if (debug_mask &amp; DEBUG_USER_STATE) {  
14.         struct timespec ts;  
15.         struct rtc_time tm;  
16.         getnstimeofday(&amp;ts);  
17.         rtc_time_to_tm(ts.tv_sec, &amp;tm);  
18.         pr_info(&quot;request_suspend_state: %s (%d-&gt;%d) at %lld &quot;  
19.             &quot;(%d-%02d-%02d %02d:%02d:%02d.%09lu UTC)\n&quot;,  
20.             new_state != PM_SUSPEND_ON ? &quot;sleep&quot; : &quot;wakeup&quot;,  
21.             requested_suspend_state, new_state,  
22.             ktime_to_ns(ktime_get()),  
23.             tm.tm_year + 1900, tm.tm_mon + 1, tm.tm_mday,  
24.             tm.tm_hour, tm.tm_min, tm.tm_sec, ts.tv_nsec);  
25.     }  
26.     if (!old_sleep &amp;&amp; new_state != PM_SUSPEND_ON) {  
27.         state |= SUSPEND_REQUESTED;  
28.                   //进入Early suspend处理，执行函数early_suspend  
29.         queue_work(suspend_work_queue, &amp;early_suspend_work);  
30.     } else if (old_sleep &amp;&amp; new_state == PM_SUSPEND_ON) {  
31.         state &amp;= ~SUSPEND_REQUESTED;  
32.         wake_lock(&amp;main_wake_lock);  
33.                   //进入Late resume处理,执行函数late_resume  
34.         queue_work(suspend_work_queue, &amp;late_resume_work);  
35.     }  
36.     requested_suspend_state = new_state;  
37.     spin_unlock_irqrestore(&amp;state_lock, irqflags);  
38. }  

</rich_text><rich_text scale="h3"> 4. Early Suspend</rich_text><rich_text>
        在early_suspend()函数中，首先会检查现在请求的状态还是否是suspend，  来防止suspend的请求会在这个时候取消掉(因为这个时候用户进程还在运行)，如果需要退出，就简单的退出了。如果没有，  这个函数就会把early_suspend_handlers中注册的一系列的回调(</rich_text><rich_text foreground="#000099">通过register_early_suspend注册</rich_text><rich_text>)都调用一次，然后同步文件系统， 然后放弃掉main_wake_lock，  这个wake lock是一个没有超时的锁，如果这个锁不释放，那么系统就无法进入休眠。
    注：fbearlysuspend.c和consoleearlysuspend.c这两个文件实现了针对lcd  framebuffer的earlysuspend支持和console的earlysuspend支持。实际上这两个文件就是利用上面 earlysuspend.c提供的接口注册了针对framebuffer和console的early suspend  handler，并提供相应的handler函数。
1. static void early_suspend(struct work_struct *work)  
2. {  
3.     struct early_suspend *pos;  
4.     unsigned long irqflags;  
5.     int abort = 0;  
6.   
7. #ifdef CONFIG_PLAT_RK  
8.     if (system_state != SYSTEM_RUNNING)  
9.         return;  
10. #endif  
11.   
12.     mutex_lock(&amp;early_suspend_lock);  
13.     spin_lock_irqsave(&amp;state_lock, irqflags);  
14.     if (state == SUSPEND_REQUESTED)  
15.         state |= SUSPENDED;  
16.     else  
17.         abort = 1;  
18.     spin_unlock_irqrestore(&amp;state_lock, irqflags);  
19.   
20.     if (abort) {  
21.         if (debug_mask &amp; DEBUG_SUSPEND)  
22.             pr_info(&quot;early_suspend: abort, state %d\n&quot;, state);  
23.         mutex_unlock(&amp;early_suspend_lock);  
24.         goto abort;  
25.     }  
26.   
27.     if (debug_mask &amp; DEBUG_SUSPEND)  
28.         pr_info(&quot;early_suspend: call handlers\n&quot;);  
29.     list_for_each_entry(pos, &amp;early_suspend_handlers, link) {  
30.         if (pos-&gt;suspend != NULL) {  
31.             if (debug_mask &amp; DEBUG_VERBOSE)  
32.                 pr_info(&quot;early_suspend: calling %pf\n&quot;, pos-&gt;suspend);  
33.             pos-&gt;suspend(pos);  
34.         }  
35.     }  
36.     mutex_unlock(&amp;early_suspend_lock);  
37.   
38. #ifdef CONFIG_SUSPEND_SYNC_WORKQUEUE  
39.     suspend_sys_sync_queue();  
40. #else  
41.     if (debug_mask &amp; DEBUG_SUSPEND)  
42.         pr_info(&quot;early_suspend: sync\n&quot;);  
43.   
44.     sys_sync();  
45. #endif  
46. abort:  
47.     spin_lock_irqsave(&amp;state_lock, irqflags);  
48.     if (state == SUSPEND_REQUESTED_AND_SUSPENDED)  
49.         wake_unlock(&amp;main_wake_lock);  
50.     spin_unlock_irqrestore(&amp;state_lock, irqflags);  
51. }  

</rich_text><rich_text scale="h3">5. Late Resume</rich_text><rich_text>
      当所有的唤醒已经结束以后，用户进程都已经开始运行了，唤醒通常会是以下的几种原因:
     • 来电
         如果是来电，那么Modem会通过发送命令给rild来让rild通知WindowManager有来电响应，这样就会远程调用 PowerManagerService来写&quot;on&quot; 到 /sys/power/state 来执行late resume的设备，比如点亮屏幕等。
    • 用户按键
      用户按键事件会送到WindowManager中，WindowManager会处理这些按键事件，按键分为几种情况，如果按键不是唤醒键(能够唤醒系统的按键) 那么WindowManager会主动放弃wakeLock来使系统再次进入休眠，如果按键是唤醒键，那么WindowManger就会调用PowerManagerService中的接口来执行Late  Resume。
   Late Resume 会依次唤醒前面调用了Early Suspend的设备。
1. static void late_resume(struct work_struct *work)  
2. {  
3.     struct early_suspend *pos;  
4.     unsigned long irqflags;  
5.     int abort = 0;  
6.   
7. #ifdef CONFIG_PLAT_RK  
8.     if (system_state != SYSTEM_RUNNING)  
9.         return;  
10. #endif  
11.   
12.     mutex_lock(&amp;early_suspend_lock);  
13.     spin_lock_irqsave(&amp;state_lock, irqflags);  
14.     if (state == SUSPENDED)  
15.         state &amp;= ~SUSPENDED;  
16.     else  
17.         abort = 1;  
18.     spin_unlock_irqrestore(&amp;state_lock, irqflags);  
19.   
20.     if (abort) {  
21.         if (debug_mask &amp; DEBUG_SUSPEND)  
22.             pr_info(&quot;late_resume: abort, state %d\n&quot;, state);  
23.         goto abort;  
24.     }  
25.     if (debug_mask &amp; DEBUG_SUSPEND)  
26.         pr_info(&quot;late_resume: call handlers\n&quot;);  
27.     list_for_each_entry_reverse(pos, &amp;early_suspend_handlers, link) {  
28.         if (pos-&gt;resume != NULL) {  
29.             if (debug_mask &amp; DEBUG_VERBOSE)  
30.                 pr_info(&quot;late_resume: calling %pf\n&quot;, pos-&gt;resume);  
31.   
32.             pos-&gt;resume(pos);  
33.         }  
34.     }  
35.     if (debug_mask &amp; DEBUG_SUSPEND)  
36.         pr_info(&quot;late_resume: done\n&quot;);  
37. abort:  
38.     mutex_unlock(&amp;early_suspend_lock);  
39. }  

</rich_text><rich_text scale="h3">6. Wake Lock</rich_text><rich_text>
     </rich_text><rich_text foreground="#ff0000">wake_lock防止正在运行的系统进入suspend或其它低功耗状态。</rich_text><rich_text>
</rich_text><rich_text foreground="#ff0000">     Android改动较大的另一处是增加了</rich_text><rich_text foreground="#3333ff">wakelock</rich_text><rich_text>机制。实现在wakelock.c和userwakelock.c中。wakelock可以阻止处于正常运行（active）或者空闲（idle）状态的系统进入睡眠等低功耗状态。直到所持有的wakelock全部被释放，系统才能进入睡眠等低功耗的状态。
    我们接下来看一看wake lock的机制是怎么运行和起作用的，主要关注 wakelock.c(wake_lock)文件就可以了。
    1) wake lock 有加锁和解锁两种状态，加锁的方式有两种：
     • 第一种是永久的锁住，这样的锁除非显示的放开，是不会解锁的，所以这种锁的使用是非常小心的。
     • 第二种是超时锁，这种锁会锁定系统唤醒一段时间，如果这个时间过去了，这个锁会自动解除。
    2) 锁有两种类型：
     • WAKE_LOCK_SUSPEND：这种锁会防止系统进入睡眠(suspend)。
     • WAKE_LOCK_IDLE：这种锁不会影响系统的休眠，用于阻止系统在持有锁的过程中进入低功耗状态。即直到wake_lock被释放，系统才会从idle状态进入低功耗状态，此低功耗状态将使中断延迟或禁用一组中断。
    3) 在wake lock中， 会有3个地方让系统直接开始</rich_text><rich_text foreground="#ff0000">suspend</rich_text><rich_text>()， 分别是:
     • 在wake_unlock()中， 如果发现解锁以后没有任何其他的wake lock了，就开始休眠
     • 在定时器都到时间以后，定时器的回调函数会查看是否有其他的wake lock，如果没有，就在这里让系统进入睡眠。
     • 在wake_lock() 中，对一个wake lock加锁以后，会再次检查一下有没有锁， 我想这里的检查是没有必要的， 更好的方法是使加锁的这个操作原子化，而不是繁冗的检查，而且这样的检查也有可能漏掉。 

</rich_text><rich_text scale="h3">7. Suspend</rich_text><rich_text>
    当wake_lock 运行 suspend()以后，  在wakelock.c的suspend()函数会被调用，这个函数首先sync文件系统，然后调用 pm_suspend(request_suspend_state)，接下来pm_suspend()就会调用enter_state()来进入 Linux的休眠流程...

1. static void suspend(struct work_struct *work)  
2. {  
3.     int ret;  
4.     int entry_event_num;  
5.     struct timespec ts_entry, ts_exit;  
6.   
7.     if (has_wake_lock(WAKE_LOCK_SUSPEND)) {  
8.         if (debug_mask &amp; DEBUG_SUSPEND)  
9.             pr_info(&quot;suspend: abort suspend\n&quot;);  
10.         return;  
11.     }  
12.   
13.     entry_event_num = current_event_num;  
14. #ifdef CONFIG_SUSPEND_SYNC_WORKQUEUE  
15.     suspend_sys_sync_queue();  
16. #else  
17.     sys_sync();  
18. #endif  
19.     if (debug_mask &amp; DEBUG_SUSPEND)  
20.         pr_info(&quot;suspend: enter suspend\n&quot;);  
21.     getnstimeofday(&amp;ts_entry);  
22.     ret = pm_suspend(requested_suspend_state);  
23.     getnstimeofday(&amp;ts_exit);  
24.   
25.     if (debug_mask &amp; DEBUG_EXIT_SUSPEND) {  
26.         struct rtc_time tm;  
27.         rtc_time_to_tm(ts_exit.tv_sec, &amp;tm);  
28.         pr_info(&quot;suspend: exit suspend, ret = %d &quot;  
29.             &quot;(%d-%02d-%02d %02d:%02d:%02d.%09lu UTC)\n&quot;, ret,  
30.             tm.tm_year + 1900, tm.tm_mon + 1, tm.tm_mday,  
31.             tm.tm_hour, tm.tm_min, tm.tm_sec, ts_exit.tv_nsec);  
32.     }  
33.   
34.     if (ts_exit.tv_sec - ts_entry.tv_sec &lt;= 1) {  
35.         ++suspend_short_count;  
36.   
37.         if (suspend_short_count == SUSPEND_BACKOFF_THRESHOLD) {  
38.             suspend_backoff();  
39.             suspend_short_count = 0;  
40.         }  
41.     } else {  
42.         suspend_short_count = 0;  
43.     }  
44.   
45.     if (current_event_num == entry_event_num) {  
46.         if (debug_mask &amp; DEBUG_SUSPEND)  
47.             pr_info(&quot;suspend: pm_suspend returned with no event\n&quot;);  
48.         wake_lock_timeout(&amp;unknown_wakeup, HZ / 2);  
49.     }  
50. }  

</rich_text><rich_text scale="h3">8. Android于标准Linux休眠的区别</rich_text><rich_text>
      pm_suspend() 虽然用enter_state()来进入标准的Linux休眠流程，但是还是有一些区别：
      当进入冻结进程的时候，android首先会检查有没有wake lock，如果没有，才会停止这些进程，因为在开始suspend和冻结进程期间有可能有人申请了wake lock，如果是这样，冻结进程会被中断。
      在suspend_late()中，会最后检查一次有没有wake  lock，这有可能是某种快速申请wake lock，并且快速释放这个锁的进程导致的，如果有这种情况， 这里会返回错误，  整个suspend就会全部放弃。如果pm_suspend()成功了，LOG的输出可以通过在kernel cmd里面增加 &quot;</rich_text><rich_text foreground="#ff0000">no_console_suspend</rich_text><rich_text>&quot; 来看到suspend和resume过程中的log输出。
      
</rich_text><node name="early_suspend" prog_lang="custom-colors" readonly="False" tags="" unique_id="17"><rich_text scale="h2">（1）添加头文件：</rich_text><rich_text>
#include &lt;linux/earlysuspend.h&gt;

</rich_text><rich_text scale="h2">（2）在特定驱动结构体中添加early_suspend结构：</rich_text><rich_text>
#ifdef CONFIG_HAS_EARLYSUSPEND
 struct early_suspend early_suspend;
 #endif
 
</rich_text><rich_text scale="h2">（3）在驱动probe函数中注册相关early_suspend结构体：</rich_text><rich_text>
#ifdef CONFIG_HAS_EARLYSUSPEND
 ftk_ts-&gt;early_suspend.level = EARLY_SUSPEND_LEVEL_BLANK_SCREEN + 1;
 ftk_ts-&gt;early_suspend.suspend = stm_ts_early_suspend;
 ftk_ts-&gt;early_suspend.resume =stm_ts_late_resume;
 register_early_suspend(&amp;ftk_ts-&gt;early_suspend);
 #endif
     所有注册到系统中的early_suspend结构都会按level值按顺序加入到全局链表early_suspend_handlers中。 
     希望执行early  suspend的设备，他的设备驱动程序需要向电源管理系统注册，该结构体用于向电源管理系统注册earlysuspend/lateresume，当电源管理系统启动suspend流程时，回调函数suspend会被调用，相反，resume的最后阶段，回调函数resume会被调用，level字段用 于调整该结构体在注册链表中的位置，suspend时，</rich_text><rich_text foreground="#ff0000">level的数值越小，回调函数的被调用的时间越早</rich_text><rich_text>，resume时则反过来。Android预先定义了3个level等级：
 
1. enum {  
2.     EARLY_SUSPEND_LEVEL_BLANK_SCREEN = 50,  
3.     EARLY_SUSPEND_LEVEL_STOP_DRAWING = 100,  
4.     EARLY_SUSPEND_LEVEL_DISABLE_FB = 150,  
5. };  
6. struct early_suspend {  
7. #ifdef CONFIG_HAS_EARLYSUSPEND  
8.     struct list_head link;  
9.     int level;  
10.     void (*suspend)(struct early_suspend *h);  
11.     void (*resume)(struct early_suspend *h);  
12. #endif  
13. };  
 
</rich_text><rich_text scale="h2">（4）在驱动remove函数取消early_suspend结构体的注册：</rich_text><rich_text>
#ifdef CONFIG_HAS_EARLYSUSPEND
 unregister_early_suspend(&amp;ts-&gt;early_suspend);
 #endif
 
</rich_text><rich_text scale="h2">（5）定义相关suspend和resume函数：</rich_text><rich_text>
#ifdef CONFIG_HAS_EARLYSUSPEND
 static void stm_ts_early_suspend(struct early_suspend *h)
 {
     struct ftk_ts *ts;
     ts = container_of(h, struct ftk_ts, early_suspend);
     stm_ts_suspend(ts-&gt;client, PMSG_SUSPEND);
 }
static void stm_ts_late_resume(struct early_suspend *h)
 {
     struct ftk_ts *ts;
     ts = container_of(h, struct ftk_ts, early_suspend);
     stm_ts_resume(ts-&gt;client);
 }
 #endif
 
</rich_text><rich_text scale="h2">（6）在系统驱动结构体中设置未使用earlysuspend的函数接口：</rich_text><rich_text>
#ifndef CONFIG_HAS_EARLYSUSPEND
 .suspend = stm_ts_suspend,
 .resume = stm_ts_resume,
 #endif
</rich_text></node><node name="wake lock" prog_lang="custom-colors" readonly="False" tags="" unique_id="18"><rich_text>    Android在标准的Linux休眠与唤醒机制上又加了一层，就是early_suspend /  late_resume。顾名思意，使用early_suspend（）进行休眠的设备，它休眠的时刻早于其他设备，使用late_resume（）唤醒 的设备，它被唤醒的时刻要晚于其他设备。这对函数通常成对出现，当内核打开了CONFIG_EARLY_SUSPEND(Android默认打开)后，就 可以使
用这组函数来代替驱动中标准的 suspend / resume接口。
        好了，讲到early_suspend和late_resume，似乎必须要扯到一种叫做wake_lock的锁定机制了。其实，单纯从某个设备的驱动程序上来讲，未必需要用到wake_lock机制，
比如我们的触摸屏驱动中使用了early_suspend，就没有使用wake_lock.
       目前，我了解到的，wake_lock的用途只有一个，那就是防止系统进入休眠（这里的休眠，指的是标准的Linux的休眠，不包含使用early_suspend（）进行休眠的设备，
使用early_suspend()的设备，在系统还有wake_lock锁的时候，也是要休眠的）。
       好吧，现在是时候分析下Android/Linux的休眠与唤醒了，虽然好多先人 都已经讲了这些，而且讲的还不错，这里我还是要提一下。
root@android:/ # ls /sys/power/                                                
 pm_async
 </rich_text><rich_text foreground="#ff0000">state</rich_text><rich_text>
 wait_for_fb_sleep
 wait_for_fb_wake
 wake_lock
 wake_unlock
 wakeup_count
       这里，我只关注state，当state 的值变化时，内核会调用

1. static ssize_t state_store(struct kobject *kobj, struct kobj_attribute *attr,  
2.                const char *buf, size_t n)  
3. {  
4. #ifdef CONFIG_SUSPEND  
5. #ifdef CONFIG_EARLYSUSPEND  
6.     suspend_state_t state = PM_SUSPEND_ON;  
7. #else  
8.     suspend_state_t state = PM_SUSPEND_STANDBY;  
9. #endif  
10.     const char * const *s;   
11. #endif  
12.     char *p;   
13.     int len;  
14.     int error = -EINVAL;  
15.   
16.     p = memchr(buf, '\n', n);   
17.     len = p ? p - buf : n;  
18.   
19.     /* First, check if we are requested to hibernate */  
20.     if (len == 4 &amp;&amp; !strncmp(buf, &quot;disk&quot;, len)) {  
21.         error = hibernate();  
22.   goto Exit;  
23.     }     
24.   
25. #ifdef CONFIG_SUSPEND  
26.     for (s = &amp;pm_states[state]; state &lt; PM_SUSPEND_MAX; s++, state++) {  
27.         if (*s &amp;&amp; len == strlen(*s) &amp;&amp; !strncmp(buf, *s, len))  
28.             break;  
29.     }     
30.     if (state &lt; PM_SUSPEND_MAX &amp;&amp; *s)   
31. #ifdef CONFIG_EARLYSUSPEND  
32.         if (state == PM_SUSPEND_ON || valid_state(state)) {  
33.             error = 0;  
34.             request_suspend_state(state);//这里，进入了Android的休眠与唤醒的处理函数  
35.         }  
36. #else  
37.         error = enter_state(state);  
38. #endif  
39. #endif  
40.   
41.  Exit:  
42.     return error ? error : n;  
43. }  
44.   
45. power_attr(state);  


 
看看1. request_suspend_state()都干了些什么事情  

1. void request_suspend_state(suspend_state_t new_state)  
2. {  
3.     unsigned long irqflags;  
4.     int old_sleep;  
5.   
6.     spin_lock_irqsave(&amp;state_lock, irqflags);  
7.     old_sleep = state &amp; SUSPEND_REQUESTED;  
8.     if (debug_mask &amp; DEBUG_USER_STATE) {  
9.         struct timespec ts;   
10.         struct rtc_time tm;   
11.         getnstimeofday(&amp;ts);  
12.         rtc_time_to_tm(ts.tv_sec, &amp;tm);  
13.         pr_info(&quot;request_suspend_state: %s (%d-&gt;%d) at %lld &quot;  
14.             &quot;(%d-%02d-%02d %02d:%02d:%02d.%09lu UTC)\n&quot;,  
15.             new_state != PM_SUSPEND_ON ? &quot;sleep&quot; : &quot;wakeup&quot;,  
16.             requested_suspend_state, new_state,  
17.             ktime_to_ns(ktime_get()),  
18.             tm.tm_year + 1900, tm.tm_mon + 1, tm.tm_mday,  
19.             tm.tm_hour, tm.tm_min, tm.tm_sec, ts.tv_nsec);  
20.     }     
21.     if (!old_sleep &amp;&amp; new_state != PM_SUSPEND_ON) {  
22.         state |= SUSPEND_REQUESTED;  
23.         queue_work(suspend_work_queue, &amp;early_suspend_work);//在休眠的时候，去遍历执行early_suspend_work这个队列  
24.     } else if (old_sleep &amp;&amp; new_state == PM_SUSPEND_ON) {  
25.         state &amp;= ~SUSPEND_REQUESTED;  
26.         wake_lock(&amp;main_wake_lock);  
27.         queue_work(suspend_work_queue, &amp;late_resume_work);//在唤醒的时候，去遍历执行late_resume_work这个队列  
28.     }     
29.     requested_suspend_state = new_state;  
30.     spin_unlock_irqrestore(&amp;state_lock, irqflags);  
31. }  

        怎么样，是不是很简单，根据用户/系统所请求的状态，去做相应的动作（休眠/唤醒）能用到的一些变量的声明在这里

1. static void early_suspend(struct work_struct *work);  
2. static void late_resume(struct work_struct *work);  
3. static DECLARE_WORK(early_suspend_work, early_suspend);  
4. static DECLARE_WORK(late_resume_work, late_resume);  
         看名字也知道了，early_suspend这个函数指针来处理early_suspend_work这条队列，late_resume 这个函数指针来处理late_resume_work这条队列。
         虽然函数early_suspend()和late_resume()的实现都非常易懂，这里还是要贴出来，因为还有些东西要分析一下。

1. static void early_suspend(struct work_struct *work)  
2. {  
3.     struct early_suspend *pos;  
4.     unsigned long irqflags;  
5.     int abort = 0;  
6.   
7.     mutex_lock(&amp;early_suspend_lock);  
8.     spin_lock_irqsave(&amp;state_lock, irqflags);  
9.     if (state == SUSPEND_REQUESTED)  
10.         state |= SUSPENDED;  
11.     else  
12.         abort = 1;  
13.     spin_unlock_irqrestore(&amp;state_lock, irqflags);  
14.   
15.     if (abort) {  
16.         if (debug_mask &amp; DEBUG_SUSPEND)  
17.             pr_info(&quot;early_suspend: abort, state %d\n&quot;, state);  
18.         mutex_unlock(&amp;early_suspend_lock);  
19.         goto abort;  
20.     }  
21.   
22.     if (debug_mask &amp; DEBUG_SUSPEND)  
23.         pr_info(&quot;early_suspend: call handlers\n&quot;);  
24.     list_for_each_entry(pos, &amp;early_suspend_handlers, link) {//这里就是关键了，遍历early_suspend_handler这条链表（在驱动中注册early_suspend的时候，都注册到这条链表上了）  
25.         if (pos-&gt;suspend != NULL) {  
26.             if (debug_mask &amp; DEBUG_VERBOSE)  
27.                 pr_info(&quot;early_suspend: calling %pf\n&quot;, pos-&gt;suspend);  
28.             pos-&gt;suspend(pos);//调用各个实现进行各设备的休眠  
29.         }  
30.     }  
31.     mutex_unlock(&amp;early_suspend_lock);  
32.   
33.     if (debug_mask &amp; DEBUG_SUSPEND)  
34.         pr_info(&quot;early_suspend: sync\n&quot;);  
35.   
36.     sys_sync();  
37. abort:  
38.     spin_lock_irqsave(&amp;state_lock, irqflags);  
39.     if (state == SUSPEND_REQUESTED_AND_SUSPENDED)  
40.         wake_unlock(&amp;main_wake_lock);// 这里很重要，别小看这个一个wake_unlock,起初我也以为这仅仅是一个释放main锁，其实里面有玄机呢。还记得wake_lock主要用来干嘛 么，用来防止系统休眠，也就是说，只要系统中其他地方还拥有wake_lock锁（类型WAKE_LOCK_SUSPEND），系统就没法进入休眠，如果 没有锁了，那就要接着走标准Linux的那一套休眠机制了  
41.     spin_unlock_irqrestore(&amp;state_lock, irqflags);  
42. }  
1.   
先跳过late_resume()。来看下wake_unlock()的实现吧

1. void wake_unlock(struct wake_lock *lock)  
2. {  
3.     int type;  
4.     unsigned long irqflags;  
5.     spin_lock_irqsave(&amp;list_lock, irqflags);  
6.     type = lock-&gt;flags &amp; WAKE_LOCK_TYPE_MASK;  
7. #ifdef CONFIG_WAKELOCK_STAT  
8.     wake_unlock_stat_locked(lock, 0);   
9. #endif  
10.     if (debug_mask &amp; DEBUG_WAKE_LOCK)  
11.         pr_info(&quot;wake_unlock: %s\n&quot;, lock-&gt;name);  
12.     lock-&gt;flags &amp;= ~(WAKE_LOCK_ACTIVE | WAKE_LOCK_AUTO_EXPIRE);  
13.     list_del(&amp;lock-&gt;link);  
14.     list_add(&amp;lock-&gt;link, &amp;inactive_locks);  
15.     if (type == WAKE_LOCK_SUSPEND) {//类型，驱动中一般只有这一种类型  
16.         long has_lock = has_wake_lock_locked(type);  
17.         if (has_lock &gt; 0) {  
18.             if (debug_mask &amp; DEBUG_EXPIRE)  
19.                 pr_info(&quot;wake_unlock: %s, start expire timer, &quot;  
20.                     &quot;%ld\n&quot;, lock-&gt;name, has_lock);  
21.             mod_timer(&amp;expire_timer, jiffies + has_lock);  
22.         } else {  
23.             if (del_timer(&amp;expire_timer))  
24.                 if (debug_mask &amp; DEBUG_EXPIRE)  
25.                     pr_info(&quot;wake_unlock: %s, stop expire &quot;  
26.                         &quot;timer\n&quot;, lock-&gt;name);  
27.             if (has_lock == 0)//如果没有锁了，要进入标准Linux的休眠机制了，咱们接着往下跟  
28.                 queue_work(suspend_work_queue, &amp;suspend_work);  
29.         }     
30.         if (lock == &amp;main_wake_lock) {  
31.             if (debug_mask &amp; DEBUG_SUSPEND)  
32.                 print_active_locks(WAKE_LOCK_SUSPEND);  
33. #ifdef CONFIG_WAKELOCK_STAT  
34.             update_sleep_wait_stats_locked(0);  
35. #endif  
36.         }     
37.     }     
38.     spin_unlock_irqrestore(&amp;list_lock, irqflags);  
39. }  
40. EXPORT_SYMBOL(wake_unlock);  


 
这里就是进入标准Linux的休眠的地方了
1. static void suspend(struct work_struct *work)  
2. {  
3.     int ret;  
4.     int entry_event_num;  
5.     struct timespec ts_entry, ts_exit;  
6.   
7.     if (has_wake_lock(WAKE_LOCK_SUSPEND)) {  
8.         if (debug_mask &amp; DEBUG_SUSPEND)  
9.             pr_info(&quot;suspend: abort suspend\n&quot;);  
10.         return;  
11.     }  
12.   
13.     entry_event_num = current_event_num;  
14.     sys_sync();  
15.     if (debug_mask &amp; DEBUG_SUSPEND)  
16.         pr_info(&quot;suspend: enter suspend\n&quot;);  
17.     getnstimeofday(&amp;ts_entry);  
18.     ret = pm_suspend(requested_suspend_state);//这里是关键点  
19.     getnstimeofday(&amp;ts_exit);  
20.   
21.     if (debug_mask &amp; DEBUG_EXIT_SUSPEND) {  
22.         struct rtc_time tm;  
23.         rtc_time_to_tm(ts_exit.tv_sec, &amp;tm);  
24.         pr_info(&quot;suspend: exit suspend, ret = %d &quot;  
25.             &quot;(%d-%02d-%02d %02d:%02d:%02d.%09lu UTC)\n&quot;, ret,  
26.             tm.tm_year + 1900, tm.tm_mon + 1, tm.tm_mday,  
27.             tm.tm_hour, tm.tm_min, tm.tm_sec, ts_exit.tv_nsec);  
28.     }  
29.   
30.     if (ts_exit.tv_sec - ts_entry.tv_sec &lt;= 1) {  
31.         ++suspend_short_count;  
32.   
33.         if (suspend_short_count == SUSPEND_BACKOFF_THRESHOLD) {  
34.             suspend_backoff();  
35.             suspend_short_count = 0;  
36.         }  
37.     } else {  
38.         suspend_short_count = 0;  
39.     }  
40.   
41.     if (current_event_num == entry_event_num) {  
42.         if (debug_mask &amp; DEBUG_SUSPEND)  
43.             pr_info(&quot;suspend: pm_suspend returned with no event\n&quot;);  
44.         wake_lock_timeout(&amp;unknown_wakeup, HZ / 2);  
45.     }  
46. }  
47. static DECLARE_WORK(suspend_work, suspend);  

1. int pm_suspend(suspend_state_t state)  
2. {  
3.     if (state &gt; PM_SUSPEND_ON &amp;&amp; state &lt; PM_SUSPEND_MAX)  
4.         return enter_state(state);//正如你所料，开始走Linux那套休眠的流程了  
5.     return -EINVAL;  
6. }  
7. EXPORT_SYMBOL(pm_suspend);  

       唤醒相关的代码就不贴 了，跟休眠类似的。下面讲下驱动中如何使用wake_lock和early_suspend，总的来说，还是挺简单的
比如在设备probe的时候做如下操作
struct early_suspend    early_suspend;
 
early_suspend.level = EARLY_SUSPEND_LEVEL_BLANK_SCREEN + 1; //等级，等级大小和suspend顺序一致，和resume顺序相反
 early_suspend.suspend = xxx_early_suspend;//指定函数指针，需自己实现
 early_suspend.resume = xxx_late_resume;
register_early_suspend(&amp;early_suspend);//注册进核心，也就是加入刚才early_suspend_handlers那个链表

 struct wake_lock    chrg_lock;
 wake_lock_init(&amp;chrg_lock, WAKE_LOCK_SUSPEND, &quot;xxx_wake_lock&quot;);//初始化类型为WAKE_LOCK_SUSPEND的wake_lock锁
#ifdef CONFIG_HAS_EARLYSUSPEND
 static void xxx_early_suspend(struct early_suspend *h)
 {
        ....
         wake_lock(&amp;chrg_lock);
       ....
 }
 
 
 static void xxx_late_resume(struct early_suspend *h)
 {
      .....
         wake_unlock(&amp;chrg_lock);
      ....
 }
 #endif
 
</rich_text></node><node name="Linux 关机和重启机制" prog_lang="custom-colors" readonly="False" tags="" unique_id="19"><rich_text>Linux 关机和重启机制
一．sys_reboot
二．apm capi
 
Linux下的关机和重启可能由两种行为引发，一是通过用户编程，另外一种是系统自己产生的信息。用户和系统进行交互的方式有两种，一种是系统调用sys_reboot，另外一个则是apm或者acpi的设备文件，通过对其操作也可以是系统关机或者重启。

</rich_text><rich_text scale="h2">一．sys_reboot</rich_text><rich_text>
    linux下关机和重启命令主要有，shutdown，reboot，halt, poweroff, telinit,和init。对于
    poweroff和reboot是halt的符号链接，不过最终都调用reboot系统调用来完成关机和重启操作，该部分代码在kernel/sys.c中。
    在调用sys_reboot时，应该注意一点，
reboot doesn't sync: do that yourself before calling this.
所以在使用之前应该手动sync命令同步磁盘。
该函数流程如下，
    i)                    检查调用者是否有合法调用reboot的权限。
    ii)                  通过魔数magic1和magic2，判断reboot系统调用是不是被偶然调用的。
    iii)                对不同的调用使用情况区分，如
        LINUX_REBOOT_CMD_RESTART, //restarting system
        LINUX_REBOOT_CMD_HATL,  // system halted 
        LINUX_REBOOT_CMD_POWER_OFF //power down
        LINUX_REBOOT_CMD_RESTART2 //接收命令字符 说明系统该如何关闭
        LINUX_REBOOT_CMD_CAD_ON/OFF //用于决定是否允许Ctrl+alt+del组合键用于关闭并重启系统。
    如果想禁止这个功能，可以在/etc/inittab文件的下面一行注释掉
    Ca:12345:ctrlatldel:/sbin/shutdown –tl –a –r now
    当然对于arm体系来说，用到的可能性较少

</rich_text><rich_text scale="h3">1.    restart</rich_text><rich_text>
    a) shutdown       对于restart而言，首先需要通过blocking_notifier_call_chain这一通知机制，将挂在reboot_notifier_list上，对于reboot操作需要通知的设备进行消息通知。
       接着通知所有的驱动总线（包括i2c,usb,spi,platform等bus），如果总线本身有shutdown操作，则先调用总线的shutdown操作，否则逐一调用总线上对应设备驱动的shutdown方法，接着清空sys文件系统（根据驱动模型思考,device_shutdown）
       然后与上述描述类似的，进行shut down all system device,同样调用的是shutdown方法。
       
       最后调用machine_start，也就是arm_pm_restart,即arm_machine_start进行重启操作。
    b) arm_machine_start       实际上最终调用的是arch_reset，对于不同的cpu，调用的arch_reset不同。
    对于x86而言，开始部分有一段SMP相关的代码，主要完成多CPU时，一个CPU完成重启，而其他CPU处于等待的状态。之后根据变量reboot_thru_bios的内容判断重启方式，这个参数是reboot_setup指定的。在通过bios重启的情况下，系统同样先设定重启模式，然后切换到实模式，通过ljmp $0xffff,$0x0完成重启。
       对于arm mx25而言，相对简单，arch_reset最后调用mxc_wd_reset函数，该函数中，通过使能wacht dog时钟，使能Wdog,并且设置watch dog ctrl reg的SRS位，即software reset signal ，让WDOG 产生一个reset signal，从而实现reset操作。（而接下来的就是arm启动流程）

</rich_text><rich_text scale="h3">2.power_off</rich_text><rich_text>
    Power_off准备操作与resetart类似，shutdown结束后，最后调用的pm_board_off,
该方法可以在板级初始化的时候进行指定。
      a) arm在machine_power_off中，如果定义了pm_board_off 方法则会调用该函数关机，根据体系不同设置，操作一般为拉低口线之类的操作。
      
      b) apm x86而如果在apm已经加载的情况下（在arm中没有，x86中实现），实际指向的是apm_power_off，在该函数里系统通过apm_info结构里的值，使用切换到实模式关机，或者使用apm_bios_call_simple函数调用保护模式下的apm接口关机两种方法。
              
    apm使用其注册的设备的ioctl接口完成apm的操作，在apm.c的do_ioctl函数中可以看见处理的分支。这里只有suspend和standby的代码，所以我们不能通过ioctl这种方法使用apm关机。 
    当用户按下POWER开关的时候，如果有apm模块，那么关机流程是由apm来处理的。apm驱动在初始化的时候启动了一个apm内核线程：apm_mainloop，系统会在这里检测到POWEROFF按键消息并且将其命名为APM_SYS_SUSPEND，以区别apm -s设置的APM_USER_SUSPEND模式。紧接着进入了apm_event_handler函数，又从apm_event_handler函数进入了check_events函数，处理函数对应的case分支上。系统同样使用了suspend函数进行关机，不过由于其它参数的原因，suspend最后调用的是关机的流程。
</rich_text></node><node name="android对休眠唤醒的实现" prog_lang="custom-colors" readonly="False" tags="" unique_id="20"><rich_text>
</rich_text><node name="(一)" prog_lang="custom-colors" readonly="False" tags="" unique_id="21"><rich_text scale="h2" weight="heavy">一、新增特性介绍</rich_text><rich_text>
 
实际上，android仍然是利用了标准linux的休眠唤醒系统，只不过添加了一些使用上的新特性，early suspend、late resume、wake lock。
 
Early suspend - 这个机制定义了在suspend的早期，关闭显示屏的时候，一些和显示屏相关的设备，比如背光、重力感应器和触摸屏等设备都应该被关掉，但是此时系统可能还有持有wake lock的任务在运行，如音乐播放，电话，或者扫描sd卡上的文件等，这个时候整个系统还不能进入真正睡眠，直到所有的wake lock都没释放。在嵌入式设备中，悲观是一个很大的电源消耗，所有android加入了这种机制。
 
Late resume - 这个机制定义了在resume的后期，也就是唤醒源已经将处理器唤醒，标准linux的唤醒流程已经走完了，在android上层系统识别出这个物理上的唤醒源是上层定义的，那么上层将会发出late resume的命令给下层，这个时候将会调用相关设备注册的late resume回调函数。
 
Wake lock - wakelock在android的电源管理系统中扮演一个核心的角色，wakelock是一种锁的机制, 只要有task拿着这个锁, 系统就无法进入休眠, 可以被用户态进程和内核线程获得。这个锁可以是有超时的或者是没有超时的, 超时的锁会在时间过去以后自动解锁。如果没有锁了或者超时了, 内核就会启动标准linux的那套休眠机制机制来进入休眠。
 
</rich_text><rich_text scale="h2" weight="heavy">二、kernel层源码解析 - early suspend 和 late resume实现</rich_text><rich_text>
相关源码：
kernel/kernel/power/main.c
kernel/kernel/power/earlysuspend.c
kernel/kernel/power/wakelock.c
kernel/kernel/power/userwakelock.c
kernel/kernel/power/suspend.c
 
之前标准的linux的sysfs的接口只需要一个state就够了，现在至少需要3个接口文件：state、wake_lock、wake_unlock。现在为了配合android为休眠唤醒添加的几种新特性，可以填入文件state的模式又多了一种：on, 标准android系统中只支持state的on和mem模式，其余的暂不支持。wake_lock和wake_unlock接口对应的读写函数在文件userwakelock.c中，对wakelock.c中的create wakelock或者release wakelock进行了封装，供用户空间来使用。
 
如果上层用户执行:echo xxx(on or mem) &gt; sys/power/state的话，将会调用到如下函数：
static ssize_t state_store(struct kobject *kobj, struct kobj_attribute *attr,
const char *buf, size_t n)
{
#ifdef CONFIG_SUSPEND // set
#ifdef CONFIG_EARLYSUSPEND    //set
       suspend_state_t state = PM_SUSPEND_ON;</rich_text><rich_text foreground="#969696">   </rich_text><rich_text>// for early suspend and late resume
#else
       suspend_state_t state = PM_SUSPEND_STANDBY;
#endif
       const char * const *s;
#endif
       char *p;
       int len;
       int error = -EINVAL;
 
       p = memchr(buf, '/n', n);
       len = p ? p - buf : n;
 
       /* First, check if we are requested to hibernate */
       if (len == 4 &amp;&amp; !strncmp(buf, &quot;disk&quot;, len)) {
              error = hibernate();  </rich_text><rich_text foreground="#969696">// </rich_text><rich_text>检查是否要求进入</rich_text><rich_text foreground="#969696">disk</rich_text><rich_text>省电模式，暂时不支持
  goto Exit;
       }
 
#ifdef CONFIG_SUSPEND        // def
       for (s = &amp;pm_states[state]; state &lt; PM_SUSPEND_MAX; s++, state++) {
              if (*s &amp;&amp; len == strlen(*s) &amp;&amp; !strncmp(buf, *s, len))
                     break;
       }
       if (state &lt; PM_SUSPEND_MAX &amp;&amp; *s)
#ifdef CONFIG_EARLYSUSPEND
              if (state == PM_SUSPEND_ON || valid_state(state)) {
</rich_text><rich_text foreground="#969696">// </rich_text><rich_text>需要经过平台</rich_text><rich_text foreground="#969696">pm.c</rich_text><rich_text>文件定义的模式支持检查函数，</rich_text><rich_text foreground="#969696">mtk</rich_text><rich_text>只支持</rich_text><rich_text foreground="#969696">mem</rich_text><rich_text>，同时如果是</rich_text><rich_text foreground="#969696">android</rich_text><rich_text>发送出来的</rich_text><rich_text foreground="#969696">late resume</rich_text><rich_text>命令</rich_text><rich_text foreground="#969696">(on)</rich_text><rich_text>，这里也会放行，往下执行
                     error = 0;
                     request_suspend_state(state);</rich_text><rich_text foreground="#969696">     </rich_text><rich_text>// android休眠唤醒的路线
              }
#else
              error = enter_state(state);</rich_text><rich_text foreground="#969696">// </rich_text><rich_text>标准</rich_text><rich_text foreground="#969696">linux</rich_text><rich_text>休眠唤醒的路线
#endif
#endif
 
 Exit:
       return error ? error : n;
}
 
@ kernel/kernel/power/earlysuspend.c
enum {
       DEBUG_USER_STATE = 1U &lt;&lt; 0,
       DEBUG_SUSPEND = 1U &lt;&lt; 2,
};
int Earlysuspend_debug_mask = DEBUG_USER_STATE;
module_param_named(Earlysuspend_debug_mask, Earlysuspend_debug_mask, int, S_IRUGO | S_IWUSR | S_IWGRP);
 
static DEFINE_MUTEX(early_suspend_lock);
static LIST_HEAD(early_suspend_handlers);
static void early_sys_sync(struct work_struct *work);
static void early_suspend(struct work_struct *work);
static void late_resume(struct work_struct *work);
static DECLARE_WORK(early_sys_sync_work, early_sys_sync);
static DECLARE_WORK(early_suspend_work, early_suspend);
static DECLARE_WORK(late_resume_work, late_resume);
static DEFINE_SPINLOCK(state_lock);
enum {
       SUSPEND_REQUESTED = 0x1,
       SUSPENDED = 0x2,
       SUSPEND_REQUESTED_AND_SUSPENDED = SUSPEND_REQUESTED | SUSPENDED,
};
static int state;             // 初始化为0
 
static DECLARE_COMPLETION(fb_drv_ready);
 
void request_suspend_state(suspend_state_t new_state)
{
       unsigned long irqflags;
       int old_sleep;
 
       spin_lock_irqsave(&amp;state_lock, irqflags);
       old_sleep = state &amp; SUSPEND_REQUESTED; </rich_text><rich_text foreground="#969696">// state = 1 or 3</rich_text><rich_text>
</rich_text><rich_text foreground="#969696">// state</rich_text><rich_text>的值会在</rich_text><rich_text foreground="#333399">0-&gt;1-&gt;3-&gt;2-&gt;0</rich_text><rich_text>循环变化，后面分析代码都可以看出这些值代表系统目前处于什么阶段，简单得说就是：正常</rich_text><rich_text foreground="#333399">-&gt;</rich_text><rich_text>准备进</rich_text><rich_text foreground="#969696">early suspend</rich_text><rich_text foreground="#333399">-&gt;</rich_text><rich_text>开始</rich_text><rich_text foreground="#969696">early suspend</rich_text><rich_text>并且对名为</rich_text><rich_text foreground="#969696">mian</rich_text><rich_text>的</rich_text><rich_text foreground="#969696">wakelock</rich_text><rich_text>解锁，如果此时没有其余</rich_text><rich_text foreground="#969696">wakelock</rich_text><rich_text>处于</rich_text><rich_text foreground="#969696">lock</rich_text><rich_text>状态，那么系统就走</rich_text><rich_text foreground="#969696">linux</rich_text><rich_text>的休眠唤醒路线让整个系统真正休眠，直到唤醒源发生，然后将处理器和</rich_text><rich_text foreground="#969696">linux</rich_text><rich_text>层唤醒。之后</rich_text><rich_text foreground="#969696">android</rich_text><rich_text>层判断本次底层醒来是由于我所定义的唤醒源引起的吗？如果不是，</rich_text><rich_text foreground="#969696">android</rich_text><rich_text>将不予理会，过段时间没有</rich_text><rich_text foreground="#969696">wakelock</rich_text><rich_text>锁，系统会再次走</rich_text><rich_text foreground="#969696">linux</rich_text><rich_text>的休眠路线进入休眠。如果是，那么</rich_text><rich_text foreground="#969696">android</rich_text><rich_text>上层就会写一个</rich_text><rich_text foreground="#969696">on</rich_text><rich_text>的指令到</rich_text><rich_text foreground="#969696">state</rich_text><rich_text>接口中，同样是会调用到函数</rich_text><rich_text foreground="#969696">request_suspend_state() </rich_text><rich_text foreground="#333399">-&gt;</rich_text><rich_text foreground="#969696"> </rich_text><rich_text>准备执行</rich_text><rich_text foreground="#969696">late resume </rich_text><rich_text foreground="#333399">-&gt; </rich_text><rich_text>开始执行</rich_text><rich_text foreground="#969696">late resume</rich_text><rich_text>，之后整个系统就这样被唤醒了。
       if (Earlysuspend_debug_mask &amp; DEBUG_USER_STATE) {
              struct timespec ts;        </rich_text><rich_text foreground="#969696">// </rich_text><rich_text>打印出</rich_text><rich_text foreground="#969696">debug</rich_text><rich_text>信息
              struct rtc_time tm;
              getnstimeofday(&amp;ts);
              rtc_time_to_tm(ts.tv_sec, &amp;tm);
              pr_info(&quot;[request_suspend_state]: %s (%d-&gt;%d) at %lld &quot;
                     &quot;(%d-%02d-%02d %02d:%02d:%02d.%09lu UTC)/n&quot;,
                     new_state != PM_SUSPEND_ON ? &quot;sleep&quot; : &quot;wakeup&quot;,
                     requested_suspend_state, new_state,
                     ktime_to_ns(ktime_get()),
                     tm.tm_year + 1900, tm.tm_mon + 1, tm.tm_mday,
                     tm.tm_hour, tm.tm_min, tm.tm_sec, ts.tv_nsec);
       }
</rich_text><rich_text foreground="#969696">// eg: [request_suspend_state]: sleep (0-&gt;3) at 97985478409 (2010-01-03 09:52:59.637902305 UTC)</rich_text><rich_text>，</rich_text><rich_text foreground="#969696"> </rich_text><rich_text>这里对时间的获取和处理，在其他地方可以参考
       </rich_text><rich_text foreground="#969696">// ready to enter earlysuspend</rich_text><rich_text>
       if (!old_sleep &amp;&amp; new_state != PM_SUSPEND_ON) { </rich_text><rich_text foreground="#969696">// susepnd</rich_text><rich_text>会进入这里
              state |= SUSPEND_REQUESTED;    </rich_text><rich_text foreground="#969696">// state = 1</rich_text><rich_text>
              pr_info(&quot;[request_suspend_state]: 
sys_sync_work_queue early_sys_sync_work/n&quot;);
              queue_work(sys_sync_work_queue, &amp;early_sys_sync_work);
              pr_info(&quot;[request_suspend_state]: suspend_work_queue early_suspend_work/n&quot;);
              queue_work(suspend_work_queue, &amp;early_suspend_work);
</rich_text><rich_text foreground="#969696">// </rich_text><rich_text>在</rich_text><rich_text foreground="#969696">wakelocks_init()</rich_text><rich_text>函数</rich_text><rich_text foreground="#969696">(wakelock.c)</rich_text><rich_text>中会创建这两个工作队列和工作者线程来专门负责处理</rich_text><rich_text foreground="#969696">sys_sync</rich_text><rich_text>和</rich_text><rich_text foreground="#969696">early suspend</rich_text><rich_text>的工作。关于工作队列的详情参考我工作队列的文章
       }
       </rich_text><rich_text foreground="#969696">// ready to enter lateresume</rich_text><rich_text>
       else if (old_sleep &amp;&amp; new_state == PM_SUSPEND_ON) {
              state &amp;= ~SUSPEND_REQUESTED; // state = 2
              wake_lock(&amp;main_wake_lock);         // 对main wakelock上锁
              pr_info(&quot;[request_suspend_state]: suspend_work_queue late_resume_work/n&quot; );
              if (queue_work(suspend_work_queue, &amp;late_resume_work)) { 
// 提交late resume的工作项
            //
            //  In order to synchronize the backlight turn on timing,
            //  block the thread and wait for fb driver late_resume()
                  //  callback function is completed
                  //
            wait_for_completion(&amp;fb_drv_ready);      
</rich_text><rich_text foreground="#969696">// </rich_text><rich_text>等待完成量</rich_text><rich_text foreground="#969696">fb_drv_ready</rich_text><rich_text>，他会在</rich_text><rich_text foreground="#969696">late resume</rich_text><rich_text>结束之后完成
        }
       }
       requested_suspend_state = new_state;      
</rich_text><rich_text foreground="#969696">// </rich_text><rich_text>存储本次休眠或者是唤醒的状态，供下次休眠或者唤醒使用
       spin_unlock_irqrestore(&amp;state_lock, irqflags);
}
 
在系统suspend的时候提交的两个工作项会陆续被执行到，那么下面就来看一下执行early suspend的关键函数。
static void early_sys_sync(struct work_struct *work)
{
       wake_lock(&amp;sys_sync_wake_lock);
       printk(&quot;[sys_sync work] start/n&quot;);
       sys_sync();    </rich_text><rich_text foreground="#969696">// </rich_text><rich_text>同步文件系统
       printk(&quot;[sys_sync wrok] done/n&quot;);
       wake_unlock(&amp;sys_sync_wake_lock);
}
 
static void early_suspend(struct work_struct *work)
{
       struct early_suspend *pos;
       unsigned long irqflags;
       int abort = 0;
 
       mutex_lock(&amp;early_suspend_lock);
       spin_lock_irqsave(&amp;state_lock, irqflags);
       if (state == SUSPEND_REQUESTED)
              state |= SUSPENDED; </rich_text><rich_text foreground="#969696">// state = 3</rich_text><rich_text>
       else
              abort = 1;
       spin_unlock_irqrestore(&amp;state_lock, irqflags);
 
       if (abort) {     </rich_text><rich_text foreground="#969696">// suspend </rich_text><rich_text>中止退出
              if (Earlysuspend_debug_mask &amp; DEBUG_SUSPEND)
                     pr_info(&quot;[early_suspend]: abort, state %d/n&quot;, state);
              mutex_unlock(&amp;early_suspend_lock);
              goto abort;
       }
 
       if (Earlysuspend_debug_mask &amp; DEBUG_SUSPEND)
              pr_info(&quot;[early_suspend]: call handlers/n&quot;);
       list_for_each_entry(pos, &amp;early_suspend_handlers, link) {
              if (pos-&gt;suspend != NULL)
                     pos-&gt;suspend(pos);
       }
// 函数register_early_suspend()会将每一个early suspend项以优先级大小注册到链表early_suspend_handlers中，这里就是一次取出，然后执行对应的early suspend回调函数
       mutex_unlock(&amp;early_suspend_lock);
 
       // Remove sys_sync from early_suspend, 
       // and use work queue to complete sys_sync
 
abort:
       spin_lock_irqsave(&amp;state_lock, irqflags);
       if (state == SUSPEND_REQUESTED_AND_SUSPENDED)
       {
              pr_info(&quot;[early_suspend]: wake_unlock(main)/n&quot;);
              wake_unlock(&amp;main_wake_lock);
</rich_text><rich_text foreground="#969696">// main wakelock </rich_text><rich_text>解锁。看到这里，好像系统执行了</rich_text><rich_text foreground="#969696">early suspend</rich_text><rich_text>之后就没有往下执行标准</rich_text><rich_text foreground="#969696">linux</rich_text><rich_text>的</rich_text><rich_text foreground="#969696">suspend</rich_text><rich_text>流程了，其实不是，</rich_text><rich_text foreground="#969696">android</rich_text><rich_text>的做法是，不是你执行完了</rich_text><rich_text foreground="#969696">early suspend  </rich_text><rich_text>的回调就可以马上走标准</rich_text><rich_text foreground="#969696">linux</rich_text><rich_text>的</rich_text><rich_text foreground="#969696">suspend</rich_text><rich_text>流程，而是会检查还有没有</rich_text><rich_text foreground="#969696">wakelock</rich_text><rich_text>被持有，如果所有</rich_text><rich_text foreground="#969696">wakelock</rich_text><rich_text>全是解锁状态，那么就会执行标准</rich_text><rich_text foreground="#969696">linux</rich_text><rich_text>的</rich_text><rich_text foreground="#969696">suspend</rich_text><rich_text>步骤。
}
       spin_unlock_irqrestore(&amp;state_lock, irqflags);
}
 
static void late_resume(struct work_struct *work)
{
       struct early_suspend *pos;
       unsigned long irqflags;
       int abort = 0;
    int completed = 0;
 
       mutex_lock(&amp;early_suspend_lock);
       spin_lock_irqsave(&amp;state_lock, irqflags);
 
    // return back from suspend
       if (state == SUSPENDED)
              state &amp;= ~SUSPENDED;    </rich_text><rich_text foreground="#969696">// state = 0</rich_text><rich_text>
       else
              abort = 1;
       spin_unlock_irqrestore(&amp;state_lock, irqflags);
 
       if (abort) {
              if (Earlysuspend_debug_mask &amp; DEBUG_SUSPEND)
                     pr_info(&quot;[late_resume]: abort, state %d/n&quot;, state);
              goto abort;
       }
       if (Earlysuspend_debug_mask &amp; DEBUG_SUSPEND)
              pr_info(&quot;[late_resume]: call handlers/n&quot;);
       list_for_each_entry_reverse(pos, &amp;early_suspend_handlers, link)
    {
        if (!completed &amp;&amp; pos-&gt;level &lt; EARLY_SUSPEND_LEVEL_DISABLE_FB) {
            complete(&amp;fb_drv_ready);
            completed = 1;
        }
              if (pos-&gt;resume != NULL)
                     pos-&gt;resume(pos);
    }
// 以和early suspend的逆序执行链表early_suspend_handlers上的late resume回调函数
if (Earlysuspend_debug_mask &amp; DEBUG_SUSPEND)
              pr_info(&quot;[late_resume]: done/n&quot;);
abort:
    if (!completed)
        complete(&amp;fb_drv_ready);   // 设置完成量ok
     mutex_unlock(&amp;early_suspend_lock);
}
 
</rich_text></node><node name="(二)" prog_lang="custom-colors" readonly="False" tags="" unique_id="22"><rich_text scale="h2" weight="heavy">三、kernel层源码解析 - wakelock的重要地位</rich_text><rich_text>
wakelock在android的休眠唤醒机制中扮演着及其重要的角色，主要源码位于文件:kernel/kernel/power/wakelock.c，kernel/include/linux/wakelock.h中。
 
wakelocks_init()函数所做的工作是整个wakelock可以工作起来的基础，所有这里先说说这个函数。
static int __init wakelocks_init(void)
{
       int ret;
       int i;
 
       for (i = 0; i &lt; ARRAY_SIZE(active_wake_locks); i++)
              INIT_LIST_HEAD(&amp;active_wake_locks[i]);
       // 初始化active_wake_locks数组中的两个类型锁链表: WAKE_LOCK_SUSPEND,WAKE_LOCK_IDLE
 
#ifdef CONFIG_WAKELOCK_STAT        // defined
       wake_lock_init(&amp;deleted_wake_locks, WAKE_LOCK_SUSPEND,
                     &quot;deleted_wake_locks&quot;);
       // 初始化wakelock deleted_wake_locks，同时将其加入到非活动锁链表中
#endif
       wake_lock_init(&amp;main_wake_lock, WAKE_LOCK_SUSPEND, &quot;main&quot;);
       wake_lock_init(&amp;sys_sync_wake_lock, WAKE_LOCK_SUSPEND, &quot;sys_sync&quot;);
       wake_lock(&amp;main_wake_lock);
       wake_lock_init(&amp;unknown_wakeup, WAKE_LOCK_SUSPEND, &quot;unknown_wakeups&quot;);
       // 初始化wakelock: main, sys_sync, unknown_wakeups, 同时将其加入到非活动锁链表中
       // 给 main_wake_lock 加锁
       
       ret = platform_device_register(&amp;power_device);
       if (ret) {
              pr_err(&quot;[wakelocks_init]: platform_device_register failed/n&quot;);
              goto err_platform_device_register;
       }
       ret = platform_driver_register(&amp;power_driver);
       if (ret) {
              pr_err(&quot;[wakelocks_init]: platform_driver_register failed/n&quot;);
              goto err_platform_driver_register;
       }
 
       // 新建工作队列和工作者内核线程: sys_sync_work_queue, fs_sync
       //                                                      suspend_work_queue, suspend
       sys_sync_work_queue = create_singlethread_workqueue(&quot;fs_sync&quot;);
       if (sys_sync_work_queue == NULL) {
              pr_err(&quot;[wakelocks_init] fs_sync workqueue create failed/n&quot;);
       }
 
       suspend_work_queue = create_singlethread_workqueue(&quot;suspend&quot;);
       if (suspend_work_queue == NULL) {
              ret = -ENOMEM;
              goto err_suspend_work_queue;
       }
 
#ifdef CONFIG_WAKELOCK_STAT
       proc_create(&quot;wakelocks&quot;, S_IRUGO, NULL, &amp;wakelock_stats_fops);
       // 创建proc接口
#endif
 
       return 0;
 
err_suspend_work_queue:
       platform_driver_unregister(&amp;power_driver);
err_platform_driver_register:
       platform_device_unregister(&amp;power_device);
err_platform_device_register:
       wake_lock_destroy(&amp;unknown_wakeup);
       wake_lock_destroy(&amp;main_wake_lock);
#ifdef CONFIG_WAKELOCK_STAT
       wake_lock_destroy(&amp;deleted_wake_locks);
#endif
       return ret;
}
 
可以看到该初始化函数中新建了几个wakelock: deleted_wake_locks、main_wake_lock、sys_sync_wake_lock、unknown_wakeup，他们全部都是WAKE_LOCK_SUSPEND类型的wakelock，说到这里不得不提到wakelock的两种类型了：
</rich_text><rich_text scale="h3" weight="heavy">1.WAKE_LOCK_SUSPEND – 这种锁如果被某个task持有，那么系统将无法进入休眠。
2.WAKE_LOCK_IDLE – 这种锁不会影响到系统进入休眠，但是如果这种锁被持有，那么系统将无法进入idle空闲模式。</rich_text><rich_text>
 
不过常用的所类型还是WAKE_LOCK_SUSPEND，包括userwakelock.c提供给用户空间的新建wakelock的接口，都是建立的第一种锁。另外系统为了分开管理这两种不同类型的锁，建立了两个链表来统一链接不同类型的锁：active_wake_locks[],这个是具有两个链表头的数组，元素0是挂接WAKE_LOCK_SUSPEND类型的锁，而元素1就是挂接WAKE_LOCK_IDLE类型的wakelock了。
 
       接着上面说，这个初始化函数新建这些锁之后，直接将主锁(main_wake_lock)给上锁了,其余都是非锁状态。新建wakelock使用函数wake_lock_init()，该函数设置锁的名字，类型，最后将新建的锁挂接到一个专门链接这些非锁状态的链表inactive_locks上(新建的wakelock初期都是出于非锁状态的，除非显示调用函数wake_lock来上锁)。接着如果使用函数wake_lock()来给特定的wakelock上锁的话，会将该锁从链表inactive_locks上移动到对应类型的专用链表上active_wake_locks[type]上。
       
       wakelock有两种形式的锁：超时锁和非超时锁，这两种形式的锁都是使用函数wake_lock_init()来初始化，只是在上锁的时候会有一点点差别，超时锁使用函数wake_lock_timeout(),而非超时锁使用函数wake_lock(), 这个两个函数会最终调用到同一个函数wake_lock_internal(),该函数依靠传入的不同参数来选择不同的路径来工作。值得注意的是，非超时锁必须手工解锁，否则系统永远不能进入睡眠。下面是wake_lock_internal()函数的片段：
       if (!(lock-&gt;flags &amp; WAKE_LOCK_ACTIVE)) 
              lock-&gt;flags |= WAKE_LOCK_ACTIVE;// wakelock状态为inactive，则更改为active
       …
       if (has_timeout) { // wake_lock_timeout()会传入1
              if (wakelock_debug_mask &amp; DEBUG_WAKE_LOCK)
                     pr_info(&quot;[wake_lock_internal]: %s, type %d, timeout %ld.%03lu/n&quot;,
                            lock-&gt;name, type, timeout / HZ,
                            (timeout % HZ) * MSEC_PER_SEC / HZ);
              lock-&gt;expires = jiffies + timeout;       // 设置超时时间
              lock-&gt;flags |= WAKE_LOCK_AUTO_EXPIRE;       // 超时锁标志
              list_add_tail(&amp;lock-&gt;link, &amp;active_wake_locks[type]);
       } 
    // acquire a non-timeout wakelock 添加一个非超时锁
       else {      // wake_lock ()会传入0
              if (wakelock_debug_mask &amp; DEBUG_WAKE_LOCK)
                     pr_info(&quot;[wake_lock_internal]: %s, type %d/n&quot;, lock-&gt;name, type);
              lock-&gt;expires = LONG_MAX;    // 设置成超时时间最大值
              lock-&gt;flags &amp;= ~WAKE_LOCK_AUTO_EXPIRE; // 非超时锁标志
              list_add(&amp;lock-&gt;link, &amp;active_wake_locks[type]);
              // 将刚刚设置的非超时锁加到对应类型的活动锁链表中
       }
       
       解锁的时候，这两种形式的锁所使用函数都是一样了：wake_unlock()，该函数中会首先作如下操作：
       lock-&gt;flags &amp;= ~(WAKE_LOCK_ACTIVE | WAKE_LOCK_AUTO_EXPIRE);
       // 清除锁活动标志和自动超时标志
       list_del(&amp;lock-&gt;link);   // 从锁对应的活动链表上摘除
       list_add(&amp;lock-&gt;link, &amp;inactive_locks);    
// 将unlock的锁挂接到非活动链表inactive_locks上
 
前面已经说了只有类型为WAKE_LOCK_SUSPEND的wakelock被上锁才会阻止系统进入suspend，那么也就是说只要链表active_wake_locks[WAKE_LOCK_SUSPEND]为NULL，那么系统就可以执行suspend的流程了。Android对linux的改造，让其可以在三种情况下进入linux的标准suspend的流程：

</rich_text><rich_text scale="h3" weight="heavy">1. wake_unlock()，</rich_text><rich_text>
    这个应该是最容易想到的，只要系统有对WAKE_LOCK_SUSPEND类型的wakelock解锁的动作，都有可能会进入suspend流程开始休眠，为什么是有可能呢？因为可能还有超时锁没有被超时解锁。下面看一下代码片段：
void wake_unlock(struct wake_lock *lock)
{
       …
       if (type == WAKE_LOCK_SUSPEND) // 貌似只在处理这个类型的wakelock
    {
              long has_lock = has_wake_lock_locked(type);
              // 这个函数蛮重要，它来检查type类型的链表上是否还有锁被上锁了。
        // 其返回值如果是0，说明没有该类型的锁被持有了；返回非0表明就是这个类型的活动链表上还存在超时锁但是没有非超时锁了，这个返回值就是当前时间距离最后超时的锁超时时间的jiffies值；如果返回-1，那表明还有该类型的非超时锁被持有。
        if (wakelock_debug_mask &amp; DEBUG_WAKE_LOCK)
            pr_info(&quot;[wake_unlock]: has_lock = 0x%x/n&quot; , has_lock);        
              if (has_lock &gt; 0) {
                     if (wakelock_debug_mask &amp; DEBUG_EXPIRE)
                            pr_info(&quot;[wake_unlock]: %s, start expire timer, &quot;
                                   &quot;%ld/n&quot;, lock-&gt;name, has_lock);
                     mod_timer(&amp;expire_timer, jiffies + has_lock);
// 修改定时器的超时值并add该定时器
              } 
              else // 已经没有超时锁了
              {
                     if (del_timer(&amp;expire_timer))            // 删除定时器
                            if (wakelock_debug_mask &amp; DEBUG_EXPIRE)
                                   pr_info(&quot;[wake_unlock]: %s, stop expire &quot;
                                          &quot;timer/n&quot;, lock-&gt;name);
                     if (has_lock == 0) 
// !=0,表明还有该类型的非超时锁被持有，现在还不能进入suspend
                     {
                      pr_info(&quot;[wake_unlock]: (%s) suspend_work_queue suspend_work/n&quot; , lock-&gt;name);
                            queue_work(suspend_work_queue, &amp;suspend_work);
                            // 提交suspend的工作项，开始执行标准linux的suspend流程
                     }     
              }
              …
       }
       spin_unlock_irqrestore(&amp;list_lock, irqflags);
}
 
</rich_text><rich_text scale="h3" weight="heavy">2.  超时锁超时之后，定时器的回调函数会执行会查看是否有其他的wakelock, 如果没有, 就在这里让系统进入睡眠。</rich_text><rich_text>
static void expire_wake_locks(unsigned long data)
{
       long has_lock;
       unsigned long irqflags;
       if (debug_mask &amp; DEBUG_EXPIRE)
              pr_info(&quot;expire_wake_locks: start/n&quot;);
       spin_lock_irqsave(&amp;list_lock, irqflags);
       if (debug_mask &amp; DEBUG_SUSPEND)
              print_active_locks(WAKE_LOCK_SUSPEND);
       has_lock = has_wake_lock_locked(WAKE_LOCK_SUSPEND);
       if (debug_mask &amp; DEBUG_EXPIRE)
              pr_info(&quot;expire_wake_locks: done, has_lock %ld/n&quot;, has_lock);
       if (has_lock == 0)
// 如果没有SUSPEND类型的wakelock处于active，那么将调用suspend
              queue_work(suspend_work_queue, &amp;suspend_work);
       spin_unlock_irqrestore(&amp;list_lock, irqflags);
}
       
static DEFINE_TIMER(expire_timer, expire_wake_locks, 0, 0);
列出以下一个重要的函数源码：
static long has_wake_lock_locked(int type)
{
       struct wake_lock *lock, *n;
       long max_timeout = 0;
 
       BUG_ON(type &gt;= WAKE_LOCK_TYPE_COUNT);
       list_for_each_entry_safe(lock, n, &amp;active_wake_locks[type], link) {
              if (lock-&gt;flags &amp; WAKE_LOCK_AUTO_EXPIRE) {
                     long timeout = lock-&gt;expires - jiffies;
                     if (timeout &lt;= 0)
                            expire_wake_lock(lock);
                     else if (timeout &gt; max_timeout)
                            max_timeout = timeout;
              } else
                     return -1;
       }
       return max_timeout;
}
 
</rich_text><rich_text scale="h3" weight="heavy">3. 这个可能有人觉得匪夷所思，就是在wake_lock{_ _timeout}()函数中，调用了内部函数wake_lock_internal()。</rich_text><rich_text>
    这里只有在对超时锁上锁的时候才有可能进入休眠，如果对一个费超时锁上锁的话，那么就没有必要去检查活动链表了。
static void wake_lock_internal(
       struct wake_lock *lock, long timeout, int has_timeout)
{
…
if (type == WAKE_LOCK_SUSPEND) {
              current_event_num++;
#ifdef CONFIG_WAKELOCK_STAT
              if (lock == &amp;main_wake_lock)
                     update_sleep_wait_stats_locked(1);
              else if (!wake_lock_active(&amp;main_wake_lock))
                     update_sleep_wait_stats_locked(0);
#endif
              if (has_timeout)   // 超时锁的时候传进来的是1
                     expire_in = has_wake_lock_locked(type);
                     // 检查当前锁类型链表上是否还有锁处于active的状态，无返回0
              else
                     expire_in = -1; 
// 如果是非超时锁的话，这里直接赋值-1，省去了活动链表检查步骤了
              if (expire_in &gt; 0) {
                     if (debug_mask &amp; DEBUG_EXPIRE)
                            pr_info(&quot;wake_lock: %s, start expire timer, &quot;
                                   &quot;%ld/n&quot;, lock-&gt;name, expire_in);
                     // modify the time wakelock is expired
                     mod_timer(&amp;expire_timer, jiffies + expire_in);
              } else {
                     if (del_timer(&amp;expire_timer))
                            if (debug_mask &amp; DEBUG_EXPIRE)
                                   pr_info(&quot;wake_lock: %s, stop expire timer/n&quot;,
                                          lock-&gt;name);
                     if (expire_in == 0) // 没有锁处于active状态后，准备调用suspend了
                     {
                      pr_info(&quot;[wake_lock]: suspend_work_queue suspend_work/n &quot;);
                            queue_work(suspend_work_queue, &amp;suspend_work);
                     }
              }
       }
       spin_unlock_irqrestore(&amp;list_lock, irqflags);
}
 
下面是suspend的工作项，经过上面三种情况的检查，ok之后将会提交该工作项给工作队列suspend_work_queue，如下：
static void suspend(struct work_struct *work)
{
       int ret;
       int entry_event_num;
 
    // there are still some wakelock
       if (has_wake_lock(WAKE_LOCK_SUSPEND)) {
              if (wakelock_debug_mask &amp; DEBUG_SUSPEND)
                     pr_info(&quot;[suspend]: abort suspend/n&quot;);
              return;
       }
 
       entry_event_num = current_event_num;
       sys_sync();
       if (debug_mask &amp; DEBUG_SUSPEND)
              pr_info(&quot;suspend: enter suspend/n&quot;);
       ret = pm_suspend(requested_suspend_state);
       // requested_suspend_state这个全局变量在函数request_suspend_state()中被设置，也就是执行了eraly suspend或者late resume之后，主要是为suspend保留请求的省电状态。
       if (debug_mask &amp; DEBUG_EXIT_SUSPEND) {
              struct timespec ts;
              struct rtc_time tm;
              getnstimeofday(&amp;ts);
              rtc_time_to_tm(ts.tv_sec, &amp;tm);
              pr_info(&quot;suspend: exit suspend, ret = %d &quot;
                     &quot;(%d-%02d-%02d %02d:%02d:%02d.%09lu UTC)/n&quot;, ret,
                     tm.tm_year + 1900, tm.tm_mon + 1, tm.tm_mday,
                     tm.tm_hour, tm.tm_min, tm.tm_sec, ts.tv_nsec);
       }
       if (current_event_num == entry_event_num) {
              if (debug_mask &amp; DEBUG_SUSPEND)
                     pr_info(&quot;suspend: pm_suspend returned with no event/n&quot;);
              wake_lock_timeout(&amp;unknown_wakeup, HZ / 2);
       }
}
static DECLARE_WORK(suspend_work, suspend);
 
@kernel/kernel/power/suspend.c
int pm_suspend(suspend_state_t state)
{
       if (state &gt; PM_SUSPEND_ON &amp;&amp; state &lt;= PM_SUSPEND_MAX)
              return enter_state(state);
              // 标准linux的suspend流程函数
return -EINVAL;
}
EXPORT_SYMBOL(pm_suspend);
 
Wakelock的机制被文件userwakelock.c中的code封装成了sys的接口sys/power/wake_lock和sys/power/wake_unlock文件，那么上层如果需要新建wakelock或者注销wakelock，或者是解锁wakelock，都是操作这两个sys接口文件。
</rich_text></node><node name="(三)" prog_lang="custom-colors" readonly="False" tags="" unique_id="23"><rich_text scale="h2" weight="heavy">四、android层源码解析</rich_text><rich_text>
    在linux之上经过android的软件堆层层封装,最终在上层的java应用程序中使用。休眠唤醒也是从最上层发出的命令，然后一层一层地将参数解析，往最底层传，最后走上标准linux的休眠唤醒之路。
    这一部分将会初略分析休眠唤醒机制上linux之上所走的路线。
       
    在linux之上，存在一个hal层，专门做和linux内核设备打交道的事情，这里也不例外。休眠唤醒机制的hal层源码位于：

@hardware/libhardware_legacy/power/power.c
该文件源码比较简单，下面列举重点片段：
enum {
    ACQUIRE_PARTIAL_WAKE_LOCK = 0,
    RELEASE_WAKE_LOCK,
    REQUEST_STATE,
    OUR_FD_COUNT
};
const char * const NEW_PATHS[] = {
    &quot;/sys/power/wake_lock&quot;,
    &quot;/sys/power/wake_unlock&quot;,
    &quot;/sys/power/state&quot;
};
static int g_initialized = 0;
static int g_fds[OUR_FD_COUNT];
static const char *off_state = &quot;mem&quot;;
static const char *on_state = &quot;on&quot;;
 
static int  open_file_descriptors(const char * const paths[])
{
    int i;
    for (i=0; i&lt;OUR_FD_COUNT; i++) {
        int fd = open(paths[i], O_RDWR);
        if (fd &lt; 0) {
            fprintf(stderr, &quot;fatal error opening /&quot;%s/&quot;/n&quot;, paths[i]);
            g_error = errno;
            return -1;
        }
        g_fds[i] = fd;
    }
 
    g_error = 0;
    return 0;
}
 
static inline void  initialize_fds(void)
{
    if (g_initialized == 0) {
        if(open_file_descriptors(NEW_PATHS) &lt; 0) {
            open_file_descriptors(OLD_PATHS);
            on_state = &quot;wake&quot;;
            off_state = &quot;standby&quot;;
        }
        g_initialized = 1;
    }
}
 
int  acquire_wake_lock(int lock, const char* id)
{
    initialize_fds();
    if (g_error) return g_error;
    int fd;
 
    if (lock == PARTIAL_WAKE_LOCK) {   // 上层传下来的lock type
        fd = g_fds[ACQUIRE_PARTIAL_WAKE_LOCK];
    }
    else {
        return EINVAL;
    }
 
    return write(fd, id, strlen(id));
}
 
int  release_wake_lock(const char* id)
{
    initialize_fds();
 
//    LOGI(&quot;release_wake_lock id='%s'/n&quot;, id);
 
    if (g_error) return g_error;
 
    ssize_t len = write(g_fds[RELEASE_WAKE_LOCK], id, strlen(id));
    return len &gt;= 0;
}
 
int set_screen_state(int on)
{
    QEMU_FALLBACK(set_screen_state(on));
    LOGI(&quot;*** set_screen_state %d&quot;, on);
 
    initialize_fds();
    if (g_error) return g_error;
 
    char buf[32];
    int len;
    if(on)
        len = sprintf(buf, on_state);
    else
        len = sprintf(buf, off_state);
    len = write(g_fds[REQUEST_STATE], buf, len);
    if(len &lt; 0) {
        LOGE(&quot;Failed setting last user activity: g_error=%d/n&quot;, g_error);
    }
    return 0;
}
 
Hal层的代码在jni层中被使用，源码位于：frameworks/base/core/jni/android_os_Power.cpp，代码片段如下：
static void  acquireWakeLock(JNIEnv *env, jobject clazz, jint lock, jstring idObj)
{
    if (idObj == NULL) {
        throw_NullPointerException(env, &quot;id is null&quot;);
        return ;
    }
 
    const char *id = env-&gt;GetStringUTFChars(idObj, NULL);
 
    acquire_wake_lock(lock, id);
 
    env-&gt;ReleaseStringUTFChars(idObj, id);
}// 对wakelock加锁函数
static void releaseWakeLock(JNIEnv *env, jobject clazz, jstring idObj)
{
    if (idObj == NULL) {
        throw_NullPointerException(env, &quot;id is null&quot;);
        return ;
    }
 
    const char *id = env-&gt;GetStringUTFChars(idObj, NULL);
 
    release_wake_lock(id);
 
    env-&gt;ReleaseStringUTFChars(idObj, id);
 
}// 对wakelock解锁函数
static int setScreenState(JNIEnv *env, jobject clazz, jboolean on)
{
    return set_screen_state(on);
}// 休眠唤醒的函数
 
Jni的方法需要注册到上层才可以使用，同时也需要在上层的对应java类中声明了native才可以使用。那么这里的方法在java中对应的声明在哪里呢？frameworks/base/core/java/android/os/Power.java，该文件定义一个java类，如下：
public class Power
{
    // can't instantiate this class
    private Power()
    {
    }
       
    /**
     * Wake lock that ensures that the CPU is running.  The screen might
     * not be on.
     */
    public static final int PARTIAL_WAKE_LOCK = 1;
       
    /**
     * Wake lock that ensures that the screen is on.
     */
    public static final int FULL_WAKE_LOCK = 2;
       
    public static native void acquireWakeLock(int lock, String id);
    public static native void releaseWakeLock(String id);
       … 
     /**
     * Turn the screen on or off
     *
     * @param on Whether you want the screen on or off
     */
    public static native int setScreenState(boolean on);
       
    …
}
              
       声明的jni接口应该是被java server在使用，这里就是专门的电源管理服务：PowerManagerService使用，具体源码位置在：frameworks/base/services/java/com/android/server/PowerManagerService.java。android在最上层还提供了现场的android.os.PowerManager类
(frameworks/base/core/java/android/os/PowerManager.java)来供app使用，PowerManager类会调用java服务PowerManagerService的方法来完成与wakelock相关的工作。
       
@ frameworks/base/core/java/android/os/PowerManager.java
类PowerManager中内嵌了一个WakeLock类，另外还定义了wakelock的类型，下面是代码片段：
public class PowerManager
{
           private static final String TAG = &quot;PowerManager&quot;;
       …
        /**
     * Wake lock that ensures that the CPU is running.  The screen might
     * not be on.
     */
    public static final int PARTIAL_WAKE_LOCK = WAKE_BIT_CPU_STRONG;
 
    /**
     * Wake lock that ensures that the screen and keyboard are on at
     * full brightness.
     */
    public static final int FULL_WAKE_LOCK = WAKE_BIT_CPU_WEAK | WAKE_BIT_SCREEN_BRIGHT | WAKE_BIT_KEYBOARD_BRIGHT;
       
    /**
     * Wake lock that ensures that the screen is on at full brightness;
     * the keyboard backlight will be allowed to go off.
     */
    public static final int SCREEN_BRIGHT_WAKE_LOCK = WAKE_BIT_CPU_WEAK | WAKE_BIT_SCREEN_BRIGHT;
 
    /**
     * Wake lock that ensures that the screen is on (but may be dimmed);
     * the keyboard backlight will be allowed to go off.
     */
    public static final int SCREEN_DIM_WAKE_LOCK = WAKE_BIT_CPU_WEAK | WAKE_BIT_SCREEN_DIM;
 
    /**
     * Wake lock that turns the screen off when the proximity sensor activates.
     * Since not all devices have proximity sensors, use
     * {@link #getSupportedWakeLockFlags() getSupportedWakeLockFlags()} to determine if
     * this wake lock mode is supported.
     *
     * {@hide}
     */
    public static final int PROXIMITY_SCREEN_OFF_WAKE_LOCK 
        = WAKE_BIT_PROXIMITY_SCREEN_OFF;
       …
    public class WakeLock
    {
       …
        WakeLock(int flags, String tag)
        {
            switch (flags &amp; LOCK_MASK) {
            case PARTIAL_WAKE_LOCK:
            case SCREEN_DIM_WAKE_LOCK:
            case SCREEN_BRIGHT_WAKE_LOCK:
            case FULL_WAKE_LOCK:
            case PROXIMITY_SCREEN_OFF_WAKE_LOCK:
                break;
            default:
                throw new IllegalArgumentException();
            }
 
            mFlags = flags;
            mTag = tag;
            mToken = new Binder();
        }
       public void acquire()
        {
            synchronized (mToken) {
                if (!mRefCounted || mCount++ == 0) {
                    try {
                        mService.acquireWakeLock(mFlags, mToken, mTag);
                    } catch (RemoteException e) {
                    }
                    mHeld = true;
                }
            }
        }
        public void release(int flags)
        {
            synchronized (mToken) {
                if (!mRefCounted || --mCount == 0) {
                    try {
                        mService.releaseWakeLock(mToken, flags);
                    } catch (RemoteException e) {
                    }
                    mHeld = false;
                }
                if (mCount &lt; 0) {
                    throw new RuntimeException(&quot;WakeLock under-locked &quot; + mTag);
                }
            }
        }
    …
    }
    …
    public WakeLock newWakeLock(int flags, String tag)
    {
        if (tag == null) {
            throw new NullPointerException(&quot;tag is 
                null in PowerManager.newWakeLock&quot;);
        }
        return new WakeLock(flags, tag);
    }
    public void goToSleep(long time) 
    {
        try {
            mService.goToSleep(time);
        } catch (RemoteException e) {
        }
    }
    …
    public PowerManager(IPowerManager service, Handler handler)
    {
        mService = service;
        mHandler = handler;
    }
 
    IPowerManager mService;
    Handler mHandler;
}

应用实例：
PowerManager pm = (PowerManager)getSystemService(Context.POWER_SERVICE);
PowerManager.WakeLock wl = 
pm.newWakeLock(PowerManager.SCREEN_DIM_WAKE_LOCK, &quot;Tag&quot;);
wl.acquire();  //申请锁这个里面会调用PowerManagerService里面acquireWakeLock()
…
wl.release(); //释放锁，显示的释放，如果申请的锁不在此释放系统就不会进入休眠。
 
接下来就会调用到java服务PowerManagerService中：
public void acquireWakeLock(int flags, IBinder lock, String tag) {
        int uid = Binder.getCallingUid();
        if (uid != Process.myUid()) {
          mContext.enforceCallingOrSelfPermission(android.Manifest.permission.WAKE_LOCK, null);
        }
        long ident = Binder.clearCallingIdentity();
        try {
            synchronized (mLocks) {
                acquireWakeLockLocked(flags, lock, uid, tag);       // 内部方法
            }
        } finally {
            Binder.restoreCallingIdentity(ident);
        }
}
 
acquireWakeLockLocked(flags, lock, uid, tag)会调用函数power类的方法：
Power.acquireWakeLock(Power.PARTIAL_WAKE_LOCK,PARTIAL_NAME)。
 
public void releaseWakeLock(IBinder lock, int flags) {
        int uid = Binder.getCallingUid();
        if (uid != Process.myUid()) {
            mContext.enforceCallingOrSelfPermission(android.Manifest.permission.WAKE_LOCK, null);
        }
 
        synchronized (mLocks) {
            releaseWakeLockLocked(lock, flags, false);
        }
}
releaseWakeLockLocked(lock, flags, false)函数会调用power类的方法：
       Power.releaseWakeLock(PARTIAL_NAME);
 
上层休眠唤醒都是调用PowerManagerService类的方法：
goToSleep()
       à goToSleepWithReason()
              à goToSleepLocked()
                     à setPowerState()
                            à setScreenStateLocked()
                                   à Power.setScreenState()
                                          à jni方法
Android层的代码分析得不是很详细，这里只关注框架和流程。下图是网上的一个框架,可以参考一下:
</rich_text><rich_text justification="left"></rich_text><rich_text>
</rich_text><encoded_png char_offset="9735"></encoded_png></node></node><node name="suspend过程分析" prog_lang="custom-colors" readonly="False" tags="" unique_id="24"><rich_text> 前面我们分析了休眠的第一个阶段即浅度休眠，现在我们继续看休眠的第二个阶段 — 深度休眠。在深度休眠的过程中系统会首先冻结所有可以冻结的进程，然后依次挂起所有设备的电源，挂起顺序与设备注册的顺序相反，这样保证了设备之间电源的依赖性；直至最后进入省电模式，等待用户或者RTC唤醒；在唤醒过程中则会按照设备注册的顺序依次恢复每个设备的电源进入正常工作状态，解冻相关的进程，然后再进行浅度休眠的唤醒流程。
</rich_text><rich_text scale="h2" weight="heavy"> 1、深度休眠入口</rich_text><rich_text>
 根据wake_lock一节的分析我们知道driver层进入深度休眠的入口有4个，分别为expire_timer、wake_lock、 wake_lock_timeout、wake_unlock，这几个入口函数将根据相应的条件启动suspend_work里面的 pm_suspend()函数进入深度休眠流程，代码在linux/kernel/power/suspend.c中：
 
1. // 进入深度休眠流程  
2. int enter_state(suspend_state_t state)  
3. {  
4.     int error;  
5.     // 判断平台是否支持该状态  
6.     if (!valid_state(state))  
7.         return -ENODEV;  
8.   
9.     if (!mutex_trylock(&amp;pm_mutex))  
10.         return -EBUSY;  
11.     // 同步缓存  
12.     printk(KERN_INFO &quot;PM: Syncing filesystems ... &quot;);  
13.     sys_sync();  
14.     printk(&quot;done.\n&quot;);  
15.   
16.     pr_debug(&quot;PM: Preparing system for %s sleep\n&quot;, pm_states[state]);  
17.     // 做好休眠准备  
18.     error = suspend_prepare();  
19.     if (error)  
20.         goto Unlock;  
21.     // suspend_test  
22.     if (suspend_test(TEST_FREEZER))  
23.         goto Finish;  
24.   
25.     pr_debug(&quot;PM: Entering %s sleep\n&quot;, pm_states[state]);  
26.     // 设备休眠  
27.     error = suspend_devices_and_enter(state);  
28.   
29.  Finish:  
30.     pr_debug(&quot;PM: Finishing wakeup.\n&quot;);  
31.     suspend_finish();  
32.  Unlock:  
33.     mutex_unlock(&amp;pm_mutex);  
34.     return error;  
35. }  
36.   
37. int pm_suspend(suspend_state_t state)  
38. {  
39.     if (state &gt; PM_SUSPEND_ON &amp;&amp; state &lt;= PM_SUSPEND_MAX)  
40.         return enter_state(state);  
41.     return -EINVAL;  
42. }  
43. EXPORT_SYMBOL(pm_suspend);  
 在enter_state()中首先进入状态的判断，根据平台的特性判断是否支持此状态；然后再同步缓存；接着调用suspend_prepare()冻结大部分进程；然后再通过suspend_devices_and_enter()开始挂起设备。
 
</rich_text><rich_text scale="h2" weight="heavy"> 2、冻结进程</rich_text><rich_text>

1. static int suspend_prepare(void)  
2. {  
3.     int error;  
4.   
5.     if (!suspend_ops || !suspend_ops-&gt;enter)  
6.         return -EPERM;  
7.   
8.     pm_prepare_console();  
9.   
10.     // 通知进行休眠准备  
11.     error = pm_notifier_call_chain(PM_SUSPEND_PREPARE);  
12.     if (error)  
13.         goto Finish;  
14.     // 禁止usermodehelper  
15.     error = usermodehelper_disable();  
16.     if (error)  
17.         goto Finish;  
18.     // 冻结所有可以冻结的进程  
19.     error = suspend_freeze_processes();  
20.     if (!error)  
21.         return 0;  
22.   
23.     // 解冻所有进程  
24.     suspend_thaw_processes();  
25.     // 使能usermodehelper  
26.     usermodehelper_enable();  
27.  Finish:  
28.     // 通知休眠结束  
29.     pm_notifier_call_chain(PM_POST_SUSPEND);  
30.     pm_restore_console();  
31.     return error;  
32. }  
 这里有一个notifier机制后面要专门分析下。
 
</rich_text><rich_text scale="h2" weight="heavy"> 3、挂起设备</rich_text><rich_text>
1. int suspend_devices_and_enter(suspend_state_t state)  
2. {  
3.     int error;  
4.   
5.     if (!suspend_ops)  
6.         return -ENOSYS;  
7.     // 处理器的休眠开始函数  
8.     if (suspend_ops-&gt;begin) {  
9.         error = suspend_ops-&gt;begin(state);  
10.         if (error)  
11.             goto Close;  
12.     }  
13.     // 休眠串口  
14.     suspend_console();  
15.     suspend_test_start();  
16.     // 设备休眠  
17.     error = dpm_suspend_start(PMSG_SUSPEND);  
18.     if (error) {  
19.         printk(KERN_ERR &quot;PM: Some devices failed to suspend\n&quot;);  
20.         goto Recover_platform;  
21.     }  
22.     suspend_test_finish(&quot;suspend devices&quot;);  
23.     if (suspend_test(TEST_DEVICES))  
24.         goto Recover_platform;  
25.     // 处理器休眠  
26.     suspend_enter(state);  
27.   
28.  Resume_devices:  
29.     suspend_test_start();  
30.     // 设备唤醒  
31.     dpm_resume_end(PMSG_RESUME);  
32.     suspend_test_finish(&quot;resume devices&quot;);  
33.     // 唤醒串口  
34.     resume_console();  
35.  Close:  
36.     // 处理器的休眠结束函数  
37.     if (suspend_ops-&gt;end)  
38.         suspend_ops-&gt;end();  
39.     return error;  
40.   
41.  Recover_platform:  
42.     if (suspend_ops-&gt;recover)  
43.         suspend_ops-&gt;recover();  
44.     goto Resume_devices;  
45. }  
可以看到设备挂起流程先从处理器自身开始，平台一般不需要做特殊的处理；接着关闭串口，然后调用dpm_suspend_start()开始挂起设备，如果成功挂起所有设备则调用suspend_enter()挂起处理器。挂起设备部分的代码在linux/driver/base/power/main.c中 
1. int dpm_suspend_start(pm_message_t state)  
2. {  
3.     int error;  
4.   
5.     might_sleep();  
6.     error = dpm_prepare(state);  
7.     if (!error)  
8.         error = dpm_suspend(state);  
9.     return error;  
10. }  
11. EXPORT_SYMBOL_GPL(dpm_suspend_start);  
挂起设备分为2个步骤，首先执行设备的prepare函数，然后再执行suspend函数。
1. // 函数将会调用所有的非sysdev设备的prepare()接口  
2. static int dpm_prepare(pm_message_t state)  
3. {  
4.     struct list_head list;  
5.     int error = 0;  
6.   
7.     INIT_LIST_HEAD(&amp;list);  
8.     mutex_lock(&amp;dpm_list_mtx);  
9.     transition_started = true;  
10.     // 遍历设备链表  
11.     while (!list_empty(&amp;dpm_list)) {  
12.         // 从最先初始化的节点开始遍历  
13.         struct device *dev = to_device(dpm_list.next);  
14.         // 获取设备  
15.         get_device(dev);  
16.         // 更新设备状态  
17.         dev-&gt;power.status = DPM_PREPARING;  
18.         mutex_unlock(&amp;dpm_list_mtx);  
19.   
20.         pm_runtime_get_noresume(dev);  
21.         // 在系统休眠期间有可能受到唤醒请求  
22.         if (pm_runtime_barrier(dev) &amp;&amp; device_may_wakeup(dev)) {  
23.             /* Wake-up requested during system sleep transition. */  
24.             pm_runtime_put_noidle(dev);  
25.             error = -EBUSY;  
26.         } else {  // 执行prepare()函数  
27.             error = device_prepare(dev, state);  
28.         }  
29.   
30.         mutex_lock(&amp;dpm_list_mtx);  
31.         // 如果出错则跳出循环  
32.         if (error) {  
33.             dev-&gt;power.status = DPM_ON;  
34.             if (error == -EAGAIN) {  
35.                 put_device(dev);  
36.                 error = 0;  
37.                 continue;  
38.             }  
39.             printk(KERN_ERR &quot;PM: Failed to prepare device %s &quot;  
40.                 &quot;for power transition: error %d\n&quot;,  
41.                 kobject_name(&amp;dev-&gt;kobj), error);  
42.             put_device(dev);  
43.             break;  
44.         }  
45.         // 更新状态  
46.         dev-&gt;power.status = DPM_SUSPENDING;  
47.         if (!list_empty(&amp;dev-&gt;power.entry))  
48.             // 将设备节点移动到list链表中  
49.             list_move_tail(&amp;dev-&gt;power.entry, &amp;list);  
50.         put_device(dev);  
51.     }  
52.     // 拼接链表  
53.     list_splice(&amp;list, &amp;dpm_list);  
54.     mutex_unlock(&amp;dpm_list_mtx);  
55.     return error;  
56. }  
可以看到函数将遍历dpm_list链表，并执行每个设备的prepare函数，内核规定prepare函数的实现不能改变硬件的状态；系统中每一个设备注册时都将被加入dpm_list链表的尾部，所以链表排序为设备注册的顺序。
1. static int dpm_suspend(pm_message_t state)  
2. {  
3.     struct list_head list;  
4.     int error = 0;  
5.   
6.     INIT_LIST_HEAD(&amp;list);  
7.     mutex_lock(&amp;dpm_list_mtx);  
8.     while (!list_empty(&amp;dpm_list)) {  
9.         // 逆序遍历链表,即先suspend后注册的设备,符合设备与父设备电源挂起的先后原则  
10.         struct device *dev = to_device(dpm_list.prev);  
11.   
12.         get_device(dev);  
13.         mutex_unlock(&amp;dpm_list_mtx);  
14.   
15.         dpm_drv_wdset(dev);  
16.         error = device_suspend(dev, state);  
17.         dpm_drv_wdclr(dev);  
18.   
19.         mutex_lock(&amp;dpm_list_mtx);  
20.         if (error) {  
21.             pm_dev_err(dev, state, &quot;&quot;, error);  
22.             put_device(dev);  
23.             break;  
24.         }  
25.         dev-&gt;power.status = DPM_OFF;  
26.         if (!list_empty(&amp;dev-&gt;power.entry))  
27.             list_move(&amp;dev-&gt;power.entry, &amp;list);  
28.         put_device(dev);  
29.     }  
30.     list_splice(&amp;list, dpm_list.prev);  
31.     mutex_unlock(&amp;dpm_list_mtx);  
32.     return error;  
33. }  
 函数将设备按照注册顺序反向挂起，挂起执行的流程如下：
1. static int device_suspend(struct device *dev, pm_message_t state)  
2. {  
3.     int error = 0;  
4.   
5.     down(&amp;dev-&gt;sem);  
6.   
7.     if (dev-&gt;class) {  // 类的suspend优先  
8.         if (dev-&gt;class-&gt;pm) {  
9.             pm_dev_dbg(dev, state, &quot;class &quot;);  
10.             error = pm_op(dev, dev-&gt;class-&gt;pm, state);  
11.         } else if (dev-&gt;class-&gt;suspend) {  
12.             pm_dev_dbg(dev, state, &quot;legacy class &quot;);  
13.             error = dev-&gt;class-&gt;suspend(dev, state);  
14.             suspend_report_result(dev-&gt;class-&gt;suspend, error);  
15.         }  
16.         if (error)  
17.             goto End;  
18.     }  
19.   
20.     if (dev-&gt;type) {  // device_type次之  
21.         if (dev-&gt;type-&gt;pm) {  
22.             pm_dev_dbg(dev, state, &quot;type &quot;);  
23.             error = pm_op(dev, dev-&gt;type-&gt;pm, state);  
24.         }  
25.         if (error)  
26.             goto End;  
27.     }  
28.   
29.     if (dev-&gt;bus) {  // bus优先级最低  
30.         if (dev-&gt;bus-&gt;pm) {  
31.             pm_dev_dbg(dev, state, &quot;&quot;);  
32.             error = pm_op(dev, dev-&gt;bus-&gt;pm, state);  
33.         } else if (dev-&gt;bus-&gt;suspend) {  
34.             pm_dev_dbg(dev, state, &quot;legacy &quot;);  
35.             error = dev-&gt;bus-&gt;suspend(dev, state);  
36.             suspend_report_result(dev-&gt;bus-&gt;suspend, error);  
37.         }  
38.     }  
39.  End:  
40.     up(&amp;dev-&gt;sem);  
41.   
42.     return error;  
43. }  
可以看到类中的suspend优先级最高，之后是device_type的，最后是bus的，大部分设备只注册了bus下的suspend。

</rich_text><rich_text scale="h2" weight="heavy">4、挂起处理器</rich_text><rich_text>
1. static int suspend_enter(suspend_state_t state)  
2. {  
3.     int error;  
4.     // 处理器的休眠准备函数  
5.     if (suspend_ops-&gt;prepare) {  
6.         error = suspend_ops-&gt;prepare();  
7.         if (error)  
8.             return error;  
9.     }  
10.     // 执行非sysdev的late suspend函数  
11.     error = dpm_suspend_noirq(PMSG_SUSPEND);  
12.     if (error) {  
13.         printk(KERN_ERR &quot;PM: Some devices failed to power down\n&quot;);  
14.         goto Platfrom_finish;  
15.     }  
16.     // 处理器休眠最后的准备  
17.     if (suspend_ops-&gt;prepare_late) {  
18.         error = suspend_ops-&gt;prepare_late();  
19.         if (error)  
20.             goto Power_up_devices;  
21.     }  
22.   
23.     if (suspend_test(TEST_PLATFORM))  
24.         goto Platform_wake;  
25.     // 关闭非启动cpu  
26.     error = disable_nonboot_cpus();  
27.     if (error || suspend_test(TEST_CPUS))  
28.         goto Enable_cpus;  
29.     // 挂起中断  
30.     arch_suspend_disable_irqs();  
31.     BUG_ON(!irqs_disabled());  
32.     // 挂起sysdev  
33.     error = sysdev_suspend(PMSG_SUSPEND);  
34.     if (!error) {  
35.         if (!suspend_test(TEST_CORE))  
36.             // 处理器的休眠进入函数,休眠流程运行至此  
37.             error = suspend_ops-&gt;enter(state);  
38.         // 唤醒sysdev  
39.         sysdev_resume();  
40.     }  
41.     // 使能中断  
42.     arch_suspend_enable_irqs();  
43.     BUG_ON(irqs_disabled());  
44.   
45.  Enable_cpus:  
46.     // 使能非启动cpu  
47.     enable_nonboot_cpus();  
48.   
49.  Platform_wake:  
50.     // 处理器开始唤醒  
51.     if (suspend_ops-&gt;wake)  
52.         suspend_ops-&gt;wake();  
53.   
54.  Power_up_devices:  
55.     // 执行非sysdev的early resume函数  
56.     dpm_resume_noirq(PMSG_RESUME);  
57.   
58.  Platfrom_finish:  
59.     // 处理器休眠结束  
60.     if (suspend_ops-&gt;finish)  
61.         suspend_ops-&gt;finish();  
62.   
63.     return error;  
64. }  
 在这个阶段首先看处理器是否需要做一些准备，接下来执行非sysdev的late suspend函数，然后处理器做休眠前最后的准备、关闭非启动cpu、挂起中断，再挂起sysdev，最后进入处理器的挂起函数，至此休眠流程结束，处理器等待用户或者RTC唤醒。
 
</rich_text><rich_text scale="h2"> </rich_text><rich_text scale="h2" weight="heavy">附1、late suspend</rich_text><rich_text>
 在这里我们看到了一种新的suspend机制 — late  suspend，是在所有的suspend执行完后再开始执行，接口为dev-&gt;bus-&gt;pm-&gt;suspend_noirq；这样 early_suspend、suspend以及late suspend构成了suspend的三部曲，late suspend是在中断关闭的情况下进行的；前面我们分析的wake_lock就有用到，用于检测在suspend阶段是否有锁被激活。late suspend的实现如下：
 
 
1. int dpm_suspend_noirq(pm_message_t state)  
2. {  
3.     struct device *dev;  
4.     int error = 0;  
5.   
6.     suspend_device_irqs();  // 关闭除唤醒系统以外的所有中断  
7.     mutex_lock(&amp;dpm_list_mtx);  
8.     list_for_each_entry_reverse(dev, &amp;dpm_list, power.entry) {  
9.         // 执行所有设备的late suspend函数  
10.         error = device_suspend_noirq(dev, state);  
11.         if (error) {  
12.             pm_dev_err(dev, state, &quot; late&quot;, error);  
13.             break;  
14.         }  
15.         dev-&gt;power.status = DPM_OFF_IRQ;  
16.     }  
17.     mutex_unlock(&amp;dpm_list_mtx);  
18.     if (error)  
19.         dpm_resume_noirq(resume_event(state));  
20.     return error;  
21. }  
22. EXPORT_SYMBOL_GPL(dpm_suspend_noirq);  
 
</rich_text><rich_text scale="h2" weight="heavy"> 附2、中断关闭流程</rich_text><rich_text>
在late suspend机制中我们看到了休眠流程中关闭系统中断的地方： 
1. void suspend_device_irqs(void)  
2. {  
3.     struct irq_desc *desc;  
4.     int irq;  
5.   
6.     for_each_irq_desc(irq, desc) {  // 遍历系统的中断  
7.         unsigned long flags;  
8.   
9.         spin_lock_irqsave(&amp;desc-&gt;lock, flags);  
10.         __disable_irq(desc, irq, true);  // 关闭中断  
11.         spin_unlock_irqrestore(&amp;desc-&gt;lock, flags);  
12.     }  
13.   
14.     for_each_irq_desc(irq, desc)  
15.         if (desc-&gt;status &amp; IRQ_SUSPENDED)  
16.             synchronize_irq(irq);  
17. }  
18. EXPORT_SYMBOL_GPL(suspend_device_irqs);  
函数调用了__disable_irq()来关闭中断，我们看一下这个函数的实现： 
 
1. void __disable_irq(struct irq_desc *desc, unsigned int irq, bool suspend)  
2. {  
3.     if (suspend) {  
4.         // 如果中断没有被激活或者中断的IRQF_TIMER标志被置位则不关闭中断  
5.         // 在以后的内核版本中这个标志位被换成了IRQF_NO_SUSPEND  
6.         // 新版的IRQF_TIMER = (__IRQF_TIMER | IRQF_NO_SUSPEND)  
7.         if (!desc-&gt;action || (desc-&gt;action-&gt;flags &amp; IRQF_TIMER))  
8.             return;  
9.         desc-&gt;status |= IRQ_SUSPENDED;  
10.     }  
11.     // 判断中断是否被打开  
12.     if (!desc-&gt;depth++) {  
13.         // 更新标志位  
14.         desc-&gt;status |= IRQ_DISABLED;  
15.         // 关闭中断  
16.         desc-&gt;chip-&gt;disable(irq);  
17.     }  
18. }  
可以看到如果该中断没有被激活或者中断的IRQF_TIMER标志被置位就不会关闭中断，在新的内核版本中增加了专门的 IRQF_NO_SUSPEND 标志位，用来置位在休眠状态下唤醒系统的中断，如RTC、按键等；如果是其他中断则将打开的中断关闭掉。 附3、dpm_list链表
 dpm_list是内核中用于设备电源管理的链表，设备注册时通过一系列的调用 device_register()  -&gt; device_add() -&gt; device_pm_add()  最后在device_pm_add()中将设备加入dpm_list链表中：
 
 
1. // 设备创建时都会调用的函数,将设备加入dpm_list链表  
2. void device_pm_add(struct device *dev)  
3. {  
4.     pr_debug(&quot;PM: Adding info for %s:%s\n&quot;,  
5.          dev-&gt;bus ? dev-&gt;bus-&gt;name : &quot;No Bus&quot;,  
6.          kobject_name(&amp;dev-&gt;kobj));  
7.     mutex_lock(&amp;dpm_list_mtx);  
8.     if (dev-&gt;parent) {  
9.         if (dev-&gt;parent-&gt;power.status &gt;= DPM_SUSPENDING)  
10.             dev_warn(dev, &quot;parent %s should not be sleeping\n&quot;,  
11.                  dev_name(dev-&gt;parent));  
12.     } else if (transition_started) {  
13.         /* 
14.          * We refuse to register parentless devices while a PM 
15.          * transition is in progress in order to avoid leaving them 
16.          * unhandled down the road 
17.          */  
18.         dev_WARN(dev, &quot;Parentless device registered during a PM transaction\n&quot;);  
19.     }  
20.     // 将设备节点添加到链表尾部,即设备按注册的先后顺序从链表头部到尾部  
21.     list_add_tail(&amp;dev-&gt;power.entry, &amp;dpm_list);  
22.     mutex_unlock(&amp;dpm_list_mtx);  
23. }  
而设备注销的时候会调用device_pm_remove()将设备从dpm_list链表中移除： 
 
1. // 设备注销时都会调用的函数,将设备从dpm_list链表中移除  
2. void device_pm_remove(struct device *dev)  
3. {  
4.     pr_debug(&quot;PM: Removing info for %s:%s\n&quot;,  
5.          dev-&gt;bus ? dev-&gt;bus-&gt;name : &quot;No Bus&quot;,  
6.          kobject_name(&amp;dev-&gt;kobj));  
7.     mutex_lock(&amp;dpm_list_mtx);  
8.     list_del_init(&amp;dev-&gt;power.entry);  
9.     mutex_unlock(&amp;dpm_list_mtx);  
10.     pm_runtime_remove(dev);  
11. }
</rich_text></node></node><node name="switch module" prog_lang="custom-colors" readonly="False" tags="" unique_id="25"><rich_text>
    switch是Android引进的一个新驱动，用于检测一些开关量。比如检测耳机插入和ＵＳＢ设备插入等。
 
</rich_text><rich_text scale="h2">Switch的构架原理</rich_text><rich_text>
    switch模块包含两部分内容：首先是switch class，它在Android中是作为一个module来实现的，可以进行动态加载；其次是 switch class中的一个具体的switch设备switch gpio，它表示针对gpio的一个switch设备，switch gpio  是基于platform device框架的，它们的实现分别位于下面两个源代码文件中：
 －　drivers\switch\switch_class.c
 －　drivers\swithc\switch_gpio.c
 switch的运作方式是在sysfs文件系统中创建相应的entry，用户可以通过sysfs与之交互，也可以通过uevent机制与之交互，从而检测switch的状态。
 
</rich_text><rich_text scale="h3">1.  Switch class的实现</rich_text><rich_text>
 switch class的实现对应于switch_class.c文件，首先需要分析switch设备的结构体，它位于include/linux/switch.h中，其结构体switch_dev的定义如下：
 struct switch_dev {
     const char *name;
     struct device *dev;
     int index;
     int state;
     ssize_t (*print_name)(struct switch_dev *sdev, char *buf);
     ssize_t (*print_state)(struct switch_dev *sdev, char *buf);
 };
 其中name表示设备的名称；dev表示具体的设备对象；由于系统中可能存在多个switch设备，index则表示该设备是index个被注册的 switch设备；state表示当前设备的状态；另外的两个函数指针都是用于操作sysfs文件系统的，其中print_name函数用于在sysfs 中显示设备名称不，而print_state函数则用于显示设备的状态。　该结构体非常简单，下面我们继续分析具体的实现机制。
 我们同样可以在switch_class.c中发现如下的初始化操作和退出操作：
 static int __init switch_class_init(void)
 {
    return create_switch_class();
 }
 
 static void __exit switch_clas_exit(void)
 {
    class_destroy(switch_class);
 }
 module_init(switch_class_init);
 module_exit(switch_class_exit);
 整个操作都非常简单，初始化函数switch_class_init会调用create_switch_class来创建一个设备类，其具体实现如下：
 static int craete_switch_class(void)
 {
     if (!switch_class) {
        switch_class =class_create(THIS_MODULE, &quot;switch&quot;);
        if (IS_ERR(switch_class))
            return PTR_ERR(switch_class);
            
        atomic_set(&amp;deivce_count, 0);
     }
     
     return 0;
 }
 该函数通过调用class_create函数来创建一个switch设备类文件，创建之后通过atomic_set函数来设备设备的计数。
 执行退出操作时，直接通过class_destroy函数来销毁初始化时创建的设备类。
 我们说过，switch_class只是一个供所有具体的switch设备使用的“基础类”，因此，它提供了switch设备注册和缷载的函数 switch_dev_register和switch_dev_unregister。这里首先来分析注册函数的实现，定义如下：
 int switch_dev_register(structswitch_dev *sdev)
 {
     int ret;
     
     //检测switch_class是否被创建
     if (!switch_class) {
         ret = create_switch_class();
         if (ret &lt; 0)
            return ret;
     }
     
     //保存索引
     sdev-&gt;index =atomic_inc_return(&amp;device_count);
     
     //创建设备
     sdev-&gt;dev =device_create(switch_class, NULL,MKDEV(0, sdev-&gt;index), NULL,sdev-&gt;name);
     if (IS_ERR(sdev-&gt;dev))
        return PTR_ERR(sdev-&gt;dev);
        
     //创建设备文件用于输出设备状态
     ret = device_create_file(sdev-&gt;dev,&amp;dev_attr_name);
     if (ret &lt; 0)
     goto err_create_file_2;
     
     //设置数据
     dev_set_drvdata(sdev-&gt;dev, sdev);
     sdev-&gt;state = 0;
     return 0;
     
     //出现错误，移除文件
err_create_file_2 :
     device_remove_file(sdev-&gt;dev,&amp;dev_attr_state);
     
     //出现错误，销毁switch_class
err_create_file_1:
     device_destroy(switch_class, MKDEV(0,sdev-&gt;index));
     printk(KERN_ERR &quot;switch: Failed toregister driver %s\n&quot;, sdev-&gt;name);
     
     return ret;
 }
 EXPORT_SYMBOL_GPL(switch_dev_register);
 
 该函数用于创建一个具体的switch设备，其流程是：首先，判断是否已经创建switch_class,如果没有，则创建switch_class；其 次，取得要创建的设备的索引，然后通过device_create创建设备；最后，通过device_create_file函数在sysfs中分别创建 两个entry，如果创建失败，则分别删除已经创建的文件或者switch_class，一个用于输出设备状态state；另一个用于输出设备名称 name。我们将详细介绍dev_set_drvdata，因为在linux内核中它也非常常见，它是一个内联函数，定义于include/linux /device.h中，代码如下：
 static inline void dev_set_drvdata(struct device *dev, void *data)
 {
    dev-&gt;driver_data = data;
 }
 所以，上面的switch_dev_register函数中使用它是表示sdev已经赋值到sdev-&gt;dev-&gt;driver_data中。分析完了注册函数，下面我们来看一下卸载函数switch_dev_unregister，其定义如下：
 void switch_dev_unregister(struct switch_dev *sdev)
 {
     device_remove_file(sdev-&gt;dev,&amp;dev_attr_name);
     device_remove_file(sdev-&gt;dev,&amp;dev_attr_state);
     device_destroy(switch_class, MKDEV(0,sdev-&gt;index));
     dev_set_drvdata(sdev-&gt;dev, NULL);
 }
 EXPORT_SYMBOL_GPL(switch_dev_unregister);
 该函数主要用于释放注册时所创建的设备和空间。首先，通过device_remove_file函数删除用于输出状态和名称的entry；然后，销毁 switch_class；最后，再次使用dev_set_drvdata将sdev-&gt;dev-&gt;driver_data设置为ＮＵＬＬ；
 在初始化时我们创建了输出设备状态和名称的文件，那么我们就需要实现显示名称和状态的两个函数state_show和name_show。当用户读取 sysfs中对应的switch entry(/sys/class/#dev_name/name和/sys/class/#dev_name /state)时，系统会自动调用这两个函数为用户返回switch设备的名称和状态，其函数定义如下：
 static ssize_t state_show(structdevice *dev, struct device_attribute *attr, char *buf)
 {
     //得到switch_dev设备数据
     struct switch_dev *sdev = (struct switch_dev *)dev_get_drvdata(dev);
     
     //安全性检查
     if (sdev-&gt;print_state) {
         //输出状态
         int ret = sdev-&gt;print_state(sdev,buf);
         if (ret &gt;= 0)
            return ret;
     }
     
     return sprintf(buf, &quot;%d\n&quot;,sdev-&gt;state);
 }
 
 static ssize_t name_show(struct device *dev, struct device_attribute *attr, char *buf)
 {
     struct switch_dev *sdev = (struct switch_dev *)dev_get_drvdata(dev);
     
     if (sdev-&gt;print_name) {
         //输出名字
         int ret = sdev-&gt;print_name(sdev,buf);
         if (ret &gt;= 0)
            return ret;
     }
     return sprintf(buf, &quot;%s\n&quot;, sdev-&gt;name);
 }
 static DEVICE_ATTR(state, S_IRUGO |S_IWUSR, state_show, NULL);
 static DEVICE_ATTR(name, S_IRUGO |S_IWUSR, name_show, NULL);
 
 这两个函数中都使用了dev_get_drvdata来取得switch设备数据，输出状态使用了print_state函数，输出名称使用了print_name函数。不知道大家是否还有印象，这两个函数是定义在switch_dev中的两个函数指针。
 既然switch设备有状态，那么就需要对状态进行操作，主要包括获取状态和设置状态。获取状态的操作很简单，它是switch.h中的一个内联函数，直接返回设备的状态，定义如下：
 static inline int switch_get_state(struct switch_dev *sdev)
 {
    return sdev-&gt;state;
 }
 
 设置状态的操作则稍微复杂一点，下面是设置设备状态的函数switch_set_state的实现：
 void switch_set_state(struct switch_dev *sdev, int state)
 {
     charname_buf[120];
     charstate_buf[120];
     char*prop_buf;
     char *envp[3];
     int env_offset= 0;
     int length;
     
     //判断当前状态
     if(sdev-&gt;state != state) {
         //改变状态
         sdev-&gt;state= state;
         prop_buf =(char *)get_zeroed_page(GFP_KERNEL);
         if (prop_buf) {
             //显示名称
             length =name_show(sdev-&gt;dev, NULL, prop_buf);
             if (length &gt;0) {
                 if (prop_buf[length – 1] == '\n')
                    prop_buf[length– 1] = 0;
                 sprintf(name_buf,sizeof(name_buf),&quot;SWITCH_NAME=%s&quot;, prop_buf);
                 envp[env_offset++]= name_buf;
             }
         
             //显示状态
             length =state_show(sdev-&gt;dev, NULL, prop_buf);
             if (length &gt;0) {
                 if (prop_buf[length – 1] == '\n')
                    prop_buf[length– 1] = 0;
                 snprintf(state_buf,sizeof(state_buf), &quot;SWITCH_STATE=%s&quot;, prop_buf);
                 envp[env_offset++]= state_buf;
             }
             envp[env_offset]= NULL;
             //触发uevent事件
             kobject_uevent_env(&amp;sdev-&gt;dev-&gt;kobj,KOBJ_CHANGE, envp);
             free_page((unsignedlong)prop_buf);
         } else {
             printk(KERN_ERR &quot;out of memory in switch_set_state\n&quot;);
             kobject_uevent(&amp;sdev-&gt;dev-&gt;kobj,KOBJ_CHANGE);
         }
    }
 }
 EXPORT_SYMBOL_GPL(switch_set_state);
 该函数用于设置当前设备的状态。开始之前，首先检测当前设备的状态是否与要设置的状态相同，如果相同，则不需要再次设置；否则，调用 get_zeroed_page()返回一片已经用０擦写过的内存页，并将其转化为指定的类型(char*)，用于显示状态和名称，并将其写入到 state_buf和name_buf缓冲区中一并作为uevent事件的信息，以用来通知用户的当前switch设备的名称和状态，最后通过 kobject_uevent_env和参数envp发送uevent事件。
 
</rich_text><rich_text scale="h3">1.  Gpio switch设备驱动</rich_text><rich_text>
 上面分析了switch模块中switch class的实现，下面就来分析一个具体的gpio的switch设备驱动的实现。首先，我们来看一下其设备信息的结构体，如下所示；
 struct gpio_switch_data {
     struct switch_dev sdev;
     unsigned gpio;
     const char *name_on;
     const char *name_off;
     const char *state_on;
     const char *state_off;
     int irq;
     struct work_struct work;
 };
 该结构体非常简单，这里需要说明的是其中４个char*的成员变量，它们是设备名称和状态的开关，判断是否需要输出设备的名称和状态。sdev表示一个 switch设备；gpio表示gpio电平；irq表示gpio终端指示；work用于表示gpio_switch_work工作，具体分析时我们还会介绍其细节。
 
 另外，还有一个结构体gpio_switch_platform_data用来储存gpio_switch设备的相关数据，其定义如下：
 struct gpio_switch_platform_data {
     const char *name; //设备名称
     unsigned gpio; //电平
     const char *name_on;
     const char *name_off;
     const char *state_on;
     const char *state_off;
 };
 该结构体的数据和gpio_switch_data中的数据所表达的意思几乎差不多，只是多了一个设备的名称，其实就是表示gpioswitch设备的platform_data数据。下面我们将分析其具体实现。　
 
 其初始化和退出过程就不详细介绍了，具体实现如下：
 static struct platform_driver gpio_switch_driver = {
     .probe = gpio_switch_probe,
     .remove =__devexit_p(gpio_switch_remove),
     .driver = {
        .name = “switch-gpio”,
        .owner = THIS_MODULE,
    },
 };
 static int __init gpio_switch_init(void)
 {
    return platform_driver_register(&amp;gpio_switch_driver);
 }
 
 static void __exit gpio_switch_exit(void)
 {
    platform_driver_unregister(&amp;gpio_switch_driver);
 }
 module_init(gpio_switch_init);
 module_exit(gpio_switch_exit);
 
 由于gpio_switch是基于platform device/driver框架的，因此初始化时会通过gpio_switch_init来调用 platform_driver_register，然后进入gpio_switch_driver所指定的gpio_switch_probe函数中完 成初始化过程。gpio_switch_driver中还指定了驱动的名称和owner，以及设备退出时需要处理gpio_switch_remove。 因为我们说过，switch class在Android中是作为一个module来实现的，所以”.owner”被指定为THIS_MODULE。
 我们主要来分析初始化函数gpio_switch_probe的实现，如下所示:
 static int gpio_switch_probe(struct platform_device *pdev)
 {
     //取得gpioswitch的platform_data数据的使用权
     struct gpio_switch_platform_data *pdata = pdev-&gt;dev.platform_data;
     struct gpio_switch_data *switch_data;
     int ret = 0;
     
     if (!pdata)
        return -EBUSY;
        
     //创建gpio_switch
     switch_data = kzalloc(sizeof(struct gpio_switch_data), GFP_KERNEL);
     if (switch_data)
        return -ENOMEM;
        
     //初始化gpio_switch
     switch_data-&gt;sdev.name =pdata-&gt;name;
     switch_data-&gt;gpio = pdata-&gt;gpio;
     switch_data-&gt;name_on =pdata-&gt;name_on;
     switch_data-&gt;name_off =pdata-&gt;name_off;
     switch_data-&gt;state_on =pdata-&gt;state_on;
     switch_data-&gt;state_off =pdata-&gt;state_off;
     switch_data-&gt;sdev.print_state =switch_gpio_print_state;
     //注册switch设备switch_dev
     ret =switch_dev_register(&amp;switch_data-&gt;sdev);
     if (ret &lt; 0)
        goto erro_request_gpio;
        
     //设置gpio方向为输入
     ret =gpio_direction_input(switch_data-&gt;gpio);
     if (ret &lt; 0)
        goto err_set_gpio_input;
        
     //指定gpio_switch_work
     INIT_WORK(&amp;switch_data-&gt;work,gpio_switch_work);
     //为gpio分配中断
     switch_data-&gt;irq =gpio_to_irq(switch_data-&gt;gpio);
     if (switch_data-&gt;irq &lt; 0) {
        ret = switch_data-&gt;irq;
        goto err_detect_irq_num_failed;
     }
     
     //指明中断服务程序
     ret = request_irq(switch_data-&gt;irq,gpio_irq_handle, IRQF_TRIGGER_LOW, pdev-&gt;name, switch_data);
     if (ret &lt; 0)
        goto err_request_irq;
        
     //初始化gpio_switch_work
     gpio_switch_work(&amp;switch_data-&gt;work);
     
     return 0;
     
     //错误处理
err_request_irq:
err_detect_irq_num_failed:
err_set_gpio_input:
     gpio_free(switch_data-&gt;gpio);
     
err_request_gpio:
     switch_dev_unregister(&amp;switch_data-&gt;sdev);
     
err_switch_dev_register:
     kfree(switch_data);
     
     return ret;
 }
 
 关于初始化函数的原理和要点，注解已经写得很清楚，这里就不再具体分析了。初始化的过程主要包括以下几个步骤：
 １）获取gpio数据使用权。
 ２）设置gpio方向为输入
 ３）注册switch_dev设备
 ４）为gpio分配中断，并指定中断服务程序；
 ５）初始化gpio_switch_work;
 ６）读取gpio初始状态。
 
 同理，退出函数也就很简单了，定义如下：
 static int __devexitgpio_switch_remove(struct platform_device *pdev)
 {
     struct gpio_switch_data *switch_data= platform_get_drvdata(pdev);
 
     //清除gpio_switch_work
     cancel_work_sync(&amp;switch_data-&gt;work);
     //释放gpio
     gpio_free(switch_data-&gt;gpio);
     //缷载gpio_switch_data
     switch_dev_unregister(&amp;switch_data-&gt;sdev);
     //释放空间
     kfree(switch_data);
 
     return 0;
 }
 初始化时我们指定了中断服务程序，当ＧＰＩＯ触发中断事件时，就会进入中断服务程序进行处理，其定义如下：
 
 static irqreturn_t gpio_irq_handler(int irq, void *dev_id)
 {
     struct gpio_switch_data *switch_data= (struct gpio_switch_data *)dev_id;
     schedule_work(&amp;switch_data-&gt;work);

     return IRQ_HANDLED;
 }
 该函数很简单，取得gpio_switch_data并执行work。这里的work就是我们在初始化时指定的gpio_switch_work，其处理方式如下：
 
 static void gpio_switch_work(structwork_struct *work)
 {
     int state;
     struct gpio_switch_data *data =container_of (work, struct gpio_switch_data, work);
     
     //读取gpio
     state = gpio_get_value(data-&gt;gpio);
     switch_set_state(&amp;data-&gt;sdev,state);
 }
 该函数的处理过程很简单，先直接读取gpio电平，取得状态；然后通过switch_set_state来设置和改变状态，这时便会调用我们实现的 switch_gpio_print_state和switch_gpio_print_name函数。但是我们发现，源代码中并没有实现 switch_gpio_print_name函数，因此，这里只关心设备的状态，名称在注册之后没有更改过，暂时也就不会去处理它了。从前面的 name_show函数的实现我们可以看到，如果没有实现switch_gpio_print_name函数，设备的名字则会被输出到name_show 函数的参数buf的缓冲区里，但这并不影响什么。
 
 switch_gpio_print_state的具体实现如下：
 static ssize_t switch_gpio_print_state(struct switch_dev *sdev, char *buf)
 {
     struct gpio_switch_data *switch_data=
     container_of (sdev, struct gpio_switch_data, sdev);
     const char *state;
     if (switch_get_state(sdev))
         state = switch_data-&gt;state_on;
     else
         state = switch_data-&gt;state_off;

     if (state)
         return sprintf(buf, “%s\n”,state);

     return – 1;
 }
 该函数通过状态开(state_on)关(state_off)来确定是否将GPIO状态输出到sysfs。大家应该明白状态开关的用处了吧，名称的状态开关的作用也是一样，只不过这里没有实现罢了。到这里，对switch模块的完整分析就结束了。
</rich_text><node name="android耳机插入检测 " prog_lang="custom-colors" readonly="False" tags="" unique_id="26"><rich_text>在Android 中其实并没有耳机系统这个称呼，只是我为了方便解释而加的。在整个android系统中，跟耳机相关的部分有： 
1.      Linux 驱动：主要完成耳机的插入的检测，hook键的检测，其中hook键包括长按和短按。 
2.      在frameworks 中的耳机的观察的文件（HeadsetObserver.java ），这个文件主要是检测耳机是否插入和名字，并把相关的内容通过Intent 广播出去。 
3.      跟音频相关，改变音频输出的路径（这边涉及到播放音乐和电话部分）。
4.      跟事件的处理相关，这部分主要体现 hook 的功能，主要是接听电话，挂断电话等。
事件的处理又分为linux 的事件处理和android上的事件处理。 
 
 我将分块叙述，由于各种原因，我在这不便把源代码公布，如果你需要的我的帮助，可以发邮件给我，也可以在我blog 上留言，谢谢! 
 
</rich_text><rich_text foreground="#ffff00000000" scale="h2">Linux 驱动</rich_text><rich_text scale="h2"> </rich_text><rich_text>
首先要定义一个switch_dev（structswitch_dev sdev; ）并把它初始化，如（sdev.name=  ……）；然后注册一个switch device ： 
      ret= switch_dev_register(&amp;switch_data-&gt;sdev); 
      if(ret &lt; 0) 
     { 
        goto err_switch_dev_register; 
     } 
switch_dev_register这个函数在 switch_class.c 中实现 
int switch_dev_register(struct switch_dev*sdev) 
{ 
     int ret; 
     
      if (!switch_class) { 
        ret = create_switch_class(); 
        if (ret &lt; 0) 
            return ret; 
     } 
     
     sdev-&gt;index = atomic_inc_return(&amp;device_count); 
     sdev-&gt;dev = device_create(switch_class, NULL, 
     MKDEV(0, sdev-&gt;index), NULL, sdev-&gt;name); 
     if (IS_ERR(sdev-&gt;dev)) 
        return PTR_ERR(sdev-&gt;dev); 
     ret= device_create_file(sdev-&gt;dev, &amp;dev_attr_state); 
     if (ret &lt; 0) 
        goto err_create_file_1; 
     ret= device_create_file(sdev-&gt;dev, &amp;dev_attr_name); 
     if (ret &lt; 0) 
        goto err_create_file_2; 
     
     dev_set_drvdata(sdev-&gt;dev, sdev); 
     sdev-&gt;state = 0; 
     
     return 0; 
     
err_create_file_2: 
     device_remove_file(sdev-&gt;dev,&amp;dev_attr_state); 
err_create_file_1: 
     device_destroy(switch_class, MKDEV(0, sdev-&gt;index)); 
     printk(KERN_ERR &quot;switch: Failed to register driver %s\n&quot;,sdev-&gt;name); 
     
     return ret; 
} 
 
这个函数中主要是以下几个函数
l  create_switch_class() 
l  device_create(switch_class, NULL, MKDEV(0, sdev-&gt;index), NULL,sdev-&gt;name); 
l  device_create_file(sdev-&gt;dev, &amp;dev_attr_state); 
l  device_create_file(sdev-&gt;dev, &amp;dev_attr_name); 
经过以上函数后将会生成路径和被用户空间访问的节点 
 
&quot;/sys/class/switch/h2w/name&quot;; 
&quot;/sys/class/switch/h2w/state&quot;; 
这两个供用户空间访问 
 
在这个函数中要注意到 
static DEVICE_ATTR(state, S_IRUGO |S_IWUSR, state_show, NULL); 
static DEVICE_ATTR(name, S_IRUGO | S_IWUSR,name_show, NULL); 
这两项中用于设置节点state和name的属性 
 
DEVICE_ATTR 有四个参数，分别为名称、权限位、读函数、写函数
有此可以知道state 和name，虽然有读写权限，但都只有读函数，没有写函数。 
其中state 对headsetobserver.java 区分有无 mic和耳机是否插入起作用 
static ssize_t state_show(struct device*dev, struct device_attribute *attr, 
 char *buf) 
{ 
 struct switch_dev *sdev = (struct switch_dev *) dev_get_drvdata(dev); 
 
  if (sdev-&gt;print_state) {    // 如果用户有定义print_state函数，将调用用户定义的 
    int ret = sdev-&gt;print_state(sdev, buf); 
    if (ret &gt;= 0) 
        return ret; 
 } 
 
 return sprintf(buf, &quot;% d\n&quot;, sdev-&gt;state);// 把sdev-&gt;state 以%d的格式装如 buf 中 
} 
 
在这个函数得注意：如果你想你的frameworks 能区别出有没有mic，并且你用的是switch_gpio.c这个文件的话，你需要把switch_gpio.c中的sdev-&gt;print_state 的定义去掉。 
我就在这卡了半天的时间。State原先出来一直是1 ，后来才发现原来是自己定义了sdev-&gt;print_state 并只返回 0 和1 ，没有其他值。 
 
现重新回到driver，接下来时 input 子系统的内容 input_allocate_device(); 分配内存给新的输入设备  接下去初始化input_dev 这个结构体，给输入设备命名dev-&gt;name， 设置input 支持的键值  input_set_capability，如： 
 input_set_capability(ipdev, EV_KEY,KEY_MEDIA); 
 input_set_capability(ipdev, EV_SW,SW_HEADPHONE_INSERT); 
 input_set_capability(ipdev, EV_KEY, KEY_END); 
  注册input 设备 input_register_device(ipdev); 
   在驱动中还涉及到工作队列等问题，就请各位自己去看一下吧。 
接下来是对于中断的处理，这个中断方式我是从HTC 的驱动中学的，有点巧妙，想到了叶
就不算巧妙了，呵呵。 
  先申请为高电平中断，我的板子是插入耳机检测脚我高电平，在进入中断后再申请为低
电平中断，这个相对于上升和下降有个好处——当设置为上升或下降沿触发中断时，开机之
前插入耳机，当开机后，将识别不到耳机。而当设置为电平触发可以解决这个问题。 
  我的观点是在耳机在插槽内时，检测引脚直接被拉倒插入耳机稳定后的电平，而不会产
生上升和下降沿。中断申请的代码如下： 
request_irq(gpio_to_irq(18),gpio_irq_handler,IRQF_TRIGGER_HIGH,pdev-&gt;name,switch_data);
中断处理的代码如下： 
set_irq_type(gpio_to_irq(18),gpio_get_value(18) ? IRQF_TRIGGER_LOW : 
IRQF_TRIGGER_HIGH); 
由上可以看到C 语言的问号表达式的好处了吧，呵呵。C 语言博大精深！还有很多精
髓的问题，以后用了，慢慢体会，如果你觉得你的C 非常好了，呵呵，找一个C 语言的笔
试题来做做，哈哈，你真会发现又学到一堆的东西。呵呵。继续我们的驱动。 
  接下来是有无mic的判断和设置state 的值了，有 HeadsetObserver.java 这个文件中可以
得出state 的值： 
  有mic：state 等于1 
  没有mic：state 等于 2 
扯点题外，我原先以为在&quot;/sys/class/switch/h2w/state&quot;;下的state 只有 0 和1 ，我再问了我
的一些同事，他们也跟我说是bool类型。但我看到headsetobserver.java中又有1 和2，
后面觉得有点可疑。再看源代码之前，真的不想看源代码，看了源代码后，发现源代码
真好。哈哈。通过一步步跟，后面发现时可以大于1 的，呵呵。 
这个将要用到switch_get_state(&amp;data-&gt;sdev)这个函数，它也是在switch_class.c中实现的。 
void switch_set_state(struct switch_dev*sdev, int state) 
{ 
    char name_buf[120]; 
    char state_buf[120]; 
    char *prop_buf; 
    char *envp[3]; 
    int env_offset = 0; 
    int length; 
 
    if (sdev-&gt;state != state) { 
        sdev-&gt;state = state;  //实现你要设置的值 
        prop_buf = (char *)get_zeroed_page(GFP_KERNEL); 
        if (prop_buf) { 
            length = name_show(sdev-&gt;dev, NULL, prop_buf); //给HeadsetObserver.java 读取名字 
            if(length &gt; 0) { 
                if (prop_buf[length - 1] == '\n') 
                    prop_buf[length - 1] = 0; 
                snprintf(name_buf, sizeof(name_buf), 
                    &quot;SWITCH_NAME=%s&quot;, prop_buf);
     
                envp[env_offset++] = name_buf; 
           } 
            length = state_show(sdev-&gt;dev, NULL, prop_buf); // 给HeadsetObserver.java 读取状态，这个函数我们在前面分析过了，这个函数比较重要，关系到区分有无mic。  
            if(length &gt; 0) { 
                if (prop_buf[length - 1] == '\n') 
                    prop_buf[length - 1] = 0; 
                snprintf(state_buf, sizeof(state_buf), 
                    &quot;SWITCH_STATE=%s&quot;, prop_buf); 
                envp[env_offset++] = state_buf; 
            } 
            envp[env_offset] = NULL; 
            kobject_uevent_env(&amp;sdev-&gt;dev-&gt;kobj, KOBJ_CHANGE, envp); 
            free_page((unsigned long)prop_buf); 
        } else { 
            printk(KERN_ERR &quot;out of memory in switch_set_state\n&quot;); 
            kobject_uevent(&amp;sdev-&gt;dev-&gt;kobj, KOBJ_CHANGE); 
        } 
    } 
} 
EXPORT_SYMBOL_GPL(switch_set_state); //供外部所使用。 
由于hook 键和检测 mic的有关联，故如果有mic则要申请hook 的中断。 
具体mic的检测可以参考我的blog 中转载别人的的一篇文章，链接地址如下 
 
http://blog.chinaunix.net/u3/106866/showart_2273977.html
 
接下来是HOOK 键功能的处理了，在google 论坛里有些说实现 hook 键接听和挂断电
话的问题。Hook键只有一个，要实现两个功能就得要用时间来区分了， 
  短按：代表接听。 
  长按：代表拒接。 
这样两种功能就实现了，呵呵。对于长短的检测最好用纳秒，用秒的准确性比较低。存在误
判性比较高，可以利用把时间转换成纳秒来计算，我用如下实现检测时间的长短： 
do_gettimeofday(&amp;time);  
timens=timeval_to_ns(&amp;time);  
while(gpio_get_value(123)==0){}; 
do_gettimeofday(&amp;time); 
(timeval_to_ns(&amp;time)-timens)由这个式子可以得到比较准确的时间。 
在利用这个时间，你确定一个判断长短的依据，就可以了如： 
if ((timeval_to_ns(&amp;time)-timens)&lt;1000000000l) {//短按 
    if ( (timeval_to_ns(&amp;time)-timens) &gt; 50000000) { // 为了取出噪音，而设置一定的最低值
        input_report_key(switch_data-&gt;ipdev,KEY_MEDIA,1); 
        input_sync(switch_data-&gt;ipdev); 
        msleep(100); 
        input_report_key(switch_data-&gt;ipdev,KEY_MEDIA,0); 
        input_sync(switch_data-&gt;ipdev); 
    } 
} else {//长按 
    input_report_key(switch_data-&gt;ipdev,KEY_END,1); 
    input_sync(switch_data-&gt;ipdev); 
    msleep(100); 
    input_report_key(switch_data-&gt;ipdev,KEY_END,0); 
    input_sync(switch_data-&gt;ipdev); 
} 
在这传上去的是KEY_MEDIA和KEY_END，然而这两个键值又如何对应上层的接听和挂
断呢？其中KEY_END 在frameworks 层已经映射成挂机键了，然而 KEY_MEDIA 却要你自
己映射成HEADSETHOOK键，在你android的根目录下在 
sdk\emulator\keymaps下qwerty.kl 中加入 
key 226  HEADSETHOOK       WAKE 
 
在这说明一下有些地方说是 
./development/emulator/keymaps/qwerty.kl 
我的是android2.1 的版本，我在我的版本下没发现 qwerty.kl 。我想这可能是版本的差异吧。 
 
到此，linux 驱动层算是大体结束了。 
 
</rich_text><rich_text foreground="#ffff00000000" scale="h2">Frameworks 层耳机相关 </rich_text><rich_text>
启动服务在systemserver.java中 
public class SystemServer 
{ 
     public static void main(String[] args) 
     { 
        …… 
        init1(args); 
        …… 
    } 
    
    public static final void init2() { 
       Log.i(TAG, &quot;Entered the Android system server!&quot;); 
       Thread thr = new ServerThread(); 
       thr.setName(&quot;android.server.ServerThread&quot;); 
       thr.start(); 
    }
 
} 
 
init1 将会调用到 android_server_SystemServer_init1.cpp 
extern &quot;C&quot; int system_init(); 
static voidandroid_server_SystemServer_init1(JNIEnv* en v, jobject clazz) 
{ 
   system_init(); 
} 
由上可以得到，将调用到System_init.cpp
extern &quot;C&quot; status _tsystem_init() 
{ 
    …… 
    runtime-&gt;callStatic(&quot;com/android/server/SystemServer&quot;, &quot;init2&quot;); 
    …… 
} 
 
由上可以看出，此时将调回到systemserver.java，并且调用 
public static final void init2() { 
    Log.i(TAG, &quot;Entered the Android systemserver!&quot;); 
           Thread th r = new ServerThread(); 
           thr.setName(&quot;android.server.ServerThread&quot;); 
           thr.start(); 
} 
新建线程 
class ServerThread  extends Thread 
{ 
    …… 
    public void run() 
    { 
        …… 
        try { 
            Log.i(TAG, &quot;Headset Observer&quot;); 
            // Listen for wired headset changes 
            headset = new HeadsetObserver(context); //new a thread to observer headset status 
        } catch (Throwable e) { 
            Log.e(TAG, &quot;Failu re starting HeadsetObserver&quot;, e); 
        } 
    } 
} 
开始服务：HeadsetObserver.java
class HeadsetObserver extendsUeventObserver 
{ 
    …… 
    public HeadsetObserver(Context context)  
    { 
        …… 
        startObserving(HEADSET_UEVENT_MATCH); 
        
        init();  // set initial status 
    } 
} 
 
运行以上程序后会一直监测HEADSET_UEVENT_MATCH路径的事件， 
HEADSET_UEVENT_MATCH =&quot;DEVPATH=/devices/virtual/switch/h2w&quot;; 
如果有事件的变化，则会调用 
public void onUEvent(UEventObserver.UEventevent)   
{ 
    if (LOG) Log.v(TAG, &quot;Headset UEVENT:&quot; + event.toString()); 
     
    try { 
        update(event.get(&quot;SWITCH_ NAME&quot;),Integer.parseInt(event.get(&quot;SWITCH_STATE&quot;))); 
    } catch (NumberFormatException e) { 
        Log.e(TAG, &quot;Could not parse switch state from event &quot; +event); 
    }
} 
     
private synchronized final void update(String newName, int newState)   
{ 
    …… 
     mHandler.sendMessageDelayed(mHandler.obtainMessage(0,mHeadsetState,
                                                        mPrevHeadsetState, 
                                                        mHeadsetName),//send message 
} 

一下一段没有考证：但我猜应该是由于这个原因会调用到sendIntents 
private final Handler mHandler = newHandler() 
{ 
    @Override 
    public void handleMessage(Message msg)   
    { 
        sendIntents(msg.arg1, msg.arg2,(String)msg.obj); 
        mWakeLock.release(); 
    } 
}; 
如果有新的事件，将会调用 
private synchronized final void sendIntents 
再调用到 
private final void sendIntent 
此处填充Intent 。 
private final void sendIntent(int headset,int headsetState, int prevHeadsetState, String 
headsetName) 
{ 
    …… 
    Intent intent = new Intent(Intent.ACTION_HEADSET_PLUG); 
    intent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY);
    …… 
    if ((headset &amp; HEADSETS_WITH_MIC) !=0) { 
        microphone = 1;//  是否有 mic 
    } 
    if ((headsetState &amp; headset) != 0) { 
        state = 1; 
    } 
    intent.putExtra(&quot;state&quot;, state); 
    intent.putExtra(&quot;name&quot;, headsetName); 
    intent.putExtra(&quot;microphone&quot;,microphone); 
    …… 
    ActivityManagerNative.broadcastStickyIntent(intent,null);    //broadcast intent 
} 
 
</rich_text><rich_text foreground="#00000000ffff" scale="h3">跟音频相关 </rich_text><rich_text>
此时在AudioService.java中将接收Broadcast 
private class AudioServiceBroadcastReceiverextends BroadcastReceiver 
{ 
    public void onReceive(Context context,Intent intent) 
    { 
        …… 
        else if (action.equals(Intent.ACTION_HEADSET_PLUG)) { 
            …… 
            //if you first insert headset, will implement fellow code 
            AudioSystem.setDeviceConnectionState(AudioSystem.DEVICE_OUT_WIRED_HEADSET,AudioSystem.DEVICE_STATE_AVAILABLE,&quot;&quot;);
        } 
    } 
} 
调用setDeviceConnectionState由在android_media_AudioSystem.cpp中可以得到 
static JNINativeMethod gMethods[] = {  
    &quot;setDeviceConnectionState&quot;,&quot;(IILjava/lang/String;)I&quot;,(void*)android_media_AudioSystem_setDeviceConnectionState},  
}; 
所以将调用到android_media_AudioSystem_setDeviceConnectionState
android_media_AudioSystem_setDeviceConnectionState(JNIEnv*env, jobject thiz, jint device, 
    jint state, jstring device_address) 
{ 
    …… 
    Intstatus =check_AudioSystem_Command(AudioSystem::setDeviceConnectionState(static_cast&lt;AudioSystem::audio_devices&gt;(device), 
        static_cast &lt;AudioSystem::device_connection_state&gt;(state),c_address)); 
    …… 
} 
由上段程序可以看出，将会调用到AudioSystem.cpp中的setDeviceConnectionState 
status_t AudioSystem::setDeviceConnectionState(audio_devicesdevice, 
                                                 device_connection_state state, 
                                                 const char *device_address) 
{ 
    const sp&lt;IAudioPolicyService&gt;&amp; aps =AudioSystem::get_audio_policy_service(); 
   
    if (aps == 0) return PERMISSION_DENIED; 
 
    return aps-&gt;setDeviceConnectionState(device, state, device_address); 
} 
get_audio_policy_service();这个函数具体做什么我现在还没弄清楚。 
一下这边我没找到具体的联系，我通过打印得知会调用到AudioPolicyManager.cpp 的
setDeviceConnectionState 函数，以下的函数很重要，关系到设置输出路径等 
status_tAudioPolicyManager::setDeviceConnectionState(AudioSystem::audio_devices device,
                                         AudioSystem::device_connection_state state, 
                                                 const char *device_address) 
{ 
      …… 
      //handle output devices 
    if(AudioSystem::isOutputDevice(device)) { 
        switch (state) { 
            case AudioSystem::DEVICE_STATE_AVAILABLE: 
                …… 
                if (AudioSystem::isBluetoothScoDevice(device)) { 
                    …… 
                } else if (device == AudioSyste m::DEVICE_OUT_WIRED_HEADSET || 
                        device == AudioSystem::DEVICE_OUT_WIRED_HEADPHONE) { 
                    if (getDeviceForStrategy(STRATEGY_PHONE) ==device &amp;&amp; 
                        (mPhoneState ==AudioSystem::MODE_IN_CALL || 
                        mOutputs.valueFor(mHardwareOutput)-&gt;isUsedByStrategy(STRATEGY_PHONE))) { 
                        newDevice = device; 
                    } else if ((getDeviceForStrategy(STRATEGY_SONIFICATION) &amp; device) &amp;&amp; 
                        mOutputs.valueFor(mHardwareOutput)-&gt;isUsedByStrategy(STRATEGY_SONIFICATION)) { 
                        newDevice =getDeviceForStrategy(STRATEGY_SONIFICATION); 
                    } else if ((getDeviceForStrategy(STRATEGY_MEDIA) == device) &amp;&amp;                          
                                mOutputs.valueFor(mHardwareOutput)-&gt;isUsedByStrategy(STRATEGY_MEDIA)) { 
                        newDevice = device; 
                    } else if (getDeviceForStrategy(STRATEGY_DTMF) == device &amp;&amp;           
                            mOutputs.valueFor(mHardwareOutput)-&gt;isUsedByStrategy(STRATEGY_DTMF)) { 
                        newDevice = device; 
                    } 
                } 
        }
    }   
} 
 
以上两个个主要函数是： 
getDeviceForStrategy ， 
mOutputs.valueFor(mHardwareOutput)-&gt;isUsedByStrategy(STRATEGY_PHONE)) 
存在以下疑问： 
1  ：getDeviceForStrategy 的作用是什么？ 
boolAudioPolicyManager::AudioOutputDescriptor::isUsedByStrategy(routing_strategystrategy) 
{ 
    for(int i = 0; i &lt; (int)Audio System::NUM_STREAM_TYPES; i++) { 
        if(AudioPolicyManager::getStrategy((AudioSystem::stream_type)i) == strategy&amp;&amp; 
           isUsedByStream((AudioSystem::stream_type)i)) { 
            return true; 
       } 
    } 
    
    return false; 
} 
这个函数很重要主要是为以后设置为耳机，蓝牙这类的输出. 
以上函数会调用到 
bool isUsedByStream(AudioSystem::stream_type stream) { 
    return mRefCount[stream] &gt;0 ? true : false; 
} 
 
这个函数也很重要. 这个函数用到mRefCount 这个数组， 
这个函数在voidAudioPolicyManager::AudioOutputDescriptor::changeRefCount 中改变 
然而changeRefCount将会在startOutput 调用。 
具体什么时候改变mRefCount这个数组，现不是非常的清楚。
 
上面的走完后将设置输出 
setOutputDevice(mHardw areOutput,newDevice); 
其中newDevice 决定什么样的输出。 
 
</rich_text><rich_text foreground="#00000000ffff" scale="h3">跟事件的处理相关 
文件流程流程 </rich_text><rich_text>
KeyinputQueue.java 
Com_android_server_KeyInputQueue.cpp 
Eventhub.cpp 
SystemService.java 
WindowManagerService.java 
 
从SystemService.java中启动服务： 
public class SystemServer 
{ 
    …… 
    native public static void init1(String[]args); 
     
    public static void main(String[] args) { 
        …… 
        init1(args); 
    }
     
    public static final void init2() { 
        Log.i(TAG, &quot;Entered the Android system server!&quot;); 
        Thread th r = new ServerThread(); 
        thr.setName(&quot;android.server.ServerThread&quot;); 
        thr.start(); 
    } 
} 
 
运行init1(args);  在com_android_server_SystemServer.cpp 中有 
static JNINativeMethod gMethods[] = { 
   /* name, signature, funcPtr */ 
    {&quot;init1&quot;, &quot;([Ljava/lang/String;)V&quot;, (void*)android_server_SystemServer_init1 }, 
}; 
 
而又有如下： 
extern &quot;C&quot; int system_init(); 
static voidandroid_server_SystemServer_init1(JNIEnv* en v, jobject clazz) 
{ 
    system_init(); 
} 
 
system_init()将调用在System_init.cpp  中 
extern &quot;C&quot; status _tsystem_init() 
{ 
    …… 
    runtime-&gt;callStatic(&quot;com/android/server/SystemServer&quot;,&quot;init2&quot;);// 这句后将跳会SystemService.java 中的 init2 。 
    ……  
} 
 
也即是如下代码 
public static final void init2()   
{ 
    Log.i(TAG, &quot;Entered the Android system server!&quot;); 
    Thread thr = new ServerThread(); //建立一个 service 的线程 
    thr.setName(&quot;android.server.ServerThread&quot;);
    thr.start(); 
} 
 
服务线程： 
class ServerThread  extends Thread 
{ 
    …… 
    public void run() { 
        …… 
        Log.i(TAG, &quot;Window Manager&quot;); 
        wm = WindowManagerService.main(context, power, 
                    factoryTest  != SystemServer.FACTORY_TEST_LOW_LEVEL); 
        ServiceManager.addService(Context.WINDOW_SERVICE, wm); 
        ((ActivityManagerService)ServiceManager.getService(&quot;activity&quot;)) 
                    .setWindowManager(wm); 
        …… 
    } 
    …… 
} 
 
将跳转到WindowManagerService.java的main 中 
public static WindowManagerServicemain(Context context, 
PowerManagerService pm, booleanhaveInputMethods)   
{ 
    WMThread thr = new WMThread(context, pm,haveInputMethods);//建立线程 
    thr.start(); 
    synchronized (thr) { 
         while (thr.mService == null) { 
          try { 
                thr.wait(); 
              } catch (InterruptedException e){} 
        } 
    }
    return thr.mService; 
} 

static class WMThread extends Thread 
{ 
    …… 
    public void run() { 
        …… 
        WindowManagerService s = newWindowManagerService(mContext, mPM, 
                        mHaveInputMethods); // 新建一个 WindowManagerService 的线程 
        …… 
    } 
} 
即将跳到WindowManagerService的构造函数 
private WindowManagerService(Contextcontext, PowerManagerService pm, 
           boolean haveInputMethods)  
{ 
    …… 
    mQueue = new KeyQ(); 
    …… 
} 
而 
private class KeyQ extends KeyInputQueue 
在KeyInputQueue的构造函数中 
KeyInputQueue(Context context,HapticFeedbackCallback   hapticFeedbackCallback) 
{ 
    …… 
    mThread.start(); 
} 
而 
Thread mThread = newThread(&quot;InputDeviceReader&quot;) 
{ 
    …… 
    readEvent(ev); 
    …… 
} 
private static native boolean readEvent(RawInputEventoutEvent);由这句可知readEvent在JNI
层 
在com_android_server_KeyInputQueue.cpp中有 
static JNINativeMethod gInputMethods[] = { 
   /* name, signature, funcPtr */ 
    {&quot;readEvent&quot;,      &quot;(Landroid/view/RawInputEvent;)Z&quot;,  (void*) android_server_KeyInputQueue_readEvent }, 
    …… 
} 
由以上可知在KeyInputQueue.java中调的 readEvent 将调用到
com_android_server_KeyInputQueue.cpp 的android_server_KeyInputQueue_readEvent。 
static jboolean   
android_server_KeyInputQueue_readEvent(JNIEnv*env, jobject clazz, jobject event) 
{ 
    …… 
    if (hub == NULL) { 
        hub = new EventHub; 
        gHub = hub; 
    } 
    …… 
    bool res = hub-&gt;getEvent(&amp;deviceId,&amp;type, &amp;scancode, &amp;keycode, 
               &amp;flags, &amp;value, &amp;when); 
    …… 
} 
hub-&gt;getEvent 将调用EventHub.cpp 的getEvent 函数 
bool EventHub::getEvent(int32_t*outDeviceId, int32_t* outType, 
       int32_t* outScancode, int32_t* outKeycode, uint32_t *outFlags, 
       int32_t* outValue, nsecs_t* outWhen) 
{ 
     …… 
     if (!mOpened) { 
           mError = openPlatformInput() ? NO_ERROR : UNKNOWN_ERROR; 
           mOpened = true; 
     }  
} 
 
openPlatformInput()将扫描/dev/input 下的所有 event并打开它 
/* 
  *Open the platform-specific input device. 
 */ 
bool EventHub::openPlatformInput(void) 
{ 
    …… 
    res= scan_dir(device_path);// 其中static const char *device_path = &quot;/dev/input&quot;; 
    …… 
} 

而 
int EventHub::scan_dir(const char *dirname)
{ 
    char devname[PATH_MAX]; 
    char *filename; 
    DIR *dir; 
    struct dirent *de; 
    dir = opendir(dirname); 
    if (dir == NULL) 
        return -1; 
    strcpy(devname, dirname); 
    filename = devname + strlen(devname); 
    *filename++ = '/'; 
    // 扫描/dev/input 下的所有event并打开它 
    while((de = readdir(dir))) { 
       if(de-&gt;d_name[0] == '.' &amp;&amp; 
          (de-&gt;d_name[1] == '\0' || 
           (de-&gt;d_name[1] == '.' &amp;&amp; de-&gt;d_name[2] == '\0'))) 
           continue; 
       strcpy(filename, de-&gt;d_name); 
       open_device(devname);//打开event设备 
    }
    
    closedir(dir); 
    return 0; 
} 
 
int EventHub::open_device(const char*deviceName) 
{ 
    …… 
    fd = open(deviceName, O_RDWR); 
    …… 
    if ((device-&gt;classes&amp;CLASS_KEYBOARD)!= 0) { 
        char tmpfn[sizeof(name)]; 
        char keylayoutFilename[300]; 
     
        // a more descriptive name 
        device-&gt;name = name; 
     
        // replace all the spaces with underscores 
        strcpy(tmpfn, name); 
        for (char *p = strchr(tmpfn, ' '); p &amp;&amp; *p; p = strchr(tmpfn, '')) 
               *p = '_'; 
     
        // find the .kl file we need for this device 
       const char* root = getenv(&quot;ANDROID_ROOT&quot;); 
       snprintf(keylayoutFilename, sizeof(keylayoutFilename), 
                    &quot;%s/usr/keylayout/%s.kl&quot;, root, tmpfn); 
       bool defaultKeymap = false; 
       if (access(keylayoutFilename, R_OK)) { 
            snprintf(keylayoutFilename, sizeof(keylayoutFilename), 
                    &quot;%s/usr/keylayout/%s&quot;, root, &quot;qwerty.kl&quot;); 
            defaultKeymap = true; 
        } 
        device-&gt;layoutMap-&gt;load(keylayoutFilename); 
    } 
如果上面的操作都成功则把所有设备都打开了，根据注册的 input 设备的名字查找对应的.kl
文件，如果有该设备就用该.kl把扫描码映射键码。文件现回到EventHub::getEvent。 

release_wake_lock(WAKE_LOCK_ID); 

pollres = poll(mFDs, mFDCount, -1); 
 
acquire_wake_lock(PARTIA L_WAKE_LOCK, WAKE_LOCK_ID); 
在这边poll ，如果没有新事件将在这等待，如果有则开始下面的读事件 
     res = read(mFDs[i].f d, &amp;iev, sizeof(iev)); 
 
到此整个从上面开始的读过程结束。 
现在回到 
Thread mThread = newThread(&quot;InputDeviceReader&quot;) 
{ 
    …… 
    readEvent(ev); 
    …… 
    else { 
        send = preprocessEvent(di, ev); 
    } 
} 
由这个abstractboolean preprocessEvent(InputDevice device, RawInputEvent event);可以看出上
面调用的preprocessEvent将调到windowmanagerservice.java中的 
boolean preprocessEvent(InputDevice device,RawInputEvent event) 
boolean preprocessEvent(InputDevice device,RawInputEvent event) 
{ 
    if (mPolicy.preprocessInputEventTq(event)) { 
         return true; 
    }
 
   switch (event.type) { 
        case RawInputEvent.EV_KEY:  
        { 
            …… 
            if ((actions &amp; WindowManagerPolicy.ACTION_PASS_TO_USER) != 0) { // 这段代码不是很清楚，做什么用的                        
                if (event.value != 0 &amp;&amp;mPolicy.isAppSwitchKeyTqTiLwLi(event.keycode)) { 
                    filterQueue(this); 
                    mKeyWaiter.appSwitchComing(); 
                }
                 
                return true; 
            } else {
 
                return false; 
            } 
往事件队列里放入事件 
 
在WindowManagerService.java的构造函数中又有 
mInputThread = new InputDispatcherThread();
InputDispatcherThread  线程实际上从   KeyQ  的事件队列中读取按键事件 
mInputThread.start(); 
又有如下 
private final class InputDispatcherThread extends Thread { 
    // Time to wait when there isnothing to do: 9999 seconds. 
    static final int LONG_WAIT=9999*1000; 
    public InputDispatcherThread() { 
        super(&quot;InputDispatcher&quot;); 
    } 
    @Override 
    public void run() { 
        while (true) { 
            try { 
                process(); 
            } catch (Exception e) { 
                Log.e(TAG, &quot;Exceptionin input dispatcher&quot;, e); 
            } 
        } 
    } 
    private void process() { 
        …… 
        while (true) { 
            // Retrieve next event, waiting only aslong as the next 
            // repeat timeout.    If theconfiguration has changed, then 
            // don't wait at all -- we'll report the change as soon as 
            // we have processed all events. 
            QueuedEvent ev = mQueue.getEvent( 
                    (int)((!configChanged&amp;&amp; curTime &lt; nextKeyTime) 
                            ?(nextKeyTime-curTime) : 0)); 
            …… 
            switch (ev.classType) { 
                case RawInputEvent.CLASS_KEYBOARD: 
                    if (ke.isDown()) { 
                        lastKey = ke; 
                        downTime = curTime; 
                        keyRepeatCount = 0; 
                        lastKeyTime = curTime; 
                        nextKeyTime = lastKeyTime+ ViewConfiguration.getLongPressTimeout(); 
                        if (DEBUG_INPUT) Log.v(TAG, &quot;Received key down: first repeat @&quot;+nextKeyTime); 
                    } else { 
                        lastKey = null; 
                        downTime = 0; 
                        // Arbitrary long timeout. 
                        lastKeyTime = curTime; 
                        nextKeyTime = curTime + LONG_WAIT; 
                        if (DEBUG_INPUT) Log.v(TAG, &quot;Received key up: ignore repeat @&quot;+nextKeyTime); 
                    } 
                    dispatchKey((KeyEvent)ev.event, 0, 0);    //发布事件 
                    mQueue.recycleEvent(ev); 
                    break; 
                …… 
            } 
 
 
    /** 
     * @return Returns true if event was dispatched, false if it was droppedfor any reason 
     */ 
    private int dispatchKey(KeyEvent event, int pid, int uid) { 
       if (DEBUG_INPUT) Log. v(TAG, &quot;Dispatch key: &quot; + event); 
 
       Object focusObj = mKeyWaiter.waitForNextEventTarget(event, null, 
                null, false, false, pid, uid); 
       if (focusObj == null) { 
                        Log.w(TAG, &quot;Nofocus window, dropping: &quot; + event); 
           return INJECT_FAILED; 
       } 
       if (focusObj == mKeyWaiter.CONSUMED_EVENT_TOKEN) { 
           return INJECT_SUCCEEDED; 
       } 
 
        // Okay we have finishedwaiting for the last event to be processed. 
        // First off, if this is a repeat event, check  to see if there is 
        // a corresponding up even t in the queue.    If there is, we will 
        // just drop the repeat, because it makes no sense to repeat after 
        // the user has released akey.    (This is especially important for
        // long presses.) 
        if (event.getRepeatCount() &gt; 0 &amp;&amp;mQueue.hasKeyUpEvent(event)) { 
            return INJECT_SUCCEEDED; 
        } 
        
       WindowState focus = (WindowState)focusObj;  
       if (DEBUG_INPUT) Log.v(TAG, &quot;Dispatchingto &quot; + focus + &quot;: &quot; + event);  
        if (uid != 0 &amp;&amp; uid !=focus.mSession.mUid) { 
           if (mContext.checkPermission(android.Manifest.permission.INJECT_EVENTS,pid, uid) 
                    !=PackageManager.PERMISSION_GRANTED) { 
                Log.w(TAG, &quot;Permissiondenied: injecting key event from pid &quot; 
                        + pid + &quot; uid&quot; + uid + &quot; to window &quot; + focus 
                        + &quot; owned by uid&quot; + focus.mSession.mUid); 
                return INJECT_NO_PERMISSION; 
           } 
       } 
 
       synchronized(mWindowMap) { 
           mKeyWaiter.bindTargetWindowLocked(focus); 
       } 
 
       // NOSHIP extra state logging 
       mKeyWaiter.recordDispatchState(event, focus); 
       // END NOSHIP 
 
       try { 
           if (DEBUG_INPUT || DEBUG_FOCUS) { 
                Log.v(TAG, &quot;Delivering key&quot; + event.getKeyCode() 
                       + &quot; to &quot;+ focus); 
           } 
           focus.mClient.dispatchKey(event); 
           return INJECT_SUCCEEDED; 
       } catch (android.os.RemoteException e) { 
                        Log.i(TAG, &quot;WINDOWDIED during key dispatch: &quot; + focus); 
           try { 
                removeWindow(focus.mSession,focus.mClient); 
           } catch (java.util.NoSuchElementException ex) { 
                // This will happen if thewindow has already been 
                // removed. 
            } 
       } 
 
       return INJECT_FAILED; 
} 
</rich_text></node></node></cherrytree>