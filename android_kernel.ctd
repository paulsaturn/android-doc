<?xml version="1.0" ?><cherrytree><node name="Android内核解读" prog_lang="custom-colors" readonly="False" tags="" unique_id="128"><rich_text></rich_text><node name="Android系统的开机启动过程 " prog_lang="custom-colors" readonly="False" tags="" unique_id="130"><rich_text scale="h2">前言</rich_text><rich_text>
    当长按手机的power键，Android手机就会开机，那么Android系统的开机启动过程到底是怎么样的呢，本文将要 介绍这一过程。简单来说，Android系统的开机启动过程大致是这样的：首先linux系统会启动一个叫做zygote（可以称为受精卵、母体）的 linux程序，这个程序实际上就是android系统的内核，zygote启动的时候会建立socket服务端并加载大量的类和资源。接着zygote 会孵化第一个dalvik进程SystemServer，在SystemServer中会创建一个socket客户端，后续 AMS（ActivityManagerService）会通过此客户端和zygote通信，zygote再根据请求孵化出新的dalvik进程即启动一 个新的apk同时把新进程的socket连接关闭。SystemServer初始化完毕后会启动一个位于桟顶的activity，由于系统刚开机，所以 task桟顶没有activity，于是接着它会发送一个隐式的intent（category：CATEGORY_HOME），也就是launcher 了，即Android系统的桌面程序，launcher启动以后，我们就可以通过桌面启动各种应用了，可以发现，launcher可以有多个，第三方应用只要加入launcher所需要的intent-filter即可。下面一一分析各个流程。（注：本文分析基于Android4.3源码）

</rich_text><rich_text scale="h2">zygote的启动过程</rich_text><rich_text>
zygote是一个linux程序，其对应的可执行文件位于/system/bin/app_process，它在/init.rc中定义，如下
service zygote /system/bin/app_process -Xzygote /system/bin --zygote --start-system-server
    class main
    socket zygote stream 660 root system
    onrestart write /sys/android_power/request_state wake
    onrestart write /sys/power/state on
    onrestart restart media
    onrestart restart netd
    
    可以发现，zygote创建了一个流式套接字（即采用TCP协议），并监听660端口，并且当zygote重启的时候需要对唤醒电源并重启Media、 netd服务。下面看zygote的源码，
其路径为frameworks\base\cmds\app_process\app_main.cpp中：
1. int main(int argc, char* const argv[])  
2. {  
3. #ifdef __arm__  
4.     /* 
5.      * b/7188322 - Temporarily revert to the compat memory layout 
6.      * to avoid breaking third party apps. 
7.      * 
8.      * THIS WILL GO AWAY IN A FUTURE ANDROID RELEASE. 
9.      * 
10.      * http://git.kernel.org/?p=linux/kernel/git/torvalds/linux-2.6.git;a=commitdiff;h=7dbaa466 
11.      * changes the kernel mapping from bottom up to top-down. 
12.      * This breaks some programs which improperly embed 
13.      * an out of date copy of Android's linker. 
14.      */  
15.     char value[PROPERTY_VALUE_MAX];  
16.     property_get(&quot;ro.kernel.qemu&quot;, value, &quot;&quot;);  
17.     bool is_qemu = (strcmp(value, &quot;1&quot;) == 0);  
18.     if ((getenv(&quot;NO_ADDR_COMPAT_LAYOUT_FIXUP&quot;) == NULL) &amp;&amp; !is_qemu) {  
19.         int current = personality(0xFFFFFFFF);  
20.         if ((current &amp; ADDR_COMPAT_LAYOUT) == 0) {  
21.             personality(current | ADDR_COMPAT_LAYOUT);  
22.             setenv(&quot;NO_ADDR_COMPAT_LAYOUT_FIXUP&quot;, &quot;1&quot;, 1);  
23.             execv(&quot;/system/bin/app_process&quot;, argv);  
24.             return -1;  
25.         }  
26.     }  
27.     unsetenv(&quot;NO_ADDR_COMPAT_LAYOUT_FIXUP&quot;);  
28. #endif  
29.   
30.     // These are global variables in ProcessState.cpp  
31.     mArgC = argc;  
32.     mArgV = argv;  
33.   
34.     mArgLen = 0;  
35.     for (int i=0; i&lt;argc; i++) {  
36.         mArgLen += strlen(argv[i]) + 1;  
37.     }  
38.     mArgLen--;  
39.     //注意，这里持有了一个AppRuntime对象，其继承自AndroidRuntime  
40.     AppRuntime runtime;  
41.     const char* argv0 = argv[0];  
42.   
43.     // Process command line arguments  
44.     // ignore argv[0]  
45.     argc--;  
46.     argv++;  
47.   
48.     // Everything up to '--' or first non '-' arg goes to the vm  
49.   
50.     int i = runtime.addVmArguments(argc, argv);  
51.   
52.     // Parse runtime arguments.  Stop at first unrecognized option.  
53.     bool zygote = false;  
54.     bool startSystemServer = false;  
55.     bool application = false;  
56.     const char* parentDir = NULL;  
57.     const char* niceName = NULL;  
58.     const char* className = NULL;  
59.     //这里是解析init.rc中定义的zygote的启动参数  
60.     while (i &lt; argc) {  
61.         const char* arg = argv[i++];  
62.         if (!parentDir) {  
63.             parentDir = arg;  
64.         } else if (strcmp(arg, &quot;--zygote&quot;) == 0) {  
65.             zygote = true;  
66.             niceName = &quot;zygote&quot;;  
67.         } else if (strcmp(arg, &quot;--start-system-server&quot;) == 0) {  
68.             startSystemServer = true;  
69.         } else if (strcmp(arg, &quot;--application&quot;) == 0) {  
70.             application = true;  
71.         } else if (strncmp(arg, &quot;--nice-name=&quot;, 12) == 0) {  
72.             niceName = arg + 12;  
73.         } else {  
74.             className = arg;  
75.             break;  
76.         }  
77.     }  
78.   
79.     if (niceName &amp;&amp; *niceName) {  
80.         setArgv0(argv0, niceName);  
81.         set_process_name(niceName);  
82.     }  
83.   
84.     runtime.mParentDir = parentDir;  
85.   
86.     if (zygote) {  
87.         //从init.rc中的定义可以看出，zygote为true，startSystemServer也为true  
88.         //最终这里会调用ZygoteInit的main方法  
89.         runtime.start(&quot;com.android.internal.os.ZygoteInit&quot;,  
90.                 startSystemServer ? &quot;start-system-server&quot; : &quot;&quot;);  
91.     } else if (className) {  
92.         // Remainder of args get passed to startup class main()  
93.         runtime.mClassName = className;  
94.         runtime.mArgC = argc - i;  
95.         runtime.mArgV = argv + i;  
96.         runtime.start(&quot;com.android.internal.os.RuntimeInit&quot;,  
97.                 application ? &quot;application&quot; : &quot;tool&quot;);  
98.     } else {  
99.         fprintf(stderr, &quot;Error: no class name or --zygote supplied.\n&quot;);  
100.         app_usage();  
101.         LOG_ALWAYS_FATAL(&quot;app_process: no class name or --zygote supplied.&quot;);  
102.         return 10;  
103.     }  
104. }  
    说 明：这句代码 runtime.start(&quot;com.android.internal.os.ZygoteInit&quot;, startSystemServer ?  &quot;start-system-server&quot; :  &quot;&quot;)
    在AndroidRuntime中实现，其最终会调用ZygoteInit的main方法，请看 env-&gt;CallStaticVoidMethod(startClass, startMeth,  strArray);这里的startClass就是com.android.internal.os.ZygoteInit，而startMeth就是main，所以，我们直接看ZygoteInit的main方法，代码路径为：frameworks\base\core\java\com\android\internal\os\ZygoteInit.java：
106. public static void main(String argv[]) {  
107.     try {  
108.         // Start profiling the zygote initialization.  
109.         SamplingProfilerIntegration.start();  
110.         //这里注册流式socket，以便于fork新的dalvik进程  
111.         registerZygoteSocket();  
112.         EventLog.writeEvent(LOG_BOOT_PROGRESS_PRELOAD_START,  
113.             SystemClock.uptimeMillis());  
114.         //这里预先加载一些类和资源  
115.         preload();  
116.         EventLog.writeEvent(LOG_BOOT_PROGRESS_PRELOAD_END,  
117.             SystemClock.uptimeMillis());  
118.   
119.         // Finish profiling the zygote initialization.  
120.         SamplingProfilerIntegration.writeZygoteSnapshot();  
121.   
122.         // Do an initial gc to clean up after startup  
123.         gc();  
124.   
125.         // Disable tracing so that forked processes do not inherit stale tracing tags from  
126.         // Zygote.  
127.         Trace.setTracingEnabled(false);  
128.   
129.         // If requested, start system server directly from Zygote  
130.         if (argv.length != 2) {  
131.             throw new RuntimeException(argv[0] + USAGE_STRING);  
132.         }  
133.   
134.         if (argv[1].equals(&quot;start-system-server&quot;)) {  
135.             //启动SystemServer，zygote通过SystemServer和上层服务进行交互  
136.             startSystemServer();  
137.         } else if (!argv[1].equals(&quot;&quot;)) {  
138.             throw new RuntimeException(argv[0] + USAGE_STRING);  
139.         }  
140.   
141.         Log.i(TAG, &quot;Accepting command socket connections&quot;);  
142.         //通过Select方式监听端口，即异步读取消息，死循环，没有消息则一直阻塞在那里  
143.         runSelectLoop();  
144.   
145.         closeServerSocket();  
146.     } catch (MethodAndArgsCaller caller) {  
147.         caller.run();  
148.     } catch (RuntimeException ex) {  
149.         Log.e(TAG, &quot;Zygote died with exception&quot;, ex);  
150.         closeServerSocket();  
151.         throw ex;  
152.     }  
153. }  
    下面看一下runSelectLoop方法，看看它是如何fork产生一个新的进程的：
1. /** 
2.  * Runs the zygote process's select loop. Accepts new connections as 
3.  * they happen, and reads commands from connections one spawn-request's 
4.  * worth at a time. 
5.  * 
6.  * @throws MethodAndArgsCaller in a child process when a main() should 
7.  * be executed. 
8.  */  
9. private static void runSelectLoop() throws MethodAndArgsCaller {  
10.     ArrayList&lt;FileDescriptor&gt; fds = new ArrayList&lt;FileDescriptor&gt;();  
11.     ArrayList&lt;ZygoteConnection&gt; peers = new ArrayList&lt;ZygoteConnection&gt;();  
12.     FileDescriptor[] fdArray = new FileDescriptor[4];  
13.   
14.     fds.add(sServerSocket.getFileDescriptor());  
15.     peers.add(null);  
16.   
17.     int loopCount = GC_LOOP_COUNT;  
18.     //死循环，没有消息则一直阻塞在这里  
19.     while (true) {  
20.         int index;  
21.   
22.         /* 
23.          * Call gc() before we block in select(). 
24.          * It's work that has to be done anyway, and it's better 
25.          * to avoid making every child do it.  It will also 
26.          * madvise() any free memory as a side-effect. 
27.          * 
28.          * Don't call it every time, because walking the entire 
29.          * heap is a lot of overhead to free a few hundred bytes. 
30.          */  
31.         if (loopCount &lt;= 0) {  
32.             gc();  
33.             loopCount = GC_LOOP_COUNT;  
34.         } else {  
35.             loopCount--;  
36.         }  
37.   
38.   
39.         try {  
40.             fdArray = fds.toArray(fdArray);  
41.             //通过select()函数来读取新的socket消息，其返回值有&lt;0、0、&gt;0三种  
42.             //分别代表：发生异常、继续读取新消息、首先处理当前消息  
43.             index = selectReadable(fdArray);  
44.         } catch (IOException ex) {  
45.             throw new RuntimeException(&quot;Error in select()&quot;, ex);  
46.         }  
47.   
48.         if (index &lt; 0) {  
49.             throw new RuntimeException(&quot;Error in select()&quot;);  
50.         } else if (index == 0) {  
51.             //构造一个ZygoteConnection对象，并将其加入到peers列表中  
52.             ZygoteConnection newPeer = acceptCommandPeer();  
53.             peers.add(newPeer);  
54.             fds.add(newPeer.getFileDesciptor());  
55.         } else {  
56.             boolean done;  
57.             //这里处理当前socket消息，ZygoteConnection的runOnce会被调用，一个新的dalvik进程会被创建  
58.             done = peers.get(index).runOnce();  
59.   
60.             if (done) {  
61.                 //处理完了以后删除此socket消息  
62.                 peers.remove(index);  
63.                 fds.remove(index);  
64.             }  
65.         }  
66.     }  
67. }  
    接着，我们还需要看下ZygoteConnection的runOnce方法，看看一个dalvik进程到底是如何产生的，我们知道每个apk都运行在一个 独立的dalvik进程中，所以当启动一个apk的时候，zygote会孵化出一个新的进程，在这个进程中运行此apk。  在 ZygoteConnection中，新进程是通过Zygote的静态方法forkAndSpecialize来产生的：
    pid = Zygote.forkAndSpecialize(parsedArgs.uid, parsedArgs.gid, parsedArgs.gids,
    parsedArgs.debugFlags, rlimits, parsedArgs.mountExternal, parsedArgs.seInfo, parsedArgs.niceName);
具 体的我们就不用多看了，内部肯定是通过linux系统的fork()函数来产生一个新进程的。当一个新的dalvik进程产生了以后，还需要做一些清场的 工作，由于新进程是由zygote程序fork出来的，所以子进程具有zygote的一份拷贝，我们知道，zygote启动的时候创建了一个socket 服务端，这个服务端只能有一个，由zygote孵化的子进程是不应该有的，所以子进程孵化出来以后，还必须关闭拷贝的socket服务端，这些操作在 handleChildProc方法中完成：
1. private void handleChildProc(Arguments parsedArgs,  
2.         FileDescriptor[] descriptors, FileDescriptor pipeFd, PrintStream newStderr)  
3.         throws ZygoteInit.MethodAndArgsCaller {  
4.     //关闭本地和服务端（如果有）的socket  
5.     closeSocket();  
6.     ZygoteInit.closeServerSocket();  
7.   
8.     if (descriptors != null) {  
9.         try {  
10.             ZygoteInit.reopenStdio(descriptors[0],  
11.                     descriptors[1], descriptors[2]);  
12.   
13.             for (FileDescriptor fd: descriptors) {  
14.                 IoUtils.closeQuietly(fd);  
15.             }  
16.             newStderr = System.err;  
17.         } catch (IOException ex) {  
18.             Log.e(TAG, &quot;Error reopening stdio&quot;, ex);  
19.         }  
20.     }  
21.   
22.     if (parsedArgs.niceName != null) {  
23.         Process.setArgV0(parsedArgs.niceName);  
24.     }  
25.   
26.     if (parsedArgs.runtimeInit) {  
27.         if (parsedArgs.invokeWith != null) {  
28.             WrapperInit.execApplication(parsedArgs.invokeWith,  
29.                     parsedArgs.niceName, parsedArgs.targetSdkVersion,  
30.                     pipeFd, parsedArgs.remainingArgs);  
31.         } else {  
32.             RuntimeInit.zygoteInit(parsedArgs.targetSdkVersion,  
33.                     parsedArgs.remainingArgs);  
34.         }  
35.     } else {  
36.         String className;  
37.         try {  
38.             className = parsedArgs.remainingArgs[0];  
39.         } catch (ArrayIndexOutOfBoundsException ex) {  
40.             logAndPrintError(newStderr,  
41.                     &quot;Missing required class name argument&quot;, null);  
42.             return;  
43.         }  
44.   
45.         String[] mainArgs = new String[parsedArgs.remainingArgs.length - 1];  
46.         System.arraycopy(parsedArgs.remainingArgs, 1,  
47.                 mainArgs, 0, mainArgs.length);  
48.   
49.         if (parsedArgs.invokeWith != null) {  
50.             WrapperInit.execStandalone(parsedArgs.invokeWith,  
51.                     parsedArgs.classpath, className, mainArgs);  
52.         } else {  
53.             ClassLoader cloader;  
54.             if (parsedArgs.classpath != null) {  
55.                 cloader = new PathClassLoader(parsedArgs.classpath,  
56.                         ClassLoader.getSystemClassLoader());  
57.             } else {  
58.                 cloader = ClassLoader.getSystemClassLoader();  
59.             }  
60.   
61.             try {  
62.                 //这里子进程的main方法被调用，此时，子进程完全从zygote（母体）上脱离出来了  
63.                 ZygoteInit.invokeStaticMain(cloader, className, mainArgs);  
64.             } catch (RuntimeException ex) {  
65.                 logAndPrintError(newStderr, &quot;Error starting.&quot;, ex);  
66.             }  
67.         }  
68.     }  
69. }  

    /**
     * Helper exception class which holds a method and arguments and
     * can call them. This is used as part of a trampoline to get rid of
     * the initial process setup stack frames.
     */
    public static class MethodAndArgsCaller extends Exception
            implements Runnable {
        /** method to call */
        private final Method mMethod;

        /** argument array */
        private final String[] mArgs;

        public MethodAndArgsCaller(Method method, String[] args) {
            mMethod = method;
            mArgs = args;
        }

        public void run() {
            try {
                mMethod.invoke(null, new Object[] { mArgs });
            } catch (IllegalAccessException ex) {
                throw new RuntimeException(ex);
            } catch (InvocationTargetException ex) {
                Throwable cause = ex.getCause();
                if (cause instanceof RuntimeException) {
                    throw (RuntimeException) cause;
                } else if (cause instanceof Error) {
                    throw (Error) cause;
                }
                throw new RuntimeException(ex);
            }
        }
    }

    /**
     * Invokes a static &quot;main(argv[]) method on class &quot;className&quot;.
     * Converts various failing exceptions into RuntimeExceptions, with
     * the assumption that they will then cause the VM instance to exit.
     *
     * @param loader class loader to use
     * @param className Fully-qualified class name
     * @param argv Argument vector for main()
     */
    static void invokeStaticMain(ClassLoader loader,
            String className, String[] argv)
            throws ZygoteInit.MethodAndArgsCaller {
        Class&lt;?&gt; cl;

        try {
            cl = loader.loadClass(className);
        } catch (ClassNotFoundException ex) {
            throw new RuntimeException(
                    &quot;Missing class when invoking static main &quot; + className,
                    ex);
        }

        Method m;
        try {
            m = cl.getMethod(&quot;main&quot;, new Class[] { String[].class });
        } catch (NoSuchMethodException ex) {
            throw new RuntimeException(
                    &quot;Missing static main on &quot; + className, ex);
        } catch (SecurityException ex) {
            throw new RuntimeException(
                    &quot;Problem getting static main on &quot; + className, ex);
        }

        int modifiers = m.getModifiers();
        if (! (Modifier.isStatic(modifiers) &amp;&amp; Modifier.isPublic(modifiers))) {
            throw new RuntimeException(
                    &quot;Main method is not public and static on &quot; + className);
        }

        /*
         * This throw gets caught in ZygoteInit.main(), which responds
         * by invoking the exception's run() method. This arrangement
         * clears up all the stack frames that were required in setting
         * up the process.
         */
        throw new ZygoteInit.MethodAndArgsCaller(m, argv);
    }
        
    调用invokeStaticMain函数抛出MethodAndArgsCaller异常， 然后在ZygoteInit的main中
146.     } catch (MethodAndArgsCaller caller) {  
147.         caller.run();  
148.     }
    调用
    同时在ZygoteInit中会预先加载一些类和资源，具体代码在preload方法中：
    static void preload() {
        preloadClasses();
        preloadResources();
    }

</rich_text><rich_text scale="h2">SystemServer的创建</rich_text><rich_text>
    SystemServer 作为zygote孵化的第一个dalvik进程，其孵化过程在上面已经进行了描述，但是其和普通进程的启动略有不同，普通进程由 Zygote.forkAndSpecialize来启动，而SystemServer由Zygote.forkSystemServer来启动，其次是 SystemServer内部多创建了一个socket客户端。关于SystemServer内部的本地socket客户端，本文前面已经说过，外围的 Service都是通过SystemServer和zygote交互的，比如要启动一个apk，首先AMS会发起一个新进程的创建请求，在 startProcessLocked方法中会调用Process的start方法，其内部会调用startViaZygote方法，而在 startViaZygote内部会创建一个本地socket和zygote通信，我们要知道，AMS是在SystemServer进程中创建的，所以说 在SystemServer中创建一个本地socket和zygote通信是有道理的。SystemServer的一个很重要的作用是创建各种服务，包括 大家常见的WindowManagerService 、AlarmManagerService、ActivityManagerService等，然 后上层的各种manager通过binder和service进行交互，关于SystemServer创建各种服务的过程以及和binder的交互，请参 考我之前写的一篇博客的其中一节，这里就不重复了：</rich_text><rich_text link="webs http://blog.csdn.net/singwhatiwanna/article/details/18448997#t4">各种Manager和Binder服务的对应关系</rich_text><rich_text>。

</rich_text><rich_text scale="h2">系统桌面的启动</rich_text><rich_text>
 当SystemServer创建各种服务完毕后，其中的一个服务ActivityManagerService由于也创建完成，所以其事件回调方法systemReady会被调用，这个方法很长，注意到在这个方法的倒数第二句是mMainStack.resumeTopActivityLocked(null)，它的意思是将桟顶的activity复位，看它的代码
1. final boolean resumeTopActivityLocked(ActivityRecord prev, Bundle options) {  
2.     // Find the first activity that is not finishing.  
3.     //找到桟顶的activity记录  
4.     ActivityRecord next = topRunningActivityLocked(null);  
5.   
6.     // Remember how we'll process this pause/resume situation, and ensure  
7.     // that the state is reset however we wind up proceeding.  
8.     final boolean userLeaving = mUserLeaving;  
9.     mUserLeaving = false;  
10.     //由于系统刚启动，桟顶肯定没有activity，所以next为null  
11.     if (next == null) {  
12.         // There are no more activities!  Let's just start up the  
13.         // Launcher...  
14.         if (mMainStack) {  
15.             ActivityOptions.abort(options);  
16.             //程序执行到这里，桌面就会被调起来  
17.             return mService.startHomeActivityLocked(mCurrentUser);  
18.         }  
19.     }  
20.     ...此处省略  
21. }  
最后看看桌面是如何被调起来的：
1. boolean startHomeActivityLocked(int userId) {  
2.     if (mHeadless) {  
3.         // Added because none of the other calls to ensureBootCompleted seem to fire  
4.         // when running headless.  
5.         ensureBootCompleted();  
6.         return false;  
7.     }  
8.   
9.     if (mFactoryTest == SystemServer.FACTORY_TEST_LOW_LEVEL  
10.             &amp;&amp; mTopAction == null) {  
11.         // We are running in factory test mode, but unable to find  
12.         // the factory test app, so just sit around displaying the  
13.         // error message and don't try to start anything.  
14.         return false;  
15.     }  
16.     Intent intent = new Intent(  
17.         mTopAction,  
18.         mTopData != null ? Uri.parse(mTopData) : null);  
19.     intent.setComponent(mTopComponent);  
20.     if (mFactoryTest != SystemServer.FACTORY_TEST_LOW_LEVEL) {  
21.         //其实就是为intent加上CATEGORY_HOME这个Category，接着就发送隐式intent来调起所有满足条件的桌面  
22.         //这也是第三方桌面存在的价值  
23.         intent.addCategory(Intent.CATEGORY_HOME);  
24.     }  
25.     ActivityInfo aInfo =  
26.         resolveActivityInfo(intent, STOCK_PM_FLAGS, userId);  
27.     if (aInfo != null) {  
28.         intent.setComponent(new ComponentName(  
29.                 aInfo.applicationInfo.packageName, aInfo.name));  
30.         // Don't do this if the home app is currently being  
31.         // instrumented.  
32.         aInfo = new ActivityInfo(aInfo);  
33.         aInfo.applicationInfo = getAppInfoForUser(aInfo.applicationInfo, userId);  
34.         ProcessRecord app = getProcessRecordLocked(aInfo.processName,  
35.                 aInfo.applicationInfo.uid);  
36.         if (app == null || app.instrumentationClass == null) {  
37.             intent.setFlags(intent.getFlags() | Intent.FLAG_ACTIVITY_NEW_TASK);  
38.             //这里启动桌面activity，到此为止，桌面被启动了，我们就可以认为手机开机完成了  
39.             mMainStack.startActivityLocked(null, intent, null, aInfo,  
40.                     null, null, 0, 0, 0, null, 0, null, false, null);  
41.         }  
42.     }  
43.   
44.     return true;  
45. }  
到此为止，桌面已经启动了，也就意味着手机的开机启动过程已经完成，后续我们就可以通过桌面来启动各个应用了，根据本文的介绍，我们已经知道apk启动时dalvik进程的创建过程，关于单个activity的启动过程，请参看我之前写的另一篇文章</rich_text><rich_text link="webs http://blog.csdn.net/singwhatiwanna/article/details/18154335">Android源码分析-Activity的启动过程</rich_text><rich_text>。到此为止，本文结束了，相信大家对Android系统的开机启动过程应该有了一个感性的认识了。
</rich_text></node><node name="应用的安装过程" prog_lang="custom-colors" readonly="False" tags="" unique_id="129"><rich_text scale="h2">前言</rich_text><rich_text>
我 们知道，在android手机上安装一个apk很简单，只要打开apk文件，默认就会弹出安装界面，然后点击确定，经过若干秒后，apk就安装成功了，可 是你知道apk的安装过程是什么吗？你知道android系统在安装一个apk的时候都干了什么吗？在本文中，将一一解答这个问题。
    简单来说，apk的安 装过程分两步：
        第一步，将apk文件复制到程序目录下（/data/app/）；
        第二步，为应用创建数据目录（/data/data/&lt;package  name&gt;/）、提取dex文件到指定目录（/data/dalvik-cache/）、修改系统包管理信息。
        注意，本文的分析基于Android  4.3源码。

</rich_text><rich_text scale="h2">apk的复制过程</rich_text><rich_text>
    apk的安装从PackageManager的installApk方法开始，由于PackageManager所对应的binder服务为 PackageManagerService（PMS），所以，真正的安装过程都在PackageManagerService中完成。 PackageManagerService的installApk方法最终调用了installPackageWithVerificationAndEncryption方法，该方法的核心就是在最后发送了一个INIT_COPY的 消息，这个消息的含义是完成apk的拷贝过程。
1. public void installPackageWithVerificationAndEncryption(Uri packageURI,  
2.         IPackageInstallObserver observer, int flags, String installerPackageName,  
3.         VerificationParams verificationParams, ContainerEncryptionParams encryptionParams) {  
4.     mContext.enforceCallingOrSelfPermission(android.Manifest.permission.INSTALL_PACKAGES,  
5.             null);  
6.   
7.     final int uid = Binder.getCallingUid();  
8.     if (isUserRestricted(UserHandle.getUserId(uid), UserManager.DISALLOW_INSTALL_APPS)) {  
9.         try {  
10.             observer.packageInstalled(&quot;&quot;, PackageManager.INSTALL_FAILED_USER_RESTRICTED);  
11.         } catch (RemoteException re) {  
12.         }  
13.         return;  
14.     }  
15.   
16.     UserHandle user;  
17.     if ((flags&amp;PackageManager.INSTALL_ALL_USERS) != 0) {  
18.         user = UserHandle.ALL;  
19.     } else {  
20.         user = new UserHandle(UserHandle.getUserId(uid));  
21.     }  
22.   
23.     final int filteredFlags;  
24.   
25.     if (uid == Process.SHELL_UID || uid == 0) {  
26.         if (DEBUG_INSTALL) {  
27.             Slog.v(TAG, &quot;Install from ADB&quot;);  
28.         }  
29.         filteredFlags = flags | PackageManager.INSTALL_FROM_ADB;  
30.     } else {  
31.         filteredFlags = flags &amp; ~PackageManager.INSTALL_FROM_ADB;  
32.     }  
33.   
34.     verificationParams.setInstallerUid(uid);  
35.   
36.     final Message msg = mHandler.obtainMessage(INIT_COPY);  
37.     msg.obj = new InstallParams(packageURI, observer, filteredFlags, installerPackageName,  
38.             verificationParams, encryptionParams, user);  
39.     mHandler.sendMessage(msg);  
40. }  
    </rich_text><rich_text foreground="#000000">通过分析代码可以发现，真正实现apk拷贝的方法是InstallParams的handleStartCopy方法，InstallParams中有重试机制，拷贝如果失败的话会重试，最多重试4次。在拷贝之前，还必须做一件事情，那就是绑定media container  service，安装过程中一些状态的检查会用到这个服务，代码如下所示：</rich_text><rich_text>
1. class PackageHandler extends Handler {  
2.     private boolean mBound = false;  
3.     final ArrayList&lt;HandlerParams&gt; mPendingInstalls =  
4.         new ArrayList&lt;HandlerParams&gt;();  
5.   
6.     private boolean connectToService() {  
7.         if (DEBUG_SD_INSTALL) Log.i(TAG, &quot;Trying to bind to&quot; +  
8.                 &quot; DefaultContainerService&quot;);  
9.         Intent service = new Intent().setComponent(DEFAULT_CONTAINER_COMPONENT);  
10.         Process.setThreadPriority(Process.THREAD_PRIORITY_DEFAULT);  
11.         if (mContext.bindServiceAsUser(service, mDefContainerConn,  
12.                 Context.BIND_AUTO_CREATE, UserHandle.OWNER)) {  
13.             Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);  
14.             mBound = true;  
15.             return true;  
16.         }  
17.         Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);  
18.         return false;  
19.     }  
20.     ...  
21. }  
现在分析一下InstallParams的handleStartCopy方法，这个方法很长，代码就不帖出来了，大家可以自己去看看，这里主要分析下它的工作流程：
1. 检查安装位置标记位是否有冲突，如果有冲突，则安装失败，这里的有冲突是指“一个apk同时要求被安装到内部存储和sd卡”
2. 调用MCS服务的getMinimalPackageInfo方法来得到apk的推荐安装位置，并检查是否能够进行正常的安装。在这一步，有可能抛出一些无法安装的状态位：存储空间不足、程序已经安装、无效的apk文件等，这个时候安装过程终止
3. 到这一步，表示程序可以正常安装，同时MCS服务服务可能会根据需要调整安装位置，在InstallParams的installLocationPolicy中完成
4. 文件的复制过程，PMS针对内部存储和sd卡分别提供了一个类：FileInstallArgs和AsecInstallArgs，并分别调用二者的copyApk方法来完成apk的复制过程
经过了上面4步，待安装apk已经被复制到了/data/app/目录了。

</rich_text><rich_text scale="h2">apk的解析过程</rich_text><rich_text>
    上面，apk已经被复制到了/data/app/目录，安装的第一步已经完成，那么系统是什么时候对apk进行dex提取和解析的呢，这还要从PMS说起， 在PMS内部有一个AppDirObserver类，顾名思义，它的作用是应用目录观察者，它时刻观察着应用目录/data/app/，当目录内部结构改 变的时候（创建文件和删除文件）它会做出相应行为，下面看下它的代码：
1. private final class AppDirObserver extends FileObserver {  
2.     public AppDirObserver(String path, int mask, boolean isrom) {  
3.         super(path, mask);  
4.         mRootDir = path;  
5.         mIsRom = isrom;  
6.     }  
7.     //在/data/app/目录下添加或删除apk的时候，此方法会被调用  
8.     public void onEvent(int event, String path) {  
9.         String removedPackage = null;  
10.         int removedAppId = -1;  
11.         int[] removedUsers = null;  
12.         String addedPackage = null;  
13.         int addedAppId = -1;  
14.         int[] addedUsers = null;  
15.   
16.         // TODO post a message to the handler to obtain serial ordering  
17.         synchronized (mInstallLock) {  
18.             String fullPathStr = null;  
19.             File fullPath = null;  
20.             if (path != null) {  
21.                 fullPath = new File(mRootDir, path);  
22.                 fullPathStr = fullPath.getPath();  
23.             }  
24.   
25.             if (DEBUG_APP_DIR_OBSERVER)  
26.                 Log.v(TAG, &quot;File &quot; + fullPathStr + &quot; changed: &quot; + Integer.toHexString(event));  
27.   
28.             if (!isPackageFilename(path)) {  
29.                 if (DEBUG_APP_DIR_OBSERVER)  
30.                     Log.v(TAG, &quot;Ignoring change of non-package file: &quot; + fullPathStr);  
31.                 return;  
32.             }  
33.   
34.             // Ignore packages that are being installed or  
35.             // have just been installed.  
36.             if (ignoreCodePath(fullPathStr)) {  
37.                 return;  
38.             }  
39.             PackageParser.Package p = null;  
40.             PackageSetting ps = null;  
41.             // reader  
42.             synchronized (mPackages) {  
43.                 p = mAppDirs.get(fullPathStr);  
44.                 if (p != null) {  
45.                     ps = mSettings.mPackages.get(p.applicationInfo.packageName);  
46.                     if (ps != null) {  
47.                         removedUsers = ps.queryInstalledUsers(sUserManager.getUserIds(), true);  
48.                     } else {  
49.                         removedUsers = sUserManager.getUserIds();  
50.                     }  
51.                 }  
52.                 addedUsers = sUserManager.getUserIds();  
53.             }  
54.             //当apk被删除的时候，往往意味着这个apk被卸载  
55.             if ((event&amp;REMOVE_EVENTS) != 0) {  
56.                 if (ps != null) {  
57.                     if (DEBUG_REMOVE) Slog.d(TAG, &quot;Package disappeared: &quot; + ps);  
58.                     //removePackageLI方法完成卸载apk的主要功能  
59.                     removePackageLI(ps, true);  
60.                     removedPackage = ps.name;  
61.                     removedAppId = ps.appId;  
62.                 }  
63.             }  
64.               
65.             //新添加了一个apk，往往意味着一个新的apk被安装  
66.             if ((event&amp;ADD_EVENTS) != 0) {  
67.                 if (p == null) {  
68.                     if (DEBUG_INSTALL) Slog.d(TAG, &quot;New file appeared: &quot; + fullPath);  
69.                     //scanPackageLI方法完成了apk安装的第二个步骤  
70.                     p = scanPackageLI(fullPath,  
71.                             (mIsRom ? PackageParser.PARSE_IS_SYSTEM  
72.                                     | PackageParser.PARSE_IS_SYSTEM_DIR: 0) |  
73.                             PackageParser.PARSE_CHATTY |  
74.                             PackageParser.PARSE_MUST_BE_APK,  
75.                             SCAN_MONITOR | SCAN_NO_PATHS | SCAN_UPDATE_TIME,  
76.                             System.currentTimeMillis(), UserHandle.ALL);  
77.                     if (p != null) {  
78.                         /* 
79.                          * TODO this seems dangerous as the package may have 
80.                          * changed since we last acquired the mPackages 
81.                          * lock. 
82.                          */  
83.                         // writer  
84.                         synchronized (mPackages) {  
85.                             updatePermissionsLPw(p.packageName, p,  
86.                                     p.permissions.size() &gt; 0 ? UPDATE_PERMISSIONS_ALL : 0);  
87.                         }  
88.                         addedPackage = p.applicationInfo.packageName;  
89.                         addedAppId = UserHandle.getAppId(p.applicationInfo.uid);  
90.                     }  
91.                 }  
92.             }  
93.   
94.             // reader  
95.             synchronized (mPackages) {  
96.                 mSettings.writeLPr();  
97.             }  
98.         }  
99.   
100.         //下面两个if语句块大家应用不陌生吧，在我们的应用中想监听应用的安装和卸载，  
101.         //就是通过收听ACTION_PACKAGE_ADDED和ACTION_PACKAGE_REMOVED这两个广播来实现的  
102.         if (removedPackage != null) {  
103.             Bundle extras = new Bundle(1);  
104.             extras.putInt(Intent.EXTRA_UID, removedAppId);  
105.             extras.putBoolean(Intent.EXTRA_DATA_REMOVED, false);  
106.             sendPackageBroadcast(Intent.ACTION_PACKAGE_REMOVED, removedPackage,  
107.                     extras, null, null, removedUsers);  
108.         }  
109.         if (addedPackage != null) {  
110.             Bundle extras = new Bundle(1);  
111.             extras.putInt(Intent.EXTRA_UID, addedAppId);  
112.             sendPackageBroadcast(Intent.ACTION_PACKAGE_ADDED, addedPackage,  
113.                     extras, null, null, addedUsers);  
114.         }  
115.     }  
116.   
117.     private final String mRootDir;  
118.     private final boolean mIsRom;  
119. }  
    下面，我们主要分析一下scanPackageLI方法，还是仅仅分析，不帖代码，因为代码太长了，帖出来没法看了，这个方法不仅仅是完成apk包的扫描， 还解析AndroidManifest.xml文件并提取出所有的intent-filter和permission信息，apk安装的主要功能都由它来 完成的，当apk包扫描完成后，系统会调用updatePermissionsLPw方法更新系统所具有的权限。
scanPackageLI方法有两个，其第一个参数分别接受File和PackageParser.Package类型，第一个方法会从File中提取出package信息然后再调用第二个方法，下面分析第二个scanPackageLI方法，其完成的事情如下：
1. 如果包名是android，则会做一些特殊处理，这个包名为android的应用是系统内部应用的，其他应用的包名如果叫android则安装会有问题，大家可以试一下
2. 解析常见的use-feature、shared-userId、use-library标签并保存到成员变量中
3. 进行签名验证，对应的方法是verifySignaturesLP，验证失败则应用无法安装
4. 创建应用程序目录/data/data/包名，同时将apk中提取出dex文件并保存到/data/dalvik-cache，把apk当做zip解压就能得到dex文件
5. 解析AndroidManifest.xml文件，提取出所需信息，包括具有intent-filter的四大组件信息（Activity、Service、BroadcastReceiver、ContentProvider）和声明的系统权限等
    到 此为止，scanPackageLI方法结束了。而updatePermissionsLPw的作用是对系统中所有的权限进行更新，大家可以查看下 /system/etc/permissons目录，下面定义了android系统中所有的权限，开发中最常用的权限定义在目录下的 platform.xml里面，大家可以打开看看，可以看到常见的访问网络、读写外部存储等权限等都是在这里定义的。权限更新完毕以后，系统就会发送 ACTION_PACKAGE_ADDED广播，告知所有应用有新应用安装了。另外，大家可以查看下data/system/目录，里面有两个文件 packages.list和packages.xml，在packages.list里面放的是手机上安装的所有应用列表，而packages.xml 中存放的是所有应用的设置应用，比如一个应用声明了哪些系统权限就定义在这里面。关于应用的卸载，我们可以想到是应用安装过程的逆过程，大致要做的是：停 止应用、删除各种文件，更新系统设置、权限等，大家感兴趣自己看一下，完全是安装过程的逆过程，这里不介绍了。
</rich_text></node></node><node name="android启动流程" prog_lang="custom-colors" readonly="False" tags="" unique_id="1"><rich_text>
</rich_text><node name="bootloader" prog_lang="custom-colors" readonly="False" tags="" unique_id="2"><rich_text>摘要：本文讲解Android系统在启动过程中的关键动作，摈弃特定平台之间的差异，讨论共性的部分，至于启动更加详细的过程，需要结合代码分析，这里给出流程框架，旨在让大家对开机过程更明了。
 
关键词：U-boot、Linux、Android
 
目录：
       第一部分：Bootloader启动
一、Bootloader的定义和种类
二、Arm特定平台的Bootloader
三、U-boot启动流程分析
 
       第二部分：Linux启动
一、zImage是怎样炼成的？
二、linux的c启动阶段
 
       第三部分：Android启动
一、init进程
二、init启动的各种服务
              三、android启动图示
              
       对于Android整个启动过程来说，基本可以划分成三个阶段：Bootloader引导、Linux kernel启动、Android启动。下面分别对每个阶段一一展开讨论。
 
第一部分：Bootloader启动
一、             Bootloader的定义和种类
简单地说，BootLoader是在操作系统运行之前运行的一段程序，它可以将系统的软硬件
环境带到一个合适状态，为运行操作系统做好准备。这样描述是比较抽象的，但是它的任务确实不多，终极目标就是把OS拉起来运行。
 
在嵌入式系统世界里存在各种各样的Bootloader，种类划分也有多种方式。除了按照处
理器体系结构不同划分以外，还有功能复杂程度的不同。
先区分一下Bootloader和</rich_text><rich_text link="webs http://blog.csdn.net/lizhiguo0532/article/details/7017503#_msocom_1">Monitor[l1] </rich_text><rich_text>： 严格来说，Bootloader只是引导OS运行起来的代
码；而Monitor另外还提供了很多的命令行接口，可以进行调试、读写内存、烧写Flash、配置环境变量等。在开发过程中Monitor提供了 很好地调试功能，不过在开发结束之后，可以完全将其设置成一个Bootloader。所以习惯上将其叫做Bootloader。
 
 
</rich_text><rich_text justification="left"></rich_text><rich_text>

       更多bootloader还有：ROLO、Etherboot、ARMboot 、LinuxBIOS等。
       
       对于每种体系结构，都有一系列开放源码Bootloader可以选用:
       X86：X86的工作站和服务器上一般使用LILO和GRUB。
       ARM：最早有为ARM720处理器开发板所做的固件，又有了armboot，StrongARM平
台的blob，还有S3C2410处理器开发板上的vivi等。现在armboot已经并入了U-Boot，所以U-Boot也支持ARM/XSCALE平台。U-Boot已经成为ARM平台事实上的标准Bootloader。
       PowerPC：最早使用于ppcboot，不过现在大多数直接使用U-boot。
       MIPS：最早都是MIPS开发商自己写的bootloader，不过现在U-boot也支持MIPS架构。
       M68K：Redboot能够支持m68k系列的系统。
       
二、             Arm特定平台的bootloader
到目前为止，我们公司已经做过多个Arm平台的android方案，包括：marvell(pxa935)、
informax(im9815)、mediatek(mt6516/6517)、broadcom(bcm2157)。由于不同处理器芯片厂商对 arm  core的封装差异比较大，所以不同的arm处理器，对于上电引导都是由特定处理器芯片厂商自己开发的程序，这个上电引导程序通常比较简单，会初始化硬 件，提供下载模式等，然后才会加载通常的bootloader。
下面是几个arm平台的bootloader方案：
marvell(pxa935) :                bootROM + </rich_text><rich_text link="webs http://blog.csdn.net/lizhiguo0532/article/details/7017503#_msocom_4">OBM [l4] </rich_text><rich_text>+ BLOB
informax(im9815) :             bootROM + barbox + U-boot
mediatek(mt6516/6517) :     bootROM + </rich_text><rich_text link="webs http://blog.csdn.net/lizhiguo0532/article/details/7017503#_msocom_5">pre-loader[l5]</rich_text><rich_text>  + U-boot
broadcom(bcm2157) :          bootROM + boot1/boot2 + U-boot
 
为了明确U-boot之前的两个loader的作用，下面以broadcom平台为例，看下在上电之
后到U-boot的流程，如图1.2.1：
</rich_text><rich_text justification="left"></rich_text><rich_text>
                                          图1.2.1 broadcom平台上电流程
 
 
三、             U-boot启动流程分析
最常用的bootloader还是U-boot，可以引导多种操作系统，支持多种架构的CPU。它支持的操作系统有：Linux、NetBSD、 VxWorks、QNX、RTEMS、ARTOS、LynxOS等，支持的CPU架构有：ARM、PowerPC、MISP、X86、NIOS、 Xscale等。
 
手机系统不像其他的嵌入式系统，它还需要在启动的过程中关心CP的启动，这个时候就涉及到CP的image和唤醒时刻，而一般的嵌入式系统的uboot只负责引导OS内核。所以这里我们也暂不关心CP的启动，而主要关心AP侧。
从上面第二小节中可以看出，bootloader通常都包含有处理器厂商开发的上电引导程序，不过也不是所有的处理都是这样，比如三星的 S3C24X0系列，它的bootROM直接跳到U-boot中执行，首先由bootROM将U-boot的前4KB拷贝到处理器ISRAM，接着在U- boot的前4KB中必须保证要完成的两项主要工作：初始化DDR，nand和nand控制器，接着将U-boot剩余的code拷贝到SDRAM中，然 后跳到SDRAM的对应地址上去继续跑U-boot。
所以</rich_text><rich_text link="webs http://blog.csdn.net/lizhiguo0532/article/details/7017503#_msocom_6">U-boot[l6] </rich_text><rich_text>的启动过程，大致上可以分成两个阶段：第一阶段，汇编代码；第二阶段，c代码。
       
3.1 第一阶段
       U-boot的第一条指令从cpu/arm920t/start.S文件开始，第一阶段主要做了如下事情：
       
       1. 设置CPU进入SVC模式(系统管理模式)，cpsr[4:0]=0xd3。
       2. 关中断，INTMSK=0xFFFFFFFF, INTSUBMSK=0x3FF。
       3. 关看门狗，WTCON=0x0。
4. 调用s3c2410_cache_flush_all函数，使TLBS，I、D Cache，WB中数据失效。
5. 时钟设置CLKDIVN=0x3 , FCLK:HCLK:PCLK = 1:2:4。
6. 读取mp15的c1寄存器，将最高两位改成11，表示选择了异步时钟模型。
7. 检查系统的复位状态，以确定是不是从睡眠唤醒。
8.  ldr r0,_TEXT_BASE
    adr r1,_start
    cmp r0,r1
    blne cpu_init_crit
    根据这几条语句来判断系统是从nand启动的还是直接将程序下载到SDRAM中运行
的，这里涉及到</rich_text><rich_text link="webs http://blog.csdn.net/lizhiguo0532/article/details/7017503#_msocom_7">运行时域[l7] </rich_text><rich_text>和 位置无关代码的概念，ldr  r0,_TEXT_BASE的作用是将board/nextdvr2410/config.mk文件中定义的TEXT_BASE值 （0x33f80000）装载到r0中，adr  r1,_start该指令是条伪指令，在编译的时候会被转换成ADD或SUB指令根据当前pc值计算出_start标号的地址，这样的话就可以知道当前程 序在什么地址运行（位置无关代码：做成程序的所有指令都是相对寻址的指令，包括跳转指令等，这样代码就可以不在链接所指定的地址上运行）。在上电之后，系 统从nand启动，这里得到r0和r1值是不一样的，r0=0x33f80000，而r1=0x00000000。所以接下来会执行 cpu_init_crit函数。
 
9. cpu_init_crit函数，主要完成了两个工作：首先使ICache and Dcache，TLBs中早期内容失效，再设置p15  control register c1，关闭MMU，Dcache，但是打开了Icache和Fault  checking，（要求mmu和Dcache是必须要关闭的，而Icache可以打开可以关闭）；其次调用/board/nextdvr2410 /memsetup.S文件中的memsetup函数来建立对SDRAM的访问时序。
 
10. Relocate函数，加载nand flash中的uboot到SDRAM中，代码会加载到0x33f80000开始的地址，空间大小是512。
1). ndf2ram函数
a.  设置NFCONF，使能2410的nand 控制器，初始化ECC，disable chip等
b.  enable chip，复位chip，读nand状态，判断是否busy，空闲的话再次disable chip；
c.  为调用c函数准备堆栈空间，这里的堆栈是放在uboot代码在SDRAM空间的最后位置armboot_end开始的128KB地址处（包含3 words for abort-stack，实际的SP位置是128*1024-12B处）。
d.  调用c函数copy_uboot_to_ram():nandll_reset()  设置NFCONF（新增设置了时间参数，其余设置和前面一样），复位nand  flash；nandll_read_blocks(),传递了3个参数给它，0x33f80000,0x0,  9*NAND_BLOCK_SIZE.这里在读的过程中检查每个块的坏块标志，如果是坏块，则跳过不读。详情不叙，请看uboot的注释。该部分的c代码 在cpu/arm920t/Nand_cp.c文件中
e.  ok_nand_read函数：读取SDRAM的前4k内容和SRAM的4K内容进行比较，只要出现不一样的地方就会进入死循环状态，目的就是为了确保转移代码的正确性。
f.  跳回到调用ndf2ram函数处继续执行

2). ldr pc, _start_armboot
    _start_armboot: .word start_armboot
    这里将会进入第二阶段的c代码部分：start_armboot()函数，/lib_arm/board.c。
 
3.2 第二阶段
    第二阶段从文件/lib_arm/board.c的start_armboot()函数开始。
    
1.     定义一个struct global_data结构体指针gd，struct global_data结构体对象gd_data，
    定义一个struct bd_info结构体对象bd_data，
    定义一个指向函数的二级指针init_fnc_ptr，
    定义的全局结构体对象都是放在堆栈中的,gd是放在寄存器中的。
2.     gd=&amp;gd_data，gd-&gt;bd = &amp;bd_data，并且全部空间清0。
3.     init_fnc_ptr = init_sequence(一个初始化函数指针数组)。将会在接下来的for循环中提取出每一个函数来依次执行完。
init_fnc_t *init_sequence[] = {
    cpu_init,       /* 基本的处理器相关配置 -- cpu/arm920t/cpu.c */
    board_init,         
/* 基本的板级相关配置 -- board/nextdvr2410/nextdvr2410.c */
    interrupt_init,/* 初始化中断处理 -- cpu/arm920t/interrupt.c */
    env_init,       /* 初始化环境变量 -- common/env_flash.c */
    init_baudrate,  /* 初始化波特率设置 -- lib_arm/board.c */
    serial_init,    /* 串口通讯设置 -- cpu/arm920t/serial.c */
    console_init_f,/* 控制台初始化阶段1 -- common/console.c */
    display_banner,/* 打印u-boot信息 -- lib_arm/board.c */
    dram_init,  /* 配置可用的RAM -- board/nextdvr2410/nextdvr2410.c */
    display_dram_config,/* 显示RAM的配置大小 -- lib_arm/board.c */
#if defined(CONFIG_VCMA9)
         checkboard,     /* display board info */
#endif
    NULL,
};

cpu_init：根据需要设定IRQ，FIR堆栈。如果使用中断的话，中断堆栈就接在后面。 
board_init：设置LOCKTIME，配置MPLL，UPLL，配置IO  ports，设置gd-&gt;bd-&gt;bi_arch_number（553），gd-&gt;bd-&gt;bi_boot_params =  0x30000100设置boot参数地址，使能Icache和Dcache。
interrupt_init：使用timer 4来作为系统clock， 即时钟滴答， 10ms一次，到点就产生一个中断，但由于此时中断还没打开所以这个中断不会响应。
env_init：该函数主要做关于环境变量的工作，这个环境变量可以不用存放在nor或者nand  flash上，直接在内存中生成(default_environment)。不过对于那些掉电需要保存的参数来说，保存在flash上无疑是最可靠的方 式。有的uboot还支持冗余存储，也就是存两份做备份。
        在env初始化的时候，是通过env_init—&gt;nandll_read_blocks将位于nand第9块上的环境变量（16K）全部读入到0x33ef0000这个起始地址中来，在接下来将堆空间分配好之后，在函数env_relocate中，通过 在堆中获得一块区域来存放环境变量，env_ptr指向这块区域，接下来所谓的重新获得环境变量无非就是将原来0x33ef0000开始的16K数据拷贝 到env_ptr所指的区域中去。这里分第一次uboot启动（泛指只要在第一次运行saveenv指令之前所启动的uboot过程）和保存过环境变量的 情况，但实质是一样的，所不同的是，第一次uboot启动，nand第9块区域中的数据肯定不是什么环境变量，所以这是的crc校验肯定出错，所以这时系 统使用了默认的环境变量，但是只要这个默认的环境变量没有写到nand中(运行saveenv)的话，uboot的每次启动都被认为是第一次启动。而保存 过环境变量之后的话，在执行env_init的时候，就是从nand中读出了实际存在的环境变量参数，至于修不修改环境变量，保不保存，都没有上面的那种 情况出现了。
 
    init_baudrate：第一次启动uboot的时候，采用nextdvr2410nand.h中定义的115200默认波特率，后面的启动如果说在参数里设置了新的波特率的话就会用新的波特率来初始化。    
    display_banner：打印uboot的一些信息，版本信息：NC-Boot 1.5 日期-时间 ，coed范围，bss开始地址，IRQ、FIR堆栈地址。
    dram_init: gd-&gt;bd-&gt;bi_dram[0].start = PHYS_SDRAM_1;
    
    gd-&gt;bd-&gt;bi_dram[0].size  = PHYS_SDRAM_1_SIZE;设置板级数据中
    的SDRAM开始地址和大小
    display_dram_config：打印SDRAM的配置信息，如下：
                    …
    RAM Configuration:
    Bank#0: 30000000 64 MB
    …
    Checkboard: NULL
 
4.     配置可用的flash空间，并且打印出相关信息，flash_init()和display_flash_config()。
 
5.     mem_malloc_init()函数,分配堆空间
    CFG_MALLOC_LEN = 16K(CFG_ENV_SIZE)+128K
    mem_malloc_start = _armboot_start(0x33f80000)- CFG_MALLOC_LEN
    mem_malloc_end = _armboot_start(0x33f80000)
 
6.     env_relocate该函数的作用是将0x33ef0000开始16K的环境参数拷贝到堆空间中去。
 
7.    gd-&gt;bd-&gt;bi_ip_addr = getenv_IPaddr  (&quot;ipaddr&quot;)通过这中方式获得环境变量列表中的ipaddr参数（开发板ip），获得环境变量中的MAC地址，设置到 gd-&gt;bd-&gt;bi_enetaddr[reg]中。
8.     devices_init函数，创建了devlist，但是只有一个串口设备注册在内。
9.     console_init_r函数：控制台完全初始化，此后可以使用函数serial_getc和serial_putc或者putc和getc来输出log。
 
10.  使能中断，如果有网卡设备，设置网卡MAC和IP地址。
 
11.  main_loop ()；定义于common/main.c。到此所有的初始化工作已经完成，main_loop在标准输入设备中接受命令，然后分析，查找和执行。
去掉所有无关紧要的宏和代码，main_loop()函数如下：
void main_loop()
{
    static char lastcommand[CFG_CBSIZE] = { 0, };
    int len;
    int rc = 1;
    int flag;
    char *s;
    int bootdelay;
 
    s = getenv (&quot;bootdelay&quot;);   //自动启动内核等待延时
    bootdelay = 
        s ? (int)simple_strtol(s, NULL, 10) : CONFIG_BOOTDELAY;
     
    s = getenv (&quot;bootcmd&quot;);  //取得环境中设置的启动命令行    
    if (bootdelay &gt;= 0 &amp;&amp; s &amp;&amp; !abortboot (bootdelay)){
        run_command (s, 0);
        //执行启动命令行,smdk2410.h中没有定义CONFIG_BOOTCOMMAND，所以没有命令执行。
    }
    
    for (;;) {
        len = readline(CFG_PROMPT);
        //读取键入的命令行到console_buffer
         
         flag = 0;       /* assume no special flags for now */
         if (len &gt; 0)
             strcpy (lastcommand, console_buffer);
            //拷贝命令行到lastcommand.
         else if (len == 0)
             flag |= CMD_FLAG_REPEAT;
             if (len == -1)
             puts (&quot;\n&quot;);
         else
             rc = run_command (lastcommand, flag);　//执行这个命令行。
   
     if (rc &lt;= 0) {
      /* invalid command or not repeatable, forget it */
      lastcommand[0] = 0;
    }
}
12.  在上面的main_loop函数中，通常在开发完成的阶段都会设置一个bootcmd的环境
变量，然后将延时bootdelay设置成0，这样当u-boot跑到这里的时候就不会因为用户按下了任意键就进入了命令行模式，可以直接运行 bootcmd的命令来直接加载kernel的Image然后移交控制权。如果进入了命令行模式，我们也可以手动输入命令来启动系统，输入的命令也是基本 和bootcmd一样。
 
不过值得一提的是，从这里开始到引导内核的函数do_bootimg_linux()之前，不同
厂商之间做的都和原始的U-boot代码差别挺大，不过万变不离其宗，都是加载各种各样的Image到SDRAM中，不过关于CP部分的Image 有的厂商是在这里加载，有的是kernel起来后来有kernel来加载，不过都需要加载的Image就是linux  kernel的Image。为了方便，只讨论加载kernel Image的情况。
    
    在继续往下之前，有必要提一下几种不同格式linux kernel编译之后所产生的镜像文件,包括其各种头和ramdisk的混合，容易让人迷糊。
    ramdisk是linux内核启动过程中需要使用的一种临时文件系统，它要么单独编译成ramdisk.img(也有叫initrd或者initramfs)，要么编译进内核。
     Linux编译之后最终会产生zImage文件，不过呢，为了迎合U-boot的要求，所以也有专门为U-boot的引导做一个uImage，这个只是加 了一个U-boot中定义的一个head而已，用于U-boot中检查，当然前面的ramdisk.img也是需要加这个头的，头里面有这个Image的 魔数，大小，类型等信息。现在的android中的u-boot也有要求加头的，他对U-boot进行了改进和优化，做成了自己的一套检查机制，所以现在 android编译出来linux部分的Image的名字叫boot.img。
    这个boot.img是zImage和ramdisk.img合成之后的，而且还加了专门的头，这个head和U-boot原始的不一样，具体的源码路径可以参考：system/core/mkbootimg/。
/*
** +-----------------+ 
** | boot header     | 1 page
** +-----------------+
** | kernel          | n pages  
** +-----------------+
** | ramdisk         | m pages  
** +-----------------+
** | second stage    | o pages
** +-----------------+
**
** n = (kernel_size + page_size - 1) / page_size
** m = (ramdisk_size + page_size - 1) / page_size
** o = (second_size + page_size - 1) / page_size
*/
Android就没有在ramdisk和zImage上单独重复加头了，不过近期做的mtk的平台，他们有点怪，除了上面的额外信息之外，还在这二者上单独加了标志字符串,ROOTFS和KERNEL。    
     了解了上面这些内容之后，对于从nand上加载uImage或者boot.img，都需要经过分离head进行检查，ok之后才会真正地将数据导入 SDRAM。另外别忘了的是，如果ramdisk.img是单独的，那么在加载linux  kernel的镜像的时候也需要将其加载进SDRAM，如果是编译到内核了，那就不用了。
    
    通常我们的uboot起来之后，我们会运行下面的命令之一来启动内核
tftp 0x30800000 uImage;bootm (地址可选)
或者
nand read 0x30800000 0x40000 0x200000 ; bootm
    
    例如informax的平台u-boot的bootcmd是：
    #define BOOTCMD 
&quot;mcu_clk 260;a7vector_SDRAM;dsp_clk 130;nand read 0x46000000 0x200000 0x400000;boot_from_flash boot&quot;
很明显，原始U-boot中没有boot_from_flash命令，是经过他们改造过的。不过功能基本一样。所以还是以bootm来引导uImage为例来讨论。
 
        bootm命令位于cmd_bootm.c文件中:
        U_BOOT_CMD(
            bootm,  CFG_MAXARGS,    1,  do_bootm,
            &quot;bootm   - boot application image from memory\n&quot;,
            &quot;[addr [arg ...]]\n    - boot application image stored in memory\n&quot;
            &quot;        passing arguments 'arg ...'; when booting a Linux kernel,\n&quot;
            &quot;        'arg' can be the address of an initrd image\n&quot;
);

在将nand上0x40000开始的2MB数据拷贝到SDRAM的0x30800000之后，就开始执行bootm命令，其所做的工作大致如下： 
12.1如果bootm命令没有带地址参数，将会采用默认地址0x30800000，带地址则保存下这个参数地址。
12.2 从SDRAM的0x30800000开始拷贝64字节到一个head结构体中进行crc32校验，校验ok之后将会调用调用函数print_image_hdr()打印出如下信息：
    Image Name:   Linux-2.6.8-rc2-nc-v1
    Created:      2010-05-04   4:14:19 UTC
    Image Type:   ARM Linux Kernel Image (uncompressed)
    Data Size:    1054712 Bytes =  1 MB
    Load Address: 30008000
    Entry Point:  30008000
 
12.3 跳过64字节的head，开始校验kernel的Image数据，校验码ok之后会打印：Verifying Checksum ... OK

12.4 核对cpu类型

12.5 检查Image的类型
 
12.6  禁止中断，检查内核的压缩类型，这里不是指的image和zImage的区别，而是有没有在这基础上进行ZIP或ZIP2的压缩。通常这里是没有这样的压缩的。所以接下来将0x30800000+64B开始的zImage数据搬运到ih_load（0x30008000）处，这个数据就是kernel的 Image数据。
 
12.7 根据head中OS的类型，如果是linux，head中类型值就是IH_OS_LINUX，所以接下来会执行u-boot到kernel的过渡程序。
do_bootm_linux (cmdtp, flag, argc, argv, addr, len_ptr, verify);
 
12.8定义thekernel函数指针，获取bootargs参数给commandline指针。
12.9 theKernel = (void (*)(int, int, uint))ntohl(hdr-&gt;ih_ep)，将内核的入口地址赋给thekernel函数指针。
12.10将传递给内核的参数放在0x30000100处，以tag的方式存放，主要放置了memory和cmdline的参数。
12.11关中断，关闭IDCache,同时使ID Cache数据失效。
12.12再次获取bi_arch_number参数为553。
12.13 theKernel (0, bd-&gt;bi_arch_number, bd-&gt;bi_boot_params)进入内核，第一个参数必须为0，第二个参数为机器类型553，第三个参数为传递给内核参数的其实地址0x30000100。
 
总结下，U-Boot调用内核之前，下面的条件必须满足：
a.  R0=0,R1为机器类型ID，参考linux/arch/arm/tools/mach-types,R2为启动参数tag列表在RAM中的基地址。
b.  CPU的工作模式必须为SVC模式,必须禁止中断（IRQS和FIRS）。
c.  数据cache和MMU必须关闭，指令cache可以打开也可以关闭。
 
这里移交控制权之后，u-boot的使命就算是完成了。说起来U-boot命运挺悲惨的，因为它重要而却最不受内核待见。接下来内核的启动更加复杂。
 </rich_text><table char_offset="862" col_max="400" col_min="40"><row><cell>Bootloader
</cell><cell>Monitor?
</cell><cell>描述
</cell><cell>X86
</cell><cell>ARM
</cell><cell>PowerPC
</cell></row><row><cell>U-boot
</cell><cell>是
</cell><cell>通用引导程序
</cell><cell>是
</cell><cell>是
</cell><cell>是
</cell></row><row><cell>RedBoot[l2] 
</cell><cell>是
</cell><cell>基于eCos的引导程序
</cell><cell>是
</cell><cell>是
</cell><cell>是
</cell></row><row><cell>BLOB[l3] 
</cell><cell>否
</cell><cell>(StrongARM构架)LART(主板)等硬件平台的引导程序
</cell><cell>否
</cell><cell>是
</cell><cell>否
</cell></row><row><cell>LILO
</cell><cell>否
</cell><cell>Linux磁盘引导程序
</cell><cell>是
</cell><cell>否
</cell><cell>否
</cell></row><row><cell>GRUB
</cell><cell>否
</cell><cell>GNU的LILO替代程序
</cell><cell>是
</cell><cell>否
</cell><cell>否
</cell></row><row><cell>Loadlin
</cell><cell>否
</cell><cell>从DOS引导Linux
</cell><cell>是
</cell><cell>否
</cell><cell>否
</cell></row><row><cell>Vivi
</cell><cell>是
</cell><cell>韩国mizi 公司开发的bootloader
</cell><cell>否
</cell><cell>是
</cell><cell>否
</cell></row><row><cell>点击这里</cell><cell>点击这里</cell><cell>点击这里</cell><cell>点击这里</cell><cell>点击这里</cell><cell>点击这里</cell></row></table><encoded_png char_offset="1920"></encoded_png></node><node name="linux启动" prog_lang="custom-colors" readonly="False" tags="" unique_id="3"><rich_text scale="h1">第二部分：linux启动 </rich_text><rich_text>
</rich_text><rich_text scale="h2">一、zImage是怎样炼成的？</rich_text><rich_text>
    zImage是linux内核编译之后产生的最终文件，它的生成过程比较复杂，这里不谈编译过程，只聊聊编译的最后阶段：
    1.  arm-linux-gnu-ld用arch/arm/kernel/vmlinux.lds、arch/arm/kernel/head.o、
    arch/arm/kernel/init_task.o、各子目录下的built-in.o、lib/lib.a  、arch/arm/lib/lib.a生成顶层目录下的vmlinux （根据arch/arm/kernel/vmlinux.lds来链接  0xc0008000）
 
    2. 生成system.map, 置于顶层目录之下。
    3. arm-linux-gnu-objcopy，去掉顶层vmlinux两个段-R .note -R .comment
的调试信息，减小映像文件的大小，此时大概3M多，生成arch/arm/boot/Image。
 
    4. gzip -f -9 &lt; arch/arm/boot/compressed/../Image &gt;  arch/arm/boot/compressed/piggy.gz，读入arch/arm/boot/Image的内容，以最大压缩比进行压缩，生成 arch/arm/boot/compressed/目录下的piggy.gz。
 
    5. arm-linux-gnu-gcc，在arch/arm/boot/compressed/piggy.S文件中是直接引入piggy.gz的内容 （piggy.gz其实已经是二进制数据了），然后生成arch/arm/boot/compressed/piggy.o文件。下面是piggy.S的 内容
    其中所选择的行就是加入了piggy.gz的内容，通过编译生成piggy.o文件，以备后面接下来的ld链接。
 
    6.  arm-linux-gnu-ld，在arch/arm/boot/compressed/piggy.o的基础上，加入重定位地址和参数地址的同时，加 入解压缩的代码（arch/arm/boot/compressed/head.o、misc.o）,
    最后生成arch/arm/boot /compressed目录的vmlinux，此时在解压缩代码中还含有调试信息（根据arch/arm/boot/compressed /vmlinux.lds来链接 0x0）vmlinux.lds开始处。
    注意到了27行的吗？*(.piggydata)就表示需要将piggydata这个段放在这个位置，而piggydata这个段放的是什么呢？往后翻翻，看看第五步的图片，呵呵，其实就是将按最大压缩比压缩之后的Image，
    压缩之后叫piggy.gz中的二进制数据。
 
    7. arm-linux-gnu-objcopy，去掉解压缩代码中的调试信息段，最后生成arch/arm/boot/目录下的zImage。
    
    8. /bin/sh 
    /home/farsight/Resources/kernel/linux-2.6.14/scripts/mkuboot.sh -A  arm -O linux -T kernel -C none -a 0x30008000 -e 0x30008000 -n  'Linux-2.6.14' -d arch/arm/boot/zImage arch/arm/boot/uImage
    调用mkimage在arch/arm/boot/zImage的基础上加入64字节的uImage头，和入口地址，装载地址， 最终生成arch/arm/boot/目录下的uImage文件。
        
    实际上zImage是经过了高压缩之后在和解压缩程序合并在一起生成的。知道了这些之后，我们就可以给linux的启动大致分成3段：zImage解压缩、kernel的汇编启动阶段、kernel的c启动阶段。
    前两个阶段因为都是汇编写成的，代码读起来晦涩难懂，内存分布复杂，涉及MMU、解压缩等众多知识。如果有对这部分感兴趣的，可以自行分析，遇到问题可以上网查资料或者找我，这里就不详细分析了。下面是第二阶段汇编启动的主线，可以了解下：
    1. 确定 processor type 
    2. 确定 machine type
    3. 手动创建页表  
    4. 调用平台特定的cpu setup函数,设置中断地址，刷新Cache，开启Cache 
                         (在struct proc_info_list中,in proc-arm920.S) 
    5. 开启mmu I、D cache ，设置cp15的控制寄存器，设置TTB寄存器为0x30004000
    6. 切换数据（根据需要赋值数据段，清bss段，保存processor ID 和 machine type 
        和 cp15的控制寄存器值）
    7. 最终跳转到start_kernel    
(在__switch_data的结束的时候,调用了 b start_kernel)
 
二、linux的c启动阶段
    经过解压缩和汇编启动两个阶段，将会进入init/Main.c中的start_kernel()函数去继续执行。(2.6.1x、2.6.2x和2.6.3x之间的差异比较大，下面的分析基于2.6.14)
    1. printk(linux_banner)打印内核的一些信息，版本，作者，编译器版本，日期等信息。
 
    2. 接下来执行是一个极其重要的函数setup_arch(),主要做一些板级初始化，cpu初始化，tag参数解析，u-boot传递的cmdline解析，建立mmu工作页表(memtable_init)，初始化内存布局， 调用 mmap_io建立GPIO,IRQ,MEMCTRL,UART，及其他外设的静态映射表，对时钟,定时器，uart进行初始化,  
    cpu_init(): {
        打印一些关于cpu的信息，比如cpu id，cache  大小等。
        另外重要的是设置了IRQ、ABT、UND三种模式的stack空间，分别都是12个字节。最后将系统切换到svc模式
    }。
 
    3. sched_init():初始化每个处理器的可运行队列，设置系统初始化进程即0号进程。
 
    4. 建立系统内存页区(zone)链表  build_all_zonelists()。
 
    5. printk(KERN_NOTICE &quot;Kernel command line: %s\n&quot;, saved_command_line);
    打印出从uboot传递过来的command_line字符串，在setup_arch函数中获得的。
 
    6.  parse_early_param()，这里分析的是系统能够辨别的一些早期参数（这个函数甚至可以去掉，__setup形式的参数），
    而且在分析的时候并不是以setup_arch(&amp;command_line)传出来的command_line为基础，而是以最原生态的 saved_command_line为基础的。
 
    7. parse_args(&quot;Booting kernel&quot;, command_line, __start___param,
                __stop___param - __start___param,
                &amp;unknown_bootoption);
    对于比较新的版本真正起作用的函数，与parse_early_param()相比，此处对解析列表的处理范围加大了，解析列表中除了包括系统以setup定义的启动参数，还包括模块中定义的param参数以及系统不能辨别的参数。
    __start___param是param参数的起始地址，在System.map文件中能看到
    __stop___param - __start___param是参数个数
    unknown_bootoption是对应与启动参数不是param的相应处理函数（查看parse_one()就知道怎么回事）。
 
    8. 在前面的setup_arch -&gt; paging_init -&gt; memtable_init函数中为系统创建页表的时候，中断向量表的虚地址init_maps,是用alloc_bootmem_low_pages分配的，
    ARM规定中断向量表的地址只能是0或0xFFFF0000，所以该函数里有部分代码的作用就是映射一个物理页到0或0xFFFF0000。
    trap_init函数做了以下的工作：
    把放在.Lcvectors处的系统8个意外入口跳转指令搬到高端中断向量0xffff0000处，再将__stubs_start到__stubs_end之间的各种意外初始化代码搬到0xffff0200处等。
 
    9. init_IRQ()
     初始化系统中所有的中断描述结构数组：irq_desc[NR_IRQS]。接着执行init_arch_irq函数，该函数是在setup_arch函 数最后初始化的一个全局函数指针，指向了smdk2410_init_irq函数（in  mach-smdk2410.c）,实际上是调用了   s3c24xx_init_irq函数。在该函数中，首先清除所有的中断未决标志，之后就初始化中断的 触发方式和屏蔽位，还有中断句柄初始化，这里不是最终用户的中断函数，而是do_level_IRQ或者do_edge_IRQ函数，在这两个函数中都使 用过__do_irq函数来找到真正最终驱动程序注册在系统中的中断处理函数。
 
    10. softirq_init():内核的软中断机制初始化函数。
 
    12.      console_init():
    初始化系统的控制台结构，该函数执行后调用printk函数将log_buf中所有符合打印级别的系统信息打印到控制台上。
 
    13. profile_init()函数
    /* 对系统剖析做相关初始化， 系统剖析用于系统调用*/
    //profile是用来对系统剖析的，在系统调试的时候有用
    //需要打开内核选项，并且在bootargs中有profile这一项才能开启这个功能/*
    profile只是内核的一个调试性能的工具，这个可以通过menuconfig中profiling support打开。
    
    14. vfs_caches_init()
    该函数主要完成的是文件系统相关的初始化，cache、inode等高速缓存的建立，在mnt_init()函数中有注册并初始化sysfs、rootfs文件系统，这里只是在内存中建立他们的架构，
    创建了超级块，并没有真正挂 载上去。关于这个rootfs需要说明的是，这个文件系统生命期更加短暂的，为什么？之前说的ramdisk大家是否还记得，ramdisk即将在后面释放到内存空间，
    来代替这里的rootfs出现在根目录之下，而这个rootfs则退居二线，隐藏在一个二级目录中。本来在非android的系统上，这个 ramdisk也是一个暂时的文件系统，
    之后也会被真正的yaffs2之类的文件系统替换。不过呢，在android上，这个ramdisk还是挂载在根 目录下的，只是将system、userdata等真实文件系统挂载了对应的二级目录下。
        
     关于这部分ramdisk内容，有兴趣的下来可以继续探讨。
        
    15.      mem_init():
    最后内存初始化，释放前边标志为保留的所有页面,这个函数结束之后就不能再使
    用alloc_bootmem(),alloc_bootmem_low(),alloc_bootmem_pages()等申请低端内存的函数来申请内存，也就不能申请大块的连续物理内存了。
    
    16.     中间还省略了很多内容，涉及到很多东西，这里也没有时间详细讨论，有兴趣的自
    己研究代码吧！下面直接跳到start_kernel()函数的最后的一个重要函数:rest_init()。
    
    17.     rest_init函数创建了两个线程之后，自己调用cpu_idle()函数隐退了。
    创建的第一个线程，习惯上我们将其叫做1号内核线程，第二个线程叫2号内核线程，因为创建它们的父进程叫0号启动进程。
    说明一下：2.6.14的内核这里只创建了一个内核线程叫init线程，而上面创建两
    个线程的内核版本至少都是2.6.2x了，所以为了后面能和android的启动接上，所以这里开始linux转到2.2.29去。
 
    static noinline void __init_refok rest_init(void) __releases(kernel_lock)
    {
        int pid;
         
        …
        kernel_thread(kernel_init, NULL, CLONE_FS | CLONE_SIGHAND);
        pid = kernel_thread(kthreadd, NULL, CLONE_FS | CLONE_FILES);
        kthreadd_task = find_task_by_pid_ns(pid, &amp;init_pid_ns);
        …
        cpu_idle();
    }
    kthreadd这个线程之前的部门交流会上讨论过，新版本的linux将线程创建这个艰巨的工作专门交给了这个叫kthreadd的线程来完成。
    接下来既然0号启动进程idle了，那么剩下的工作就都转移到线程kernel_init中去了。
 
    18. kernel_init()
    这个线程的任务还是比较艰巨的，第一个重要任务就是调用函数do_basic_setup()，先调用driver_init()来构建sysfs的目录架构，然后调用do_initcalls()函数来一次执行linux编译时设置的系统函数。
     这里主要工作就是注册系统设备的驱动程序，关于driver和device的注册顺序，是可以互相交换，
    例如 
        通常的三星平台都有一个struct machine_desc结构体来描述平台相关的启动代码：
        MACHINE_START(SMDK2410, &quot;SMDK2410&quot;) /* @TODO: request a new identifier and switch
                    * to SMDK2410 */
        /* Maintainer: Jonas Dietsche */
        .phys_io    = S3C2410_PA_UART,
        .io_pg_offst    = (((u32)S3C24XX_VA_UART) &gt;&gt; 18) &amp; 0xfffc,
        .boot_params    = S3C2410_SDRAM_PA + 0x100,
        .map_io     = smdk2410_map_io,
        .init_irq   = s3c24xx_init_irq,
        .init_machine   = smdk2410_init,
        .timer      = &amp;s3c24xx_timer,
        MACHINE_END
    所有devices的注册都是在smdk2410_init()函数中调用函数：
    platform_add_devices(smdk2410_devices, ARRAY_SIZE(smdk2410_devices));
    来完成，所以drivers的注册就放在后面了。不过这样注册是有一个坏处的，就是不能准确地控制driver代码中probe的执行先后顺序。
    现在mtk平台上的devices和drivers注册顺序想法，也就是先注册上drivers，然后再注册devices，这样的话，就可以控制probe函数的执行先后。
    
    include/linux/init.h文件中有这些优先级的定义：
    #define pure_initcall(fn)        __define_initcall(&quot;0&quot;,fn,0)
     
    #define core_initcall(fn)        __define_initcall(&quot;1&quot;,fn,1)
    #define core_initcall_sync(fn)       __define_initcall(&quot;1s&quot;,fn,1s)
    #define postcore_initcall(fn)        __define_initcall(&quot;2&quot;,fn,2)
    #define postcore_initcall_sync(fn)   __define_initcall(&quot;2s&quot;,fn,2s)
    #define arch_initcall(fn)        __define_initcall(&quot;3&quot;,fn,3)
    #define arch_initcall_sync(fn)       __define_initcall(&quot;3s&quot;,fn,3s)
    #define subsys_initcall(fn)      __define_initcall(&quot;4&quot;,fn,4)
    #define subsys_initcall_sync(fn) __define_initcall(&quot;4s&quot;,fn,4s)
    #define fs_initcall(fn)          __define_initcall(&quot;5&quot;,fn,5)
    #define fs_initcall_sync(fn)     __define_initcall(&quot;5s&quot;,fn,5s)
    #define rootfs_initcall(fn)      __define_initcall(&quot;rootfs&quot;,fn,rootfs)
    #define device_initcall(fn)      __define_initcall(&quot;6&quot;,fn,6)
    #define device_initcall_sync(fn) __define_initcall(&quot;6s&quot;,fn,6s)
    #define late_initcall(fn)        __define_initcall(&quot;7&quot;,fn,7)
    #define late_initcall_sync(fn)       __define_initcall(&quot;7s&quot;,fn,7s)
    当然函数的执行属性从1~7，通常我们见到的设备都是6、7级的。另外系统中所有的initcalll函数都是可以从linux根目录下的system.map中查看得到。
 
    接下来的一段代码就是来释放前面提到的ramdisk.img的：
    if (!ramdisk_execute_command)
         ramdisk_execute_command = &quot;/init&quot;;
     
    if (sys_access((const char __user *) ramdisk_execute_command, 0) != 0) {
         ramdisk_execute_command = NULL;
         prepare_namespace();
    }
    释放出来的ramdisk呈现出来的目录就是android编译出来之后，在out/…/root的目录一样了，这个目录下有一个init可执行程序，下面就准备启动它。
     
    接着调用init_post()函数，来打开console设备，这个时候我们的控制台就可以操作了，最后会执行以下代码来寻找和启动init程序：
    if (execute_command) {
         run_init_process(execute_command);
         printk(KERN_WARNING &quot;Failed to execute %s.  Attempting &quot;
                     &quot;defaults...\n&quot;, execute_command);
    }
    run_init_process(&quot;/sbin/init&quot;);
    run_init_process(&quot;/etc/init&quot;);
    run_init_process(&quot;/bin/init&quot;);
    run_init_process(&quot;/bin/sh&quot;);
     
    panic(&quot;No init found.  Try passing init= option to kernel.&quot;);
     
    这里执行的init程序需要我们在u-boot传给kernel的cmdline中使用init=/init
    来告知kernel，或者kernel启动代码中直接写死。否则在上面的那些目录中找不到init的话，系统就用panic机制将这个警告信息保存在nand的panic分区，在下次启动的时候，会自动将这个分区的信息输出。
     
    init进程是linux起来之后启动的第一个用户进程，android系统也就是在这个进
    程的基础上启动的。进程号是1。
</rich_text></node></node><node name="bus register" prog_lang="custom-colors" readonly="False" tags="" unique_id="4"><rich_text>    上面分析了kobject.kset,ktype.这三个结构联合起来一起构成了整个设备模型的基石.而bus.device.device_driver.则是基于kobject.kset.ktype之上的架构.
    在这里,总线,设备,驱动被有序的组和在一起.Bus.device.device_driver三者之间的关系如下图所示: 如上图所示.
      struct bus_type的p-&gt;drivers_kset(struct kset)指向注册在上面的驱动程序.它的p-&gt;device_kset(struct kset)上挂着注册在上面的设备.
    每次有一个新的设备注册到上面,都会去匹配右边的驱动,看是否能匹配上.如果匹配成功,则将设备结构的is_registerd域置为0.然后将设备添加到驱动的p-&gt;klist_devices域.
    同理,每注册一个驱动,都会去匹配左边的设备,.如果匹配成功,将则设备加到驱动的p-&gt;klist_devices域.再将设备的is_registerd置为0/这就是linux设备模型用来管理设备和驱动的基本架构. 我们来跟踪一下代码来看下详细的操作. 
    注册一个总线的接口为bus_register().我们照例分段分析: 
    int bus_register(struct bus_type *bus){     
        int retval;     struct bus_type_private *priv;     //分配存储空间
             
        priv = kzalloc(sizeof(struct bus_type_private), GFP_KERNEL);    
        if (!priv)         
            return -ENOMEM;      
            
        priv-&gt;bus = bus;     
        bus-&gt;p = priv;      
        BLOCKING_INIT_NOTIFIER_HEAD(&amp;priv-&gt;bus_notifier); 
             
        retval = kobject_set_name(&amp;priv-&gt;subsys.kobj, &quot;%s&quot;, bus-&gt;name);     
        if (retval)         
            goto out;      
            
        priv-&gt;subsys.kobj.kset = bus_kset;                          
        priv-&gt;subsys.kobj.ktype = &amp;bus_ktype;    
        priv-&gt;drivers_autoprobe = 1;      
        retval = kset_register(&amp;priv-&gt;subsys);     
        if (retval)         
            goto out;
            
     首先,先为struct bus_type的私有区分配空间,然后将其和struct bus_type关联起来.由于struct bus_type也要在sysfs文件中表示一个节点,因此,它也内嵌也一个kset的结构.这就是priv-&gt;subsys.
     首先,它为这个kset的名称赋值为bus的名称,然后将priv-&gt;subsys.kobj.kset指向bus_kset. priv-&gt;subsys.kobj.ktype指向bus_ktype;然后调用kset_reqister()将priv-&gt;subsys注册.这里涉及到的接口都在之前分析过.注册过后,应该会在bus_kset所表示的目录下创建一个总线名称的目录.并且用户空间的hotplug应该会检测到一个add事件.我们来看一下bus_kset到底指向的是什么:     
     bus_kset = kset_create_and_add(&quot;bus&quot;, &amp;bus_uevent_ops, NULL);
   从此可以看出.这个bus_kset在sysfs中的结点就是/sys/bus.在这里注册的struct bus_types就会在/sys/bus/下面出现.      
    retval = bus_create_file(bus, &amp;bus_attr_uevent);     
    if (retval)         
        goto bus_uevent_fail;
        
    bus_create_file()就是在priv-&gt;subsys.kobj的这个kobject上建立一个普通属性的文件.这个文件的属性对应在bus_attr_uevent.
   读写操作对应在priv-&gt;subsys.kobj.ktype中.我们到后面才统一分析bus注册时候的文件创建      
    priv-&gt;devices_kset = kset_create_and_add(&quot;devices&quot;, NULL, 
                                &amp;priv-&gt;subsys.kobj);     
    if (!priv-&gt;devices_kset) {         
        retval = -ENOMEM;         
        goto bus_devices_fail;     
    }
          
    priv-&gt;drivers_kset = kset_create_and_add(&quot;drivers&quot;, NULL, 
                                &amp;priv-&gt;subsys.kobj); 
    if (!priv-&gt;drivers_kset) {         
        retval = -ENOMEM;         
        goto bus_drivers_fail;     
    }
          
    klist_init(&amp;priv-&gt;klist_devices, klist_devices_get, klist_devices_put); 
    klist_init(&amp;priv-&gt;klist_drivers, NULL, NULL);
   这段代码会在bus所在的目录下建立两个目录,分别为devices和drivers.并初始化挂载设备和驱动的链表      
    retval = add_probe_files(bus);     
    if (retval)         
        goto bus_probe_files_fail;
        
    retval = bus_add_attrs(bus);     
    if (retval)         
        goto bus_attrs_fail;      
        
    pr_debug(&quot;bus: '%s': registered/n&quot;, bus-&gt;name);     
    
    return 0;
    
   在这里,会为bus_attr_drivers_probe, bus_attr_drivers_autoprobe.注册bus_type中的属性建立文件 
    bus_attrs_fail:     
        remove_probe_files(bus);
    bus_probe_files_fail:     
        kset_unregister(bus-&gt;p-&gt;drivers_kset);
    bus_drivers_fail:     
        kset_unregister(bus-&gt;p-&gt;devices_kset);
    bus_devices_fail:     
        bus_remove_file(bus, &amp;bus_attr_uevent);
    bus_uevent_fail:     
        kset_unregister(&amp;bus-&gt;p-&gt;subsys);     
        kfree(bus-&gt;p);
    out:     
    return retval;
}
    这段代码为出错处理; 
    struct kset *kset_create_and_add(const char *name,  struct kset_uevent_ops *uevent_ops, 
                                                             struct kobject *parent_kobj){     
        struct kset *kset;     
        int error;
             
     //创建一个kset     
        kset = kset_create(name, uevent_ops, parent_kobj);     
        if (!kset)         
            return NULL;
                 
      //注册kset     
        error = kset_register(kset);     
        if (error) {        
         //如果注册失败,释放kset         
            kfree(kset);         
            return NULL;     
        }     
        
        return kset;
        }
         
        kset_create()用来创建一个struct kset结构.代码如下:
        static struct kset *kset_create(const char *name,                   
                                    struct kset_uevent_ops *uevent_ops,                   
                                    struct kobject *parent_kobj) {     
                                    struct kset *kset;      
                                    
            kset = kzalloc(sizeof(*kset), GFP_KERNEL);     
            if (!kset)         
                return NULL;
                     
            kobject_set_name(&amp;kset-&gt;kobj, name);     
            kset-&gt;uevent_ops = uevent_ops;     
            kset-&gt;kobj.parent = parent_kobj;      
            kset-&gt;kobj.ktype = &amp;kset_ktype;     
            kset-&gt;kobj.kset = NULL;      
            return kset;
        }
        
     我们注意,在这里创建kset时.为其内嵌的kobject指定其struct kobj_type ktype结构为kset_ktype.这个结构的定义如下:
        static struct kobj_type kset_ktype = {     
                .sysfs_ops    = &amp;kobj_sysfs_ops,
                .release = kset_release,
        };
        
      属性文件的读写操作全部都包含在sysfs_ops成员里.kobj_sysfs_ops的定义如下:
      struct sysfs_ops kobj_sysfs_ops = {     
            .show    = kobj_attr_show,     
            .store   = kobj_attr_store,
     }; 
     
     创建好了kset之后,会调用kset_register().这个函数就是kset操作的核心代码了.如下:
     int kset_register(struct kset *k) {     
        int err;
              
        if (!k)         
            return -EINVAL;
                  
        kset_init(k);     
        err = kobject_add_internal(&amp;k-&gt;kobj);     
        if (err)         
            return err;
                 
       kobject_uevent(&amp;k-&gt;kobj, KOBJ_ADD);     
       return 0;
    }
     
    void kset_init(struct kset *k)
    {
        kobject_init_internal(&amp;k-&gt;kobj);             //只是对kobj中的成员变量做一些赋值的初始化
        INIT_LIST_HEAD(&amp;k-&gt;list);
        spin_lock_init(&amp;k-&gt;list_lock);
    }  
    
    static int kobject_add_internal(struct kobject *kobj) {     
        int error = 0;     
        struct kobject *parent;
              
        if (!kobj)         
            return -ENOENT;     //如果kobject的名字为空.退出
                 
        if (!kobj-&gt;name || !kobj-&gt;name[0]) {         
            pr_debug(&quot;kobject: (%p): attempted to be registered with empty &quot;               &quot;name!/n&quot;, kobj);         
            WARN_ON(1);         
            return -EINVAL;     
      }
           
    //取kobject的父结点     
    parent = kobject_get(kobj-&gt;parent);
         
   //如果kobject的父结点没有指定，就将kset-&gt;kobject做为它的父结点     
    /* join kset if set, use it as parent if we do not already have one */     
    if (kobj-&gt;kset) {         
        if (!parent)              
            parent = kobject_get(&amp;kobj-&gt;kset-&gt;kobj);         
        kobj_kset_join(kobj);         
        kobj-&gt;parent = parent;     
    }     
   //调试用     
    pr_debug(&quot;kobject: '%s' (%p): %s: parent: '%s', set: '%s'/n&quot;,          kobject_name(kobj), kobj, __FUNCTION__,          parent ? kobject_name(parent) : &quot;&lt;NULL&gt;&quot;,          kobj-&gt;kset ? kobject_name(&amp;kobj-&gt;kset-&gt;kobj) : &quot;&lt;NULL&gt;&quot;);      
   //在sysfs中创建kobject的相关元素     
   error = create_dir(kobj);                              
   if (error) {         
        //v如果创建失败。减少相关的引用计数         
        kobj_kset_leave(kobj);         
        kobject_put(parent);         
        kobj-&gt;parent = NULL;          /* be noisy on error issues */         
        if (error == -EEXIST)              
            printk(KERN_ERR &quot;%s failed for %s with &quot;
                                    &quot;-EEXIST, don't try to register things with &quot;
                                    &quot;the same name in the same directory./n&quot;,                     __FUNCTION__, kobject_name(kobj));
        else              
            printk(KERN_ERR &quot;%s failed for %s (%d)/n&quot;,
                                 __FUNCTION__, kobject_name(kobj), error);         
            dump_stack();     
    } else         
     //如果创建成功。将state_in_sysfs建为1。表示该object已经在sysfs中了         
        kobj-&gt;state_in_sysfs = 1;      
     return error;
  } 
 这段代码比较简单，它主要完成kobject父结点的判断和选定，然后再调用create_dir（）在sysfs创建相关信息。该函数代码如下：
  static int create_dir(struct kobject *kobj) {     
    int error = 0;     
    
    if (kobject_name(kobj)) {          
      //为kobject创建目录         
      error = sysfs_create_dir(kobj);         
      if (!error) {              
      //为kobject-&gt;ktype中的属性创建文件              
        error = populate_dir(kobj);              
        if (error)                   
            sysfs_remove_dir(kobj);         
    }     
 }     
 
 return error;
 } 
 
 int sysfs_create_dir(struct kobject * kobj){     
    struct sysfs_dirent *parent_sd, *sd;     
    int error = 0;      
    
    BUG_ON(!kobj);     /*如果kobject的parnet存在。就在目录点的目录下创建这个目录。如果没有父结点不存在，就在/sys下面创建结点。*/     
    if (kobj-&gt;parent)         
        parent_sd = kobj-&gt;parent-&gt;sd;     
    else         
        parent_sd = &amp;sysfs_root;      //在sysfs中创建目录     
     //create_dir（）就是在sysfs中创建目录的接口，在之前已经详细分析过了     
     error = create_dir(kobj, parent_sd, kobject_name(kobj), &amp;sd);     
     if (!error)         
        kobj-&gt;sd = sd;     
     return error;
  }
  接着看为kobject-&gt;ktype中的属性创建文件。这是在populate_dir（）中完成的。代码如下：
  static int populate_dir(struct kobject *kobj){     
    struct kobj_type *t = get_ktype(kobj);     
    struct attribute *attr;     
    int error = 0;     
    int i;      
    
    if (t &amp;&amp; t-&gt;default_attrs) {         
        for (i = 0; (attr = t-&gt;default_attrs[i]) != NULL; i++) {              
            error = sysfs_create_file(kobj, attr);              
            if (error)                   
                break;         
        }     
    }
         
    return error;
 }
 这段代码比较简单。它遍历ktype中的属性。然后为其建立文件。请注意：文件的操作最后都会回溯到ktype-&gt;sysfs_ops的show和store这两个函数中.假如对于上面的bus_register()函数传入的参数为：
 struct bus_type ldd_bus_type = {
        .name = &quot;ldd&quot;,
        .match = ldd_match,
        .hotplug  = ldd_hotplug,
};
则通过bus_register()函数调用后，在/sys/bus/目录下出现的框图大概是这样的：。。。。在kset_init()里会初始化kset中的其它字段.然后调用kobject_add_internal()为其内嵌的kobject结构建立空间层次结构.
之后因为添加了kset.会产生一个事件.这个事件是通过用户空间的hotplug程序处理的.这就是kset明显不同于kobject的地方.</rich_text></node><node name="device register" prog_lang="custom-colors" readonly="False" tags="" unique_id="5"><rich_text>    这篇文章也是从别的地方转载的，我的目的是搞清楚：当调用device_register()函数向系统注册一个设备的时候，我注册进去的设备是如何和他 父设备关联起来的，以及如何加入到他所在的总线设备中的，但针对这个问题，好像通过这篇文章了解的并不透彻。但具体到代码分析的最后关于设备和驱动是如何 绑定的，这并不是我这篇文章的重点，但大概看了一下，有点类型i2c总线上设备和驱动的匹配过程。
看下图：
 
</rich_text><rich_text justification="left"></rich_text><rich_text>
在分析程序的过程中看到了把kobj-&gt;kset赋值为(kset)device_kset(即图中黑线实现的部分),但没有看到什么时候把 dev-&gt;kobj-&gt;parent赋值为device_kset-&gt;kobj(图中的红线实现的部分)，在调用函数 setup_parent()中是对dev-&gt;kobject-&gt;parent赋值了，但不明白在setup_parent()函数中是怎么 找到device_kset的。说实在话，对setup_parent()函数不明白，也没分析清楚。（在此补充一下，分析了一下 setup_parent()函数，实现了红线的部分）
 
这篇文章将那个3个注册函数说说，把整个设备模型框架搭建起来，当然，是重点部分了。在这之前希望你已经懂得总线、设备、驱动的数据结构及其里面的有关数据结构。关于调用的函数，如果显示为粗体，那么在下面我有分析。
 
转载于：</rich_text><rich_text link="webs http://student.csdn.net/space.php?uid=111596&amp;do=blog&amp;id=56043">http://student.csdn.net/space.php?uid=111596&amp;do=blog&amp;id=56043</rich_text><rich_text>

来自：drivers/base/core.c
int device_register(struct device *dev)
{
    device_initialize(dev);                 //初始化设备
    return device_add(dev);              //添加设备
}

void device_initialize(struct device *dev)
{
    //图中的黑线实现部分的代码
    dev-&gt;kobj.kset = devices_kset;                //设置设备的kobject所属集合，devices_kset其实在第一层，sys/devices/
    kobject_init(&amp;dev-&gt;kobj, &amp;device_ktype);       //初始化设备的kobject
    INIT_LIST_HEAD(&amp;dev-&gt;dma_pools);           //初始化设备的DMA池，用于传递大数据
    mutex_init(&amp;dev-&gt;mutex);                              //初始化互斥锁
    lockdep_set_novalidate_class(&amp;dev-&gt;mutex);
    spin_lock_init(&amp;dev-&gt;devres_lock);               //初始化自旋锁，用于同步子设备链表
    INIT_LIST_HEAD(&amp;dev-&gt;devres_head);         //初始化子设备链表头
    device_pm_init(dev);
    set_dev_node(dev, -1);
}

int device_add(struct device *dev)
{
    struct device *parent = NULL;
    struct class_interface *class_intf;
    int error = -EINVAL;

    dev = get_device(dev);         //增加设备的kobject的引用计数
    if (!dev)
        goto done;

    if (!dev-&gt;p) {                  
        error = device_private_init(dev);             //初始化设备的私有成员
        if (error)
            goto done;
    }

    /*
     * for statically allocated devices, which should all be converted
     * some day, we need to initialize the name. We prevent reading back
     * the name, and force the use of dev_name()
     */
    if (dev-&gt;init_name) {
        dev_set_name(dev, &quot;%s&quot;, dev-&gt;init_name);         //设置设备kobject的名称
        dev-&gt;init_name = NULL;
    }

    if (!dev_name(dev)) {
        error = -EINVAL;
        goto name_error;
    }

    pr_debug(&quot;device: '%s': %s/n&quot;, dev_name(dev), __func__);

    parent = get_device(dev-&gt;parent);         //增加父设备kobject的引用
    setup_parent(dev, parent);                    //设置该设备kobject父对象（父对象是谁呢）

    /* use parent numa_node */
    if (parent)
        set_dev_node(dev, dev_to_node(parent));

    /* first, register with generic layer. */
    /* we require the name to be set before, and pass NULL */
    error = kobject_add(&amp;dev-&gt;kobj, dev-&gt;kobj.parent, NULL);          //将设备kobject添加进父对象设备模型
    if (error)
        goto Error;

    /* notify platform of device entry */
    if (platform_notify)
        platform_notify(dev);

    error = device_create_file(dev, &amp;uevent_attr);
    if (error)
        goto attrError;

    if (MAJOR(dev-&gt;devt)) {
        error = device_create_file(dev, &amp;devt_attr);
        if (error)
            goto ueventattrError;

        error = device_create_sys_dev_entry(dev);
        if (error)
            goto devtattrError;

        devtmpfs_create_node(dev);
    }

    error = device_add_class_symlinks(dev);
    if (error)
        goto SymlinkError;
    error = device_add_attrs(dev);
    if (error)
        goto AttrsError;
   调用bus_add_device在sysfs中添加两个链接：一个在总线目录下指向设备，另一个在设备的目录下指向总线子系统。
    error = bus_add_device(dev);          //将设备添加进总线中
    if (error)
        goto BusError;
    error = dpm_sysfs_add(dev);
    if (error)
        goto DPMError;
    device_pm_add(dev);

    /* Notify clients of device addition.  This call must come
     * after dpm_sysf_add() and before kobject_uevent().
     */
    if (dev-&gt;bus)
        blocking_notifier_call_chain(&amp;dev-&gt;bus-&gt;p-&gt;bus_notifier,
                         BUS_NOTIFY_ADD_DEVICE, dev);

    kobject_uevent(&amp;dev-&gt;kobj, KOBJ_ADD);
    bus_probe_device试图自动探测设备。如果能够找到合适的驱动程序，则将设备添加到bus-&gt;klist_devices.设备还需要添加到父结点的子结点链表中，图中蓝色线的实现部分（此前，设备知道其父结点，但父结点不知道子结点的存在）
    bus_probe_device(dev);                                       //现在该为设备在总线上寻找合适的驱动了
    if (parent)
        klist_add_tail(&amp;dev-&gt;p-&gt;knode_parent,
                   &amp;parent-&gt;p-&gt;klist_children);                   //将设备添加到父设备的子设备链表中

    if (dev-&gt;class) {
        mutex_lock(&amp;dev-&gt;class-&gt;p-&gt;class_mutex);
        /* tie the class to the device */
        klist_add_tail(&amp;dev-&gt;knode_class,
                   &amp;dev-&gt;class-&gt;p-&gt;class_devices);

        /* notify any interfaces that the device is here */
        list_for_each_entry(class_intf,
                    &amp;dev-&gt;class-&gt;p-&gt;class_interfaces, node)
            if (class_intf-&gt;add_dev)
                class_intf-&gt;add_dev(dev, class_intf);
        mutex_unlock(&amp;dev-&gt;class-&gt;p-&gt;class_mutex);
    }
done:
    put_device(dev);
    return error;
 DPMError:
    bus_remove_device(dev);
 BusError:
    device_remove_attrs(dev);
 AttrsError:
    device_remove_class_symlinks(dev);
 SymlinkError:
    if (MAJOR(dev-&gt;devt))
        devtmpfs_delete_node(dev);
    if (MAJOR(dev-&gt;devt))
        device_remove_sys_dev_entry(dev);
 devtattrError:
    if (MAJOR(dev-&gt;devt))
        device_remove_file(dev, &amp;devt_attr);
 ueventattrError:
    device_remove_file(dev, &amp;uevent_attr);
 attrError:
    kobject_uevent(&amp;dev-&gt;kobj, KOBJ_REMOVE);
    kobject_del(&amp;dev-&gt;kobj);
 Error:
    cleanup_device_parent(dev);
    if (parent)
        put_device(parent);
name_error:
    kfree(dev-&gt;p);
    dev-&gt;p = NULL;
    goto done;
}
 
int device_private_init(struct device *dev)
{
    dev-&gt;p = kzalloc(sizeof(*dev-&gt;p), GFP_KERNEL);
    if (!dev-&gt;p)
        return -ENOMEM;
    dev-&gt;p-&gt;device = dev;                                                //指向设备自己
    klist_init(&amp;dev-&gt;p-&gt;klist_children, klist_children_get,
           klist_children_put);             //初始化设备私有成员的子设备链表，还有两个函数，关于增加和减少子设备引用计数的
    return 0;
}
static void setup_parent(struct device *dev, struct device *parent)
{
    struct kobject *kobj;
    kobj = get_device_parent(dev, parent);        //得到设备kobject的父对象
    if (kobj)
        dev-&gt;kobj.parent = kobj;
}
int bus_add_device(struct device *dev)
{
    struct bus_type *bus = bus_get(dev-&gt;bus);
    int error = 0;

    if (bus) {
        pr_debug(&quot;bus: '%s': add device %s/n&quot;, bus-&gt;name, dev_name(dev));
        error = device_add_attrs(bus, dev);
        if (error)
            goto out_put;
        error = sysfs_create_link(&amp;bus-&gt;p-&gt;devices_kset-&gt;kobj,
                        &amp;dev-&gt;kobj, dev_name(dev));
        if (error)
            goto out_id;
        error = sysfs_create_link(&amp;dev-&gt;kobj,
                &amp;dev-&gt;bus-&gt;p-&gt;subsys.kobj, &quot;subsystem&quot;);
        if (error)
            goto out_subsys;
        error = make_deprecated_bus_links(dev);
        if (error)
            goto out_deprecated;
        klist_add_tail(&amp;dev-&gt;p-&gt;knode_bus, &amp;bus-&gt;p-&gt;klist_devices);      //关键点了，将设备添加进总线的设备链表
    }
    return 0;

out_deprecated:
    sysfs_remove_link(&amp;dev-&gt;kobj, &quot;subsystem&quot;);
out_subsys:
    sysfs_remove_link(&amp;bus-&gt;p-&gt;devices_kset-&gt;kobj, dev_name(dev));
out_id:
    device_remove_attrs(bus, dev);
out_put:
    bus_put(dev-&gt;bus);
    return error;
}
void bus_probe_device(struct device *dev)
{
    struct bus_type *bus = dev-&gt;bus;
    int ret;

    if (bus &amp;&amp; bus-&gt;p-&gt;drivers_autoprobe) {        //如果需要自动匹配驱动
        ret = device_attach(dev);                          //为设备寻找驱动
        WARN_ON(ret &lt; 0);
    }
}
int device_attach(struct device *dev)
{
    int ret = 0;

    device_lock(dev);          //锁住设备
    if (dev-&gt;driver) {                                    //如果设备有驱动
        ret = device_bind_driver(dev);          //那么将设备和驱动绑定
        if (ret == 0)
            ret = 1;
        else {
            dev-&gt;driver = NULL;
            ret = 0;
        }
    } else {
        pm_runtime_get_noresume(dev);
        ret = bus_for_each_drv(dev-&gt;bus, NULL, dev, __device_attach); //否则，在总线上寻找驱动与该设备进行匹配
        pm_runtime_put_sync(dev);
    }
    device_unlock(dev);
    return ret;
}
int device_bind_driver(struct device *dev)
{
    int ret;

    ret = driver_sysfs_add(dev);    
    if (!ret)
        driver_bound(dev);   //驱动绑定设备
    return ret;
}
int bus_for_each_drv(struct bus_type *bus, struct device_driver *start,
             void *data, int (*fn)(struct device_driver *, void *))
{
    struct klist_iter i;
    struct device_driver *drv;
    int error = 0;

    if (!bus)
        return -EINVAL;

    klist_iter_init_node(&amp;bus-&gt;p-&gt;klist_drivers, &amp;i,
                 start ? &amp;start-&gt;p-&gt;knode_bus : NULL);   //初始化i结构体
    while ((drv = next_driver(&amp;i)) &amp;&amp; !error)   //遍历总线上的驱动
        error = fn(drv, data);                            //将驱动和设备进行匹配，这里的fn=__device_attach
    klist_iter_exit(&amp;i);
    return error;
}
 
static int __device_attach(struct device_driver *drv, void *data)
{
    struct device *dev = data;

    if (!driver_match_device(drv, dev))     //现用总线上的match匹配函数进行低级匹配
        return 0;

    return driver_probe_device(drv, dev);   //在来高级匹配
}
 
static inline int driver_match_device(struct device_driver *drv,  struct device *dev)
{
    return drv-&gt;bus-&gt;match ? drv-&gt;bus-&gt;match(dev, drv) : 1;      //看到没，这里要调用总线上定义的match函数
}
 
int driver_probe_device(struct device_driver *drv, struct device *dev)
{
    int ret = 0;

    if (!device_is_registered(dev))  //设备是否注册
        return -ENODEV;

    pr_debug(&quot;bus: '%s': %s: matched device %s with driver %s/n&quot;,
         drv-&gt;bus-&gt;name, __func__, dev_name(dev), drv-&gt;name);

    pm_runtime_get_noresume(dev);
    pm_runtime_barrier(dev);
    ret = really_probe(dev, drv);  //调用真正的匹配
    pm_runtime_put_sync(dev);

    return ret;
}
 
static int really_probe(struct device *dev, struct device_driver *drv)
{
    int ret = 0;

    atomic_inc(&amp;probe_count);
    pr_debug(&quot;bus: '%s': %s: probing driver %s with device %s/n&quot;,
         drv-&gt;bus-&gt;name, __func__, drv-&gt;name, dev_name(dev));
    WARN_ON(!list_empty(&amp;dev-&gt;devres_head));

    dev-&gt;driver = drv;
    if (driver_sysfs_add(dev)) {
        printk(KERN_ERR &quot;%s: driver_sysfs_add(%s) failed/n&quot;,
            __func__, dev_name(dev));
        goto probe_failed;
    }

    if (dev-&gt;bus-&gt;probe) {         //现用总线上定义的probe函数尝试一下
        ret = dev-&gt;bus-&gt;probe(dev);
        if (ret)
            goto probe_failed;
    } else if (drv-&gt;probe) {       //如果不行，在用驱动上的probe尝试
        ret = drv-&gt;probe(dev);
        if (ret)
            goto probe_failed;
    }

    driver_bound(dev);      //驱动绑定设备
    ret = 1;
    pr_debug(&quot;bus: '%s': %s: bound device %s to driver %s/n&quot;,
         drv-&gt;bus-&gt;name, __func__, dev_name(dev), drv-&gt;name);
    goto done;

probe_failed:
    devres_release_all(dev);
    driver_sysfs_remove(dev);
    dev-&gt;driver = NULL;

    if (ret != -ENODEV &amp;&amp; ret != -ENXIO) {
        /* driver matched but the probe failed */
        printk(KERN_WARNING
               &quot;%s: probe of %s failed with error %d/n&quot;,
               drv-&gt;name, dev_name(dev), ret);
    }
    /*
     * Ignore errors returned by -&gt;probe so that the next driver can try
     * its luck.
     */
    ret = 0;
done:
    atomic_dec(&amp;probe_count);
    wake_up(&amp;probe_waitqueue);
    return ret;
}
 
</rich_text><encoded_png char_offset="204"></encoded_png></node><node name="i2c" prog_lang="custom-colors" readonly="False" tags="" unique_id="6"><rich_text>
</rich_text><node name="i2c bus" prog_lang="custom-colors" readonly="False" tags="" unique_id="7"><rich_text>在drivers/i2c/busses下包含各种I2C总线驱动，如S3C2440的I2C总线驱动i2c-s3c2410.c，使用GPIO模拟I2C总线的驱动i2c-gpio.c，这里只分析i2c-gpio.c。
i2c-gpio.c它是gpio模拟I2C总线的驱动，总线也是个设备，在这里将总线当作平台设备处理，那驱动当然是平台设备驱动，看它的驱动注册和注销函数。

1. static int __init i2c_gpio_init(void)  
2. {  
3.     int ret;  
4.   
5.     ret = platform_driver_register(&amp;i2c_gpio_driver);  
6.     if (ret)  
7.         printk(KERN_ERR &quot;i2c-gpio: probe failed: %d\n&quot;, ret);  
8.   
9.     return ret;  
10. }  
11. module_init(i2c_gpio_init);  
12.   
13. static void __exit i2c_gpio_exit(void)  
14. {  
15.     platform_driver_unregister(&amp;i2c_gpio_driver);  
16. }  
17. module_exit(i2c_gpio_exit);  

没有什么好说的，它的初始化和注销函数就是注册和注销一个平台设备驱动，直接看它的platform_driver结构i2c_gpio_driver
1. static struct platform_driver i2c_gpio_driver = {  
2.     .driver     = {  
3.         .name   = &quot;i2c-gpio&quot;,  
4.         .owner  = THIS_MODULE,  
5.     },  
6.     .probe      = i2c_gpio_probe,  
7.     .remove     = __devexit_p(i2c_gpio_remove),  
8. };  
小提示：是不是我们应该注册一个平台设备，以和这个驱动匹配，那先来注册这个平台设备。
先定义这个平台设备结构，至于怎么注册平台设备我想大家都应该知道吧。
1. #if defined(CONFIG_I2C_GPIO) | \   
2.     defined(CONFIG_I2C_GPIO_MODULE)   
3. static struct i2c_gpio_platform_data i2c_gpio_adapter_data = {   
4.     .sda_pin = PINID_GPMI_D05,   
5.     .scl_pin = PINID_GPMI_D04,   
6.     .udelay = 5, //100KHz   
7.     .timeout = 100,   
8.     .sda_is_open_drain = 1,   
9.     .scl_is_open_drain = 1,   
10. };   
11.   
12. static struct platform_device i2c_gpio = {   
13.     .name = &quot;i2c-gpio&quot;,   
14.     .id = 0,   
15.     .dev = {   
16.         .platform_data = &amp;i2c_gpio_adapter_data,   
17.         .release = mxs_nop_release,   
18.         },   
19. };   
20. #endif  
在这里struct platform_device结构中的name字段要和struct platform_driver中driver字段中name字段要相同，因为平台总线就是通过这个来判断设备和驱动是否匹配的。注意这里的id将它赋值了0，至于到底有什么用，后面再来细看。这个结构里面还包含一个最重要的数据i2c_gpio_adapter_data，它struct  i2c_gpio_platform_data结构类型变量，这个结构体类型定义在include/linux/i2c-gpio.h中。
1. struct i2c_gpio_platform_data {  
2.     unsigned int    sda_pin;  
3.     unsigned int    scl_pin;  
4.     int     udelay;  
5.     int     timeout;  
6.     unsigned int    sda_is_open_drain:1;  
7.     unsigned int    scl_is_open_drain:1;  
8.     unsigned int    scl_is_output_only:1;  
9. };  
这个结构体主要描述gpio模拟i2c总线，sda_pin和scl_pin表示使用哪两个IO管脚来模拟I2C总线，udelay和timeout分别为它的时钟频率和超时时间，sda_is_open_drain和scl_is_open_drain表示sda、scl这两个管脚是否是开漏(opendrain)电路，如果是设置为1，scl_is_output_only表示scl这个管脚是否只是作为输出，如果是设置为1。
回到驱动中，看其中最重要的i2c_gpio_probe。
1. static int __devinit i2c_gpio_probe(struct platform_device *pdev)  
2. {  
3.     struct i2c_gpio_platform_data *pdata;  
4.     struct i2c_algo_bit_data *bit_data;  
5.     struct i2c_adapter *adap;  
6.     int ret;  
7.   
8.     pdata = pdev-&gt;dev.platform_data;  
9.     if (!pdata)  
10.         return -ENXIO;  
11.   
12.     ret = -ENOMEM;  
13.     adap = kzalloc(sizeof(struct i2c_adapter), GFP_KERNEL);  
14.     if (!adap)  
15.         goto err_alloc_adap;  
16.     bit_data = kzalloc(sizeof(struct i2c_algo_bit_data), GFP_KERNEL);  
17.     if (!bit_data)  
18.         goto err_alloc_bit_data;  
19.   
20.     ret = gpio_request(pdata-&gt;sda_pin, &quot;sda&quot;);  
21.     if (ret)  
22.         goto err_request_sda;  
23.     ret = gpio_request(pdata-&gt;scl_pin, &quot;scl&quot;);  
24.     if (ret)  
25.         goto err_request_scl;  
26.   
27.     if (pdata-&gt;sda_is_open_drain) {  
28.         gpio_direction_output(pdata-&gt;sda_pin, 1);  
29.         bit_data-&gt;setsda = i2c_gpio_setsda_val;  
30.     } else {  
31.         gpio_direction_input(pdata-&gt;sda_pin);  
32.         bit_data-&gt;setsda = i2c_gpio_setsda_dir;  
33.     }  
34.   
35.     if (pdata-&gt;scl_is_open_drain || pdata-&gt;scl_is_output_only) {  
36.         gpio_direction_output(pdata-&gt;scl_pin, 1);  
37.         bit_data-&gt;setscl = i2c_gpio_setscl_val;  
38.     } else {  
39.         gpio_direction_input(pdata-&gt;scl_pin);  
40.         bit_data-&gt;setscl = i2c_gpio_setscl_dir;  
41.     }  
42.   
43.     if (!pdata-&gt;scl_is_output_only)  
44.         bit_data-&gt;getscl = i2c_gpio_getscl;  
45.     bit_data-&gt;getsda = i2c_gpio_getsda;  
46.   
47.     if (pdata-&gt;udelay)  
48.         bit_data-&gt;udelay = pdata-&gt;udelay;  
49.     else if (pdata-&gt;scl_is_output_only)  
50.         bit_data-&gt;udelay = 50;           /* 10 kHz */  
51.     else  
52.         bit_data-&gt;udelay = 5;            /* 100 kHz */  
53.   
54.     if (pdata-&gt;timeout)  
55.         bit_data-&gt;timeout = pdata-&gt;timeout;  
56.     else  
57.         bit_data-&gt;timeout = HZ / 10;     /* 100 ms */  
58.   
59.     bit_data-&gt;data = pdata;  
60.   
61.     adap-&gt;owner = THIS_MODULE;  
62.     snprintf(adap-&gt;name, sizeof(adap-&gt;name), &quot;i2c-gpio%d&quot;, pdev-&gt;id);  
63.     adap-&gt;algo_data = bit_data;  
64.     adap-&gt;class = I2C_CLASS_HWMON | I2C_CLASS_SPD;  
65.     adap-&gt;dev.parent = &amp;pdev-&gt;dev;  
66.   
67.     /* 
68.      * If &quot;dev-&gt;id&quot; is negative we consider it as zero. 
69.      * The reason to do so is to avoid sysfs names that only make 
70.      * sense when there are multiple adapters. 
71.      */  
72.     adap-&gt;nr = (pdev-&gt;id != -1) ? pdev-&gt;id : 0;  
73.     ret = i2c_bit_add_numbered_bus(adap);  
74.     if (ret)  
75.         goto err_add_bus;  
76.   
77.     platform_set_drvdata(pdev, adap);  
78.   
79.     dev_info(&amp;pdev-&gt;dev, &quot;using pins %u (SDA) and %u (SCL%s)\n&quot;,  
80.          pdata-&gt;sda_pin, pdata-&gt;scl_pin,  
81.          pdata-&gt;scl_is_output_only  
82.          ? &quot;, no clock stretching&quot; : &quot;&quot;);  
83.   
84.     return 0;  
85.   
86. err_add_bus:  
87.     gpio_free(pdata-&gt;scl_pin);  
88. err_request_scl:  
89.     gpio_free(pdata-&gt;sda_pin);  
90. err_request_sda:  
91.     kfree(bit_data);  
92. err_alloc_bit_data:  
93.     kfree(adap);  
94. err_alloc_adap:  
95.     return ret;  
96. }  
从这句开始pdata= pdev-&gt;dev.platform_data;这不正是我们在平台设备结构中定义的数据吗。然后是使用kzalloc申请两段内存空间，一个是为结构struct  i2c_adapter申请的，另一个是为结构structi2c_algo_bit_data申请的。
struct i2c_adapter结构定义在include/linux/i2c.h中
1. struct i2c_adapter {  
2.     struct module *owner;  
3.     unsigned int id;  
4.     unsigned int class;       /* classes to allow probing for */  
5.     const struct i2c_algorithm *algo; /* the algorithm to access the bus */  
6.     void *algo_data;  
7.   
8.     /* data fields that are valid for all devices   */  
9.     u8 level;           /* nesting level for lockdep */  
10.     struct mutex bus_lock;  
11.   
12.     int timeout;            /* in jiffies */  
13.     int retries;  
14.     struct device dev;      /* the adapter device */  
15.   
16.     int nr;  
17.     char name[48];  
18.     struct completion dev_released;  
19. };  
在I2C子系统中，I2C适配器使用结构struct i2c_adapter描述，代表一条实际的I2C总线。
struct i2c_algo_bit_data结构定义在include/linux/i2c-algo-bit.h中
1. struct i2c_algo_bit_data {  
2.     void *data;     /* private data for lowlevel routines */  
3.     void (*setsda) (void *data, int state);  
4.     void (*setscl) (void *data, int state);  
5.     int  (*getsda) (void *data);  
6.     int  (*getscl) (void *data);  
7.   
8.     /* local settings */  
9.     int udelay;     /* half clock cycle time in us, 
10.                    minimum 2 us for fast-mode I2C, 
11.                    minimum 5 us for standard-mode I2C and SMBus, 
12.                    maximum 50 us for SMBus */  
13.     int timeout;        /* in jiffies */  
14. };  
这个结构主要用来定义对GPIO管脚的一些操作，还是回到probe中
接下来使用gpio_request去申请这个两个GPIO管脚，申请的目的是为了防止重复使用管脚。然后是根据struct i2c_gpio_platform_data结构中定义的后面三个数据对struct  i2c_algo_bit_data结构中的函数指针做一些赋值操作。接下来是I2C时钟频率和超时设置，如果在struct i2c_gpio_platform_data结构中定义了值，那么就采用定义的值，否则就采用默认的值。然后是对struct  i2c_adapter结构的一些赋值操作，比如指定它的父设备为这里的平台设备，前面在平台设备中定义了一个id，这里用到了，赋给了struct i2c_adapter中的nr成员，这个值表示总线号，这里的总线号和硬件无关，只是在软件上的区分。然后到了最后的主角i2c_bit_add_numbered_bus，这个函数定义在drivers/i2c/algos/i2c-algo-bit.c中
1. int i2c_bit_add_numbered_bus(struct i2c_adapter *adap)  
2. {  
3.     int err;  
4.   
5.     err = i2c_bit_prepare_bus(adap);  
6.     if (err)  
7.         return err;  
8.   
9.     return i2c_add_numbered_adapter(adap);  
10. }  
先看i2c_bit_prepare_bus函数
1. static int i2c_bit_prepare_bus(struct i2c_adapter *adap)  
2. {  
3.     struct i2c_algo_bit_data *bit_adap = adap-&gt;algo_data;  
4.   
5.     if (bit_test) {  
6.         int ret = test_bus(bit_adap, adap-&gt;name);  
7.         if (ret &lt; 0)  
8.             return -ENODEV;  
9.     }  
10.   
11.     /* register new adapter to i2c module... */  
12.     adap-&gt;algo = &amp;i2c_bit_algo;  
13.     adap-&gt;retries = 3;  
14.   
15.     return 0;  
16. }  
bit_test为模块参数，这里不管它，看这样一句adap-&gt;algo= &amp;i2c_bit_algo;
来看这个结构定义
1. static const struct i2c_algorithm i2c_bit_algo = {  
2.     .master_xfer    = bit_xfer,  
3.     .functionality  = bit_func,  
4. };  
先看这个结构类型在哪里定义的include/linux/i2c.h
1. struct i2c_algorithm {  
2.     /* If an adapter algorithm can't do I2C-level access, set master_xfer 
3.        to NULL. If an adapter algorithm can do SMBus access, set 
4.        smbus_xfer. If set to NULL, the SMBus protocol is simulated 
5.        using common I2C messages */  
6.     /* master_xfer should return the number of messages successfully 
7.        processed, or a negative value on error */  
8.     int (*master_xfer)(struct i2c_adapter *adap, struct i2c_msg *msgs,  
9.                int num);  
10.     int (*smbus_xfer) (struct i2c_adapter *adap, u16 addr,  
11.                unsigned short flags, char read_write,  
12.                u8 command, int size, union i2c_smbus_data *data);  
13.   
14.     /* To determine what the adapter supports */  
15.     u32 (*functionality) (struct i2c_adapter *);  
16. };  
其实也没什么，就三个函数指针外加一长串注释
这个结构的master_xfer指针为主机的数据传输，具体来看bit_xfer这个函数，这个函数和I2C协议相关，I2C协议规定要先发送起始信号，才能开始进行数据的传输，最后数据传输完成后发送停止信号，看接下来代码对I2C协议要熟悉，所以这里的关键点是I2C协议。
1. static int bit_xfer(struct i2c_adapter *i2c_adap,  
2.             struct i2c_msg msgs[], int num)  
3. {  
4.     struct i2c_msg *pmsg;  
5.     struct i2c_algo_bit_data *adap = i2c_adap-&gt;algo_data;  
6.     int i, ret;  
7.     unsigned short nak_ok;  
8.   
9.     bit_dbg(3, &amp;i2c_adap-&gt;dev, &quot;emitting start condition\n&quot;);  
10.     /*发送起始信号*/  
11.     i2c_start(adap);  
12.     for (i = 0; i &lt; num; i++) {  
13.         pmsg = &amp;msgs[i];  
14.         nak_ok = pmsg-&gt;flags &amp; I2C_M_IGNORE_NAK;  
15.         if (!(pmsg-&gt;flags &amp; I2C_M_NOSTART)) {  
16.             if (i) {  
17.                 bit_dbg(3, &amp;i2c_adap-&gt;dev, &quot;emitting &quot;  
18.                     &quot;repeated start condition\n&quot;);  
19.                 i2c_repstart(adap);  
20.             }  
21.             ret = bit_doAddress(i2c_adap, pmsg);  
22.             if ((ret != 0) &amp;&amp; !nak_ok) {  
23.                 bit_dbg(1, &amp;i2c_adap-&gt;dev, &quot;NAK from &quot;  
24.                     &quot;device addr 0x%02x msg #%d\n&quot;,  
25.                     msgs[i].addr, i);  
26.                 goto bailout;  
27.             }  
28.         }  
29.         if (pmsg-&gt;flags &amp; I2C_M_RD) {  
30.             /* read bytes into buffer*/  
31.             ret = readbytes(i2c_adap, pmsg);  
32.             if (ret &gt;= 1)  
33.                 bit_dbg(2, &amp;i2c_adap-&gt;dev, &quot;read %d byte%s\n&quot;,  
34.                     ret, ret == 1 ? &quot;&quot; : &quot;s&quot;);  
35.             if (ret &lt; pmsg-&gt;len) {  
36.                 if (ret &gt;= 0)  
37.                     ret = -EREMOTEIO;  
38.                 goto bailout;  
39.             }  
40.         } else {  
41.             /* write bytes from buffer */  
42.             ret = sendbytes(i2c_adap, pmsg);  
43.             if (ret &gt;= 1)  
44.                 bit_dbg(2, &amp;i2c_adap-&gt;dev, &quot;wrote %d byte%s\n&quot;,  
45.                     ret, ret == 1 ? &quot;&quot; : &quot;s&quot;);  
46.             if (ret &lt; pmsg-&gt;len) {  
47.                 if (ret &gt;= 0)  
48.                     ret = -EREMOTEIO;  
49.                 goto bailout;  
50.             }  
51.         }  
52.     }  
53.     ret = i;  
54.   
55. bailout:  
56.     bit_dbg(3, &amp;i2c_adap-&gt;dev, &quot;emitting stop condition\n&quot;);  
57.     i2c_stop(adap);  
58.     return ret;  
59. }  
1.发送起始信号
i2c_start(adap);
看这个函数前，先看I2C协议怎么定义起始信号的
</rich_text><rich_text justification="left"></rich_text><rich_text>
起始信号就是在SCL为高电平期间，SDA从高到低的跳变，再来看代码是怎么实现的
1. static void i2c_start(struct i2c_algo_bit_data *adap)  
2. {  
3.     /* assert: scl, sda are high */  
4.     setsda(adap, 0);  
5.     udelay(adap-&gt;udelay);  
6.     scllo(adap);  
7. }  
这些setsda和setscl这些都是使用的总线的函数，在这里是使用的i2c-gpio.c中定义的函数，还记得那一系列判断赋值吗。
1. #define setsda(adap, val)   adap-&gt;setsda(adap-&gt;data, val)  
2. #define setscl(adap, val)   adap-&gt;setscl(adap-&gt;data, val)  
3. #define getsda(adap)        adap-&gt;getsda(adap-&gt;data)  
4. #define getscl(adap)        adap-&gt;getscl(adap-&gt;data)  
2.往下是个大的for循环
到了这里又不得不说这个struct i2c_msg结构，这个结构定义在include/linux/i2c.h中
1. struct i2c_msg {  
2.     __u16 addr; /* slave address            */  
3.     __u16 flags;  
4. #define I2C_M_TEN       0x0010  /* this is a ten bit chip address */  
5. #define I2C_M_RD        0x0001  /* read data, from slave to master */  
6. #define I2C_M_NOSTART       0x4000  /* if I2C_FUNC_PROTOCOL_MANGLING */  
7. #define I2C_M_REV_DIR_ADDR  0x2000  /* if I2C_FUNC_PROTOCOL_MANGLING */  
8. #define I2C_M_IGNORE_NAK    0x1000  /* if I2C_FUNC_PROTOCOL_MANGLING */  
9. #define I2C_M_NO_RD_ACK     0x0800  /* if I2C_FUNC_PROTOCOL_MANGLING */  
10. #define I2C_M_RECV_LEN      0x0400  /* length will be first received byte */  
11.     __u16 len;      /* msg length               */  
12.     __u8 *buf;      /* pointer to msg data          */  
13. };  
这个结构专门用于数据传输相关的addr为I2C设备地址，flags为一些标志位，len为数据的长度，buf为数据。这里宏定义的一些标志还是需要了解一下。
I2C_M_TEN表示10位设备地址
I2C_M_RD读标志
I2C_M_NOSTART无起始信号标志
I2C_M_IGNORE_NAK忽略应答信号标志
回到for，这里的num代表有几个struct i2c_msg，进入for语句，接下来是个if语句，判断这个设备是否定义了I2C_M_NOSTART标志，这个标志主要用于写操作时，不必重新发送起始信号和设备地址，但是对于读操作就不同了，要调用i2c_repstart这个函数去重新发送起始信号，调用bit_doAddress函数去重新构造设备地址字节，来看这个函数。
1. static int bit_doAddress(struct i2c_adapter *i2c_adap, struct i2c_msg *msg)  
2. {  
3.     unsigned short flags = msg-&gt;flags;  
4.     unsigned short nak_ok = msg-&gt;flags &amp; I2C_M_IGNORE_NAK;  
5.     struct i2c_algo_bit_data *adap = i2c_adap-&gt;algo_data;  
6.   
7.     unsigned char addr;  
8.     int ret, retries;  
9.   
10.     retries = nak_ok ? 0 : i2c_adap-&gt;retries;  
11.   
12.     if (flags &amp; I2C_M_TEN) {  
13.         /* a ten bit address */  
14.         addr = 0xf0 | ((msg-&gt;addr &gt;&gt; 7) &amp; 0x03);  
15.         bit_dbg(2, &amp;i2c_adap-&gt;dev, &quot;addr0: %d\n&quot;, addr);  
16.         /* try extended address code...*/  
17.         ret = try_address(i2c_adap, addr, retries);  
18.         if ((ret != 1) &amp;&amp; !nak_ok)  {  
19.             dev_err(&amp;i2c_adap-&gt;dev,  
20.                 &quot;died at extended address code\n&quot;);  
21.             return -EREMOTEIO;  
22.         }  
23.         /* the remaining 8 bit address */  
24.         ret = i2c_outb(i2c_adap, msg-&gt;addr &amp; 0x7f);  
25.         if ((ret != 1) &amp;&amp; !nak_ok) {  
26.             /* the chip did not ack / xmission error occurred */  
27.             dev_err(&amp;i2c_adap-&gt;dev, &quot;died at 2nd address code\n&quot;);  
28.             return -EREMOTEIO;  
29.         }  
30.         if (flags &amp; I2C_M_RD) {  
31.             bit_dbg(3, &amp;i2c_adap-&gt;dev, &quot;emitting repeated &quot;  
32.                 &quot;start condition\n&quot;);  
33.             i2c_repstart(adap);  
34.             /* okay, now switch into reading mode */  
35.             addr |= 0x01;  
36.             ret = try_address(i2c_adap, addr, retries);  
37.             if ((ret != 1) &amp;&amp; !nak_ok) {  
38.                 dev_err(&amp;i2c_adap-&gt;dev,  
39.                     &quot;died at repeated address code\n&quot;);  
40.                 return -EREMOTEIO;  
41.             }  
42.         }  
43.     } else {        /* normal 7bit address  */  
44.         addr = msg-&gt;addr &lt;&lt; 1;  
45.         if (flags &amp; I2C_M_RD)  
46.             addr |= 1;  
47.         if (flags &amp; I2C_M_REV_DIR_ADDR)  
48.             addr ^= 1;  
49.         ret = try_address(i2c_adap, addr, retries);  
50.         if ((ret != 1) &amp;&amp; !nak_ok)  
51.             return -ENXIO;  
52.     }  
53.   
54.     return 0;  
55. }  
这里先做了一个判断，10位设备地址和7位设备地址分别做不同的处理，通常一条I2C总线上不会挂那么多I2C设备，所以10位地址不常用，直接看对7位地址的处理。struct  i2c_msg中addr中是真正的设备地址，而这里发送的addr高7位才是设备地址，最低位为读写位，如果为读，最低位为1，如果为写，最低位为0。所以要将struct  i2c_msg中addr向左移1位，如果定义了I2C_M_RD标志，就将addr或上1，前面就说过，这个标志就代表读，如果是写，这里就不用处理，因为最低位本身就是0。最后调用try_address函数将这个地址字节发送出去。
1. static int try_address(struct i2c_adapter *i2c_adap,  
2.                unsigned char addr, int retries)  
3. {  
4.     struct i2c_algo_bit_data *adap = i2c_adap-&gt;algo_data;  
5.     int i, ret = 0;  
6.   
7.     for (i = 0; i &lt;= retries; i++) {  
8.         ret = i2c_outb(i2c_adap, addr);  
9.         if (ret == 1 || i == retries)  
10.             break;  
11.         bit_dbg(3, &amp;i2c_adap-&gt;dev, &quot;emitting stop condition\n&quot;);  
12.         i2c_stop(adap);  
13.         udelay(adap-&gt;udelay);  
14.         yield();  
15.         bit_dbg(3, &amp;i2c_adap-&gt;dev, &quot;emitting start condition\n&quot;);  
16.         i2c_start(adap);  
17.     }  
18.     if (i &amp;&amp; ret)  
19.         bit_dbg(1, &amp;i2c_adap-&gt;dev, &quot;Used %d tries to %s client at &quot;  
20.             &quot;0x%02x: %s\n&quot;, i + 1,  
21.             addr &amp; 1 ? &quot;read from&quot; : &quot;write to&quot;, addr &gt;&gt; 1,  
22.             ret == 1 ? &quot;success&quot; : &quot;failed, timeout?&quot;);  
23.     return ret;  
24. }  
最主要的就是调用i2c_outb发送一个字节，retries为重复次数，看前面adap-&gt;retries= 3;
如果发送失败，也就是设备没有给出应答信号，那就发送停止信号，发送起始信号，再发送这个地址字节，这就叫retries。来看这个具体的i2c_outb函数
1. static int i2c_outb(struct i2c_adapter *i2c_adap, unsigned char c)  
2. {  
3.     int i;  
4.     int sb;  
5.     int ack;  
6.     struct i2c_algo_bit_data *adap = i2c_adap-&gt;algo_data;  
7.   
8.     /* assert: scl is low */  
9.     for (i = 7; i &gt;= 0; i--) {  
10.         sb = (c &gt;&gt; i) &amp; 1;  
11.         setsda(adap, sb);  
12.         udelay((adap-&gt;udelay + 1) / 2);  
13.         if (sclhi(adap) &lt; 0) { /* timed out */  
14.             bit_dbg(1, &amp;i2c_adap-&gt;dev, &quot;i2c_outb: 0x%02x, &quot;  
15.                 &quot;timeout at bit #%d\n&quot;, (int)c, i);  
16.             return -ETIMEDOUT;  
17.         }  
18.         /* FIXME do arbitration here: 
19.          * if (sb &amp;&amp; !getsda(adap)) -&gt; ouch! Get out of here. 
20.          * 
21.          * Report a unique code, so higher level code can retry 
22.          * the whole (combined) message and *NOT* issue STOP. 
23.          */  
24.         scllo(adap);  
25.     }  
26.     sdahi(adap);  
27.     if (sclhi(adap) &lt; 0) { /* timeout */  
28.         bit_dbg(1, &amp;i2c_adap-&gt;dev, &quot;i2c_outb: 0x%02x, &quot;  
29.             &quot;timeout at ack\n&quot;, (int)c);  
30.         return -ETIMEDOUT;  
31.     }  
32.   
33.     /* read ack: SDA should be pulled down by slave, or it may 
34.      * NAK (usually to report problems with the data we wrote). 
35.      */  
36.     ack = !getsda(adap);    /* ack: sda is pulled low -&gt; success */  
37.     bit_dbg(2, &amp;i2c_adap-&gt;dev, &quot;i2c_outb: 0x%02x %s\n&quot;, (int)c,  
38.         ack ? &quot;A&quot; : &quot;NA&quot;);  
39.   
40.     scllo(adap);  
41.     return ack;  
42.     /* assert: scl is low (sda undef) */  
43. }  
这个函数有两个参数，一个是structi2c_adapter代表I2C主机，一个是发送的字节数据。那么I2C是怎样将一个字节数据发送出去的呢，那再来看看协议。
</rich_text><rich_text justification="left"></rich_text><rich_text>

首先是发送字节数据的最高位，在时钟为高电平期间将一位数据发送出去，最后是发送字节数据的最低位。发送完成之后，我们需要一个ACK信号，要不然我怎么知道发送成功没有，ACK信号就是在第九个时钟周期时数据线为低，所以在一个字节数据传送完成后，还要将数据线拉高，我们看程序中就是这一句sdahi(adap);等待这个ACK信号的到来，这样一个字节数据就发送完成。
回到bit_xfer函数中，前面只是将设备地址字节发送出去了，那么接下来就是该发送数据了。
注意：这里的数据包括操作设备的基地址
如果是读则调用readbytes函数去读，如果是写则调用sendbytes去写，先看readbytes函数
1. static int readbytes(struct i2c_adapter *i2c_adap, struct i2c_msg *msg)  
2. {  
3.     int inval;  
4.     int rdcount = 0;    /* counts bytes read */  
5.     unsigned char *temp = msg-&gt;buf;  
6.     int count = msg-&gt;len;  
7.     const unsigned flags = msg-&gt;flags;  
8.   
9.     while (count &gt; 0) {  
10.         inval = i2c_inb(i2c_adap);  
11.         if (inval &gt;= 0) {  
12.             *temp = inval;  
13.             rdcount++;  
14.         } else {   /* read timed out */  
15.             break;  
16.         }  
17.   
18.         temp++;  
19.         count--;  
20.   
21.         /* Some SMBus transactions require that we receive the 
22.            transaction length as the first read byte. */  
23.         if (rdcount == 1 &amp;&amp; (flags &amp; I2C_M_RECV_LEN)) {  
24.             if (inval &lt;= 0 || inval &gt; I2C_SMBUS_BLOCK_MAX) {  
25.                 if (!(flags &amp; I2C_M_NO_RD_ACK))  
26.                     acknak(i2c_adap, 0);  
27.                 dev_err(&amp;i2c_adap-&gt;dev, &quot;readbytes: invalid &quot;  
28.                     &quot;block length (%d)\n&quot;, inval);  
29.                 return -EREMOTEIO;  
30.             }  
31.             /* The original count value accounts for the extra 
32.                bytes, that is, either 1 for a regular transaction, 
33.                or 2 for a PEC transaction. */  
34.             count += inval;  
35.             msg-&gt;len += inval;  
36.         }  
37.   
38.         bit_dbg(2, &amp;i2c_adap-&gt;dev, &quot;readbytes: 0x%02x %s\n&quot;,  
39.             inval,  
40.             (flags &amp; I2C_M_NO_RD_ACK)  
41.                 ? &quot;(no ack/nak)&quot;  
42.                 : (count ? &quot;A&quot; : &quot;NA&quot;));  
43.   
44.         if (!(flags &amp; I2C_M_NO_RD_ACK)) {  
45.             inval = acknak(i2c_adap, count);  
46.             if (inval &lt; 0)  
47.                 return inval;  
48.         }  
49.     }  
50.     return rdcount;  
51. }  
其中一个大的while循环，调用i2c_inb去读一个字节，count为数据的长度，单位为多少个字节，
那就来看i2c_inb函数。
1. static int i2c_inb(struct i2c_adapter *i2c_adap)  
2. {  
3.     /* read byte via i2c port, without start/stop sequence  */  
4.     /* acknowledge is sent in i2c_read.         */  
5.     int i;  
6.     unsigned char indata = 0;  
7.     struct i2c_algo_bit_data *adap = i2c_adap-&gt;algo_data;  
8.   
9.     /* assert: scl is low */  
10.     sdahi(adap);  
11.     for (i = 0; i &lt; 8; i++) {  
12.         if (sclhi(adap) &lt; 0) { /* timeout */  
13.             bit_dbg(1, &amp;i2c_adap-&gt;dev, &quot;i2c_inb: timeout at bit &quot;  
14.                 &quot;#%d\n&quot;, 7 - i);  
15.             return -ETIMEDOUT;  
16.         }  
17.         indata *= 2;  
18.         if (getsda(adap))  
19.             indata |= 0x01;  
20.         setscl(adap, 0);  
21.         udelay(i == 7 ? adap-&gt;udelay / 2 : adap-&gt;udelay);  
22.     }  
23.     /* assert: scl is low */  
24.     return indata;  
25. }  
再来看sendbytes函数
1. static int sendbytes(struct i2c_adapter *i2c_adap, struct i2c_msg *msg)  
2. {  
3.     const unsigned char *temp = msg-&gt;buf;  
4.     int count = msg-&gt;len;  
5.     unsigned short nak_ok = msg-&gt;flags &amp; I2C_M_IGNORE_NAK;  
6.     int retval;  
7.     int wrcount = 0;  
8.   
9.     while (count &gt; 0) {  
10.         retval = i2c_outb(i2c_adap, *temp);  
11.   
12.         /* OK/ACK; or ignored NAK */  
13.         if ((retval &gt; 0) || (nak_ok &amp;&amp; (retval == 0))) {  
14.             count--;  
15.             temp++;  
16.             wrcount++;  
17.   
18.         /* A slave NAKing the master means the slave didn't like 
19.          * something about the data it saw.  For example, maybe 
20.          * the SMBus PEC was wrong. 
21.          */  
22.         } else if (retval == 0) {  
23.             dev_err(&amp;i2c_adap-&gt;dev, &quot;sendbytes: NAK bailout.\n&quot;);  
24.             return -EIO;  
25.   
26.         /* Timeout; or (someday) lost arbitration 
27.          * 
28.          * FIXME Lost ARB implies retrying the transaction from 
29.          * the first message, after the &quot;winning&quot; master issues 
30.          * its STOP.  As a rule, upper layer code has no reason 
31.          * to know or care about this ... it is *NOT* an error. 
32.          */  
33.         } else {  
34.             dev_err(&amp;i2c_adap-&gt;dev, &quot;sendbytes: error %d\n&quot;,  
35.                     retval);  
36.             return retval;  
37.         }  
38.     }  
39.     return wrcount;  
40. }  
也是一个大的while循环，同发送地址字节一样，也是调用i2c_outb去发送一个字节，count也是数据长度，由于i2c_outb函数在前面发送设备地址那里已经介绍了，这里也就不贴出来了。
还是回到bit_xfer函数，数据传输完成后，调用i2c_stop函数发送停止信号。我们看停止信号函数怎么去实现的。
1. static void i2c_stop(struct i2c_algo_bit_data *adap)  
2. {  
3.     /* assert: scl is low */  
4.     sdalo(adap);  
5.     sclhi(adap);  
6.     setsda(adap, 1);  
7.     udelay(adap-&gt;udelay);  
8. }  
看前面发送起始信号的那张图，停止信号就是在时钟为高电平期间，数据线从低到高的跳变。我们看程序是先将数据线拉低，将时钟线拉高，最后将数据拉高，这样就够成了一个停止信号。
还是回到i2c_bit_add_numbered_bus这个函数中来，看另外一个函数调用i2c_add_numbered_adapter。
1. int i2c_add_numbered_adapter(struct i2c_adapter *adap)  
2. {  
3.     int id;  
4.     int status;  
5.   
6.     if (adap-&gt;nr &amp; ~MAX_ID_MASK)  
7.         return -EINVAL;  
8.   
9. retry:  
10.     if (idr_pre_get(&amp;i2c_adapter_idr, GFP_KERNEL) == 0)  
11.         return -ENOMEM;  
12.   
13.     mutex_lock(&amp;core_lock);  
14.     /* &quot;above&quot; here means &quot;above or equal to&quot;, sigh; 
15.      * we need the &quot;equal to&quot; result to force the result 
16.      */  
17.     status = idr_get_new_above(&amp;i2c_adapter_idr, adap, adap-&gt;nr, &amp;id);  
18.     if (status == 0 &amp;&amp; id != adap-&gt;nr) {  
19.         status = -EBUSY;  
20.         idr_remove(&amp;i2c_adapter_idr, id);  
21.     }  
22.     mutex_unlock(&amp;core_lock);  
23.     if (status == -EAGAIN)  
24.         goto retry;  
25.   
26.     if (status == 0)  
27.         status = i2c_register_adapter(adap);  
28.     return status;  
29. }  
最重要的是这句i2c_register_adapter，注册这条I2C总线，进去看看
1. static int i2c_register_adapter(struct i2c_adapter *adap)  
2. {  
3.     int res = 0, dummy;  
4.   
5.     /* Can't register until after driver model init */  
6.     if (unlikely(WARN_ON(!i2c_bus_type.p))) {  
7.         res = -EAGAIN;  
8.         goto out_list;  
9.     }  
10.   
11.     mutex_init(&amp;adap-&gt;bus_lock);  
12.   
13.     /* Set default timeout to 1 second if not already set */  
14.     if (adap-&gt;timeout == 0)  
15.         adap-&gt;timeout = HZ;  
16.   
17.     dev_set_name(&amp;adap-&gt;dev, &quot;i2c-%d&quot;, adap-&gt;nr);  
18.     adap-&gt;dev.bus = &amp;i2c_bus_type;  
19.     adap-&gt;dev.type = &amp;i2c_adapter_type;  
20.     res = device_register(&amp;adap-&gt;dev);  
21.     if (res)  
22.         goto out_list;  
23.   
24.     dev_dbg(&amp;adap-&gt;dev, &quot;adapter [%s] registered\n&quot;, adap-&gt;name);  
25.   
26. #ifdef CONFIG_I2C_COMPAT  
27.     res = class_compat_create_link(i2c_adapter_compat_class, &amp;adap-&gt;dev,  
28.                        adap-&gt;dev.parent);  
29.     if (res)  
30.         dev_warn(&amp;adap-&gt;dev,  
31.              &quot;Failed to create compatibility class link\n&quot;);  
32. #endif  
33.   
34.     /* create pre-declared device nodes */  
35.     if (adap-&gt;nr &lt; __i2c_first_dynamic_bus_num)  
36.         i2c_scan_static_board_info(adap);  
37.   
38.     /* Notify drivers */  
39.     mutex_lock(&amp;core_lock);  
40.     dummy = bus_for_each_drv(&amp;i2c_bus_type, NULL, adap,  
41.                  i2c_do_add_adapter);  
42.     mutex_unlock(&amp;core_lock);  
43.   
44.     return 0;  
45.   
46. out_list:  
47.     mutex_lock(&amp;core_lock);  
48.     idr_remove(&amp;i2c_adapter_idr, adap-&gt;nr);  
49.     mutex_unlock(&amp;core_lock);  
50.     return res;  
51. }  
看内核代码有时就会这样，会陷入内核代码的汪洋大海中，而拔不出来，直接后果是最后都忘记看这段代码的目的，丧失继续看下去的信心。所以为了避免这样情况出现，所以最好在开始看代码的时候要明确目标，我通过这段代码到底要了解什么东西，主干要抓住，其它枝叶就不要看了。
在这里我认为主要的有
1.注册这个I2C总线设备
1. adap-&gt;dev.bus = &amp;i2c_bus_type;  
2. adap-&gt;dev.type = &amp;i2c_adapter_type;  
3. res = device_register(&amp;adap-&gt;dev);  
这个设备的总线类型为i2c_bus_type
1. struct bus_type i2c_bus_type = {  
2.     .name       = &quot;i2c&quot;,  
3.     .match      = i2c_device_match,  
4.     .probe      = i2c_device_probe,  
5.     .remove     = i2c_device_remove,  
6.     .shutdown   = i2c_device_shutdown,  
7.     .suspend    = i2c_device_suspend,  
8.     .resume     = i2c_device_resume,  
9. };  
看一下它的match函数
1. static int i2c_device_match(struct device *dev, struct device_driver *drv)  
2. {  
3.     struct i2c_client   *client = i2c_verify_client(dev);  
4.     struct i2c_driver   *driver;  
5.   
6.     if (!client)  
7.         return 0;  
8.   
9.     driver = to_i2c_driver(drv);  
10.     /* match on an id table if there is one */  
11.     if (driver-&gt;id_table)  
12.         return i2c_match_id(driver-&gt;id_table, client) != NULL;  
13.   
14.     return 0;  
15. }  
这个match函数主要用来匹配我们的I2C设备和I2C驱动的，如果匹配成功，最后会调用驱动的probe函数，来看它如何匹配的。
1. static const struct i2c_device_id *i2c_match_id(const struct i2c_device_id *id,  
2.                         const struct i2c_client *client)  
3. {  
4.     while (id-&gt;name[0]) {  
5.         if (strcmp(client-&gt;name, id-&gt;name) == 0)  
6.             return id;  
7.         id++;  
8.     }  
9.     return NULL;  
10. }  
就是判断I2C设备的name字段和驱动中id_table中定义的name字段是否相等。
2.往这条总线上添加设备
1. static void i2c_scan_static_board_info(struct i2c_adapter *adapter)  
2. {  
3.     struct i2c_devinfo  *devinfo;  
4.   
5.     down_read(&amp;__i2c_board_lock);  
6.     list_for_each_entry(devinfo, &amp;__i2c_board_list, list) {  
7.         if (devinfo-&gt;busnum == adapter-&gt;nr  
8.                 &amp;&amp; !i2c_new_device(adapter,  
9.                         &amp;devinfo-&gt;board_info))  
10.             dev_err(&amp;adapter-&gt;dev,  
11.                 &quot;Can't create device at 0x%02x\n&quot;,  
12.                 devinfo-&gt;board_info.addr);  
13.     }  
14.     up_read(&amp;__i2c_board_lock);  
15. }  
遍历__i2c_board_list这条链表，看下面的if语句，首先要让struct i2c_devinfo结构中的busnum等于struct  i2c_adapter中的nr，我们前面也说了，这个nr就是i2c总线的总线号，这里可以理解为是在往这条总线上添加设备。所以，如果我们要向I2C注册一个I2C设备的话，直接向__i2c_board_list添加一个设备信息就可以了，先来看这个设备信息结构是怎么定义的。
1. struct i2c_board_info {  
2.     char        type[I2C_NAME_SIZE];  
3.     unsigned short  flags;  
4.     unsigned short  addr;  
5.     void        *platform_data;  
6.     struct dev_archdata *archdata;  
7.     int     irq;  
8. };  
定义这样一个信息呢一般使用一个宏I2C_BOARD_INFO
1. #define I2C_BOARD_INFO(dev_type, dev_addr) \  
2.     .type = dev_type, .addr = (dev_addr)  
dev_type为设备的名字，前面也说了，这个name一定要和I2C驱动相同。addr为设备的地址。
定义了这样一组信息之后呢，接下来当然是往链表添加这些信息了。
1. int __init  
2. i2c_register_board_info(int busnum,  
3.     struct i2c_board_info const *info, unsigned len)  
4. {  
5.     int status;  
6.   
7.     down_write(&amp;__i2c_board_lock);  
8.   
9.     /* dynamic bus numbers will be assigned after the last static one */  
10.     if (busnum &gt;= __i2c_first_dynamic_bus_num)  
11.         __i2c_first_dynamic_bus_num = busnum + 1;  
12.   
13.     for (status = 0; len; len--, info++) {  
14.         struct i2c_devinfo  *devinfo;  
15.   
16.         devinfo = kzalloc(sizeof(*devinfo), GFP_KERNEL);  
17.         if (!devinfo) {  
18.             pr_debug(&quot;i2c-core: can't register boardinfo!\n&quot;);  
19.             status = -ENOMEM;  
20.             break;  
21.         }  
22.   
23.         devinfo-&gt;busnum = busnum;  
24.         devinfo-&gt;board_info = *info;  
25.         list_add_tail(&amp;devinfo-&gt;list, &amp;__i2c_board_list);  
26.     }  
27.   
28.     up_write(&amp;__i2c_board_lock);  
29.   
30.     return status;  
31. }  
第一个参数呢需要注意，它是I2C总线号，一定要和具体的I2C总线对应。我们看又定义了这样一个结构struct i2c_devinfo。
1. struct i2c_devinfo {  
2.     struct list_head    list;  
3.     int         busnum;  
4.     struct i2c_board_info   board_info;  
5. };  
最后是调用list_add_tail往__i2c_board_list这条链表添加设备信息。
然后是i2c_new_device
1. struct i2c_client *  
2. i2c_new_device(struct i2c_adapter *adap, struct i2c_board_info const *info)  
3. {  
4.     struct i2c_client   *client;  
5.     int         status;  
6.   
7.     /*为I2C设备申请内存*/  
8.     client = kzalloc(sizeof *client, GFP_KERNEL);  
9.     if (!client)  
10.         return NULL;  
11.   
12.     /*指定I2C设备的总线*/  
13.     client-&gt;adapter = adap;  
14.   
15.     client-&gt;dev.platform_data = info-&gt;platform_data;  
16.   
17.     if (info-&gt;archdata)  
18.         client-&gt;dev.archdata = *info-&gt;archdata;  
19.   
20.     client-&gt;flags = info-&gt;flags;  
21.     client-&gt;addr = info-&gt;addr; /*I2C设备地址*/  
22.     client-&gt;irq = info-&gt;irq;  
23.   
24.     strlcpy(client-&gt;name, info-&gt;type, sizeof(client-&gt;name));  
25.   
26.     /*检查这个地址有没有被设备占用*/  
27.     /* Check for address business */  
28.     status = i2c_check_addr(adap, client-&gt;addr);  
29.     if (status)  
30.         goto out_err;  
31.   
32.     client-&gt;dev.parent = &amp;client-&gt;adapter-&gt;dev; /*指定设备的父设备*/  
33.     client-&gt;dev.bus = &amp;i2c_bus_type; /*指定设备的总线类型*/  
34.     client-&gt;dev.type = &amp;i2c_client_type;  
35.   
36.     dev_set_name(&amp;client-&gt;dev, &quot;%d-%04x&quot;, i2c_adapter_id(adap),  
37.              client-&gt;addr);  
38.     status = device_register(&amp;client-&gt;dev); /*注册设备*/  
39.     if (status)  
40.         goto out_err;  
41.   
42.     dev_dbg(&amp;adap-&gt;dev, &quot;client [%s] registered with bus id %s\n&quot;,  
43.         client-&gt;name, dev_name(&amp;client-&gt;dev));  
44.   
45.     return client;  
46.   
47. out_err:  
48.     dev_err(&amp;adap-&gt;dev, &quot;Failed to register i2c client %s at 0x%02x &quot;  
49.         &quot;(%d)\n&quot;, client-&gt;name, client-&gt;addr, status);  
50.     kfree(client);  
51.     return NULL;  
52. }  
这个函数的功能是新建一个I2C设备并注册它，在I2C子系统中，I2C设备使用结构structi2c_client描述，那么首先要申请内存空间，I2C设备的主机是谁，必须知道挂载到哪条总线上的，然后就是一些赋值操作，最后就是注册设备，那么这个设备就实实在在的挂在到这条总线上了，这也是新的I2C设备注册方式。
3.i2c_do_add_adapter
你看说着说着就跑远了
1. static int i2c_do_add_adapter(struct device_driver *d, void *data)  
2. {  
3.     struct i2c_driver *driver = to_i2c_driver(d);  
4.     struct i2c_adapter *adap = data;  
5.   
6.     /* Detect supported devices on that bus, and instantiate them */  
7.     i2c_detect(adap, driver);  
8.   
9.     /* Let legacy drivers scan this bus for matching devices */  
10.     if (driver-&gt;attach_adapter) {  
11.         /* We ignore the return code; if it fails, too bad */  
12.         driver-&gt;attach_adapter(adap);  
13.     }  
14.     return 0;  
15. }  
前面通过i2c_scan_static_board_info往I2C总线上添加设备是新的方式，而这里调用每个I2C设备驱动的attach_adapter函数，然后在attach_adapter函数中去实现设备的注册，这是老的方式，i2c-dev.c中就是采用的这种方式。至此，总线这块就看完了。
</rich_text><encoded_png char_offset="11945"></encoded_png><encoded_png char_offset="18895"></encoded_png></node><node name="i2c device" prog_lang="custom-colors" readonly="False" tags="" unique_id="8"><rich_text>
</rich_text></node></node></cherrytree>