<?xml version="1.0" ?><cherrytree><node name="camera driver" prog_lang="custom-colors" readonly="False" tags="" unique_id="15"><rich_text>
</rich_text><rich_text scale="h3">1  手机摄像头功能概述</rich_text><rich_text>
    手机摄像头功能由多个功能模块组成，主要三个部分，采集，加工，显示。
    （1）采集部分由感光的sensor完成，通过CAM IF接口与手机芯片内的CAM连接。
    （2）CAM对CAM IF数据进行加工，主要是格式转换，特殊效果等。最终处理出来的一帧数据，存在内存中。
    （3） 手机的刷新线程，使用手机内部的DMA功能，或者OVERLAY技术，把处理好的camera图像，显示到LCD上。刷新部分，不在camera框架范围内，后面只做简单讨论。
    图1：Camera典型硬件模块图

</rich_text><rich_text scale="h3">2  Sensor简介</rich_text><rich_text>
    Sensor是对图像的采集系统，通常采用的是ov系列的芯片。如ov2655等。通常包含两路接口：
    （1）控制总线：Sensor也是一个智能嵌入式系统，一般通过I2C总线与手机芯片通信。手机可以通过I2C读写Sensor的寄存器，改变Sensor的参数，从而改变其工作方式。
    （2）数据总线：Sensor通过CAM IF接口与CAM联系。
     
    图2：sensor硬件连接图
     
    由图可知，sensor工作的条件需要：
    （1）电压供应，一般模拟电压，数字电压。
    （2）工作时钟，通常为24M HZ的正弦波。一般为手机芯片产生
    （3）SDA,SCL，i2c总线连接，sensor通常为从设备。
    （4）standby控制线，手机芯片通过这条GPIO控制线，控制sensor的工作是否开启。
    （5）Sensor输出给手机芯片的接口，CAM IF接口：
    （6）并行数据线，通常8位，10位。分辨率高的sensor数据线需要更多。
    （7）提供给手机芯片内集成的camera模块的PCLK,HCLK,VCLK.(像素同步信号，行同步信号，帧同步信号)。
    Sensor通常产出稳定频率的数据图像流，手机芯片可以通过I2C总线接口，修改寄存器，改变帧频率。也可以改变sensor的输出流的格式，通常采用yuv422格式。

</rich_text><rich_text scale="h3">3  CAM简介</rich_text><rich_text>
    CAM就是将Sensor采集过来的数据，转换相应格式，及其他加工，最后存放到内存中。CAM核心就是个DSP。这个阶段，dsp可以做很多图像处理的事情。比如颜色纠正，自动对焦，scaler等。不同平台会有不同。
    由于Sensor的核心也是dsp，对于这些特效工作，一般Sensor中也会提供。
    高通平台的Sensor的特效（反色）就可以在Sensor中设置。
    由图可知
    CAM consists ofthe following elements:
    • Image Signal Processing (ISP)1
    • Color Processing
    • Image effects
    • Luminance / Chrominance Splitter (Y/C Split)
    • Resize (Down/Up-Scalers)
    • JPEG Encoder
    • YCbCr to RGB conversion for preview
    • Memory Interface
    • Control Unit
    具体详解，可见ste6715 datesheet。
    这些模块看似很复杂，对于我们开发者来说，也不复杂。我们知道它们相应的流程，并且知道每个子模块提供了什么功能。这些模块的功能可以通过相应模块的寄存器进行相应调整的]。这同sensor的参数调整的思想是一样的。硬件提供功能，通过寄存器进行参数调整。
     
    Camera的native层软件接口，在Camera在native层中，提供了/dev/video*的设备节点。Native层通过打开设备 文件，关联上camera，申请一串帧缓冲区，建立循环队列，并把这些内存地址传给内核的camera模块，并等待内核camera的处理结束。 Camera模块一帧处理结束，native层就会返回。 

</rich_text><rich_text scale="h3">4  LCD显示</rich_text><rich_text>
    LCD的显示，就是将lcd的framebuffer的数据映射到LCD屏上，而我们camera的数据要在屏幕上显示，就只需建立camera帧 buffer到framebuffer的映射关系。可以使用内核的DMA，也可以使用overlay。通常的preview过程都是在native层以上 开个线程，waiting kernel的处理完成，然后push到lcd屏上，如此循环。
    （1）软件设计思想


</rich_text><rich_text scale="h3">5  V4l2驱动框架：</rich_text><rich_text>
    关联文件：V4l2-dev.c(src\linux\kernel\linux\drivers\media\video)
    Videodev2.h(src\linux\kernel\linux\include\linux) Cam-core分析
    V4l2.c（src/linux/modules/v4l2cam）
    V4L2是linux的标准接口，提供了众多的标准IOCTL接口，这样不管内核驱动如何改变，风格各异，都可以让应用程序native程序稳定工作。IOCTL接口标准定义于Videodev2.h，这个文件也会被android系统所引用。
    V4L2层的意义在于：让平台的驱动，通过char字符设备层能够与应用关联起来。首先对v4l2.c和v4l2-dev.c两个文件的内容做个简单介绍：
    （1）V4l2.c文件主要工作：在模块加载的时候，调用v4l2_init()函数，该函数完成camera_sensor的获取和对 video_device设备的创建，初始化和注册。实际上完成一个video_device设备驱动，最重要的是v4l2_ioctrl()函数的实 现，根据android的HAL层传下来的操作类型调用不同的控制函数，而这些控制函数通过调用cameraa_sensor和camIF接口来实现。
    （2）V4l2-dev.c文件的主要工作：完成一个字符设备驱动，并实现了video_device注册的工作。字符设备驱动中的主要工作是通过调用video_device设备驱动来完成的。
        这里请注意：camera驱动分为三个部分，最后生成cam.ko，v4l2cam.ko和sensor.ko三个模块，v4l2cam.ko依赖于cam.ko和sensor.ko模块，因此，v4l2cam.ko后于cam.ko和sensor.ko模块加载。
    下面来分析v4l2框架的工作流程。
    （1）v4l2-dev.c
    v4l2-dev.c文件中初始化函数申请了v4l2的字符设备号，但是并没有注册和关联具体驱动。
    static int __init videodev_init(void){  
        dev_t dev =MKDEV(VIDEO_MAJOR, 0);  
        int ret;
        ……  
        ret =register_chrdev_region(dev, VIDEO_NUM_DEVICES, VIDEO_NAME);  //申请一组设备号
        ……  
        ret =class_register(&amp;video_class);              //注册一个类设备
    } 
    提供了2个函数供其他具体驱动进行注册
    video_register_device_index（）;
    video_register_device（）;
    int video_register_device_index(struct video_device *vdev, int type,int nr,                              
            int index){
            ……  
            vdev-&gt;cdev= cdev_alloc();  
            if (vdev-&gt;cdev == NULL) {         
                ret =-ENOMEM;         
                gotocleanup;  
            }  
            
            if (vdev-&gt;fops-&gt;unlocked_ioctl)         
                vdev-&gt;cdev-&gt;ops= &amp;v4l2_unlocked_fops;  
            else         
                vdev-&gt;cdev-&gt;ops= &amp;v4l2_fops;
                  
            vdev-&gt;cdev-&gt;owner= vdev-&gt;fops-&gt;owner;  
            ret = cdev_add(vdev-&gt;cdev,MKDEV(VIDEO_MAJOR, vdev-&gt;minor), 1);  //注册一个字符设备
            ……
            memset(&amp;vdev-&gt;dev, 0, sizeof(vdev-&gt;dev));  
            /* The memsetabove cleared the device's drvdata, so     
            put back the copy we made earlier. */  
            video_set_drvdata(vdev,priv);  
            vdev-&gt;dev.class= &amp;video_class;  
            vdev-&gt;dev.devt= MKDEV(VIDEO_MAJOR, vdev-&gt;minor);  
            if (vdev-&gt;parent)         
                vdev-&gt;dev.parent= vdev-&gt;parent;  
            dev_set_name(&amp;vdev-&gt;dev,&quot;%s%d&quot;, name_base, vdev-&gt;num);  
            ret = device_register(&amp;vdev-&gt;dev);  //注册video_deice设备，将其添加到sysfs文件系统
            ……
            mutex_lock(&amp;videodev_lock);  
            video_device[vdev-&gt;minor] = vdev;   //本地管理的一个video_device数组  
            mutex_unlock(&amp;videodev_lock);
            ……
    }
    该文件中核心对象为：static struct video_device *video_device[VIDEO_NUM_DEVICES];
    设备文件就是根据index与相应的video_device[index]指针关联。
    在videodev_init()初始化函数中，申请了一组设备号，并注册了一个类 video_class，在注册视频设备时，首先注册了一个字符设备，然后用相同的设备号注册了一个设备节点。这里的字符设备是让平台的驱动通过char 字符设备层能够与应用关联起来，V4l2框架核心文件为v4l2-dev.c。  
    v4l2-dev.c文件的核心对象为：static struct video_device  *video_device[VIDEO_NUM_DEVICES]，它维护每个注册了的video_device设备，设备文件就是根据index与相 应的video_device[index]指针关联。所以，这个文件的主要工作就是：字符设备的驱动内容。
字符设备驱动最后还是调用video_device的fops来实现的，这个fops就是v4l2.c中的cam_fops结构体，不过它只实现了 打开，关闭，映射和io控制四个函数。这里要注意的是：在注册video_device前是通过config_a_device（）来初始化 video_device的fops的成员的。
 
（2）V4l2.c：
    文件中重要的数据对象：
    struct acq_device_t {       
        structvideo_device *vfd;           //视频设备对象指针
        
        #define NAME_LENGTH 16    
        char name[NAME_LENGTH];       
        
        ……        
        
        structacq_session_cxt_t *streaming;              //打开camera的一个上下文
               
        video_frame_t *stream_vdf[V4L2_MAX_VDF];       
        
        /* Hardware dependant parts */       
        
        /* The Camera object plugged to our CAMIF*/       
        
        structcamera_sensor *camera;        //sensor对象指针  
             
        /* specific to sensor */       
        void *camera_priv_data;       
        ……
    }; 
    
    struct acq_session_cxt_t {   //代表一个打开的camera设备       
        structacq_device_t *dev;      
         /* handle to control session of CAM hardware bloc */       
         void *camhdl;       
         /* data pool handle (framemem) */       
         void *pool_hdl;       
         /* jpeg buffers */
      #ifdef CONFIG_V4L2CAM_PMEM       
         memblock_t blocks[V4L2_MAX_BUF];
      #else       
         struct v4l2_buffer bufs[V4L2_MAX_BUF];
      #endif       
      /* CameraPixfmt defines the size andpixel format of the sensor. */       
      struct v4l2_pix_format CameraPixfmt;       
      /* CamPixfmt defines the size and pixelformat at the output of CAM bloc */       
      struct v4l2_pix_format CamPixfmt;      
      /* CamPixfmt defines the size and pixelformat of thumbnail at the output of CAM bloc*/       
      struct v4l2_pix_format CamThumbfmt;       
      /* video frame use to preview session */       
      video_frame_t *cur_vdf;       
      video_frame_t *next_vdf;      
      int count;
  }; 
  
    V4l2cam驱动模块的初始化函数流程如下：
    int v4l2_init(void){
        ……  
        while (1) {         
            dev =kzalloc(sizeof(struct acq_device_t), GFP_KERNEL);         
            dev-&gt;camera = v4l2_detect(dev);             //检测并获得camera_sensor设备         
            /* openthe cam bloc interface */         
            cam_open(&amp;hdl);         
            /* wegot a camera plugged ! */         
            /*initialiseprivate fields of the sensor, for cmos coprocessor we try to find the cameraplugged to it */         
            dev-&gt;camera_priv_data= dev-&gt;camera-&gt;init();          
            /*close the cam bloc interface */         
            cam_close(hdl);         
            dev-&gt;vfd = video_device_alloc();              //为video_device分配内存         
            if (config_a_device(dev)) {                //初始化video_device设备结构，包括fops成员                
                unconfig_a_device(dev);                
                ret= -ENODEV;                
                gotobail;         
            }          
            
            if (video_register_device(dev-&gt;vfd,VFL_TYPE_GRABBER, dev-&gt;vfd-&gt;minor) != 0) {                                //注册video_device设备                
                CRITICAL(&quot;Couldn'tregister video driver.&quot;);                
                unconfig_a_device(dev);                
                ret= -ENODEV;                
                gotobail;         
             }         
             
             dev-&gt;is_registered= 1;         
             dev-&gt;preview_running= FALSE;         
             dev-&gt;snapshot_running= FALSE;         
             dev-&gt;snapshot_done= FALSE;          
             /* initcompletion */         
             init_completion(&amp;dev-&gt;complete);          
             video_set_drvdata(dev-&gt;vfd, dev);
          }
     }
     该函数中出现一个config_a_device(dev)函数，这个函数是video_device设备的初始化配置函数，包括对文件操作指针的赋值，这里是一个初始化封装。
    先来看看v4l2_detect()函数：
    structcamera_sensor *v4l2_detect(structacq_device_t *dev){       
        struct camera_sensor **Cams = NULL;       
        struct camera_sensor *cam = NULL;       
        void *hdl = 0;      
        int i = 0;       
        
        PROLOG(&quot;&quot;);        
        dev-&gt;camera = NULL;       
        
        cam_open(&amp;hdl);        
        Cams= sensor_get_cameras();         //获取camera_sensor数组       
        if (Cams) {              
            while (Cams[i] != NULL) {                     
                cam = Cams[i];                     
                if (!cam-&gt;isProbed) {                            
                    cam-&gt;isProbed =1;                            
                    if (cam-&gt;detect() == 0) {            //创建和初始化camera_sensor就在这里，这是sensor驱动部分的内容，后面会有详细的介绍                                   
                        goto detect_exit;                            
                    }                     
                }                     
                
                i++;              
            }                   
        }       
        dev-&gt;camera = NULL;       
        cam = NULL;      
         
    detect_exit:       
        cam_close(hdl);       
        EPILOG(&quot;&quot;);       
        return cam;
    }
    该函数中调用了cam-&gt;detect()函数，这个函数在camera的sensor部分被实现，后面会有详细说明，下面看看如何注册 video_device设备的，video_register_device（）函数，该函数代码在前面已经列出，这里简单描述：
    intvideo_register_device(struct video_device *vdev, int type, int nr){       
        return __video_register_device(vdev,type, nr, 1);
    }
     
    static int __video_register_device(struct video_device *vdev, int type, int nr,              
            int warn_if_nr_in_use){       
            
            ……       
            
            ret= cdev_add(vdev-&gt;cdev, MKDEV(VIDEO_MAJOR, vdev-&gt;minor), 1);       
            
            ……       
            
            ret= device_register(&amp;vdev-&gt;dev);       
            
            ……       
            
            video_device[vdev-&gt;minor]= vdev;       
            
            ……
    }
    该文件中核心对象为：static struct video_device *video_device[VIDEO_NUM_DEVICES];设备文件就是根据index与相应的video_device[index]指针关联。
    由驱动框架我们了解到，平台驱动就是初始化video_device结构，然后注册到V4L2框架中。

在V4l2框架中有几个重要内容有必要提出来：
（1）capture_callback（）
     void capture_callback(void *userdata){ 
        struct acq_session_cxt_t*acq_cxt = (struct acq_session_cxt_t *)userdata; 
        struct acq_device_t *dev; 
        
        BUG_ON(!acq_cxt); 
        dev = acq_cxt-&gt;dev; BUG_ON(!dev); 
        dev-&gt;it_frame_nb++;  
        if (dev-&gt;wait_end_of_frame) {         
            dev-&gt;wait_end_of_frame= 0;        
            complete(&amp;dev-&gt;complete); 
        } else {        
            if(dev-&gt;wait_first_frame) {               
                dev-&gt;wait_first_frame= 0;               
                complete(&amp;dev-&gt;complete);        
            } 
        }
    }
    这是一个回调函数，当一帧数据完成时候，中断函数会响应，从而callback函数也会被调用，唤醒comple等待的函数。此callback函数通过cam_streaming_start函数，注册到底层cam驱动中，下面是启动camera数据流的函数。
    static inline int v4l2_stream_on(structacq_device_t *dev, struct acq_session_cxt_t *acq_cxt, void *arg) {
        
        ……
        
        cam_streaming_start(acq_cxt-&gt;camhdl,                         
            acq_cxt-&gt;cur_vdf, (void*)capture_callback, (void *)data_loss_callback, (void *)acq_cxt);
         
         ……
    } 

（2）v4l2_do_ioct（）
      static long v4l2_do_ioctl(struct file *file, unsigned intcmd, void *arg)；此函数相当庞大，在此不列出了，就是IOCTL的实现函数，每个命令都会有个处理函数，也在此文件中。
      
（3）v4l2_mmap（）
    static int v4l2_mmap(struct file *file, structvm_area_struct *vma)；此函数把内核的cam数据映射到用户空间，用户空间可以读取。

（4）v4l2_open（）
    static int v4l2_open(struct file *file)
    此函数就是创建一次与具体sensor的连接，重要的是创建了acq_session_cxt_t上下文对象。但此时cam的采集转换工作并没有启 动。启动工作是通过ioctl在v4l2_do_ioctl调用v4l2_stream_on函数启动的，就是刚才的那个设置回调函数的函数。
    这里的核心对象为：struct acq_device_t *devices[] = { NULL, NULL, NULL, NULL,  NULL,NULL, NULL, NULL }；每个 acq_device_t  标识唯一camera设备，而acq_session_cxt_t标识一次打开的上下文。
    V4L2平台驱动，调用了2个子模块驱动：Sensor驱动和cam模块驱动，使两者协调工作，从而组成个完成的摄像头工作模块。不过这里要注意的是，v4l2.c 指出同一时间只能打开一次，不能重复打开。

</rich_text><rich_text scale="h3">6  Sensor驱动部分：</rich_text><rich_text>
（一）sensor的核心部分
    Sensor-core驱动很简单。此文件维护一个camera_sensor数组，以供v4l2.c使用。它还实现了关联sensor对象的i2c驱动句柄对象（camera_serial_bus类型）。
    初始化函数流程：
    int sensor_init(void) {
        /* +LMSqc15648 Update i2c mechanism to avoid static registering in kernel */
        #ifdef CONFIG_I2C_NEW_PROBE  
            struct i2c_board_info board_info = {         
                type :&quot;i2ccamera&quot;,         
                addr :0x30  
            };    
            
            struct i2c_adapter* i2c_adap=NULL;  
            PROLOG(&quot;&quot;);     
            i2c_adap = i2c_get_adapter(1);            //获取一号总线适配器    
            if ( i2c_adap==NULL ) {       
                CRITICAL(&quot;Can't get i2cadapter&quot;);    
            } else {          
                i2c_new_device(i2c_adap, &amp;board_info);  //创建一个新i2c设备}
        #endif
        /* -LMSqc15648 Update i2c mechanism to avoid static registering in kernel */  
        EPILOG(&quot;&quot;);  
        return 0;
   }       
   
   这个函数主要是根据borad_info创建了一个i2c_client设备，这在后面的i2c_init（）函数被调用时会匹配到该设备。
    文件中有一个camera_sensor数组，用来保存每个sensor实例：
        struct camera_sensor *Cams[] = {       
            &amp;camera_gc2015,       
            NULL
         };
         
    获取sensor数组的重要函数：
    structcamera_sensor **sensor_get_cameras() {
        return Cams;
    }       
    
    该文件的主要工作还是实现了一个camera_serial_bus结构对象camera_sbus_i2c，它是sensor同i2c总线通信的实现。
    struct camera_serial_bus camera_sbus_i2c = {
        /* +LMSqc11271'probe' is not working in device driver. */
        #ifdef CONFIG_I2C_NEW_PROBE      
            client:NULL,
        #endif
        /* -LMSqc11271'probe' is not working in device driver. */      
        init:i2c_init,      
        cleanup:i2c_cleanup,      
        set_devid:i2c_set_devid,      
        read:i2c_read,      
        write:i2c_write,      
        read:i2c_read,      
        read8:i2c_read8,      
        write8:i2c_write8,
   }; 
    
（二）sensor部分
       Sensor驱动部分的内容就是：根据sensor的datesheet填写出camera_sensor数据结构的函数实现，并创建个 camera_sensor对象，此对象会被sensor-core引用，下面以gc2015为例。
       Gc2015的驱动代码实现文件为gc2015.c，该文件中定义了一个camera_sensor对象：
    struct camera_sensor camera_gc2015 = {     
        name:&quot;gc2015&quot;,     
        detect:gc2015_detect,     
        isProbed:0,     
        clock:24,     
        yuvOrder:INPUT_SEQ_CbYCrY,//INPUT_SEQ_CrYCbY,     
        hsyncPol:INPUT_POL_VSYNC_HIGH,//INPUT_POL_VSYNC_HIGH,//INPUT_POL_VSYNC_LOW,     
        vsyncPol:INPUT_POL_HSYNC_LOW,//INPUT_POL_HSYNC_HIGH,//INPUT_POL_HSYNC_LOW,      
        sampleEdge:INPUT_SAMPLE_EDGE_POS,     
        fullrange:false,     
        init:gc2015_init,     
        cleanup:gc2015_cleanup,     
        open:gc2015_open,     
        close:gc2015_close,     
        enum_pixformat:gc2015_enum_pixformat,     
        try_format:gc2015_try_format,     
        set_format:gc2015_set_format,     
        stop_sensor:gc2015_stop_sensor,     
        start_sensor:gc2015_start_sensor,     
        query_control:gc2015_query_control,     
        get_control:gc2015_get_control,     
        set_control:gc2015_set_control,     
        
        ……     
        
        query_wb_mode:gc2015_query_wb_mode,     
        get_wb_mode:gc2015_get_wb_mode,     
        set_wb_mode:gc2015_set_wb_mode,     
        check_frame:gc2015_check_frame,     
        check_short_circuit:NULL,
    }; 
    
    这个文件的主要内容就是实现这些初始化函数，其中最为重要的是gc2015_detect（）函数，前文有介绍过，在v4l2框架里面的v4l2.c文件 的v4l2_init()函数中调用v4l2_detect()函数，它既是调用的这个gc2015_detect（）函数完成对 camera_sensor的检测和初始化的，下面来看看这个函数的具体实现。
    static int gc2015_detect(void) {       
        extern struct camera_serial_bus camera_sbus_i2c;       
        structcamera_serial_bus *sbus;          
        
        u6_gpio_write_pin(GC2015_GPIO_PD,GC2015_GPIO_PD_OFF);       
        msleep(100);        
        /*set the output camera clock (camclko) */       
        gc2015_set_Mclk(camera_gc2015.clock);           
        msleep(200);   
        printk(&quot;gc2015_detect\n&quot;);       
        
        if((rc = sbus-&gt;init())) {              //该函数调用注册一个i2c驱动              
            CRITICAL(&quot;Couldn'taccess I2c part ofcamera&quot;);              
            gotoerror;       
        }           
        
        sbus-&gt;set_devid(CAM_GC2015_I2C_ID);              //重新设定sensor设备的i2c地址        
        if ((rc = gc2015_write_reglist(gc2015_init_global)))              
            gotoerror;   
                    
        /*DeviceID*/       
        if((rc = gc2015_read_reg(0x00, &amp;pidh)))              
            gotoerror;       
            
        if((rc = gc2015_read_reg(0x01, &amp;pidl)))              
            gotoerror;    
              
    error:           
        sbus-&gt;cleanup();           
        /*activate the power down mode */       
        u6_gpio_write_pin(GC2015_GPIO_PD,GC2015_GPIO_PD_ON);        
        gc2015_unset_Mclk();        
        
        ……
        
    }       
     
    这个函数调用了sensor-core.c中的i2c关联对象的初始化函数，然后调用set_devid()函数设置sensor的硬件地址。
    static int i2c_init(void){       
        int err = 0;
        /* +LMSqc11271 'probe' is not working indevice driver. */
     #ifdef CONFIG_I2C_NEW_PROBE       
        structi2c_client *cam_i2c_client = NULL;
     #endif
     /* -LMSqc11271 'probe' is not working indevice driver. */       
     
        PROLOG(&quot;&quot;);        
        err = i2c_add_driver(&amp;i2c_driver);   //注册一个i2c驱动       
        if (err)              
            CRITICAL(&quot;Failedto add Camera I2Cdriver&quot;);
        /* +LMSqc11271 'probe' is not working indevice driver. */
     #ifdef CONFIG_I2C_NEW_PROBE       
        cam_i2c_client = camera_sbus_i2c.client;
     #endif
        /* -LMSqc11271 'probe' is not working indevice driver. */              
        if (cam_i2c_client ==NULL) {              
            i2c_del_driver(&amp;i2c_driver);              
            err= -ENODEV;       
        }        
        
        EPILOG(&quot;&quot;);       
        
        return err;
    }       
    
    注册一个i2c驱动，这册过程伴随着设备与驱动的匹配过程，当匹配成功后就调用相应的probe（）函数。
    static int sensor_i2c_probe(struct i2c_client *new_client, const struct i2c_device_id *id) {       
        PROLOG(&quot;&quot;);       
        
        i2c_set_clientdata(new_client, &amp;camera_sbus_i2c);       
        
        camera_sbus_i2c.client = new_client;       
        
        EPILOG(&quot;&quot;);       
        
        return 0;
        
    }       

    至此，sensor设备已准备好，v4l2框架便可访问sensor设备了。
     

</rich_text><rich_text scale="h3">7  Cam驱动部分：</rich_text><rich_text>
    涉及的文件：Cam-core.c (src\linux\modules\cam)
    Cam-lib.c (src\linux\modules\cam) 
    此驱动就是cam寄存器的函数封装，以及时钟信号的开关。本文件中的最重要数据cam_interface结构如下：
    struct cam_interface cam = {
        camPwr:NULL,     
        camClk:NULL,     
        jpegClk:NULL,     
        IsInit:0,     
        open_counter:0,      
        whendone_cb:NULL,      
        onerror_cb:NULL,      
        data_cb:NULL,     
        vdf:NULL,     
        wait_encode:0,     
        wait_header_generation:0,     
        wait_data_transfert:0,     
        wait_vsync:0,     
        preview_hdl:0,     
        zoom:1000,     
        brightness:CAM_BRIGHT_DFT,     
        saturation:CAM_SAT_DFT,     
        contrast:CAM_CONTRAST_DFT,     
        efx:NO_EFX,     
        previewRunning:FALSE,     
        immediateUpdate:FALSE,
    }       
    
    该模块的初始化函数：
    int cam_init(void) {       
        PROLOG(&quot;&quot;);        
        /* Reserve I/O addresses */       
        if (!request_mem_region(CAM_IF_START,CAM_IF_SIZE, &quot;CAM_IF&quot;)) {                   
            CRITICAL(&quot;request_mem_regionfailed&quot;);              
            return -EBUSY;       
        }        
        
        if (!cam.IsInit) {    /* do it one time */               
            /* Get the CAM &amp; CAMJPEGclocks */              
            cam.camClk = clk_get(0, &quot;CAM&quot;);              
            if (IS_ERR(cam.camClk)) {                     
                CRITICAL(&quot;Failed !(Could not get the CAM clock)&quot;);                     
                return -ENXIO;              
            }               
            
            cam.jpegClk = clk_get(0,&quot;CAMJPE&quot;);              
            if (IS_ERR(cam.jpegClk)) {                     
                CRITICAL(&quot;Failed !(Could not get the CAMJPEG clock)&quot;);                     
                return -ENXIO;              
            }               
            /* Get the CAMpower */              
            cam.camPwr = pwr_get(NULL, &quot;CAM&quot;);              
            if (IS_ERR(cam.camPwr)) {                     
                CRITICAL(&quot;Failed !(Could not get the CAM power)&quot;);                     
                return -ENXIO;              
             }              
             ……       
         }        
         
         EPILOG(&quot;&quot;);       
         
         return 0;
     }
     
     该函数就是对cam成员进行初始化，如申请内存，获取时钟和电源等。下面是驱动中重要的函数：
 
（1）cam模块的启动函数
    int cam_streaming_start(void *hdl,video_frame_t * frame, void *whendone_cb, void *onerror_cb, void *data_cb)
    在这里面（前面有说过）上层v4l2.c中的callback函数就是通过cam_streaming_start函数，注册到底层cam驱动中，当一帧数据完成时候，中断函数会响应，从而callback函数也会被调用，唤醒comple等待的函数。
 
（2）切换到下一帧
    void cam_update_stream_path(void *hdl,video_frame_t * frame)
 
（3）中断函数（cam_lib.c文件中定义）
    irqreturn_t cam_int_irq(int irq, void *client_data) {  
        u32isp_itstat, mem_itstat;   
        
        isp_itstat = cam_isp_isr_regs-&gt;cam_isp_mis;  
        mem_itstat =cam_mem_isr_regs-&gt;cam_mem_mis;  
        cam_jpe_regs-&gt;cam_jpe_status_mis; 
        
        ……   
        
        /***************** Memory interrupts ***********************/
        else if (mem_itstat &amp; CAM_IMSC_SP_FRAME_END) {                
            PDEBUG(&quot;SP_FRAME_END,%lx&quot;, jiffies);                
            cam_int_clear(0,CAM_IMSC_SP_FRAME_END, 0);                
            /*call of whendonecallback */                
            if (cam.whendone_cb != NULL) {                       
                if (isp_itstat &amp; CAM_IMSC_V_START) {                              
                    PTRACE(&quot;corruptedframe&quot;);                       
                } else {
                    ……                              
                    /*call user whendone */                              
                    cam.whendone_cb(cam.data_cb);                       
                    
                }                
             }         
          }  
       } 
       
       ……
    
    }
    所有cam模块内部的中断，都是此函数，红色标注部分为一帧数据到来，并最终调用到平台驱动的capture_callback（）。
</rich_text><node name="V4L2驱动程序架构" prog_lang="custom-colors" readonly="False" tags="" unique_id="33"><rich_text scale="h2" weight="heavy">1 V4L2简介 </rich_text><rich_text>
video4linux2(V4L2)是Linux内核中关于视频设备的内核驱动，它为Linux中视频设备访问提供了通用接口，在Linux系统中，V4L2驱动的Video设备节点路径通常/dev/video/中的videoX
V4L2驱动对用户空间提供字符设备，主设备号为81，对于视频设备，其次设备号为0-63。除此之外，次设备号为64-127的Radio设备，次设备号为192-223的是Teletext设备,次设备号为224-255的是VBI设备
V4L2驱动的Video设备在用户空间通过各种ioctl调用进行控制，并且可以使用mmap进行内存映射

</rich_text><rich_text scale="h3" weight="heavy">1.1 V4L2驱动主要使用的ioctl 命令值</rich_text><rich_text>
如下所示：
1. </rich_text><rich_text foreground="#000000">#define VIDIOC_QUERYCAP _IOR</rich_text><rich_text foreground="#0000cc">('</rich_text><rich_text>V</rich_text><rich_text foreground="#0000cc">',</rich_text><rich_text> 0</rich_text><rich_text foreground="#0000cc">,</rich_text><rich_text> struct v4l2_capability</rich_text><rich_text foreground="#0000cc">)</rich_text><rich_text> </rich_text><rich_text foreground="#0000cc">/*</rich_text><rich_text>查询能力</rich_text><rich_text foreground="#0000cc">*/</rich_text><rich_text>

2. #define VIDIO_G_FMT _IOWR</rich_text><rich_text foreground="#0000cc">('</rich_text><rich_text>V</rich_text><rich_text foreground="#0000cc">',</rich_text><rich_text> 4</rich_text><rich_text foreground="#0000cc">,</rich_text><rich_text> struct v4l2_format</rich_text><rich_text foreground="#0000cc">)</rich_text><rich_text> </rich_text><rich_text foreground="#0000cc">/*</rich_text><rich_text>获得格式</rich_text><rich_text foreground="#0000cc">*/</rich_text><rich_text>

3. #define VIDIOC_S_FMT _IOWR</rich_text><rich_text foreground="#0000cc">('</rich_text><rich_text>V</rich_text><rich_text foreground="#0000cc">',</rich_text><rich_text> 5</rich_text><rich_text foreground="#0000cc">,</rich_text><rich_text> struct v4l2_format</rich_text><rich_text foreground="#0000cc">)</rich_text><rich_text> </rich_text><rich_text foreground="#0000cc">/*</rich_text><rich_text>设置格式</rich_text><rich_text foreground="#0000cc">*/</rich_text><rich_text>

4. #define VIDIOC_REQBUFS _IOWR</rich_text><rich_text foreground="#0000cc">('</rich_text><rich_text>V</rich_text><rich_text foreground="#0000cc">',</rich_text><rich_text> 8</rich_text><rich_text foreground="#0000cc">,</rich_text><rich_text> strut v4l2_requestbuffers</rich_text><rich_text foreground="#0000cc">)</rich_text><rich_text> </rich_text><rich_text foreground="#0000cc">/*</rich_text><rich_text>申请内存</rich_text><rich_text foreground="#0000cc">*/</rich_text><rich_text>

5. #define VIDIOC_G_FBUF _IOW</rich_text><rich_text foreground="#0000cc">('</rich_text><rich_text>V</rich_text><rich_text foreground="#0000cc">',</rich_text><rich_text> 10</rich_text><rich_text foreground="#0000cc">,</rich_text><rich_text> struct v4l2_framebuffer</rich_text><rich_text foreground="#0000cc">)</rich_text><rich_text> </rich_text><rich_text foreground="#0000cc">/*</rich_text><rich_text>获得Framebuffer</rich_text><rich_text foreground="#0000cc">*/</rich_text><rich_text>

6. #define VIDIOC_S_BUF _IOW</rich_text><rich_text foreground="#0000cc">('</rich_text><rich_text>V</rich_text><rich_text foreground="#0000cc">',</rich_text><rich_text> 11</rich_text><rich_text foreground="#0000cc">,</rich_text><rich_text> struct v4l2_framebuffer</rich_text><rich_text foreground="#0000cc">)</rich_text><rich_text> </rich_text><rich_text foreground="#0000cc">/*</rich_text><rich_text>设置Framebuffer</rich_text><rich_text foreground="#0000cc">*/</rich_text><rich_text>

7. #define VIDIOC_OVERLAY _IOW</rich_text><rich_text foreground="#0000cc">('</rich_text><rich_text>V</rich_text><rich_text foreground="#0000cc">',</rich_text><rich_text> 14</rich_text><rich_text foreground="#0000cc">,</rich_text><rich_text> </rich_text><rich_text foreground="#ff0000">int</rich_text><rich_text foreground="#0000cc">)</rich_text><rich_text> </rich_text><rich_text foreground="#0000cc">/*</rich_text><rich_text>设置Overlay</rich_text><rich_text foreground="#0000cc">*/</rich_text><rich_text>

8. #define VIDIOC_QBUF _IOWR</rich_text><rich_text foreground="#0000cc">('</rich_text><rich_text>V</rich_text><rich_text foreground="#0000cc">',</rich_text><rich_text> 15</rich_text><rich_text foreground="#0000cc">,</rich_text><rich_text> struct v4l2_buffer</rich_text><rich_text foreground="#0000cc">)</rich_text><rich_text> </rich_text><rich_text foreground="#0000cc">/*</rich_text><rich_text>将内存加入队列</rich_text><rich_text foreground="#0000cc">*/</rich_text><rich_text>

9. #define VIDIOC_DQBUF _IOWR</rich_text><rich_text foreground="#0000cc">('</rich_text><rich_text>V</rich_text><rich_text foreground="#0000cc">',</rich_text><rich_text> 17</rich_text><rich_text foreground="#0000cc">,</rich_text><rich_text> strut v4l2_buffer</rich_text><rich_text foreground="#0000cc">)</rich_text><rich_text> </rich_text><rich_text foreground="#0000cc">/*</rich_text><rich_text>从队列取出内存</rich_text><rich_text foreground="#0000cc">*/</rich_text><rich_text>

10. #define VIDIOC_STREAMON _IOW</rich_text><rich_text foreground="#0000cc">('</rich_text><rich_text>V</rich_text><rich_text foreground="#0000cc">',</rich_text><rich_text> 18</rich_text><rich_text foreground="#0000cc">,</rich_text><rich_text> </rich_text><rich_text foreground="#ff0000">int</rich_text><rich_text foreground="#0000cc">)</rich_text><rich_text> </rich_text><rich_text foreground="#0000cc">/*</rich_text><rich_text>开始流</rich_text><rich_text foreground="#0000cc">*/</rich_text><rich_text>

11. #define VIDIOC_STREAMOFF _IOW</rich_text><rich_text foreground="#0000cc">('</rich_text><rich_text>V</rich_text><rich_text foreground="#0000cc">',</rich_text><rich_text> 19</rich_text><rich_text foreground="#0000cc">,</rich_text><rich_text> </rich_text><rich_text foreground="#ff0000">int</rich_text><rich_text foreground="#0000cc">)</rich_text><rich_text> </rich_text><rich_text foreground="#0000cc">/*</rich_text><rich_text>停止流</rich_text><rich_text foreground="#0000cc">*/</rich_text><rich_text>

12. #define VIDIOC_G_CTRL _IOWR</rich_text><rich_text foreground="#0000cc">('</rich_text><rich_text>V</rich_text><rich_text foreground="#0000cc">',</rich_text><rich_text> 27</rich_text><rich_text foreground="#0000cc">,</rich_text><rich_text> struct v4l2_control</rich_text><rich_text foreground="#0000cc">)</rich_text><rich_text> </rich_text><rich_text foreground="#0000cc">/*</rich_text><rich_text>得到控制</rich_text><rich_text foreground="#0000cc">*/</rich_text><rich_text>

13. #define VIDIOC_S_CTRL _IOWR</rich_text><rich_text foreground="#0000cc">('</rich_text><rich_text>V</rich_text><rich_text foreground="#0000cc">',</rich_text><rich_text> 28</rich_text><rich_text foreground="#0000cc">,</rich_text><rich_text> struct v4l2_control</rich_text><rich_text foreground="#0000cc">)</rich_text><rich_text> </rich_text><rich_text foreground="#0000cc">/*</rich_text><rich_text>设置控制</rich_text><rich_text foreground="#0000cc">*/</rich_text><rich_text>

</rich_text><rich_text scale="h3" weight="heavy">1.2 重要结构</rich_text><rich_text>
头文件 include/linux/videodev2.h
include/media/v4l2-dev.h
V4L2驱动核心实现文件：driver/media/video/v4l2-dev.c
v4l2-dev.h中定义的video_device是V4L2驱动程序的核心数据结构
1. </rich_text><rich_text foreground="#006699">struct</rich_text><rich_text> video_device  
2. {  
3.     </rich_text><rich_text foreground="#006699">const</rich_text><rich_text> </rich_text><rich_text foreground="#006699">struct</rich_text><rich_text> v4l2_file_operations *fops;  
4.     </rich_text><rich_text foreground="#006699">struct</rich_text><rich_text> cdev *cdev;</rich_text><rich_text foreground="#008200">//字符设备 </rich_text><rich_text>  
5.     </rich_text><rich_text foreground="#006699">struct</rich_text><rich_text> device *parent;</rich_text><rich_text foreground="#008200">//父设备 </rich_text><rich_text>  
6.     </rich_text><rich_text foreground="#006699">struct</rich_text><rich_text> v4l2_device *v4l2_dev;</rich_text><rich_text foreground="#008200">//父v4l2_device </rich_text><rich_text>  
7.     </rich_text><rich_text foreground="#006699">char</rich_text><rich_text> name[32];</rich_text><rich_text foreground="#008200">//名称 </rich_text><rich_text>  
8.     </rich_text><rich_text foreground="#006699">int</rich_text><rich_text> vfl_type;</rich_text><rich_text foreground="#008200">//类型 </rich_text><rich_text>  
9.     </rich_text><rich_text foreground="#006699">int</rich_text><rich_text> minor;</rich_text><rich_text foreground="#008200">//次设备号 </rich_text><rich_text>  
10.     </rich_text><rich_text foreground="#008200">/*释放回调*/</rich_text><rich_text>  
11.     </rich_text><rich_text foreground="#006699">void</rich_text><rich_text> (*release)(</rich_text><rich_text foreground="#006699">struct</rich_text><rich_text> video_device *vdev);  
12.     </rich_text><rich_text foreground="#008200">/*ioctl回调*/</rich_text><rich_text>  
13.     </rich_text><rich_text foreground="#006699">const</rich_text><rich_text> </rich_text><rich_text foreground="#006699">struct</rich_text><rich_text> v4l2_ioctl_ops *ioctl_ops;  
14. }  
15. 常用的结构  
16. 参见/include/linux/videodev2.h  
17. 1)设备能力结构  
18. </rich_text><rich_text foreground="#006699">struct</rich_text><rich_text> v4l2_capability  
19. {  
20.     __u8 driver[16];</rich_text><rich_text foreground="#008200">//驱动名 </rich_text><rich_text>  
21.     __u8 card[32];</rich_text><rich_text foreground="#008200">//例如Hauppauge winTV </rich_text><rich_text>  
22.     __u8 bus_info[32];</rich_text><rich_text foreground="#008200">//PCI总线信息 </rich_text><rich_text>  
23.     __u32 version;</rich_text><rich_text foreground="#008200">//内核版本 </rich_text><rich_text>  
24.     __u32 capabilities;</rich_text><rich_text foreground="#008200">//设备能力 </rich_text><rich_text>  
25.     __u32 reserved[4];  
26. };  
27. 2)数据格式结构  
28. </rich_text><rich_text foreground="#006699">struct</rich_text><rich_text> v4l2_format  
29. {  
30.     </rich_text><rich_text foreground="#006699">enum</rich_text><rich_text> v4l2_buf_type type;</rich_text><rich_text foreground="#008200">//本结构的数据类型 </rich_text><rich_text>  
31. };  
32. 3)像素格式结构  
33. </rich_text><rich_text foreground="#006699">struct</rich_text><rich_text> v4l2_pix_format  
34. {  
35.     __u32   width;</rich_text><rich_text foreground="#008200">//宽度 </rich_text><rich_text>  
36.     __u32   height;</rich_text><rich_text foreground="#008200">//高度 </rich_text><rich_text>  
37. }  
38. 4)请求缓冲  
39. </rich_text><rich_text foreground="#006699">struct</rich_text><rich_text> v4l2_requestbuffers  
40. {  
41.     __u32   count;</rich_text><rich_text foreground="#008200">//缓存数量 </rich_text><rich_text>  
42.     </rich_text><rich_text foreground="#006699">enum</rich_text><rich_text> v4l2_buf_type type;</rich_text><rich_text foreground="#008200">//数据流类型 </rich_text><rich_text>  
43. }  
44. 5)数据流类型包括V4L2_MEMORY_MMAP和V4L2_MEMORY_USERPTR  
45. </rich_text><rich_text foreground="#006699">enum</rich_text><rich_text> v4l2_memory{  
46.   
47. };  

</rich_text><rich_text scale="h2" weight="heavy">2 V4L2驱动注册 </rich_text><rich_text>
</rich_text><rich_text scale="h3" weight="heavy">2.1 video_register_device </rich_text><rich_text>
video4linux2驱动程序的注册drivers/media/video
video_register_device函数用来注册一个v4l驱动程序
1. </rich_text><rich_text foreground="#006699">int</rich_text><rich_text> video_register_device(</rich_text><rich_text foreground="#006699">struct</rich_text><rich_text> video_device *vdev, </rich_text><rich_text foreground="#006699">int</rich_text><rich_text> type, </rich_text><rich_text foreground="#006699">int</rich_text><rich_text> nr)  
2. {  
3.     </rich_text><rich_text foreground="#006699">return</rich_text><rich_text> __video_register_device(vdev, type, nr, 1);  
4. }  
5. 其中参数type支持的类型如下  
6. #define VFL_TYPE_GRABBER 0//视频  
7. #define VFL_TYPE_VBI    1//从视频消隐的时间取得信息的设备  
8. #define VFL_TYPE_RADIO  2 //广播  
9. #define VFL_TYPE_VTX    3//视传设备  VFL_TYPE_SUBDEV
10. #define VFL_TYPE_MAX    4//最大值   
11. -----------------&gt;返回调用 __video_register_device()  
12. __video_register_device 函数先检查设备类型，接下来  
13. 寻找一个可用的子设备号，最后注册相应的字符设备  
14. </rich_text><rich_text foreground="#006699">static</rich_text><rich_text> </rich_text><rich_text foreground="#006699">int</rich_text><rich_text> __video_register_device(</rich_text><rich_text foreground="#006699">struct</rich_text><rich_text> video_device *vdev, </rich_text><rich_text foreground="#006699">int</rich_text><rich_text> type, </rich_text><rich_text foreground="#006699">int</rich_text><rich_text> nr, </rich_text><rich_text foreground="#006699">int</rich_text><rich_text> warn_if_nr_in_use)  
15. {  
16.       
17. </rich_text><rich_text foreground="#006699">switch</rich_text><rich_text> (type) {  
18.         </rich_text><rich_text foreground="#006699">case</rich_text><rich_text> VFL_TYPE_GRABBER:  
19.             minor_offset = 0;  
20.             minor_cnt = 64;  
21.             </rich_text><rich_text foreground="#006699">break</rich_text><rich_text>;  
22.         </rich_text><rich_text foreground="#006699">case</rich_text><rich_text> VFL_TYPE_RADIO:  
23.             minor_offset = 64;  
24.             minor_cnt = 64;  
25.             </rich_text><rich_text foreground="#006699">break</rich_text><rich_text>;  
26.         </rich_text><rich_text foreground="#006699">case</rich_text><rich_text> VFL_TYPE_VTX:  
27.             minor_offset = 192;  
28.             minor_cnt = 32;  
29.             </rich_text><rich_text foreground="#006699">break</rich_text><rich_text>;  
30.         </rich_text><rich_text foreground="#006699">case</rich_text><rich_text> VFL_TYPE_VBI:  
31.             minor_offset = 224;  
32.             minor_cnt = 32;  
33.             </rich_text><rich_text foreground="#006699">break</rich_text><rich_text>;  
34.         nr = devnode_find(vdev, nr == -1 ? 0 : nr, minor_cnt);  
35.     }     
36.     nr = devnode_find(vdev, nr == -1 ? 0 : nr, minor_cnt);  
37.     vdev-&gt;cdev-&gt;ops = &amp;v4l2_fops;  
38. </rich_text><rich_text foreground="#008200">//注册字符设备 </rich_text><rich_text>  
39. ret = cdev_add(vdev-&gt;cdev, MKDEV(VIDEO_MAJOR, vdev-&gt;minor), 1);  
40.     ret = device_register(&amp;vdev-&gt;dev);  
41. </rich_text><rich_text foreground="#008200">//注册完毕设备信息存储在video_device数组中 </rich_text><rich_text>  
42.     mutex_lock(&amp;videodev_lock);  
43.     video_device[vdev-&gt;minor] = vdev;  
44.     mutex_unlock(&amp;videodev_lock);  
45. }  
int video_register_device(struct video_device *vdev, int type, int nr) { 
    return __video_register_device(vdev, type, nr, 1); 
} 
    其中参数type支持的类型如下 
    #define VFL_TYPE_GRABBER 0//视频 
    #define VFL_TYPE_VBI 1//从视频消隐的时间取得信息的设备 
    #define VFL_TYPE_RADIO 2 //广播 
    #define VFL_TYPE_VTX 3//视传设备 
    #define VFL_TYPE_MAX 4//最大值 
    -----------------&gt;返回调用 __video_register_device()
         __video_register_device 函数先检查设备类型，接下来寻找一个可用的子设备号，最后注册相应的字符设备 

</rich_text><rich_text scale="h3" weight="heavy">2.2 v4l2_fops接口 </rich_text><rich_text>
v4l2_fops为video4linux2设备提供了统一的应用层接口，v4l2_fops定义如下
1. </rich_text><rich_text foreground="#006699">static</rich_text><rich_text> </rich_text><rich_text foreground="#006699">const</rich_text><rich_text> </rich_text><rich_text foreground="#006699">struct</rich_text><rich_text> file_operations v4l2_fops = {  
2.     .owner = THIS_MODULE,  
3.         .read = v4l2_read,  
4.         .write = v4l2_write,  
5.         .open = v4l2_open,  
6.         .get_unmapped_area = v4l2_get_unmapped_area,  
7.         .mmap = v4l2_mmap,  
8.         .unlocked_ioctl = v4l2_ioctl,  
9.         .release = v4l2_release,  
10.         .poll = v4l2_poll,  
11.         .llseek = no_llseek,  
12.   
13. };  
14. v4l2_fops中的成员函数最终要调用</rich_text><rich_text foreground="#006699">struct</rich_text><rich_text> video_device-&gt;fops中相应的成员  
15. </rich_text><rich_text foreground="#006699">struct</rich_text><rich_text> video_device-&gt;fops是具体video4linux2摄像头驱动程序必须实现的接口  
16. </rich_text><rich_text foreground="#006699">static</rich_text><rich_text> ssize_t v4l2_read(</rich_text><rich_text foreground="#006699">struct</rich_text><rich_text> file *filp, </rich_text><rich_text foreground="#006699">char</rich_text><rich_text> __user *buf, size_t sz, loff_t *off)  
17. {  
18.     </rich_text><rich_text foreground="#006699">return</rich_text><rich_text> vdev-&gt;fops-&gt;read(filp, buf, sz, off);  
19. }  

</rich_text><rich_text scale="h3" weight="heavy">2.3 /drivers/media/video/samsung/fimc/s3c_fimc_core.c </rich_text><rich_text>
驱动探测函数s3c_fimc_probe定义
1. </rich_text><rich_text foreground="#006699">static</rich_text><rich_text> </rich_text><rich_text foreground="#006699">int</rich_text><rich_text> s3c_fimc_probe(</rich_text><rich_text foreground="#006699">struct</rich_text><rich_text> platform_device *dev)  
2. {  
3.     ctrl = s3c_fimc_register_controller(pdev);  
4.       
5.     clk_enable(ctrl-&gt;clock);</rich_text><rich_text foreground="#008200">//使能时钟 </rich_text><rich_text>  
6.     </rich_text><rich_text foreground="#008200">//注册V4L2驱动 </rich_text><rich_text>  
7.     ret = video_register_device(ctrl-&gt;vd, VFL_TYPE_GRABBER, ctrl-&gt;id);  
8. }  
9. s3c_fimc_register_contoller函数主要用来分配资源与申请中断  
10. </rich_text><rich_text foreground="#006699">static</rich_text><rich_text> </rich_text><rich_text foreground="#006699">struct</rich_text><rich_text> s3c_fimc_control *s3c_fimc_register_controller(</rich_text><rich_text foreground="#006699">struct</rich_text><rich_text> platform_device *pdev)  
11. {  
12.     ctrl-&gt;vd = &amp;s3c_fimc_video_device[id];  
13.     </rich_text><rich_text foreground="#008200">//申请中断 </rich_text><rich_text>  
14.     ctrl-&gt;irq = platform_get_irq(pdev, 0);  
15.     </rich_text><rich_text foreground="#006699">if</rich_text><rich_text>(request_irq(ctrl-&gt;irq, s3c_fimc_irq, IRQF_DISABLED, ctrl-&gt;name, ctrl))  
16. };  
17. </rich_text><rich_text foreground="#006699">struct</rich_text><rich_text> video_device s3c_fimc_video_device[S3C_FIMC_MAX_CTRLS] = {  
18.     [0] = {  
19.         .vfl_type = VID_TYPE_OVERLAY | VID_TYPE_CAPTURE | VID_TYPE_CLIPPING | VID_TYPE_SCALES,  
20.         .fops = &amp;s3c_fimc_fops,  
21.         .ioctl_ops = &amp;s3c_fimc_v4l2_ops,  
22.         .release  = s3c_fimc_vdev_release,  
23.           
24.         .name = &quot;sc3_video0&quot;,  
25.     },  
26. }  
s3c_fimc_v4l2_ops,是在drivers/media/video/samsung/fimc中实现的v4l2_ioctl_ops，在用户空间进行ioctl等调用时，要调用到具体实现的各个函数指针  

</rich_text><rich_text scale="h2" weight="heavy">3 V4L2 操作 </rich_text><rich_text>
</rich_text><rich_text scale="h3" weight="heavy">3.1 s3c_fimc_open </rich_text><rich_text>
1. </rich_text><rich_text foreground="#006699">static</rich_text><rich_text> </rich_text><rich_text foreground="#006699">int</rich_text><rich_text> s3c_fimc_open(</rich_text><rich_text foreground="#006699">struct</rich_text><rich_text> file *filp)  
2. {  
3.     </rich_text><rich_text foreground="#006699">struct</rich_text><rich_text> s3c_fimc_control *ctrl;  
4.     </rich_text><rich_text foreground="#006699">int</rich_text><rich_text> id, ret;  
5.   
6.     id =0;  
7.     ctrl = &amp;s3c_fimc.ctrl[id];  
8.     mutex_lock(&amp;ctrl-&gt;</rich_text><rich_text foreground="#006699">lock</rich_text><rich_text>);  
9.     </rich_text><rich_text foreground="#006699">if</rich_text><rich_text> (atomic_read(&amp;ctrl-&gt;in_use)) {  
10.         ret = -EBUSY;  
11.         </rich_text><rich_text foreground="#006699">goto</rich_text><rich_text> resource_busy;  
12.     } </rich_text><rich_text foreground="#006699">else</rich_text><rich_text> {  
13.         atomic_inc(&amp;ctrl-&gt;in_use);  
14.         s3c_fimc_reset(ctrl);  
15.         filp-&gt;private_data = ctrl;  
16.     }  
17.     mutex_unlock(&amp;ctrl-&gt;</rich_text><rich_text foreground="#006699">lock</rich_text><rich_text>);  
18.     </rich_text><rich_text foreground="#006699">return</rich_text><rich_text> 0;  
19. resource_busy:  
20.     mutex_unlock(&amp;ctrl-&gt;</rich_text><rich_text foreground="#006699">lock</rich_text><rich_text>);  
21.     </rich_text><rich_text foreground="#006699">return</rich_text><rich_text> ret;  
22. }  
23. 用户空间  
24. 打开设备文件  
25. fd = open(dev_name, O_RDWR | O_NONBLOCK, 0);  
 用户空间打开设备文件 fd = open(dev_name, O_RDWR | O_NONBLOCK, 0); 

</rich_text><rich_text scale="h3" weight="heavy">3.2 获取设备的capability,查看设备有什么功能 </rich_text><rich_text>
</rich_text><rich_text weight="heavy">1）结构体</rich_text><rich_text>
1. </rich_text><rich_text foreground="#006699">struct</rich_text><rich_text> v4l2_capability cap;  
2. ret = ioctl(fd, VIDIOC_QUERYCAP, &amp;cap);  
3. /include/linux/videodev2.h  
4. </rich_text><rich_text foreground="#006699">struct</rich_text><rich_text> v4l2_capability {  
5.     __u8    driver[16]; </rich_text><rich_text foreground="#008200">/* i.e. &quot;bttv&quot; */</rich_text><rich_text>  
6.     __u8    card[32];   </rich_text><rich_text foreground="#008200">/* i.e. &quot;Hauppauge WinTV&quot; */</rich_text><rich_text>  
7.     __u8    bus_info[32];   </rich_text><rich_text foreground="#008200">/* &quot;PCI:&quot; + pci_name(pci_dev) */</rich_text><rich_text>  
8.     __u32   version;        </rich_text><rich_text foreground="#008200">/* should use KERNEL_VERSION() */</rich_text><rich_text>  
9.     __u32   capabilities;   </rich_text><rich_text foreground="#008200">/* Device capabilities */</rich_text><rich_text>  
10.     __u32   reserved[4];  
11. };  
12. 驱动实现  
13.   
14. </rich_text><rich_text foreground="#006699">static</rich_text><rich_text> </rich_text><rich_text foreground="#006699">int</rich_text><rich_text> s3c_fimc_v4l2_querycap(</rich_text><rich_text foreground="#006699">struct</rich_text><rich_text> file *filp, </rich_text><rich_text foreground="#006699">void</rich_text><rich_text> *fh,  
15.                     </rich_text><rich_text foreground="#006699">struct</rich_text><rich_text> v4l2_capability *cap)  
16. {  
17.     </rich_text><rich_text foreground="#006699">struct</rich_text><rich_text> s3c_fimc_control *ctrl = (</rich_text><rich_text foreground="#006699">struct</rich_text><rich_text> s3c_fimc_control *) fh;  
18.     strcpy(cap-&gt;driver, &quot;Samsung FIMC Driver&quot;);  
19.     strlcpy(cap-&gt;card, ctrl-&gt;vd-&gt;name, </rich_text><rich_text foreground="#006699">sizeof</rich_text><rich_text>(cap-&gt;card));  
20.     sprintf(cap-&gt;bus_info, &quot;FIMC AHB-bus&quot;);  
21.     cap-&gt;version = 0;  
22.     cap-&gt;capabilities = (V4L2_CAP_VIDEO_OVERLAY | \  
23.                 V4L2_CAP_VIDEO_CAPTURE | V4L2_CAP_STREAMING);  
24.     </rich_text><rich_text foreground="#006699">return</rich_text><rich_text> 0;  
25. }  
26. 应用层调用  
27. </rich_text><rich_text foreground="#006699">static</rich_text><rich_text> </rich_text><rich_text foreground="#006699">int</rich_text><rich_text> video_capability(</rich_text><rich_text foreground="#006699">int</rich_text><rich_text> fd)  
28. {  
29.     </rich_text><rich_text foreground="#006699">int</rich_text><rich_text> ret = 0;  
30.     </rich_text><rich_text foreground="#008200">/***********get the device capability********/</rich_text><rich_text>  
31.     </rich_text><rich_text foreground="#006699">struct</rich_text><rich_text> v4l2_capability cap;  
32.     ret = ioctl(fd, VIDIOC_QUERYCAP, &amp;cap);  
33.     </rich_text><rich_text foreground="#006699">if</rich_text><rich_text> (ret &lt; 0) {  
34.         perror(&quot;VIDIOC_QUERYCAP failed &quot;);  
35.         </rich_text><rich_text foreground="#006699">return</rich_text><rich_text> ret;  
36.     }  
37.       
38.     printf(&quot;\n****Capability informations****\n&quot;);  
39.     printf(&quot;driver:   %s\n&quot;, cap.driver);  
40.       
41.     </rich_text><rich_text foreground="#006699">if</rich_text><rich_text> (cap.capabilities &amp; V4L2_CAP_VIDEO_CAPTURE)  
42.         printf(&quot;Capture capability is supported\n&quot;);  
43.   
44.     </rich_text><rich_text foreground="#006699">if</rich_text><rich_text> (cap.capabilities &amp; V4L2_CAP_STREAMING)   
45.         printf(&quot;Streaming capability is supported\n&quot;);  
46.           
47.     </rich_text><rich_text foreground="#006699">if</rich_text><rich_text> (cap.capabilities &amp; V4L2_CAP_VIDEO_OVERLAY)   
48.         printf(&quot;Overlay capability is supported\n&quot;);  
49.       
50.     </rich_text><rich_text foreground="#006699">return</rich_text><rich_text> 0;  
51. }  

</rich_text><rich_text scale="h3" weight="heavy">3.3 选择视频输入，一个视频设备可以有多个视频输入</rich_text><rich_text scale="h3"> </rich_text><rich_text>
1. 结构体  
2. </rich_text><rich_text foreground="#006699">struct</rich_text><rich_text> v4l2_input input;  
3. </rich_text><rich_text foreground="#006699">int</rich_text><rich_text> index;  
4. 得到INPUT  
5. ret = ioctl(fd, VIDIOC_G_INPUT, &amp;index);      
6. input.index = index;  
7. 列举INPUT  
8. ret = ioctl(fd, VIDIOC_ENUMINPUT, &amp;input);  
9. 设置INPUT  
10. ret = ioctl(fd, VIDIOC_S_INPUT, &amp;index);  
11.   
12. </rich_text><rich_text foreground="#006699">struct</rich_text><rich_text> v4l2_input {  
13.     __u32        index;     </rich_text><rich_text foreground="#008200">/*  Which input */</rich_text><rich_text>  
14.     __u8         name[32];      </rich_text><rich_text foreground="#008200">/*  Label */</rich_text><rich_text>  
15.     __u32        type;      </rich_text><rich_text foreground="#008200">/*  Type of input */</rich_text><rich_text>  
16.     __u32        audioset;      </rich_text><rich_text foreground="#008200">/*  Associated audios (bitfield) */</rich_text><rich_text>  
17.     __u32        tuner;             </rich_text><rich_text foreground="#008200">/*  Associated tuner */</rich_text><rich_text>  
18.     v4l2_std_id  std;  
19.     __u32        status;  
20.     __u32        capabilities;  
21.     __u32        reserved[3];  
22. };  
23.   
24. ioctl: VIDIOC_S_INPUT This IOCTL takes pointer to integer containing index of the input which has to be </rich_text><rich_text foreground="#006699">set</rich_text><rich_text>. Application will provide the index number </rich_text><rich_text foreground="#006699">as</rich_text><rich_text> an argument.   
25.     0 - Composite input,  
26.     1 - S-Video input.  
27. 驱动  
28. </rich_text><rich_text foreground="#006699">static</rich_text><rich_text> </rich_text><rich_text foreground="#006699">int</rich_text><rich_text> s3c_fimc_v4l2_s_input(</rich_text><rich_text foreground="#006699">struct</rich_text><rich_text> file *filp, </rich_text><rich_text foreground="#006699">void</rich_text><rich_text> *fh,  
29.                     unsigned </rich_text><rich_text foreground="#006699">int</rich_text><rich_text> i)  
30. {  
31.     </rich_text><rich_text foreground="#006699">struct</rich_text><rich_text> s3c_fimc_control *ctrl = (</rich_text><rich_text foreground="#006699">struct</rich_text><rich_text> s3c_fimc_control *) fh;  
32.   
33.     </rich_text><rich_text foreground="#006699">if</rich_text><rich_text> (i &gt;= S3C_FIMC_MAX_INPUT_TYPES)  
34.         </rich_text><rich_text foreground="#006699">return</rich_text><rich_text> -EINVAL;  
35.   
36.     ctrl-&gt;v4l2.input = &amp;s3c_fimc_input_types[i];  
37.   
38.     </rich_text><rich_text foreground="#006699">if</rich_text><rich_text> (s3c_fimc_input_types[i].type == V4L2_INPUT_TYPE_CAMERA)  
39.         ctrl-&gt;in_type = PATH_IN_ITU_CAMERA;  
40.     </rich_text><rich_text foreground="#006699">else</rich_text><rich_text>  
41.         ctrl-&gt;in_type = PATH_IN_DMA;  
42.   
43.     </rich_text><rich_text foreground="#006699">return</rich_text><rich_text> 0;  
44. }  
45. </rich_text><rich_text foreground="#006699">static</rich_text><rich_text> </rich_text><rich_text foreground="#006699">struct</rich_text><rich_text> v4l2_input s3c_fimc_input_types[] = {  
46.     {  
47.         .index      = 0,  
48.         .name       = &quot;External Camera Input&quot;,  
49.         .type       = V4L2_INPUT_TYPE_CAMERA,  
50.         .audioset   = 1,  
51.         .tuner      = 0,  
52.         .std        = V4L2_STD_PAL_BG | V4L2_STD_NTSC_M,  
53.         .status     = 0,  
54.     },   
55.     {  
56.         .index      = 1,  
57.         .name       = &quot;Memory Input&quot;,  
58.         .type       = V4L2_INPUT_TYPE_MEMORY,  
59.         .audioset   = 2,  
60.         .tuner      = 0,  
61.         .std        = V4L2_STD_PAL_BG | V4L2_STD_NTSC_M,  
62.         .status     = 0,  
63.     }  
64. };  
65. </rich_text><rich_text foreground="#006699">static</rich_text><rich_text> </rich_text><rich_text foreground="#006699">int</rich_text><rich_text> s3c_fimc_v4l2_enum_input(</rich_text><rich_text foreground="#006699">struct</rich_text><rich_text> file *filp, </rich_text><rich_text foreground="#006699">void</rich_text><rich_text> *fh,  
66.                     </rich_text><rich_text foreground="#006699">struct</rich_text><rich_text> v4l2_input *i)  
67. {  
68.     </rich_text><rich_text foreground="#006699">if</rich_text><rich_text> (i-&gt;index &gt;= S3C_FIMC_MAX_INPUT_TYPES)  
69.         </rich_text><rich_text foreground="#006699">return</rich_text><rich_text> -EINVAL;  
70.   
71.     memcpy(i, &amp;s3c_fimc_input_types[i-&gt;index], </rich_text><rich_text foreground="#006699">sizeof</rich_text><rich_text>(</rich_text><rich_text foreground="#006699">struct</rich_text><rich_text> v4l2_input));  
72.   
73.     </rich_text><rich_text foreground="#006699">return</rich_text><rich_text> 0;  
74. }  
75. 应用  
76. </rich_text><rich_text foreground="#006699">static</rich_text><rich_text> </rich_text><rich_text foreground="#006699">int</rich_text><rich_text> video_input(</rich_text><rich_text foreground="#006699">int</rich_text><rich_text> fd)  
77. {  
78.     </rich_text><rich_text foreground="#008200">/***********get and set the VIDIO INPUT********/</rich_text><rich_text>  
79.     </rich_text><rich_text foreground="#006699">int</rich_text><rich_text> ret = 0;  
80.     </rich_text><rich_text foreground="#006699">struct</rich_text><rich_text> v4l2_input input;</rich_text><rich_text foreground="#008200">//视频输入信息，对应命令VIDIOC_ENUMINPUT  </rich_text><rich_text>  
81.     </rich_text><rich_text foreground="#006699">int</rich_text><rich_text> index;  
82.     index = 0;    </rich_text><rich_text foreground="#008200">//0 - Composite input, 1 - S-Video input. </rich_text><rich_text>  
83.      
84.     ret = ioctl (fd, VIDIOC_S_INPUT, &amp;index);  
85.     </rich_text><rich_text foreground="#006699">if</rich_text><rich_text> (ret &lt; 0) {  
86.         perror (&quot;VIDIOC_S_INPUT&quot;);  
87.         </rich_text><rich_text foreground="#006699">return</rich_text><rich_text> ret;  
88.     }  
89.   
90.     input.index = index;  
91.     ret = ioctl (fd, VIDIOC_ENUMINPUT, &amp;input);  
92.     </rich_text><rich_text foreground="#006699">if</rich_text><rich_text> (ret &lt; 0){  
93.         perror (&quot;VIDIOC_ENUMINPUT&quot;);  
94.         </rich_text><rich_text foreground="#006699">return</rich_text><rich_text> ret;  
95.     }  
96.     printf(&quot;\n****input informations****\n&quot;);  
97.     printf(&quot;name of the input = %s\n&quot;, input.name);  
98.     </rich_text><rich_text foreground="#006699">return</rich_text><rich_text> 0;  
99. }  

</rich_text><rich_text scale="h3" weight="heavy">3.4 遍历所有视频格式,查询驱动所支持的格式 </rich_text><rich_text>
1. 结构  
2. </rich_text><rich_text foreground="#006699">struct</rich_text><rich_text> v4l2_fmtdes fmtdes;  
3. ret = ioctl(fd, VIDIOC_ENUM_FMT, &amp;fmtdes);  
4. </rich_text><rich_text foreground="#006699">struct</rich_text><rich_text> v4l2_fmtdesc {  
5.     __u32           index;             </rich_text><rich_text foreground="#008200">/* Format number      */</rich_text><rich_text>  
6.     </rich_text><rich_text foreground="#006699">enum</rich_text><rich_text> v4l2_buf_type  type;              </rich_text><rich_text foreground="#008200">/* buffer type        */</rich_text><rich_text>  
7.     __u32               flags;  
8.     __u8            description[32];   </rich_text><rich_text foreground="#008200">/* Description string */</rich_text><rich_text>  
9.     __u32           pixelformat;       </rich_text><rich_text foreground="#008200">/* Format fourcc      */</rich_text><rich_text>  
10.     __u32           reserved[4];  
11. };  
12. 驱动  
13. </rich_text><rich_text foreground="#006699">static</rich_text><rich_text> </rich_text><rich_text foreground="#006699">int</rich_text><rich_text> s3c_fimc_v4l2_enum_fmt_vid_cap(</rich_text><rich_text foreground="#006699">struct</rich_text><rich_text> file *filp, </rich_text><rich_text foreground="#006699">void</rich_text><rich_text> *fh,  
14.                     </rich_text><rich_text foreground="#006699">struct</rich_text><rich_text> v4l2_fmtdesc *f)  
15. {  
16.     </rich_text><rich_text foreground="#006699">struct</rich_text><rich_text> s3c_fimc_control *ctrl = (</rich_text><rich_text foreground="#006699">struct</rich_text><rich_text> s3c_fimc_control *) fh;  
17.     </rich_text><rich_text foreground="#006699">int</rich_text><rich_text> index = f-&gt;index;  
18.   
19.     </rich_text><rich_text foreground="#006699">if</rich_text><rich_text> (index &gt;= S3C_FIMC_MAX_CAPTURE_FORMATS)  
20.         </rich_text><rich_text foreground="#006699">return</rich_text><rich_text> -EINVAL;  
21.   
22.     memset(f, 0, </rich_text><rich_text foreground="#006699">sizeof</rich_text><rich_text>(*f));  
23.     memcpy(f, ctrl-&gt;v4l2.fmtdesc + index, </rich_text><rich_text foreground="#006699">sizeof</rich_text><rich_text>(*f));  
24.   
25.     </rich_text><rich_text foreground="#006699">return</rich_text><rich_text> 0;  
26. }  
27. #define S3C_FIMC_MAX_CAPTURE_FORMATS    ARRAY_SIZE(s3c_fimc_capture_formats)   
28. </rich_text><rich_text foreground="#006699">const</rich_text><rich_text> </rich_text><rich_text foreground="#006699">static</rich_text><rich_text> </rich_text><rich_text foreground="#006699">struct</rich_text><rich_text> v4l2_fmtdesc s3c_fimc_capture_formats[] = {  
29.     {  
30.         .index      = 0,  
31.         .type       = V4L2_BUF_TYPE_VIDEO_CAPTURE,  
32.         .flags      = FORMAT_FLAGS_PLANAR,  
33.         .description    = &quot;4:2:0, planar, Y-Cb-Cr&quot;,  
34.         .pixelformat    = V4L2_PIX_FMT_YUV420,  
35.     },  
36.     {  
37.         .index      = 1,  
38.         .type       = V4L2_BUF_TYPE_VIDEO_CAPTURE,  
39.         .flags      = FORMAT_FLAGS_PLANAR,  
40.         .description    = &quot;4:2:2, planar, Y-Cb-Cr&quot;,  
41.         .pixelformat    = V4L2_PIX_FMT_YUV422P,  
42.   
43.     },    
44.     {  
45.         .index      = 2,  
46.         .type       = V4L2_BUF_TYPE_VIDEO_CAPTURE,  
47.         .flags      = FORMAT_FLAGS_PACKED,  
48.         .description    = &quot;4:2:2, packed, YCBYCR&quot;,  
49.         .pixelformat    = V4L2_PIX_FMT_YUYV,  
50.     },  
51.     {  
52.         .index      = 3,  
53.         .type       = V4L2_BUF_TYPE_VIDEO_CAPTURE,  
54.         .flags      = FORMAT_FLAGS_PACKED,  
55.         .description    = &quot;4:2:2, packed, CBYCRY&quot;,  
56.         .pixelformat    = V4L2_PIX_FMT_UYVY,  
57.     }  
58. };  
59. </rich_text><rich_text foreground="#006699">const</rich_text><rich_text> </rich_text><rich_text foreground="#006699">static</rich_text><rich_text> </rich_text><rich_text foreground="#006699">struct</rich_text><rich_text> v4l2_fmtdesc s3c_fimc_overlay_formats[] = {  
60.     {  
61.         .index      = 0,  
62.         .type       = V4L2_BUF_TYPE_VIDEO_OVERLAY,  
63.         .flags      = FORMAT_FLAGS_PACKED,  
64.         .description    = &quot;16 bpp RGB, le&quot;,  
65.         .pixelformat    = V4L2_PIX_FMT_RGB565,        
66.     },  
67.     {  
68.         .index      = 1,  
69.         .type       = V4L2_BUF_TYPE_VIDEO_OVERLAY,  
70.         .flags      = FORMAT_FLAGS_PACKED,  
71.         .description    = &quot;24 bpp RGB, le&quot;,  
72.         .pixelformat    = V4L2_PIX_FMT_RGB24,         
73.     },  
74. };  
75. 应用层  
76. </rich_text><rich_text foreground="#006699">static</rich_text><rich_text> </rich_text><rich_text foreground="#006699">int</rich_text><rich_text> video_fmtdesc(</rich_text><rich_text foreground="#006699">int</rich_text><rich_text> fd)  
77. {  
78.     </rich_text><rich_text foreground="#008200">/***********Format Enumeration************/</rich_text><rich_text>  
79.     </rich_text><rich_text foreground="#006699">int</rich_text><rich_text> ret = 0;  
80.     </rich_text><rich_text foreground="#006699">struct</rich_text><rich_text> v4l2_fmtdesc fmtdes;  
81.     CLEAR(fmtdes);  
82.     fmtdes.index = 0;  
83.     fmtdes.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;  
84.     printf(&quot;\n**********vidioc enumeration stream format informations:****\n&quot;);  
85.     </rich_text><rich_text foreground="#006699">while</rich_text><rich_text> (1) {  
86.           
87.         ret = ioctl(fd, VIDIOC_ENUM_FMT, &amp;fmtdes);  
88.         </rich_text><rich_text foreground="#006699">if</rich_text><rich_text> (ret &lt; 0)   
89.             </rich_text><rich_text foreground="#006699">break</rich_text><rich_text>;  
90.           
91.          printf(&quot;{ pixelformat = %c%c%c%c, description = %s }\n&quot;,  
92.                 (fmtdes.pixelformat &amp; 0xFF),  
93.                 (fmtdes.pixelformat &gt;&gt; 8) &amp; 0xFF,  
94.                 (fmtdes.pixelformat &gt;&gt; 16) &amp; 0xFF,   
95.                 (fmtdes.pixelformat &gt;&gt; 24) &amp; 0xFF,  
96.                 fmtdes.description);  
97.           
98.         </rich_text><rich_text foreground="#006699">if</rich_text><rich_text> (fmtdes.type == V4L2_BUF_TYPE_VIDEO_CAPTURE)  
99.             printf(&quot;video capture type:\n&quot;);  
100.         </rich_text><rich_text foreground="#006699">if</rich_text><rich_text> (fmtdes.pixelformat == V4L2_PIX_FMT_YUYV)  
101.             printf(&quot;V4L2_PIX_FMT_YUYV\n&quot;);  
102.         fmtdes.index++;  
103.     }  
104.     </rich_text><rich_text foreground="#006699">return</rich_text><rich_text> 0;  
105. }  

</rich_text><rich_text scale="h3" weight="heavy">3.5 设置视频捕获格式（重要） </rich_text><rich_text>
1. 结构体  
2. 帧格式包括宽度和高度  
3. </rich_text><rich_text foreground="#006699">struct</rich_text><rich_text> v4l2_format fmt;  
4. ret = ioctl(fd, VIDIOC_S_FMT, &amp;fmt);  
5. </rich_text><rich_text foreground="#006699">struct</rich_text><rich_text> v4l2_format {  
6.     </rich_text><rich_text foreground="#006699">enum</rich_text><rich_text> v4l2_buf_type type;</rich_text><rich_text foreground="#008200">//数据流类型，必须是V4L2_BUF_TYPE_VIDEO_CAPTURE </rich_text><rich_text>  
7.     union {  
8.         </rich_text><rich_text foreground="#006699">struct</rich_text><rich_text> v4l2_pix_format      pix;     </rich_text><rich_text foreground="#008200">/* V4L2_BUF_TYPE_VIDEO_CAPTURE */</rich_text><rich_text>  
9.         </rich_text><rich_text foreground="#006699">struct</rich_text><rich_text> v4l2_window      win;     </rich_text><rich_text foreground="#008200">/* V4L2_BUF_TYPE_VIDEO_OVERLAY */</rich_text><rich_text>  
10.         </rich_text><rich_text foreground="#006699">struct</rich_text><rich_text> v4l2_vbi_format      vbi;     </rich_text><rich_text foreground="#008200">/* V4L2_BUF_TYPE_VBI_CAPTURE */</rich_text><rich_text>  
11.         </rich_text><rich_text foreground="#006699">struct</rich_text><rich_text> v4l2_sliced_vbi_format   sliced;  </rich_text><rich_text foreground="#008200">/* V4L2_BUF_TYPE_SLICED_VBI_CAPTURE */</rich_text><rich_text>  
12.         __u8    raw_data[200];                   </rich_text><rich_text foreground="#008200">/* user-defined */</rich_text><rich_text>  
13.     } fmt;  
14. };  
15. </rich_text><rich_text foreground="#006699">struct</rich_text><rich_text> v4l2_pix_format  {  
16.     __u32 pixelformat;</rich_text><rich_text foreground="#008200">//视频数据存储类型，例如是YUV4:2:2还是RGB </rich_text><rich_text>  
17. }  
18. 驱动  
19. </rich_text><rich_text foreground="#006699">static</rich_text><rich_text> </rich_text><rich_text foreground="#006699">int</rich_text><rich_text> s3c_fimc_v4l2_s_fmt_vid_cap(</rich_text><rich_text foreground="#006699">struct</rich_text><rich_text> file *filp, </rich_text><rich_text foreground="#006699">void</rich_text><rich_text> *fh,  
20.                     </rich_text><rich_text foreground="#006699">struct</rich_text><rich_text> v4l2_format *f)  
21. {  
22.   
23.     </rich_text><rich_text foreground="#006699">struct</rich_text><rich_text> s3c_fimc_control *ctrl = (</rich_text><rich_text foreground="#006699">struct</rich_text><rich_text> s3c_fimc_control *) fh;  
24.     ctrl-&gt;v4l2.frmbuf.fmt = f-&gt;fmt.pix;  
25.   
26.     </rich_text><rich_text foreground="#006699">if</rich_text><rich_text> (f-&gt;fmt.pix.priv == V4L2_FMT_IN)  
27.         s3c_fimc_set_input_frame(ctrl, &amp;f-&gt;fmt.pix);  
28.     </rich_text><rich_text foreground="#006699">else</rich_text><rich_text>  
29.         s3c_fimc_set_output_frame(ctrl, &amp;f-&gt;fmt.pix);  
30.   
31.     </rich_text><rich_text foreground="#006699">return</rich_text><rich_text> 0;  
32. }  
33. </rich_text><rich_text foreground="#006699">int</rich_text><rich_text> s3c_fimc_set_input_frame(</rich_text><rich_text foreground="#006699">struct</rich_text><rich_text> s3c_fimc_control *ctrl,  
34.                 </rich_text><rich_text foreground="#006699">struct</rich_text><rich_text> v4l2_pix_format *fmt)  
35. {  
36.     s3c_fimc_set_input_format(ctrl, fmt);  
37.   
38.     </rich_text><rich_text foreground="#006699">return</rich_text><rich_text> 0;  
39. }  
40.   
41. </rich_text><rich_text foreground="#006699">static</rich_text><rich_text> </rich_text><rich_text foreground="#006699">void</rich_text><rich_text> s3c_fimc_set_input_format(</rich_text><rich_text foreground="#006699">struct</rich_text><rich_text> s3c_fimc_control *ctrl,  
42.                     </rich_text><rich_text foreground="#006699">struct</rich_text><rich_text> v4l2_pix_format *fmt)  
43. {  
44.     </rich_text><rich_text foreground="#006699">struct</rich_text><rich_text> s3c_fimc_in_frame *frame = &amp;ctrl-&gt;in_frame;  
45.   
46.     frame-&gt;width = fmt-&gt;width;  
47.     frame-&gt;height = fmt-&gt;height;  
48.   
49.     </rich_text><rich_text foreground="#006699">switch</rich_text><rich_text> (fmt-&gt;pixelformat) {  
50.     </rich_text><rich_text foreground="#006699">case</rich_text><rich_text> V4L2_PIX_FMT_RGB565:  
51.         frame-&gt;format = FORMAT_RGB565;  
52.         frame-&gt;planes = 1;  
53.         </rich_text><rich_text foreground="#006699">break</rich_text><rich_text>;  
54.   
55.     </rich_text><rich_text foreground="#006699">case</rich_text><rich_text> V4L2_PIX_FMT_RGB24:  
56.         frame-&gt;format = FORMAT_RGB888;  
57.         frame-&gt;planes = 1;  
58.         </rich_text><rich_text foreground="#006699">break</rich_text><rich_text>;  
59.   
60.     </rich_text><rich_text foreground="#006699">case</rich_text><rich_text> V4L2_PIX_FMT_NV12:  
61.         frame-&gt;format = FORMAT_YCBCR420;  
62.         frame-&gt;planes = 2;  
63.         frame-&gt;order_2p = LSB_CBCR;  
64.         </rich_text><rich_text foreground="#006699">break</rich_text><rich_text>;  
65.   
66.     </rich_text><rich_text foreground="#006699">case</rich_text><rich_text> V4L2_PIX_FMT_NV21:  
67.         frame-&gt;format = FORMAT_YCBCR420;  
68.         frame-&gt;planes = 2;  
69.         frame-&gt;order_2p = LSB_CRCB;  
70.         </rich_text><rich_text foreground="#006699">break</rich_text><rich_text>;  
71.   
72.     </rich_text><rich_text foreground="#006699">case</rich_text><rich_text> V4L2_PIX_FMT_NV12X:  
73.         frame-&gt;format = FORMAT_YCBCR420;  
74.         frame-&gt;planes = 2;  
75.         frame-&gt;order_2p = MSB_CBCR;  
76.         </rich_text><rich_text foreground="#006699">break</rich_text><rich_text>;  
77.   
78.     </rich_text><rich_text foreground="#006699">case</rich_text><rich_text> V4L2_PIX_FMT_NV21X:  
79.         frame-&gt;format = FORMAT_YCBCR420;  
80.         frame-&gt;planes = 2;  
81.         frame-&gt;order_2p = MSB_CRCB;  
82.         </rich_text><rich_text foreground="#006699">break</rich_text><rich_text>;  
83.   
84.     </rich_text><rich_text foreground="#006699">case</rich_text><rich_text> V4L2_PIX_FMT_YUV420:  
85.         frame-&gt;format = FORMAT_YCBCR420;  
86.         frame-&gt;planes = 3;  
87.         </rich_text><rich_text foreground="#006699">break</rich_text><rich_text>;  
88.   
89.     </rich_text><rich_text foreground="#006699">case</rich_text><rich_text> V4L2_PIX_FMT_YUYV:  
90.         frame-&gt;format = FORMAT_YCBCR422;  
91.         frame-&gt;planes = 1;  
92.         frame-&gt;order_1p = IN_ORDER422_YCBYCR;  
93.         </rich_text><rich_text foreground="#006699">break</rich_text><rich_text>;  
94.   
95.     </rich_text><rich_text foreground="#006699">case</rich_text><rich_text> V4L2_PIX_FMT_YVYU:  
96.         frame-&gt;format = FORMAT_YCBCR422;  
97.         frame-&gt;planes = 1;  
98.         frame-&gt;order_1p = IN_ORDER422_YCRYCB;  
99.         </rich_text><rich_text foreground="#006699">break</rich_text><rich_text>;  
100.   
101.     </rich_text><rich_text foreground="#006699">case</rich_text><rich_text> V4L2_PIX_FMT_UYVY:  
102.         frame-&gt;format = FORMAT_YCBCR422;  
103.         frame-&gt;planes = 1;  
104.         frame-&gt;order_1p = IN_ORDER422_CBYCRY;  
105.         </rich_text><rich_text foreground="#006699">break</rich_text><rich_text>;  
106.   
107.     </rich_text><rich_text foreground="#006699">case</rich_text><rich_text> V4L2_PIX_FMT_VYUY:  
108.         frame-&gt;format = FORMAT_YCBCR422;  
109.         frame-&gt;planes = 1;  
110.         frame-&gt;order_1p = IN_ORDER422_CRYCBY;  
111.         </rich_text><rich_text foreground="#006699">break</rich_text><rich_text>;  
112.   
113.     </rich_text><rich_text foreground="#006699">case</rich_text><rich_text> V4L2_PIX_FMT_NV16:  
114.         frame-&gt;format = FORMAT_YCBCR422;  
115.         frame-&gt;planes = 2;  
116.         frame-&gt;order_1p = LSB_CBCR;  
117.         </rich_text><rich_text foreground="#006699">break</rich_text><rich_text>;  
118.   
119.     </rich_text><rich_text foreground="#006699">case</rich_text><rich_text> V4L2_PIX_FMT_NV61:  
120.         frame-&gt;format = FORMAT_YCBCR422;  
121.         frame-&gt;planes = 2;  
122.         frame-&gt;order_1p = LSB_CRCB;  
123.         </rich_text><rich_text foreground="#006699">break</rich_text><rich_text>;  
124.   
125.     </rich_text><rich_text foreground="#006699">case</rich_text><rich_text> V4L2_PIX_FMT_NV16X:  
126.         frame-&gt;format = FORMAT_YCBCR422;  
127.         frame-&gt;planes = 2;  
128.         frame-&gt;order_1p = MSB_CBCR;  
129.         </rich_text><rich_text foreground="#006699">break</rich_text><rich_text>;  
130.   
131.     </rich_text><rich_text foreground="#006699">case</rich_text><rich_text> V4L2_PIX_FMT_NV61X:  
132.         frame-&gt;format = FORMAT_YCBCR422;  
133.         frame-&gt;planes = 2;  
134.         frame-&gt;order_1p = MSB_CRCB;  
135.         </rich_text><rich_text foreground="#006699">break</rich_text><rich_text>;  
136.   
137.     </rich_text><rich_text foreground="#006699">case</rich_text><rich_text> V4L2_PIX_FMT_YUV422P:  
138.         frame-&gt;format = FORMAT_YCBCR422;  
139.         frame-&gt;planes = 3;  
140.         </rich_text><rich_text foreground="#006699">break</rich_text><rich_text>;  
141.     }  
142. }  
143. 应用层  
144. </rich_text><rich_text foreground="#006699">static</rich_text><rich_text> </rich_text><rich_text foreground="#006699">int</rich_text><rich_text> video_setfmt(</rich_text><rich_text foreground="#006699">int</rich_text><rich_text> fd)  
145. {  
146.   </rich_text><rich_text foreground="#008200">/***********set Stream data format********/</rich_text><rich_text>  
147.   </rich_text><rich_text foreground="#006699">int</rich_text><rich_text> ret = 0;  
148.   </rich_text><rich_text foreground="#006699">struct</rich_text><rich_text> v4l2_format fmt;  
149.     CLEAR(fmt);  
150.     fmt.type            =   V4L2_BUF_TYPE_VIDEO_CAPTURE;  
151.     fmt.fmt.pix.width   =   640;  
152.     fmt.fmt.pix.height  =   480;  
153.     fmt.fmt.pix.pixelformat = V4L2_PIX_FMT_YUYV;</rich_text><rich_text foreground="#008200">//for PAL </rich_text><rich_text>  
154.     fmt.fmt.pix.field = V4L2_FIELD_INTERLACED;  
155.       
156.     ret = ioctl(fd, VIDIOC_S_FMT, &amp;fmt);  
157.     </rich_text><rich_text foreground="#006699">if</rich_text><rich_text> (ret &lt; 0) {  
158.         perror(&quot;VIDIOC_S_FMT&quot;);  
159.         </rich_text><rich_text foreground="#006699">return</rich_text><rich_text> ret;  
160.     }  
161.       
162.     </rich_text><rich_text foreground="#006699">return</rich_text><rich_text> 0;  
163. }  

</rich_text><rich_text scale="h3" weight="heavy">3.6 视频格式查询 </rich_text><rich_text>
在v4l2中，有两种查询视频格式的方法，一个是遍历所有视频格式的
一个是查询出一种格式的
/*查询出一种格式*/
ret = ioctl(fd, VIDIOC_G_FMT, &amp;fmt);
/*遍历所有视频格式,查询驱动所支持的格式*/
VIDIOC_ENUM_FMT
1. 驱动  
2. </rich_text><rich_text foreground="#006699">static</rich_text><rich_text> </rich_text><rich_text foreground="#006699">int</rich_text><rich_text> s3c_fimc_v4l2_g_fmt_vid_cap(</rich_text><rich_text foreground="#006699">struct</rich_text><rich_text> file *filp, </rich_text><rich_text foreground="#006699">void</rich_text><rich_text> *fh,  
3.                     </rich_text><rich_text foreground="#006699">struct</rich_text><rich_text> v4l2_format *f)  
4. {  
5.     </rich_text><rich_text foreground="#006699">struct</rich_text><rich_text> s3c_fimc_control *ctrl = (</rich_text><rich_text foreground="#006699">struct</rich_text><rich_text> s3c_fimc_control *) fh;  
6.     </rich_text><rich_text foreground="#006699">int</rich_text><rich_text> size = </rich_text><rich_text foreground="#006699">sizeof</rich_text><rich_text>(</rich_text><rich_text foreground="#006699">struct</rich_text><rich_text> v4l2_pix_format);  
7.   
8.     memset(&amp;f-&gt;fmt.pix, 0, size);  
9.     memcpy(&amp;f-&gt;fmt.pix, &amp;(ctrl-&gt;v4l2.frmbuf.fmt), size);  
10.   
11.     </rich_text><rich_text foreground="#006699">return</rich_text><rich_text> 0;  
12. }  
13. 应用  
14. </rich_text><rich_text foreground="#006699">static</rich_text><rich_text> </rich_text><rich_text foreground="#006699">int</rich_text><rich_text> video_getfmt(</rich_text><rich_text foreground="#006699">int</rich_text><rich_text> fd)  
15. {  
16.     </rich_text><rich_text foreground="#008200">/***********get Stream data format********/</rich_text><rich_text>  
17.     </rich_text><rich_text foreground="#006699">int</rich_text><rich_text> ret= 0;  
18.     </rich_text><rich_text foreground="#006699">struct</rich_text><rich_text> v4l2_format fmt;  
19.     CLEAR(fmt);  
20.     fmt.type    =   V4L2_BUF_TYPE_VIDEO_CAPTURE;  
21.     ret = ioctl(fd, VIDIOC_G_FMT, &amp;fmt);  
22.     </rich_text><rich_text foreground="#006699">if</rich_text><rich_text> (ret &lt; 0) {  
23.         perror(&quot;VIDIOC_G_FMT&quot;);  
24.         </rich_text><rich_text foreground="#006699">return</rich_text><rich_text> ret;  
25.     }  
26.     printf(&quot;/n**********vidioc get stream format informations:****\n&quot;);  
27.     </rich_text><rich_text foreground="#006699">if</rich_text><rich_text> (fmt.fmt.pix.pixelformat == V4L2_PIX_FMT_YUYV)  
28.         printf(&quot;8-bit YUYVV pixel format\n&quot;);  
29.         printf(&quot;Size of the buffer = %d\n&quot;, fmt.fmt.pix.sizeimage);  
30.         printf(&quot;Line offset = %d\n&quot;, fmt.fmt.pix.bytesperline);  
31.     </rich_text><rich_text foreground="#006699">if</rich_text><rich_text> (fmt.fmt.pix.field == V4L2_FIELD_INTERLACED)  
32.         printf(&quot;Storate format is interlaced frame format\n&quot;);  
33.           
34.     </rich_text><rich_text foreground="#006699">return</rich_text><rich_text> 0;  
35. }  

</rich_text><rich_text scale="h3" weight="heavy">3.7 向驱动申请帧缓冲，内存，一般不超过5个,帧缓冲管理 </rich_text><rich_text>
1. 结构体  
2. </rich_text><rich_text foreground="#006699">struct</rich_text><rich_text> v4l2_requestbuffers req;  
3. ret = ioctl(fd, VIDIOC_REQBUFS, &amp;req);  
4. ret = ioctl(fd, VIDIOC_QUERYBUF, &amp;buf);</rich_text><rich_text foreground="#008200">//读取缓存 </rich_text><rich_text>  
5.   
6. </rich_text><rich_text foreground="#006699">struct</rich_text><rich_text> v4l2_requestbuffers {  
7.     __u32           count;  
8.     </rich_text><rich_text foreground="#006699">enum</rich_text><rich_text> v4l2_buf_type      type;  
9.     </rich_text><rich_text foreground="#006699">enum</rich_text><rich_text> v4l2_memory        memory;  
10.     __u32           reserved[2];  
11. };  
12.       
13. </rich_text><rich_text foreground="#006699">struct</rich_text><rich_text> v4l2_buffer {  
14.     __u32           index;  
15.     </rich_text><rich_text foreground="#006699">enum</rich_text><rich_text> v4l2_buf_type      type;  
16.     __u32           bytesused;  
17.     __u32           flags;  
18.     </rich_text><rich_text foreground="#006699">enum</rich_text><rich_text> v4l2_field     field;  
19.     </rich_text><rich_text foreground="#006699">struct</rich_text><rich_text> timeval      timestamp;  
20.     </rich_text><rich_text foreground="#006699">struct</rich_text><rich_text> v4l2_timecode    timecode;  
21.     __u32           sequence;  
22.   
23.     </rich_text><rich_text foreground="#008200">/* memory location */</rich_text><rich_text>  
24.     </rich_text><rich_text foreground="#006699">enum</rich_text><rich_text> v4l2_memory        memory;  
25.     union {  
26.         __u32           offset;  
27.         unsigned </rich_text><rich_text foreground="#006699">long</rich_text><rich_text>   userptr;  
28.     } m;  
29.     __u32           length;  
30.     __u32           input;  
31.     __u32           reserved;  
32. };  
33. 使用VIDIOC_REQBUFS 我们获取了req.count个缓存，下一步通过  
34. 调用VIDIOC_QUERYBUF 命令来获取这些缓存的地址，然后使用  
35. mmap函数转换成应用程序中的绝对地址，最后把这些缓存放入  
36. 缓存队列。  
37. The main steps that the application must perform </rich_text><rich_text foreground="#006699">for</rich_text><rich_text> buffer allocation are:   
38. Allocating Memory   
39. Getting Physical Address   
40. Mapping Kernel Space Address to User Space   
41. 驱动支持  
42.   
43. </rich_text><rich_text foreground="#006699">static</rich_text><rich_text> </rich_text><rich_text foreground="#006699">int</rich_text><rich_text> s3c_fimc_v4l2_reqbufs(</rich_text><rich_text foreground="#006699">struct</rich_text><rich_text> file *filp, </rich_text><rich_text foreground="#006699">void</rich_text><rich_text> *fh,  
44.                     </rich_text><rich_text foreground="#006699">struct</rich_text><rich_text> v4l2_requestbuffers *b)  
45. {  
46.     </rich_text><rich_text foreground="#006699">if</rich_text><rich_text> (b-&gt;memory != V4L2_MEMORY_MMAP) {  
47.         err(&quot;V4L2_MEMORY_MMAP is only supported\n&quot;);  
48.         </rich_text><rich_text foreground="#006699">return</rich_text><rich_text> -EINVAL;  
49.     }  
50.   
51.     </rich_text><rich_text foreground="#008200">/* control user input */</rich_text><rich_text>  
52.     </rich_text><rich_text foreground="#006699">if</rich_text><rich_text> (b-&gt;count &gt; 4)  
53.         b-&gt;count = 4;  
54.     </rich_text><rich_text foreground="#006699">else</rich_text><rich_text> </rich_text><rich_text foreground="#006699">if</rich_text><rich_text> (b-&gt;count &lt; 1)  
55.         b-&gt;count = 1;  
56.   
57.     </rich_text><rich_text foreground="#006699">return</rich_text><rich_text> 0;  
58. }  
59. </rich_text><rich_text foreground="#006699">static</rich_text><rich_text> </rich_text><rich_text foreground="#006699">int</rich_text><rich_text> s3c_fimc_v4l2_querybuf(</rich_text><rich_text foreground="#006699">struct</rich_text><rich_text> file *filp, </rich_text><rich_text foreground="#006699">void</rich_text><rich_text> *fh,  
60.                     </rich_text><rich_text foreground="#006699">struct</rich_text><rich_text> v4l2_buffer *b)  
61. {  
62.     </rich_text><rich_text foreground="#006699">struct</rich_text><rich_text> s3c_fimc_control *ctrl = (</rich_text><rich_text foreground="#006699">struct</rich_text><rich_text> s3c_fimc_control *) fh;  
63.       
64.     </rich_text><rich_text foreground="#006699">if</rich_text><rich_text> (b-&gt;type != V4L2_BUF_TYPE_VIDEO_OVERLAY &amp;&amp; \  
65.         b-&gt;type != V4L2_BUF_TYPE_VIDEO_CAPTURE)  
66.         </rich_text><rich_text foreground="#006699">return</rich_text><rich_text> -EINVAL;  
67.   
68.     </rich_text><rich_text foreground="#006699">if</rich_text><rich_text> (b-&gt;memory != V4L2_MEMORY_MMAP)  
69.         </rich_text><rich_text foreground="#006699">return</rich_text><rich_text> -EINVAL;  
70.   
71.     b-&gt;length = ctrl-&gt;out_frame.buf_size;  
72.   
73.     </rich_text><rich_text foreground="#008200">/*</rich_text><rich_text> 
74. </rich_text><rich_text foreground="#008200">     * NOTE: we use the m.offset as an index for multiple frames out.</rich_text><rich_text> 
75. </rich_text><rich_text foreground="#008200">     * Because all frames are not contiguous, we cannot use it as</rich_text><rich_text> 
76. </rich_text><rich_text foreground="#008200">     * original purpose.</rich_text><rich_text> 
77. </rich_text><rich_text foreground="#008200">     * The index value used to find out which frame user wants to mmap.</rich_text><rich_text> 
78. </rich_text><rich_text foreground="#008200">     */</rich_text><rich_text>  
79.     b-&gt;m.offset = b-&gt;index * PAGE_SIZE;  
80.   
81.     </rich_text><rich_text foreground="#006699">return</rich_text><rich_text> 0;  
82. }  
83. </rich_text><rich_text foreground="#006699">static</rich_text><rich_text> </rich_text><rich_text foreground="#006699">int</rich_text><rich_text> s3c_fimc_v4l2_qbuf(</rich_text><rich_text foreground="#006699">struct</rich_text><rich_text> file *filp, </rich_text><rich_text foreground="#006699">void</rich_text><rich_text> *fh,  
84.                 </rich_text><rich_text foreground="#006699">struct</rich_text><rich_text> v4l2_buffer *b)  
85. {  
86.     </rich_text><rich_text foreground="#006699">return</rich_text><rich_text> 0;  
87. }  
88. 应用层  
89. </rich_text><rich_text foreground="#006699">static</rich_text><rich_text> </rich_text><rich_text foreground="#006699">int</rich_text><rich_text> video_mmap(</rich_text><rich_text foreground="#006699">int</rich_text><rich_text> fd)  
90. {  
91.     </rich_text><rich_text foreground="#008200">/*******step 1*****requestbuffers Allocating Memory *******/</rich_text><rich_text>  
92.     </rich_text><rich_text foreground="#006699">int</rich_text><rich_text> ret = 0;  
93.     </rich_text><rich_text foreground="#006699">struct</rich_text><rich_text> v4l2_requestbuffers req;  
94.     CLEAR(req);  
95.     req.count    = 4;  
96.     req.type     = V4L2_BUF_TYPE_VIDEO_CAPTURE;  
97.     req.memory   = V4L2_MEMORY_MMAP;  
98.       
99.     ret = ioctl(fd, VIDIOC_REQBUFS, &amp;req);  
100.     </rich_text><rich_text foreground="#006699">if</rich_text><rich_text> (ret &lt; 0) {  
101.         perror(&quot;VIDIOC_REQBUFS&quot;);  
102.         </rich_text><rich_text foreground="#006699">return</rich_text><rich_text> ret;  
103.     }  
104.       
105.     </rich_text><rich_text foreground="#006699">if</rich_text><rich_text> (req.count &lt; 2)  
106.         printf(&quot;insufficient buffer memory\n&quot;);  
107.         printf(&quot;Number of buffers allocated = %d\n&quot;, req.count);  
108.           
109.     </rich_text><rich_text foreground="#008200">/*******step 2*****Getting Physical Address  *******/</rich_text><rich_text>  
110.     buffers = calloc(req.count, </rich_text><rich_text foreground="#006699">sizeof</rich_text><rich_text>(*buffers));  
111.     </rich_text><rich_text foreground="#006699">for</rich_text><rich_text> (n_buffers = 0; n_buffers &lt; req.count; ++n_buffers)  
112.     {  
113.         </rich_text><rich_text foreground="#006699">struct</rich_text><rich_text> v4l2_buffer buf;</rich_text><rich_text foreground="#008200">//驱动中的一帧 </rich_text><rich_text>  
114.         CLEAR(buf);  
115.         buf.type    = V4L2_BUF_TYPE_VIDEO_CAPTURE;  
116.         buf.memory  = V4L2_MEMORY_MMAP;  
117.         buf.index   = n_buffers;  
118.           
119.         ret = ioctl(fd, VIDIOC_QUERYBUF, &amp;buf);  
120.         </rich_text><rich_text foreground="#006699">if</rich_text><rich_text> (ret &lt; 0) {  
121.             perror(&quot;VIDIOC_QUERYBUF&quot;);  
122.             </rich_text><rich_text foreground="#006699">return</rich_text><rich_text> ret;  
123.         }  
124.           
125.     </rich_text><rich_text foreground="#008200">/*******step 3*****Mapping Kernel Space Address to User Space*******/</rich_text><rich_text>  
126.         buffers[n_buffers].length = buf.length;  
127.         buffers[n_buffers].start =   
128.         mmap(NULL,  
129.             buf.length,  
130.             PROT_READ | PROT_WRITE,  
131.             MAP_SHARED,  
132.             fd,  
133.             buf.m.offset);  
134.               
135.         </rich_text><rich_text foreground="#008200">//if (MAP_FAILED == buffers[n_buffers].start) </rich_text><rich_text>  
136.         </rich_text><rich_text foreground="#008200">//perror(&quot;mmap failed \n&quot;); </rich_text><rich_text>  
137.     }  
138.       
139.     </rich_text><rich_text foreground="#008200">/************requestbuffers in queue***********/</rich_text><rich_text>  
140.     </rich_text><rich_text foreground="#006699">for</rich_text><rich_text> (i = 0; i &lt; n_buffers; ++i) {  
141.         </rich_text><rich_text foreground="#006699">struct</rich_text><rich_text> v4l2_buffer buf;  
142.         CLEAR(buf);  
143.           
144.         buf.type    = V4L2_BUF_TYPE_VIDEO_CAPTURE;  
145.         buf.memory  = V4L2_MEMORY_MMAP;  
146.         buf.index = i;  
147.           
148.         ret = ioctl(fd, VIDIOC_QBUF, &amp;buf);</rich_text><rich_text foreground="#008200">//申请的缓冲进入队列 </rich_text><rich_text>  
149.         </rich_text><rich_text foreground="#006699">if</rich_text><rich_text> (ret &lt; 0) {  
150.             perror(&quot;VIDIOC_QBUF&quot;);  
151.             </rich_text><rich_text foreground="#006699">return</rich_text><rich_text> ret;  
152.         }     
153.     }  
154.       
155.     </rich_text><rich_text foreground="#006699">return</rich_text><rich_text> 0;  
156. }     

</rich_text><rich_text scale="h3" weight="heavy">3.8 开始捕捉图像数据(重要) </rich_text><rich_text>
1. </rich_text><rich_text foreground="#006699">class</rich_text><rich_text>=csharp name=&quot;code&quot;&gt; 结构体
</rich_text><rich_text foreground="#006699">class</rich_text><rich_text>=csharp name=&quot;code&quot;&gt;</rich_text><rich_text foreground="#006699">enum</rich_text><rich_text> v4l2_buf_type type;</rich_text><rich_text foreground="#008200">//开始捕捉图像数据 </rich_text><rich_text>  
2.     type = V4L2_BUF_TYPE_VIDEO_CAPTURE;  
3.     ret = ioctl(fd, VIDIOC_STREAMON, &amp;type);  
4.       
5. </rich_text><rich_text foreground="#006699">enum</rich_text><rich_text> v4l2_buf_type {  
6.     V4L2_BUF_TYPE_VIDEO_CAPTURE        = 1,  
7.     V4L2_BUF_TYPE_VIDEO_OUTPUT         = 2,  
8.     V4L2_BUF_TYPE_VIDEO_OVERLAY        = 3,  
9.     V4L2_BUF_TYPE_VBI_CAPTURE          = 4,  
10.     V4L2_BUF_TYPE_VBI_OUTPUT           = 5,  
11.     V4L2_BUF_TYPE_SLICED_VBI_CAPTURE   = 6,  
12.     V4L2_BUF_TYPE_SLICED_VBI_OUTPUT    = 7,  
13. #if 1   
14.     </rich_text><rich_text foreground="#008200">/* Experimental */</rich_text><rich_text>  
15.     V4L2_BUF_TYPE_VIDEO_OUTPUT_OVERLAY = 8,  
16. #endif   
17.     V4L2_BUF_TYPE_PRIVATE              = 0x80,  
18. };  
19.   
20. 驱动  
21.   
22. </rich_text><rich_text foreground="#006699">static</rich_text><rich_text> </rich_text><rich_text foreground="#006699">int</rich_text><rich_text> s3c_fimc_v4l2_streamon(</rich_text><rich_text foreground="#006699">struct</rich_text><rich_text> file *filp, </rich_text><rich_text foreground="#006699">void</rich_text><rich_text> *fh,  
23.                     </rich_text><rich_text foreground="#006699">enum</rich_text><rich_text> v4l2_buf_type i)  
24. {  
25.     </rich_text><rich_text foreground="#006699">struct</rich_text><rich_text> s3c_fimc_control *ctrl = (</rich_text><rich_text foreground="#006699">struct</rich_text><rich_text> s3c_fimc_control *) fh;  
26.     </rich_text><rich_text foreground="#006699">if</rich_text><rich_text> (i != V4L2_BUF_TYPE_VIDEO_CAPTURE)  
27.         </rich_text><rich_text foreground="#006699">return</rich_text><rich_text> -EINVAL;  
28. printk(&quot;s3c_fimc_v4l2_streamon is called\n&quot;);  
29.     </rich_text><rich_text foreground="#006699">if</rich_text><rich_text> (ctrl-&gt;in_type != PATH_IN_DMA)  
30.         s3c_fimc_init_camera(ctrl);  
31.   
32.     ctrl-&gt;out_frame.skip_frames = 0;  
33.     FSET_CAPTURE(ctrl);  
34.     FSET_IRQ_NORMAL(ctrl);  
35.     s3c_fimc_start_dma(ctrl);  
36.   
37.     </rich_text><rich_text foreground="#006699">return</rich_text><rich_text> 0;  
38. }  
39. 硬件控制寄存器的配置  
40. 应用层  
41. </rich_text><rich_text foreground="#006699">static</rich_text><rich_text> </rich_text><rich_text foreground="#006699">int</rich_text><rich_text> video_streamon(</rich_text><rich_text foreground="#006699">int</rich_text><rich_text> fd)  
42. {  
43.     </rich_text><rich_text foreground="#006699">int</rich_text><rich_text> ret = 0;  
44.       
45.     </rich_text><rich_text foreground="#008200">/************start stream on***********/</rich_text><rich_text>  
46.   
47.     </rich_text><rich_text foreground="#006699">enum</rich_text><rich_text> v4l2_buf_type types;</rich_text><rich_text foreground="#008200">//开始捕捉图像数据 </rich_text><rich_text>  
48.     types = V4L2_BUF_TYPE_VIDEO_CAPTURE;  
49.     ret = ioctl(fd, VIDIOC_STREAMON, &amp;types);  
50.     </rich_text><rich_text foreground="#006699">if</rich_text><rich_text> (ret &lt; 0) {  
51.         perror(&quot;VIDIOC_STREAMON&quot;);  
52.         </rich_text><rich_text foreground="#006699">return</rich_text><rich_text> ret;  
53.     }  
54.   
55.     </rich_text><rich_text foreground="#006699">return</rich_text><rich_text> 0;  
56. }

某设备驱动的缓冲区操作
static struct videobuf_queue_ops video_qops = {
	.buf_setup    = buffer_setup,
	.buf_prepare  = buffer_prepare,
	.buf_queue    = buffer_queue,
	.buf_release  = buffer_release,
};

下面的函数把video_qops和dev-&gt;vb_vidq连接起来：
	/*initial video buffer queue*/
	videobuf_queue_dma_contig_init(&amp;dev-&gt;vb_vidq, &amp;video_qops,
			NULL, &amp;dev-&gt;slock, V4L2_BUF_TYPE_VIDEO_CAPTURE,
			V4L2_FIELD_NONE,
			sizeof(struct buffer), dev,NULL);

在videobuf-core.c中的videobuf_reqbufs, videobuf_qbuf, videobuf_dqbuf等函数中会调用到
而某设备驱动中又调用了videobuf_reqbufs, videobuf_qbuf, videobuf_dqbuf等函数.
			
1. streamon函数获取空闲缓冲区，并把缓冲区地址设置给硬件, 允许相应的中断，开始streaming.
2. irq中断函数中获取数据; 取下一块空闲缓冲区，并把缓冲区地址设置给硬件, 来获取下一帧的数据.

3. 对应函数
1). 
struct video_device *video_device_alloc(void)
{
	return kzalloc(sizeof(struct video_device), GFP_KERNEL);
}
EXPORT_SYMBOL(video_device_alloc);

void video_device_release(struct video_device *vdev)
{
	kfree(vdev);
}
EXPORT_SYMBOL(video_device_release);

2). video_register_device --&gt; __video_register_device --&gt; vdev-&gt;dev.release = v4l2_device_release;
而初始化video_device时，赋值如下：
.release	= video_device_release,
                                                    
3). video_unregister_device --&gt; device_unregister --&gt; v4l2_device_release --&gt; vdev-&gt;release(vdev) --&gt; video_device_release

           </rich_text></node><node name="V4L2框架分析学习 " prog_lang="custom-colors" readonly="False" tags="" unique_id="34"><rich_text scale="h2" weight="heavy">1、概述</rich_text><rich_text>
     Video4Linux2是Linux内核中关于视频设备的内核驱动框架，为上层的访问底层的视频设备提供了统一的接口。凡是内核中的子系统都有抽象底层 硬件的差异，为上层提供统一的接口和提取出公共代码避免代码冗余等好处。就像公司的老板一般都不会直接找底层的员工谈话，而是找部门经理了解情况，一个是 因为底层屌丝人数多，意见各有不同，措辞也不准，部门经理会把情况汇总后再向上汇报；二个是老板时间宝贵。
           V4L2支持三类设备：视频输入输出设备、VBI设备和radio设备(其实还支持更多类型的设备，暂不讨论)，分别会在/dev目录下产生 videoX、radioX和vbiX设备节点。我们常见的视频输入设备主要是摄像头，也是本文主要分析对象。下图V4L2在Linux系统中的结构图：
 </rich_text><rich_text justification="left"></rich_text><rich_text>
 

 Linux系统中视频输入设备主要包括以下四个部分：
 字符设备驱动程序核心：V4L2本身就是一个字符设备，具有字符设备所有的特性，暴露接口给用户空间；
 V4L2驱动核心：主要是构建一个内核中标准视频设备驱动的框架，为视频操作提供统一的接口函数；
 平台V4L2设备驱动：在V4L2框架下，根据平台自身的特性实现与平台相关的V4L2驱动部分，包括注册video_device和v4l2_dev。
 具体的sensor驱动：主要上电、提供工作时钟、视频图像裁剪、流IO开启等，实现各种设备控制方法供上层调用并注册v4l2_subdev。
  
 V4L2的核心源码位于drivers/media/v4l2-core，源码以实现的功能可以划分为四类：
 核心模块实现：由v4l2-dev.c实现，主要作用申请字符主设备号、注册class和提供video device注册注销等相关函数；
 V4L2框架：由v4l2-device.c、v4l2-subdev.c、v4l2-fh.c、v4l2-ctrls.c等文件实现，构建V4L2框架；
 Videobuf管理：由videobuf2-core.c、videobuf2-dma-contig.c、videobuf2-dma-sg.c、 videobuf2-memops.c、videobuf2-vmalloc.c、v4l2-mem2mem.c等文件实现，完成videobuffer 的分配、管理和注销。
 Ioctl框架：由v4l2-ioctl.c文件实现，构建V4L2ioctl的框架。
  
</rich_text><rich_text scale="h2" weight="heavy"> 2、V4L2框架</rich_text><rich_text>
          结构体v4l2_device、video_device、v4l2_subdev和v4l2_fh是搭建框架的主要元素。下图是V4L2框架的结构图：
 </rich_text><rich_text justification="left"></rich_text><rich_text>
 
 从上图V4L2框架是一个标准的树形结构，v4l2_device充 当了父设备，通过链表把所有注册到其下的子设备管理起来，这些设备可以是GRABBER、VBI或RADIO。V4l2_subdev是子设 备，v4l2_subdev结构体包含了对设备操作的ops和ctrls，这部分代码和硬件相关，需要驱动工程师根据硬件实现，像摄像头设备需要实现控制 上下电、读取ID、饱和度、对比度和视频数据流打开关闭的接口函数。Video_device用于创建子设备节点，把操作设备的接口暴露给用户空间。V4l2_fh是每个子设备的文件句柄，在打开设备节点文件时设置，方便上层索引到v4l2_ctrl_handler，v4l2_ctrl_handler管理设备的ctrls，这些ctrls(摄像头设备)包括调节饱和度、对比度和白平衡等。
  
</rich_text><rich_text scale="h3" weight="heavy"> v4l2_device</rich_text><rich_text>
 v4l2_device在v4l2框架中充当所有v4l2_subdev的父设备，管理着注册在其下的子设备。以下是v4l2_device结构体原型(去掉了无关的成员)：
 </rich_text><rich_text background="#d9d9d9">struct v4l2_device {</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">         structlist_head subdevs;    //用链表管理注册的subdev</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">         charname[V4L2_DEVICE_NAME_SIZE];    //device 名字</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">         structkref ref;      //引用计数</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">         ……</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">};</rich_text><rich_text>
 可以看出v4l2_device的主要作用是管理注册在其下的子设备，方便系统查找引用到。
</rich_text><rich_text weight="heavy"> V4l2_device的注册和注销：</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">int v4l2_device_register(struct device*dev, struct v4l2_device *v4l2_dev)</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">static void v4l2_device_release(struct kref *ref)</rich_text><rich_text>
  
</rich_text><rich_text scale="h3" weight="heavy"> V4l2_subdev</rich_text><rich_text>
 V4l2_subdev代表子设备，包含了子设备的相关属性和操作。先来看下结构体原型：
 </rich_text><rich_text background="#d9d9d9">struct v4l2_subdev {</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">         structv4l2_device *v4l2_dev;  //指向父设备</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">         //提供一些控制v4l2设备的接口</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">         conststruct v4l2_subdev_ops *ops;</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">         //向V4L2框架提供的接口函数</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">         conststruct v4l2_subdev_internal_ops *internal_ops;</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">         //subdev控制接口</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">         structv4l2_ctrl_handler *ctrl_handler;</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">         /* namemust be unique */</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">         charname[V4L2_SUBDEV_NAME_SIZE];</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">         /*subdev device node */</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">         structvideo_device *devnode;  </rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">};</rich_text><rich_text>
 每个子设备驱动都需要实现一个v4l2_subdev结构体，v4l2_subdev可以内嵌到其它结构体中，也可以独立使用。结构体中包含了对子设备操作的成员v4l2_subdev_ops和v4l2_subdev_internal_ops。
 v4l2_subdev_ops结构体原型如下：
 </rich_text><rich_text background="#d9d9d9">struct v4l2_subdev_ops {</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">//视频设备通用的操作：初始化、加载FW、上电和RESET等</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">         conststruct v4l2_subdev_core_ops        *core;</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">//tuner特有的操作</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">         conststruct v4l2_subdev_tuner_ops      *tuner;</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">//audio特有的操作</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">         conststruct v4l2_subdev_audio_ops      *audio;</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">//视频设备的特有操作：设置帧率、裁剪图像、开关视频流等</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">         conststruct v4l2_subdev_video_ops      *video;</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">……</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">};</rich_text><rich_text>
 视频设备通常需要实现core和video成员，这两个OPS中的操作都是可选的，但是对于视频流设备video-&gt;s_stream(开启或关闭流IO)必须要实现。
  
 v4l2_subdev_internal_ops结构体原型如下：
 </rich_text><rich_text background="#d9d9d9">struct v4l2_subdev_internal_ops {</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">    //当subdev注册时被调用，读取IC的ID来进行识别</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">         int(*registered)(struct v4l2_subdev *sd);</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">         void(*unregistered)(struct v4l2_subdev *sd);</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">//当设备节点被打开时调用，通常会给设备上电和设置视频捕捉FMT</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">         int(*open)(struct v4l2_subdev *sd, struct v4l2_subdev_fh *fh);</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">         int(*close)(struct v4l2_subdev *sd, struct v4l2_subdev_fh *fh);</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">};</rich_text><rich_text>
 v4l2_subdev_internal_ops是向V4L2框架提供的接口，只能被V4L2框架层调用。在注册或打开子设备时，进行一些辅助性操作。
  
</rich_text><rich_text weight="heavy"> Subdev的注册和注销</rich_text><rich_text>
 当我们把v4l2_subdev需要实现的成员都已经实现，就可以调用以下函数把子设备注册到V4L2核心层：
 </rich_text><rich_text background="#d9d9d9">int v4l2_device_register_subdev(struct v4l2_device*v4l2_dev, struct v4l2_subdev *sd)</rich_text><rich_text>
 当卸载子设备时，可以调用以下函数进行注销：
 </rich_text><rich_text background="#d9d9d9">void v4l2_device_unregister_subdev(struct v4l2_subdev*sd)</rich_text><rich_text>
 
</rich_text><rich_text weight="heavy">以i2c的子设备为例:</rich_text><rich_text>
1). 先加载子设备驱动
2). 后加载v4l2设备驱动，驱动中去查找i2c的子设备
3). 调用子设备的probe函数, probe函数中调用了
4). 根据i2c adapter和 i2c board info调用v4l2_i2c_new_subdev_board函数，返回struct v4l2_subdev *sd
   v4l2_i2c_new_subdev_board函数调用了
       client = i2c_new_device(adapter, info);
       同时调用了子设备驱动里的probe函数，而probe函数调用了
        void v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client,
		    const struct v4l2_subdev_ops *ops)
		   调用了
           void v4l2_subdev_init(struct v4l2_subdev *sd, const struct v4l2_subdev_ops *ops)    
           并把struct i2c_client *client和struct v4l2_subdev *sd关联起来：
        	v4l2_set_subdevdata(sd, client);
	        i2c_set_clientdata(client, sd);
       v4l2_device设备驱动生成新的client之后， 调用
        int v4l2_device_register_subdev(struct v4l2_device *v4l2_dev,
				struct v4l2_subdev *sd)
	   把v4l2_subdev子设备实例注册到v4l2_device设备系统中
        list_add_tail(&amp;sd-&gt;list, &amp;v4l2_dev-&gt;subdevs);
        
5). v4l2_device设备调用int v4l2_device_register_subdev_nodes(struct v4l2_device *v4l2_dev)       
   把为v4l2_subdev子设备生成struct video_device, 并调用
		video_set_drvdata(vdev, sd);
		strlcpy(vdev-&gt;name, sd-&gt;name, sizeof(vdev-&gt;name));
		vdev-&gt;v4l2_dev = v4l2_dev;
		vdev-&gt;fops = &amp;v4l2_subdev_fops;
		vdev-&gt;release = v4l2_device_release_subdev_node;
		vdev-&gt;ctrl_handler = sd-&gt;ctrl_handler;   
		err = __video_register_device(vdev, VFL_TYPE_SUBDEV, -1, 1,
					      sd-&gt;owner);
		控制关联起来			
6). 最后调用					
    ret = video_register_device(vdev, VFL_TYPE_GRABBER, -1);					       
    注册子设备的VFL_TYPE_GRABBER
    
注册v4l2_subdev子设备实例到v4l2_device设备系统当中，用这个函数：
v4l2_device_register_subdev(sd)
这个函数执行成功之后，subdev-&gt;dev将指向v4l2_device,如果v4l2_device的mdev是一个非空的值，那么subdev-&gt;entity也将会被自动注册为mdev。

要移除注册的子设备，调用：
v4l2_device_unregister_subdev(sd)

接下来介绍子设备提供的功能调用，如果要使用子设备提供的接口函数，有两种方法，第一种就是直接使用ops中的回调函数，但是不推荐这样做，一般是用第二种方法，调用函数：
v4l2_subdev_call(sd, o, f, arg...)
来获取子设备芯片的标识。其中，sd就是子设备实例，o是子设备下操作函数的大类，例如可以是core/video/audio/tuner,f是大类下面的功能回调函数，arg是传入的参数。另外，还可以通过v4l2设备实例调用全部子设备的功能回调函数，使用这个函数：

v4l2_device_call_all(v4l2, grp_id, o,f, arg...)
其中grp_id就是子设备的组标识。举个例子：
v4l2_subdev_call(sd, video,g_chip_cap, &amp;cap);
v4l2_device_call_all(v4l2, 0, core,g_chip_id, &amp;cap);
    前者是调用子设备sd的video类下的g_chip_cap功能回调函数；后者是v4l2设备调用所有子设备的core类下的g_chip_id功能回调函数。grp_id非0则指定调用相同组标识的该方法。子设备还需要通知它的v4l2父设备发生了什么事件，这个通过调用下面这个函数实现。

v4l2_subdev_notify(sd, notification,arg)
但是父设备必须要有能够处理这些事件的能力，就是实现v4l2_device的notify功能。

    除了通过v4l2_subdev_ops结构暴露给内核的API之外，v4l2子设备也同样可以被用户程序直接控制。设备节点名为v4l-subdevX创建在/dev目录下，这样就可以通过打开设备文件来直接访问子设备。如果一个子设备支持直接的用户空间访问，那么它就必须在被注册之前就设置V4L2_SUBDEV_FL_HAS_DEVNODE标志。注册子设备之后，v4l2_device驱动就会为所有持此标志的子设备创建设备节点。这个通过v4l2_device_register_subdev_nodes()来实现。这个设备节点可以处理一组标准的V4l2API子集，如下：
VIDIOC_QUERYCTRL
VIDIOC_QUERYMENU
VIDIOC_G_CTRL
VIDIOC_S_CTRL
VIDIOC_G_EXT_CTRLS
VIDIOC_S_EXT_CTRLS
VIDIOC_TRY_EXT_CTRLS

  
</rich_text><rich_text scale="h3" weight="heavy"> video_device</rich_text><rich_text>
    video_device结构体用于在/dev目录下生成设备节点文件，把操作设备的接口暴露给用户空间。
 </rich_text><rich_text background="#d9d9d9">struct video_device</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">{</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">         conststruct v4l2_file_operations *fops;  //V4L2设备操作集合</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9"> </rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">         /*sysfs */</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">         structdevice dev;             /* v4l device */</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">         structcdev *cdev;            //字符设备</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9"> </rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">         /* Seteither parent or v4l2_dev if your driver uses v4l2_device */</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">         structdevice *parent;              /* deviceparent */</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">         structv4l2_device *v4l2_dev;          /*v4l2_device parent */</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9"> </rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">         /*Control handler associated with this device node. May be NULL. */</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">         structv4l2_ctrl_handler *ctrl_handler;</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9"> </rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">         /* 指向video buffer队列*/</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">         structvb2_queue *queue;</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9"> </rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">         intvfl_type;      /* device type */</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">         intminor;  //次设备号</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9"> </rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">         /* V4L2file handles */</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">         spinlock_t                  fh_lock; /* Lock for allv4l2_fhs */</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">         structlist_head        fh_list; /* List ofstruct v4l2_fh */</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9"> </rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">         /*ioctl回调函数集，提供file_operations中的ioctl调用 */</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">         conststruct v4l2_ioctl_ops *ioctl_ops;</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">         ……</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">};</rich_text><rich_text>
 Video_device分配和释放，用于分配和释放video_device结构体：
 </rich_text><rich_text background="#d9d9d9">struct video_device *video_device_alloc(void)</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">void video_device_release(struct video_device *vdev)</rich_text><rich_text>
  
 video_device注册和注销，实现video_device结构体的相关成员后，就可以调用下面的接口进行注册：
 </rich_text><rich_text background="#d9d9d9">static inline int __must_check video_register_device(struct video_device *vdev,</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">                   inttype, int nr)</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">void video_unregister_device(struct video_device*vdev);</rich_text><rich_text>
 vdev：需要注册和注销的video_device；
 type：设备类型，包括VFL_TYPE_GRABBER、VFL_TYPE_VBI、VFL_TYPE_RADIO和VFL_TYPE_SUBDEV。
 nr：设备节点名编号，如/dev/video[</rich_text><rich_text foreground="#ff0000">nr</rich_text><rich_text>]。

在/dev中实际的设备节点使用video_deice结构创建。该结构既可以被动态创建，也可以被嵌入到更大的结构当中：
动态创建：
struct video_device *vdev =video_device_alloc();
vdec-&gt;release = video_device_release;
嵌入到更大的结构当中：
Struct video_device *vdev =&amp;my_vdev-&gt;vdev;
vdev-&gt;relase = my_vdev_release;
要完成这个结构的初始化，还需要设置以下的域：
.v4l2_dev 设置v4l2_device父设备
.name      设置唯一的描述名
.fops        设置v4l2_file_operations结构
.ioctl_ops 使用v4l2_ioctl_ops来简化ioctl的维护
.lock          如果想在驱动中进行全局锁定的话设置为NULL，否则初始化为一个 mutex_lock,这样就可以在unlocked_ioctl的操作之前和之后对操作内容进行保护
.prio          跟踪属性。用来实现VIDIOC_G/S_PRIORITY,如果设置为NULL，将使用v4l2_device中的v4l2_prio_state。
.parent     NULL . 如果硬件中有多个PCI设备共享v4l2_device核心，那么就要设置父设备。
.flags        可选，设置V4L2_FL_USE_FH_PRIO,如果想让framework来处理VIDIOC_G/S_PRIORITYioctls的话。
             如果要使用v4l2_ioctl_ops，那么就需要将.unlocked_ioctl设置为video_ioctl2,这样的话，就可以打通上层应用在使用ioctl操作/dev/videoX的时候和v4l2设备之间的信                 息交换通道。

  
</rich_text><rich_text scale="h3" weight="heavy"> v4l2_fh</rich_text><rich_text>
  v4l2_fh是用来保存子设备的特有操作方法，也就是下面要分析到的v4l2_ctrl_handler，内核提供一组v4l2_fh的操作方法，通常在打开设备节点时进行v4l2_fh注册。
 初始化v4l2_fh，添加v4l2_ctrl_handler到v4l2_fh：
 </rich_text><rich_text background="#d9d9d9">void v4l2_fh_init(struct v4l2_fh *fh, structvideo_device *vdev)</rich_text><rich_text>
 添加v4l2_fh到video_device，方便核心层调用到：
 </rich_text><rich_text background="#d9d9d9">void v4l2_fh_add(struct v4l2_fh *fh)</rich_text><rich_text>
  
</rich_text><rich_text scale="h3" weight="heavy"> v4l2_ctrl_handler</rich_text><rich_text>
 v4l2_ctrl_handler是用于保存子设备控制方法集的结构体，对于视频设备这些ctrls包括设置亮度、饱和度、对比度和清晰度等，用链表的方式来保存ctrls，可以通过v4l2_ctrl_new_std函数向链表添加ctrls。
 </rich_text><rich_text background="#d9d9d9">struct v4l2_ctrl *v4l2_ctrl_new_std(structv4l2_ctrl_handler *hdl,</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">                            conststruct v4l2_ctrl_ops *ops,</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">                            u32id, s32 min, s32 max, u32 step, s32 def)</rich_text><rich_text>
 hdl是初始化好的v4l2_ctrl_handler结构体；
 ops是v4l2_ctrl_ops结构体，包含ctrls的具体实现；
 id是通过IOCTL的arg参数传过来的指令，定义在v4l2-controls.h文件；
 min、max用来定义某操作对象的范围。如：
 </rich_text><rich_text background="#d9d9d9">v4l2_ctrl_new_std(hdl, ops, V4L2_CID_BRIGHTNESS,-208, 127, 1, 0);</rich_text><rich_text>
 </rich_text><rich_text foreground="#00000000ffff">用户空间可以通过ioctl的VIDIOC_S_CTRL指令调用到v4l2_ctrl_handler，id透过arg参数传递</rich_text><rich_text>。
  
</rich_text><rich_text scale="h2" weight="heavy"> 3、ioctl框架</rich_text><rich_text>
    你可能观察到用户空间对V4L2设备的操作基本都是ioctl来实现的，V4L2设备都有大量可操作的功能(配置寄存器)，所以V4L2的ioctl也是十分庞大的。它是一个怎样的框架，是怎么实现的呢？
    ioctl框架是由v4l2_ioctl.c文件实现，文件中定义结构体数组v4l2_ioctls，可以看做是ioctl指令和回调函数的关系表。用户空间调用系统调用ioctl，传递下来ioctl指令，然后通过查找此关系表找到对应回调函数。
    以下是截取数组的两项：
     </rich_text><rich_text background="#c0c0c0">IOCTL_INFO_FNC(VIDIOC_QUERYBUF, v4l_querybuf,v4l_print_buffer, INFO_FL_QUEUE | INFO_FL_CLEAR(v4l2_buffer,  length)),</rich_text><rich_text>
     </rich_text><rich_text background="#c0c0c0">IOCTL_INFO_STD(VIDIOC_G_FBUF, vidioc_g_fbuf,v4l_print_framebuffer,  0),</rich_text><rich_text>
    内核提供两个宏(</rich_text><rich_text background="#c0c0c0">IOCTL_INFO_FNC</rich_text><rich_text>和</rich_text><rich_text background="#c0c0c0">IOCTL_INFO_STD</rich_text><rich_text>)来初始化结构体，参数依次是ioctl指令、回调函数或者v4l2_ioctl_ops结构体成员、debug函数、flag。如果回调函数是v4l2_ioctl_ops结构体成员，则使用</rich_text><rich_text background="#c0c0c0">IOCTL_INFO_STD</rich_text><rich_text>；如果回调函数是v4l2_ioctl.c自己实现的，则使用</rich_text><rich_text background="#c0c0c0">IOCTL_INFO_FNC</rich_text><rich_text>。
  
 IOCTL调用的流程图如下：
 </rich_text><rich_text justification="left"></rich_text><rich_text>
 
    用户空间通过打开/dev/目录下的设备节点，获取到文件的file结构体，通过系统调用ioctl把cmd和arg传入到内核。通过一系列的调用后最终 会调用到__video_do_ioctl函数，然后通过cmd检索v4l2_ioctls[]，判断是INFO_FL_STD还是 INFO_FL_FUNC。如果是INFO_FL_STD会直接调用到视频设备驱动中video_device-&gt;v4l2_ioctl_ops函 数集。如果是INFO_FL_FUNC会先调用到v4l2自己实现的标准回调函数，然后根据arg再调用到 video_device-&gt;v4l2_ioctl_ops或v4l2_fh-&gt;v4l2_ctrl_handler函数集。
  
</rich_text><rich_text foreground="#ffff00000000"> 查看linux3.4源码中没有发现INFO_FL_STD等判断</rich_text><rich_text>
  
</rich_text><rich_text scale="h2" weight="heavy"> 4、IO访问</rich_text><rich_text>
 V4L2支持三种不同IO访问方式(内核中还支持了其它的访问方式，暂不讨论)：
 read和write，是基本帧IO访问方式，通过read读取每一帧数据，数据需要在内核和用户之间拷贝，这种方式访问速度可能会非常慢；
 内存映射缓冲区(V4L2_MEMORY_MMAP)，是在内核空间开辟缓冲区，应用通过mmap()系统调用映射到用户地址空间。这些缓冲区可以是大而连续DMA缓冲区、通过vmalloc()创建的虚拟缓冲区，或者直接在设备的IO内存中开辟的缓冲区(如果硬件支持)；
 用户空间缓冲区(V4L2_MEMORY_USERPTR)，是用户空间的应用中开辟缓冲区，用户与内核空间之间交换缓冲区指针。很明显，在这种情况下是不需要mmap()调用的，但驱动为有效的支持用户空间缓冲区，其工作将也会更困难。
 Read和write方式属于帧IO访问方式，每一帧都要通过IO操作，需要用户和内核之间数据拷贝，而后两种是流IO访问方式，不需要内存拷贝，访问速度比较快。内存映射缓冲区访问方式是比较常用的方式。
 内存映射缓存区方式
          硬件层的数据流传输
          Camerasensor捕捉到图像数据通过并口或MIPI传输到CAMIF(camera  interface)，CAMIF可以对图像数据进行调整(翻转、裁剪和格式转换等)。然后DMA控制器设置DMA通道请求AHB将图像数据传到分配好的 DMA缓冲区。
 </rich_text><rich_text justification="left"></rich_text><rich_text>
 
          待图像数据传输到DMA缓冲区之后，mmap操作把缓冲区映射到用户空间，应用就可以直接访问缓冲区的数据。
  
</rich_text><rich_text scale="h3" weight="heavy"> vb2_queue</rich_text><rich_text>
 为了使设备支持流IO这种方式，驱动需要实现struct vb2_queue，来看下这个结构体：
 </rich_text><rich_text background="#d9d9d9">struct vb2_queue {</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">         enumv4l2_buf_type                  type;  //buffer类型</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">         unsignedint                        io_modes;  //访问IO的方式:mmap、userptr  etc</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9"> </rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">         conststruct vb2_ops                 *ops;   //buffer队列操作函数集合</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">         conststruct vb2_mem_ops     *mem_ops;  //buffer memory操作集合</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9"> </rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">         structvb2_buffer              *bufs[VIDEO_MAX_FRAME];  //代表每个buffer</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">         unsignedint                        num_buffers;    //分配的buffer个数</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">……</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">};</rich_text><rich_text>
 Vb2_queue代表一个videobuffer队列，vb2_buffer是这个队列中的成员，vb2_mem_ops是缓冲内存的操作函数集，vb2_ops用来管理队列。
  
</rich_text><rich_text scale="h3" weight="heavy"> vb2_mem_ops</rich_text><rich_text>
          vb2_mem_ops包含了内存映射缓冲区、用户空间缓冲区的内存操作方法：
 </rich_text><rich_text background="#d9d9d9">struct vb2_mem_ops {</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">         void           *(*alloc)(void *alloc_ctx, unsignedlong size);  //分配视频缓存</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">         void           (*put)(void *buf_priv);            //释放视频缓存</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">//获取用户空间视频缓冲区指针</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">         void           *(*get_userptr)(void *alloc_ctx,unsigned long vaddr, </rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">                                               unsignedlong size, int write);</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">         void           (*put_userptr)(void *buf_priv);       //释放用户空间视频缓冲区指针</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9"> </rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">//用于缓存同步</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">         void           (*prepare)(void *buf_priv);</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">         void           (*finish)(void *buf_priv);</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9"> </rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">         void           *(*vaddr)(void *buf_priv);</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">         void           *(*cookie)(void *buf_priv);</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">         unsignedint     (*num_users)(void *buf_priv);         //返回当期在用户空间的buffer数</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9"> </rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">         int              (*mmap)(void *buf_priv, structvm_area_struct *vma);  //把缓冲区映射到用户空间</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">};</rich_text><rich_text>
           这是一个相当庞大的结构体，这么多的结构体需要实现还不得累死，幸运的是内核都已经帮我们实现了。提供了三种类型的视频缓存区操作方法：连续的DMA缓冲 区、集散的DMA缓冲区以及vmalloc创建的缓冲区，分别由videobuf2-dma-contig.c、videobuf2-dma-sg.c和 videobuf-vmalloc.c文件实现，可以根据实际情况来使用。
  
</rich_text><rich_text scale="h3" weight="heavy"> vb2_ops</rich_text><rich_text>
          vb2_ops是用来管理buffer队列的函数集合，包括队列和缓冲区初始化
 </rich_text><rich_text background="#d9d9d9">struct vb2_ops {</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">         //队列初始化</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">         int(*queue_setup)(struct vb2_queue *q, const struct v4l2_format *fmt,</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">                               unsigned int *num_buffers, unsigned int*num_planes,</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">                               unsigned int sizes[], void *alloc_ctxs[]);</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">         //释放和获取设备操作锁</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">         void(*wait_prepare)(struct vb2_queue *q);</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">         void(*wait_finish)(struct vb2_queue *q);</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">         //对buffer的操作</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">         int(*buf_init)(struct vb2_buffer *vb);</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">         int(*buf_prepare)(struct vb2_buffer *vb);</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">         int(*buf_finish)(struct vb2_buffer *vb);</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">         void(*buf_cleanup)(struct vb2_buffer *vb);</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">//开始视频流</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">         int(*start_streaming)(struct vb2_queue *q, unsigned int count);</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">//停止视频流</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">         int(*stop_streaming)(struct vb2_queue *q);</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">//把VB传递给驱动</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">         void(*buf_queue)(struct vb2_buffer *vb);</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">};</rich_text><rich_text>
  
 vb2_buffer是缓存队列的基本单位，内嵌在其中v4l2_buffer是核心成员。当开始流IO时，帧以v4l2_buffer的格式在应用和驱动之间传输。一个缓冲区可以有三种状态：
 在驱动的传入队列中，驱动程序将会对此队列中的缓冲区进行处理，用户空间通过IOCTL:VIDIOC_QBUF把缓冲区放入到队列。对于一个视频捕获设备，传入队列中的缓冲区是空的，驱动会往其中填充数据；
 在驱动的传出队列中，这些缓冲区已由驱动处理过，对于一个视频捕获设备，缓存区已经填充了视频数据，正等用户空间来认领；
 用户空间状态的队列，已经通过IOCTL:VIDIOC_DQBUF传出到用户空间的缓冲区，此时缓冲区由用户空间拥有，驱动无法访问。
 这三种状态的切换如下图所示：
 </rich_text><rich_text justification="left"></rich_text><rich_text>
 v4l2_buffer结构如下：
 </rich_text><rich_text background="#d9d9d9">struct v4l2_buffer {</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">         __u32                          index;  //buffer 序号</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">         __u32                          type;   //buffer类型</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">         __u32                          bytesused;  缓冲区已使用byte数</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">         __u32                          flags;</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">         __u32                          field;</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">         structtimeval           timestamp;  //时间戳，代表帧捕获的时间</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">         structv4l2_timecode       timecode;</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">         __u32                          sequence;</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9"> </rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">         /*memory location */</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">         __u32                          memory;  //表示缓冲区是内存映射缓冲区还是用户空间缓冲区</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">         union {</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">                   __u32           offset;  //内核缓冲区的位置</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">                   unsignedlong   userptr;   //缓冲区的用户空间地址</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">                   structv4l2_plane *planes;</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">                   __s32                 fd;</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">         } m;</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">         __u32                          length;   //缓冲区大小，单位byte</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">};</rich_text><rich_text>
 当用户空间拿到v4l2_buffer，可以获取到缓冲区的相关信息。Byteused是图像数据所占的字节数，如果是V4L2_MEMORY_MMAP 方式，m.offset是内核空间图像数据存放的开始地址，会传递给mmap函数作为一个偏移，通过mmap映射返回一个缓冲区指针 p，p+byteused是图像数据在进程的虚拟地址空间所占区域；如果是用户指针缓冲区的方式，可以获取的图像数据开始地址的指针 m.userptr，userptr是一个用户空间的指针，userptr+byteused便是所占的虚拟地址空间，应用可以直接访问。
  
</rich_text><rich_text scale="h2" weight="heavy"> 5、用户空间访问设备</rich_text><rich_text>
 下面通过内核映射缓冲区方式访问视频设备(capturedevice)的流程。
</rich_text><rich_text weight="heavy"> 1&gt;    打开设备文件</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">fd = open(dev_name, O_RDWR /* required */ | O_NONBLOCK, 0);</rich_text><rich_text>
 dev_name[/dev/videoX]
 
</rich_text><rich_text weight="heavy">内核中v4l2_open函数</rich_text><rich_text>
        vdev = video_devdata(filp);
        ...
        if (vdev-&gt;fops-&gt;open) {
            ...
            ret = vdev-&gt;fops-&gt;open(filp); 
            ...
        }
        
struct video_device *video_devdata(struct file *file)
{
	return video_device[iminor(file-&gt;f_path.dentry-&gt;d_inode)];
}

int __video_register_device(struct video_device *vdev, int type, int nr,
		int warn_if_nr_in_use, struct module *owner)
{
    ...
	/* Part 1: check device type */
	switch (type) {
	case VFL_TYPE_GRABBER:
		name_base = &quot;video&quot;;
		break;
	case VFL_TYPE_VBI:
		name_base = &quot;vbi&quot;;
		break;
	case VFL_TYPE_RADIO:
		name_base = &quot;radio&quot;;
		break;
	case VFL_TYPE_SUBDEV:
		name_base = &quot;v4l-subdev&quot;;
		break;
	default:
		printk(KERN_ERR &quot;%s called with unknown type: %d\n&quot;,
		       __func__, type);
		return -EINVAL;
	}
	...
	vdev-&gt;minor = i + minor_offset; </rich_text><rich_text foreground="#ffff00000000">//vdev-&gt;minor根据video_device[i]空闲来决定的</rich_text><rich_text>
	vdev-&gt;num = nr;                         </rich_text><rich_text foreground="#ffff00000000">//vdev-&gt;num和vdev-&gt;minor没有关联, vdev-&gt;num在只在调用dev_set_name时用到</rich_text><rich_text>
	devnode_set(vdev);
	...	    
    vdev-&gt;cdev = cdev_alloc();
    ...
    ret = cdev_add(vdev-&gt;cdev, MKDEV(VIDEO_MAJOR, vdev-&gt;minor), 1);
    ...
	dev_set_name(&amp;vdev-&gt;dev, &quot;%s%d&quot;, name_base, vdev-&gt;num);
	ret = device_register(&amp;vdev-&gt;dev);    
    ...
    video_device[vdev-&gt;minor] = vdev;
    ...
}		

</rich_text><rich_text weight="heavy"> 2&gt;    查询设备支持的能力</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">Struct v4l2_capability  cap;</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">ioctl(fd, VIDIOC_QUERYCAP, &amp;cap)</rich_text><rich_text>
</rich_text><rich_text weight="heavy"> 3&gt;    设置视频捕获格式</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">fmt.type= V4L2_BUF_TYPE_VIDEO_CAPTURE;</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">fmt.fmt.pix.width       = 640;</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">fmt.fmt.pix.height      = 480;</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">fmt.fmt.pix.pixelformat= V4L2_PIX_FMT_YUYV;  //像素格式</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">fmt.fmt.pix.field       = V4L2_FIELD_INTERLACED;</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">ioctl(fd,VIDIOC_S_FMT, &amp; fmt)</rich_text><rich_text>
</rich_text><rich_text weight="heavy"> 4&gt;    向驱动申请缓冲区</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">Struct  v4l2_requestbuffers req;</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">req.count= 4;  //缓冲个数</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">req.type= V4L2_BUF_TYPE_VIDEO_CAPTURE;</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">req.memory= V4L2_MEMORY_MMAP;</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">if(-1 == xioctl(fd, VIDIOC_REQBUFS, &amp;req))</rich_text><rich_text>
</rich_text><rich_text weight="heavy"> 5&gt;    获取每个缓冲区的信息，映射到用户空间</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">structbuffer {</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">        void  *start;</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">        size_t length;</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">} *buffers;</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">buffers = calloc(req.count, sizeof(*buffers));</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9"> </rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">for (n_buffers= 0; n_buffers &lt; req.count; ++n_buffers) {</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">struct  v4l2_buffer buf;</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9"> </rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">buf.type        = V4L2_BUF_TYPE_VIDEO_CAPTURE;</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">buf.memory      = V4L2_MEMORY_MMAP;</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">buf.index       = n_buffers;</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">if (-1 ==xioctl(fd, VIDIOC_QUERYBUF, &amp; buf))</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">                       errno_exit(&quot;VIDIOC_QUERYBUF&quot;);</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">buffers[n_buffers].length= buf.length;</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">buffers[n_buffers].start=</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">        mmap(NULL /* start anywhere */,</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">        buf.length,</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">        PROT_READ | PROT_WRITE /* required */,</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">        MAP_SHARED /* recommended */,</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">        fd, buf.m.offset);</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9"> }</rich_text><rich_text>
</rich_text><rich_text weight="heavy"> 6&gt;    把缓冲区放入到传入队列上，打开流IO，开始视频采集</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">for (i =0; i &lt; n_buffers; ++i) {</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">    struct v4l2_buffer buf;</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">    buf.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">    buf.memory = V4L2_MEMORY_MMAP;</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">    buf.index = i;</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9"> </rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">    if (-1 == xioctl(fd, VIDIOC_QBUF, &amp;buf))</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">          errno_exit(&quot;VIDIOC_QBUF&quot;);</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9"> }</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9"> type = V4L2_BUF_TYPE_VIDEO_CAPTURE;</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9"> if (-1 == xioctl(fd, VIDIOC_STREAMON, &amp; type))</rich_text><rich_text>
</rich_text><rich_text weight="heavy"> 7&gt;  调用select监测文件描述符，缓冲区的数据是否填充好，然后对视频数据</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">        for (;;) {</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">                        fd_set fds;</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">                        struct timeval tv;</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">                        int r;</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9"> </rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">                        FD_ZERO(&amp;amp;fds);</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">                        FD_SET(fd,&amp;amp;fds);</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9"> </rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">                        /* Timeout. */</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">                        tv.tv_sec = 2;</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">                        tv.tv_usec = 0;</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">                                                        //监测文件描述是否变化</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">                        r = select(fd + 1,&amp; fds, NULL, NULL, &amp; tv);</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9"> </rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">                        if (-1 == r) {</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">                                if (EINTR ==errno)</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">                                       continue;</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">                               errno_exit(&quot;select&quot;);</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">                        }</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9"> </rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">                        if (0 == r) {</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">                                fprintf(stderr,&quot;select timeout\n&quot;);</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">                               exit(EXIT_FAILURE);</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">                        }</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">                                                        //对视频数据进行处理</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">                        if (read_frame())</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">                                break;</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">                        /* EAGAIN - continueselect loop. */</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">               }</rich_text><rich_text>
  
</rich_text><rich_text weight="heavy"> 8&gt;    取出已经填充好的缓冲，获取到视频数据的大小，然后对数据进行处理。这里取出的缓冲只包含缓冲区的信息，并没有进行视频数据拷贝。</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">buf.type= V4L2_BUF_TYPE_VIDEO_CAPTURE;</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">buf.memory= V4L2_MEMORY_MMAP;</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">if (-1 ==ioctl(fd, VIDIOC_DQBUF, &amp; buf))    //取出缓冲</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">           errno_exit(&quot;VIDIOC_QBUF&quot;);</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">process_image(buffers[buf.index].start,buf.bytesused);   //视频数据处理</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">if (-1 ==xioctl(fd, VIDIOC_QBUF, &amp; buf))  //然后又放入到传入队列</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">     errno_exit(&quot;VIDIOC_QBUF&quot;);</rich_text><rich_text>
</rich_text><rich_text weight="heavy"> 9&gt;    停止视频采集</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">type =V4L2_BUF_TYPE_VIDEO_CAPTURE;</rich_text><rich_text>
 </rich_text><rich_text background="#d9d9d9">ioctl(fd,VIDIOC_STREAMOff, &amp; type);</rich_text><rich_text>
 10&gt; 关闭设备
 </rich_text><rich_text background="#d9d9d9">Close(fd);</rich_text><rich_text>
  
 暂时分析到这里，后续在更新！
 Reference:
 </rich_text><rich_text link="webs http://lxr.linux.no/linux+v3.8.8/Documentation/video4linux/v4l2-framework.txt">http://lxr.linux.no/linux+v3.8.8/Documentation/video4linux/v4l2-framework.txt</rich_text><rich_text>
 </rich_text><rich_text link="webs http://lxr.linux.no/linux+v3.9/Documentation/DocBook/media/v4l/capture.c.xml">http://lxr.linux.no/linux+v3.9/Documentation/DocBook/media/v4l/capture.c.xml</rich_text><rich_text>
 </rich_text><rich_text link="webs http://linuxtv.org/downloads/v4l-dvb-apis/vidioc-reqbufs.html">http://linuxtv.org/downloads/v4l-dvb-apis/vidioc-reqbufs.html</rich_text><rich_text>
 </rich_text><rich_text link="webs http://lwn.net/Articles/203924/">http://lwn.net/Articles/203924/</rich_text><rich_text>
 </rich_text><rich_text link="webs http://lxr.linux.no/linux+v3.9.1/drivers/media/platform/vivi.c">http://lxr.linux.no/linux+v3.9.1/drivers/media/platform/vivi.c</rich_text><rich_text>
</rich_text><encoded_png char_offset="359"></encoded_png><encoded_png char_offset="1129"></encoded_png><encoded_png char_offset="10589"></encoded_png><encoded_png char_offset="11581"></encoded_png><encoded_png char_offset="14604"></encoded_png></node><node name="深入理解linux内核v4l2框架之videobuf " prog_lang="custom-colors" readonly="False" tags="" unique_id="35"><rich_text scale="h2" weight="heavy">Videobuf</rich_text><rich_text scale="h2"> </rich_text><rich_text>
下面来介绍以下videobuffer相关的一些东西。
V4L2核心api提供了一套标准的方法来处理视频缓冲，这些方法允许驱动实现read(),mmap(), overlay()等操作。同样也有方法支持DMA的scatter/gather操作，并且支持vmallocbuffer(这个大多用在USB驱动上)。
videobuf层功能是一种在v4l2驱动和用户空间当中的依附层，这话看起来有点绕，说白了就是提供一种功能框架，用来分配和管理视频缓冲区，它相对独立，却又被v4l2驱动使用。它有一组功能函数集用来实现许多标准的POSIX系统调用，包括read(),poll()和mmap()等等，还有一组功能函数集用来实现流式(streaming)IO的v4l2_ioctl调用，包括缓冲区的分配，入队和出队以及数据流控制等操作。使用videobuf需要驱动程序作者遵从一些强制的设计规则，但带来的好处是代码量的减少和v4l2框架API的一致。

 
</rich_text><rich_text scale="h2" weight="heavy">缓冲类型</rich_text><rich_text>
并不是所有的视频设备都使用相同的缓冲类型。实际上，有三种通用的类型：
–被分散在物理和内核虚拟地址空间的缓冲，几乎所有的用户空间缓冲都是这种类型，

 
如果可能的话分配内核空间的缓冲也很有意义，但是不幸的是，这个通常需要那些支持离散聚合DMA操作的硬件设备。
–物理上离散的但是虚拟地址是连续的，换句话说，就是用vmalloc分配的内核缓冲。这些缓冲很难用于DMA操作。
– 物理上连续的缓冲。
videobuf可以很好地处理这三种类型的缓冲，但是在此之前，驱动程序作者必须选择一种类型，并且以此类型为基础设计驱动。

 
</rich_text><rich_text scale="h2" weight="heavy">数据结构，回调函数和初始化</rich_text><rich_text>
根据选择的类型，包含不同的头文件，这些头文件在include/media/下面
&lt;media/videobuf-dma-sg.h&gt;
&lt;media/videobuf-vmalloc.h&gt;
&lt;media/videobuf-dma-contig.h&gt;
v4l2驱动需要包含一个videobuf_queue的实例用来管理缓冲队列，同时还要一个链表来维护这个队列，另外还要一个中断安全的spin_lock来保护队列的操作。
下一步就是要填充一个回调函数集来处理实际的缓冲区队列，这个函数集用videobuf_queue_ops来描述：
struct videobuf_queue_ops {
    int *(buf_setup)(struct videobuf_queue*q, uint *count, uint *size);
    int *(buf_prepare)(structvideobuf_queue *q, struct videobuf_buffer *vb,
        enum v4l2_field field);
    void *(buf_queue)(structvideobuf_queue*q,struct videobuf_buffer *vb);
    void *(buf_release)(...);
} 
buf_setup在IO处理请求之前被调用。目的是告诉videobuf关于IO的信息。 count参数提供一个缓冲区个数的参考，驱动必须检查它的合理性，一个经验是大于等于2，小于等于32个。Size参数指定了每一帧数据的大小。
buf_prepare每一个缓冲(videobuf_buffer结构描述的)将被传递给该回调函数，用来配置缓冲的height,width和fileds。如果field参数被设置为  VIDEOBUF_NEEDS_INIT，那么驱动将把vb传递给videobuf_iolock()这个函数。除此之外，该回调函数通常也将为vb分配内存，最后把vb的状态置为VIDEOBUF_PREPARED。
buf_queue当一个vb需要被放入IO请求队列时，调用该回调。它将把这个buffer放到可用的buffer链表当中去，然后把状态置为VIDEOBUF_QUEUED。
buf_release当一个buffer不再使用的时候，调用该回调函数。驱动必须保证 buffer上没有活跃的IO请求，之后就可以将这个buffer传递给合适的  free函数，根据申请的buffer类型调用对应的释放函数：
scatter/gather类型的调用
    videobuf_dma_unmap(structvideobuf_queue, videobuf_dmabuf)
    videobuf_dma_free(videobuf_dmabuf)
vmalloc类型的调用
    videobuf_vmalloc_free(videobuf_buffer)
contiguous类型的调用
    videobuf_dma_contig_free(videobuf_queue,videobuf_buffer)
有一种方法可以保证buffer上没有IO请求，调用函数
    videobuf_waiton(videobuf_buffer,non_blocking, intr)
 
</rich_text><rich_text scale="h2" weight="heavy">文件操作(v4l2_file_operations)</rich_text><rich_text>
到了这儿，很多工作也就做完了，剩下的事情就是将对videobuf的调用传递给具体的驱动实现了。首先就是打开操作，这个操作要先对videobuf_queue进行初始化，初始化取决于申请的buffer是什么类型，有如下三种初始化函数可供调用：
void videobuf_queue_sg_init(structvideobuf_queue *q,
struct videobuf_queue_ops *ops,
struct device *dev,
spinlock_t *irqlock,
enum v4l2_buf_type type,
enum v4l2_field_ field,
unsigned int msize,
void *priv，
struct mutex *ext_lock)

void videobuf_queue_vmalloc_init(structvideobuf_queue *q,
struct videobuf_queue_ops *ops,
struct device *dev,
spinlock_t *irqlock,
enum v4l2_buf_type type,
enum v4l2_field field,
unsigned int mszie,
void *priv，
struct mutex *ext_lock);

voidvideobuf_queue_dma_contig_init(struct videobuf_queue *q,
struct videobuf_queue_ops *ops,
struct device *dev,
spinlock_t *irqlock,
enum v4l2_buf_type type,
enum v4l2_field field,
unsigned int mszie,
void *priv，
struct mutex *ext_lock);
以上三种初始化函数，有相同的参数，这些参数的从他们的名称就可以看出来锁代表的意义是什么。
这里着重说下v4l2_buf_type类型，
V4L2_BUF_TYPE_VIDEO_CAPTURE  指定buf的类型为capture，用于视频捕获设备
V4L2_BUF_TYPE_VIDEO_OUTPUT  指定buf的类型output，用于视频输出设备
V4L2_BUF_TYPE_VIDEO_OVERLAY  指定buf的类型为overlay，用于overlay设备
V4L2_BUF_TYPE_VBI_CAPTURE  用于vbi捕获设备
V4L2_BUF_TYPE_VBI_OUTPUT  用于vbi输出设备
V4L2_BUF_TYPE_SLICED_VBI_CAPTURE  用于切片vbi捕获设备
V4L2_BUF_TYPE_SLICED_VBI_OUTPUT  用于切片vbi输出设备
V4L2_BUF_TYPE_VIDEO_OUTPUT_OVERLAY  用于视频输出overlay设备
V4L2_BUF_TYPE_VIDEO_CAPTURE_MPLANE  用于多平面存储格式的视频捕获设备
V4L2_BUF_TYPE_VIDEO_OUTPUT_MPLANE用于多平面存储格式的视频输出设备
v4l2_field指定video的field，也就是说interleaved或者progressive的，一般都是指定为V4L2_FIELD_NONE,用于逐行扫描的设备。
 
V4L2捕获设备驱动可以支持两种API：read()系统调用和更为复杂的流机制。一般的做法是两种都支持以确保所有的应用都可以使用该设备。videobuf框架使得这种驱动的编写变得更为简单。比如说要实现read()系统调用，那么驱动程序只需要调用
ssize_t videobuf_read_one(structvideobuf_queue *q, 
char __user *data, size_t count,loff_t *ppos, int nonblocking)
ssize_t  videobuf_read_streaming(structvideobuf_queue *q, char __user *data,  size_t count, loff_t *ppos,int vbihack, int nonblocking)
这两个函数都是把帧数据读入到data当中，然后返回实际上读取的字节数。不同的是前者只读取一帧数据，而后者可以选择读取多帧。一个典型的应用read()系统调用必须开启捕获设备，然后返回之前停止该设备。
 
poll()系统调用通常由以下函数来实现：
unsigned intvideobuf_poll_stream(struct file *file, struct videobuf_queue *q,
poll_table *wait)
注意，实际最终使用的q是可用的第一个buffer。

当内核空间缓冲的流IO请求完成后，驱动还必须支持mmap系统调用以使能用户空间可以访问data数据。在v4l2驱动中，通常很复杂的mmap的实现被简化了，只需要调用下面这个函数就可以了：
int videobuf_mmap_mapper(structvideobuf_queue *q, 
struct vma_area_struct * vma)
剩下的事情就交给videobuf核心层来完成好了。
 
release函数需要调用两个单独的函数来完成：
void videobuf_stop(structvideobuf_queue *q);
int videobuf_mmap_free(structvideobuf_queue *q)
前者终止所有buffer的IO操作。后者保证所有的buffer被unmap掉，如果已经被unmap掉的话，这个buffer就会被传递给buf_release回调函数。如果buffer还没有被unmap，那么后者将返回一个错误代码。

 
Ioctl操作：
v4l2api涵盖了很长一组驱动回调函数来响应用户的ioctl操作，有很大一部分和流IO操作相关的都是直接调用到videobuf里面来。相关的函数如下：
int videobuf_reqbufs(structvideobuf_queue *q,
structv4l2_requestbuffers *req);
int videobuf_querybuf(structvideobuf_queue *q, struct v4l2_buffer *vb)
int videobuf_qbuf(strurctvideobuf_queue *q, struct v4l2_buffer *vb)
int videobuf_dqbuf(structvideobuf_queue *q, struct v4l2_buffer *vb)
int videobuf_streamon(structvideobuf_queue *q);
int videobuf_streamoff(structvideobuf_queue *q);

</rich_text><rich_text scale="h2" weight="heavy">Buffer的分配</rich_text><rich_text>
    讲到这儿，我们讨论了很多关于buffer的话题，但是却没有提到他们是怎么分配的。Scatter/gather例子比较复杂，驱动程序可以完全让videobuf层去完成buffer的分配，在这种情况下，buffer将被分配为匿名用户空间页并且实际上将非常分散。如果应用程序使用用户空间的buffer的话，驱动也就不需要分配了，videobuf层将小心的调用get_user_pages()并且填充离散列表数组(scatterlistarray)。
    如果驱动程序要自己做内存分配，那么将在vidioc_reqbufs函数中进行，在调用了videobuf_reqbufs()之后，首先第一步就是要调用到
    struct videobuf_dmabuf*videobuf_to_dma(struct videobuf_buffer *buf)
    返回的videobuf_dmabuf包含了一对相关的域
    struct scatterlist *sglist;
    int sglen;
    驱动必须分配合适大小的scatterlist数组，并且将分配的内存片和指针对应起来，sglen指定了scatterlist数组的大小。
 
    驱动当中如果使用了vmalloc()来分配内存的话，就不用关心buffer的分配了，videobuf层将处理具体的细节，一些驱动程序使用了小技巧，就是在系统启动的时候就分配好了dma内存，以避免动态申请有的时候会申请不到的问题，但是对于此类的设计，videobuf层目前还不能很好的胜任。在3.0以上的内核当中，出现了一种新的框架videobuf2，已经解决了这个问题，我们会在后面详细介绍这个框架。
 
</rich_text><rich_text scale="h2" weight="heavy">Filling缓冲区</rich_text><rich_text>
videobuf层的最后一部分就是关于将帧数据传递到buffer中的实现。这一部分没有直接的回调函数，通常都是在设备的中断响应中来完成。对于所有类型的驱动，流程大概是这个样子的：
– 获取下一个buffer，并且确保有人正在等待这个buffer
– 得到一个内存指针，然后将视频数据放到那个地方
-- 标记buffer完成，并且唤醒等待的进程

 
第一步，buffer可以通过驱动管理的一个链表获得，这个链表由buf_queue回调函数填充，所以驱动最先要是链表初始化为空,并且如果链表当中的buffer没有一个进程在其上等待的话，是不能被移除或者填充的。
另外buffer在被map到dma之前，要把它的状态设置为VIDEOBUF_ACTIVE,这将保证在设备传输数据的时候videobuf层不去尝试任何操作。

 
第二步，得到一个内存指针，对于scatter/gather类型的内存来说，可以从scatterlist当中找到内存指针；对于vmalloc类型的来说调用
void * videobuf_to_vmalloc(structvideobuf_buffer *vb)
对于连续物理内存类型来说调用
dma_addr_tvideobuf_to_dma_contig(struct videobuf_buffer *buf)
第三步，就是设置videobuf_buffer中的大小，并且把buffer的状态设置为VIDEOBUF_DONE,然后在完成队列上调用wake_up().到此，buffer就真正的属于videobuf层了，驱动程序不用再去关心它如何被调度。

 
最后，一个很好的关于v4l2的例子就是drviers/media/video/vivi.c,它使用了vmalloc类型的videobuf,可以通过阅读这份例子来学习v4l2驱动的写法。
                                 
</rich_text></node></node><node name="匿名共享内存ashmem" prog_lang="custom-colors" readonly="False" tags="" unique_id="30"><rich_text></rich_text><node name="匿名共享内存ashmem" prog_lang="custom-colors" readonly="False" tags="" unique_id="31"><rich_text>    在上一文章</rich_text><rich_text link="webs http://blog.csdn.net/luoshengyang/article/details/6651971">Android系统匿名共享内存Ashmem（Anonymous Shared Memory）简要介绍和学习计划</rich_text><rich_text>中， 我们简要介绍了Android系统的匿名共享内存机制，其中，简要提到了它具有辅助内存管理系统来有效地管理内存的特点，但是没有进一步去了解它是如何实 现的。在本文中，我们将通过分析Android系统的匿名共享内存Ashmem驱动程序的源代码，来深入了解它是如何辅助内存管理系
    Android系统的匿名共享内存Ashmem机制并没有自立山头，从头搞一套自己的共享内存机制，而是建立在Linux内核实现的共享内存的基础上 的。与此同时，它又向Linux内存管理系统的内存回收算法注册接口，告诉Linux内存管理系统它的某些内存块不再使用了，可以被回收了，不过，这些不 再使用的内存需要由它的使用者来告诉Ashmem驱动程序。通过这种用户-Ashmem驱动程序-内存管理系统三者的紧密合作，实现有效的内存管理机制， 适合移动设备小内存的特点。
    Android系统的匿名共享内存Ashmem驱动程序利用了Linux的共享内存子系统导出的接口来实现自己的功能，因此，它的实现非常小巧，总共代 码不到700行。虽然代码很少，但是这里不打算机械式地一行一行地阅读和分析Ashmem驱动程序的源代码，而是通过使用情景来分析，这样可以帮助我们清 晰地理解它的实现原理。我们这里所说的使用情景，将从Android系统的应用程序框架层提供的匿名共享内存接口开始，经过系统运行时库层，最终到达驱动 程序层，通过这样一个完整的过程来理解Android系统的匿名共享内存Ashmem机制。这里，我们将从上一篇文章</rich_text><rich_text link="webs http://blog.csdn.net/luoshengyang/article/details/6651971">Android系统匿名共享内存Ashmem（Anonymous Shared Memory）简要介绍和学习计划</rich_text><rich_text>介绍的Android应用程序框架层提供MemoryFile接口开始，分别介绍Android系统匿名共享内存的创建（open）、映射（mmap）、读写（read/write）以及锁定和解锁（pin/unpin）四个使用情景。
    在进入到这个四个使用情景前，我们先来看一下Ashmem驱动程序模块的初始化函数，看看它给用户空间暴露了什么接口，即它创建了什么样的设备文件，以 及提供了什么函数来操作这个设备文件。Ashmem驱动程序实现在kernel/common/mm/ashmem.c文件中，它的模块初始化函数定义为 ashmem_init：
1. static struct file_operations ashmem_fops = {  
2.     .owner = THIS_MODULE,  
3.     .open = ashmem_open,  
4.     .release = ashmem_release,  
5.     .mmap = ashmem_mmap,  
6.     .unlocked_ioctl = ashmem_ioctl,  
7.     .compat_ioctl = ashmem_ioctl,  
8. };  
9.   
10. static struct miscdevice ashmem_misc = {  
11.     .minor = MISC_DYNAMIC_MINOR,  
12.     .name = &quot;ashmem&quot;,  
13.     .fops = &amp;ashmem_fops,  
14. };  
15.   
16. static int __init ashmem_init(void)  
17. {  
18.     int ret;  
19.   
20.     ......  
21.   
22.     ret = misc_register(&amp;ashmem_misc);  
23.     if (unlikely(ret)) {  
24.         printk(KERN_ERR &quot;ashmem: failed to register misc device!\n&quot;);  
25.         return ret;  
26.     }  
27.   
28.     ......  
29.   
30.     return 0;  
31. }  
    这里，我们可以看到，Ahshmem驱动程序在加载时，会创建一个/dev/ashmem的设备文件，这是一个misc类型的设备。注册misc设备是通过misc_register函数进行的，关于这个函数的详细实现，可以参考前面</rich_text><rich_text link="webs http://blog.csdn.net/luoshengyang/article/details/6595744">Android日志系统驱动程序Logger源代码分析</rich_text><rich_text>一文，调用这个函数成功后，就会在/dev目录下生成一个ashmem设备文件了。同时，我们还可以看到，这个设备文件提供了open、mmap、release和ioctl四种操作。为什么没有read和write操作呢？这是因为读写共享内存的方法是通过内存映射地址来进行的，即通过mmap系统调用把这个设备文件映射到进程地址空间中，然后就直接对内存进行读写了，不需要通过read 和write文件操作，后面我们将会具体分析是如何实现的。
    有了这个基础之后，下面我们就分四个部分来分别介绍匿名共享内存的创建（open）、映射（mmap）、读写（read/write）以及锁定和解锁（pin/unpin）使用情景。

</rich_text><rich_text scale="h2" weight="heavy">一. 匿名共享内存的创建操作</rich_text><rich_text>
    在Android应用程序框架层提供MemoryFile类的构造函数中，进行了匿名共享内存的创建操作，我们先来看一下这个构造函数的实现，它位于 frameworks/base/core/java/android/os/MemoryFile.java文件中：
1. public class MemoryFile  
2. {  
3.     ......  
4.   
5.     private static native FileDescriptor native_open(String name, int length) throws IOException;  
6.       
7.     ......  
8.   
9.     private FileDescriptor mFD;        // ashmem file descriptor  
10.     ......  
11.     private int mLength;    // total length of our ashmem region  
12.       
13.     ......  
14.   
15.     /** 
16.     * Allocates a new ashmem region. The region is initially not purgable. 
17.     * 
18.     * @param name optional name for the file (can be null). 
19.     * @param length of the memory file in bytes. 
20.     * @throws IOException if the memory file could not be created. 
21.     */  
22.     public MemoryFile(String name, int length) throws IOException {  
23.         mLength = length;  
24.         mFD = native_open(name, length);  
25.         ......  
26.     }  
27.   
28.     ......  
29. }  
    这里我们看到，这个构造函数最终是通过JNI方法native_open来创建匿名内存共享文件。这个JNI方法native_open实现在frameworks/base/core/jni/adroid_os_MemoryFile.cpp文件中：
1. static jobject android_os_MemoryFile_open(JNIEnv* env, jobject clazz, jstring name, jint length)  
2. {  
3.     const char* namestr = (name ? env-&gt;GetStringUTFChars(name, NULL) : NULL);  
4.   
5.     int result = ashmem_create_region(namestr, length);  
6.   
7.     if (name)  
8.         env-&gt;ReleaseStringUTFChars(name, namestr);  
9.   
10.     if (result &lt; 0) {  
11.         jniThrowException(env, &quot;java/io/IOException&quot;, &quot;ashmem_create_region failed&quot;);  
12.         return NULL;  
13.     }  
14.   
15.     return jniCreateFileDescriptor(env, result);  
16. }  
    这个函数又通过运行时库提供的接口ashmem_create_region来创建匿名共享内存，这个函数实现在system/core/libcutils/ashmem-dev.c文件中：
1. /* 
2.  * ashmem_create_region - creates a new ashmem region and returns the file 
3.  * descriptor, or &lt;0 on error 
4.  * 
5.  * `name' is an optional label to give the region (visible in /proc/pid/maps) 
6.  * `size' is the size of the region, in page-aligned bytes 
7.  */  
8. int ashmem_create_region(const char *name, size_t size)  
9. {  
10.     int fd, ret;  
11.   
12.     fd = open(ASHMEM_DEVICE, O_RDWR);  
13.     if (fd &lt; 0)  
14.         return fd;  
15.   
16.     if (name) {  
17.         char buf[ASHMEM_NAME_LEN];  
18.   
19.         strlcpy(buf, name, sizeof(buf));  
20.         ret = ioctl(fd, ASHMEM_SET_NAME, buf);  
21.         if (ret &lt; 0)  
22.             goto error;  
23.     }  
24.   
25.     ret = ioctl(fd, ASHMEM_SET_SIZE, size);  
26.     if (ret &lt; 0)  
27.         goto error;  
28.   
29.     return fd;  
30.   
31. error:  
32.     close(fd);  
33.     return ret;  
34. }  
    这里，一共通过执行三个文件操作系统调用来和Ashmem驱动程序进行交互，分虽是一个open和两个ioctl操作，前者是打开设备文件ASHMEM_DEVICE，后者分别是设置匿名共享内存的名称和大小。
    在介绍这三个文件操作之前，我们先来了解一下Ashmem驱动程序的一个相关数据结构struct ashmem_area，这个数据结构就是用来表示一块共享内存的，它定义在kernel/common/mm/ashmem.c文件中：
1. /* 
2.  * ashmem_area - anonymous shared memory area 
3.  * Lifecycle: From our parent file's open() until its release() 
4.  * Locking: Protected by `ashmem_mutex' 
5.  * Big Note: Mappings do NOT pin this structure; it dies on close() 
6.  */  
7. struct ashmem_area {  
8.     char name[ASHMEM_FULL_NAME_LEN];/* optional name for /proc/pid/maps */  
9.     struct list_head unpinned_list; /* list of all ashmem areas */  
10.     struct file *file;      /* the shmem-based backing file */  
11.     size_t size;            /* size of the mapping, in bytes */  
12.     unsigned long prot_mask;    /* allowed prot bits, as vm_flags */  
13. };  
    域name表示这块共享内存的名字，这个名字会显示/proc/&lt;pid&gt;/maps文件中，&lt;pid&gt;表示打开这个共享内存文件的进程ID；域unpinned_list是一个列表头，它把这块共享内存中所有被解锁的内存块连接在一起，下面我们讲内存块的锁定和解锁操作时会看到它的用法；域file表示这个共享内存在临时文件系统tmpfs中对应的文件，在内核决定要把这块共享内存对应的物理页面回收时，就会把它的内容交换到这个临时文件中去；域size表示这块共享内存的大小；域prot_mask表示这块共享内存的访问保护位。
    在Ashmem驱动程中，所有的ashmem_area实例都是从自定义的一个slab缓冲区创建的。这个slab缓冲区是在驱动程序模块初始化函数创建的，我们来看一个这个初始化函数的相关实现：
1. static int __init ashmem_init(void)  
2. {  
3.     int ret;  
4.   
5.     ashmem_area_cachep = kmem_cache_create(&quot;ashmem_area_cache&quot;,  
6.         sizeof(struct ashmem_area),  
7.         0, 0, NULL);  
8.     if (unlikely(!ashmem_area_cachep)) {  
9.         printk(KERN_ERR &quot;ashmem: failed to create slab cache\n&quot;);  
10.         return -ENOMEM;  
11.     }  
12.   
13.     ......  
14.   
15.     return 0;  
16. }  
    全局变量定义在文件开头的地方：
    1. static struct kmem_cache *ashmem_area_cachep __read_mostly;  
    它的类型是struct kmem_cache，表示这是一个slab缓冲区，由内核中的内存管理系统进行管理。
    这里就是通过kmem_cache_create函数来创建一个名为&quot;ashmem_area_cache&quot;、对象大小为sizeof(struct  ashmem_area)的缓冲区了。缓冲区创建了以后，就可以每次从它分配一个struct  ashmem_area对象了。关于Linux内核的slab缓冲区的相关知识，可以参考前面</rich_text><rich_text link="webs http://blog.csdn.net/luoshengyang/article/details/6557518">Android学习启动篇</rich_text><rich_text>一文中提到的一本参考书籍《Understanding the Linux Kernel》的第八章Memory Managerment。

    有了这些基础知识后，我们回到前面的ashmem_create_region函数中。
    首先是执行打开文件的操作：
    1. fd = open(ASHMEM_DEVICE, O_RDWR);  
    ASHMEM_DEVICE是一个宏，定义为：

    1. #define ASHMEM_DEVICE   &quot;/dev/ashmem&quot;  
    这里就是匿名共享内存设备文件/dev/ashmem了。
    从上面的描述我们可以知道，调用这个open函数最终会进入到Ashmem驱动程序中的ashmem_open函数中去：
1. static int ashmem_open(struct inode *inode, struct file *file)  
2. {  
3.     struct ashmem_area *asma;  
4.     int ret;  
5.   
6.     ret = nonseekable_open(inode, file);  
7.     if (unlikely(ret))  
8.         return ret;  
9.   
10.     asma = kmem_cache_zalloc(ashmem_area_cachep, GFP_KERNEL);  
11.     if (unlikely(!asma))  
12.         return -ENOMEM;  
13.   
14.     INIT_LIST_HEAD(&amp;asma-&gt;unpinned_list);  
15.     memcpy(asma-&gt;name, ASHMEM_NAME_PREFIX, ASHMEM_NAME_PREFIX_LEN);  
16.     asma-&gt;prot_mask = PROT_MASK;  
17.     file-&gt;private_data = asma;  
18.   
19.     return 0;  
20. }  
    首先是通过nonseekable_open函数来设备这个文件不可以执行定位操作，即不可以执行seek文件操作。接着就是通过kmem_cache_zalloc函数从刚才我们创建的slab缓冲区ashmem_area_cachep来创建一个ashmem_area结构体了，并且保存在本地变量asma中。再接下去就是初始化变量asma的其它域，其中，域name初始为ASHMEM_NAME_PREFIX，这是一个宏，定义为：
1. #define ASHMEM_NAME_PREFIX &quot;dev/ashmem/&quot;  
2. #define ASHMEM_NAME_PREFIX_LEN (sizeof(ASHMEM_NAME_PREFIX) - 1)  
    函数的最后是把这个ashmem_area结构保存在打开文件结构体的private_data域中，这样，Ashmem驱动程序就可以在其它地方通过这个private_data域来取回这个ashmem_area结构了。
    到这里，设备文件/dev/ashmem的打开操作就完成了，它实际上就是在Ashmem驱动程序中创建了一个ashmem_area结构，表示一块新的共享内存。
    再回到ashmem_create_region函数中，又调用了两次ioctl文件操作分别来设备这块新建的匿名共享内存的名字和大小。在 kernel/comon/mm/include/ashmem.h文件中，ASHMEM_SET_NAME和ASHMEM_SET_SIZE的定义为：
1. #define ASHMEM_NAME_LEN     256  
2.   
3. #define __ASHMEMIOC     0x77  
4.   
5. #define ASHMEM_SET_NAME     _IOW(__ASHMEMIOC, 1, char[ASHMEM_NAME_LEN])  
6. #define ASHMEM_SET_SIZE     _IOW(__ASHMEMIOC, 3, size_t)  
    先来看ASHMEM_SET_NAME命令的ioctl调用，它最终进入到Ashmem驱动程序的ashmem_ioctl函数中：
1. static long ashmem_ioctl(struct file *file, unsigned int cmd, unsigned long arg)  
2. {  
3.     struct ashmem_area *asma = file-&gt;private_data;  
4.     long ret = -ENOTTY;  
5.   
6.     switch (cmd) {  
7.     case ASHMEM_SET_NAME:  
8.         ret = set_name(asma, (void __user *) arg);  
9.         break;  
10.     ......  
11.     }  
12.   
13.     return ret;  
14. }  
    这里通过set_name函数来进行实际操作：
1. static int set_name(struct ashmem_area *asma, void __user *name)  
2. {  
3.     int ret = 0;  
4.   
5.     mutex_lock(&amp;ashmem_mutex);  
6.   
7.     /* cannot change an existing mapping's name */  
8.     if (unlikely(asma-&gt;file)) {  
9.         ret = -EINVAL;  
10.         goto out;  
11.     }  
12.   
13.     if (unlikely(copy_from_user(asma-&gt;name + ASHMEM_NAME_PREFIX_LEN,  
14.                     name, ASHMEM_NAME_LEN)))  
15.         ret = -EFAULT;  
16.     asma-&gt;name[ASHMEM_FULL_NAME_LEN-1] = '\0';  
17.   
18. out:  
19.     mutex_unlock(&amp;ashmem_mutex);  
20.   
21.     return ret;  
22. }  
    这个函数实现很简单，把用户空间传进来的匿名共享内存的名字设备到asma-&gt;name域中去。注意，匿名共享内存块的名字的内容分两部分，前一部分是前缀，这是在open操作时，由驱动程序默认设置的，固定为ASHMEM_NAME_PREFIX，即&quot;dev/ashmem/&quot;；后一部分由用户指定，这一部分是可选的，即用户可以不调用ASHMEM_SET_NAME命令来设置匿名共享内存块的名字。
    再来看ASHMEM_SET_SIZE命令的ioctl调用，它最终也是进入到Ashmem驱动程序的ashmem_ioctl函数中：
1. static long ashmem_ioctl(struct file *file, unsigned int cmd, unsigned long arg)  
2. {  
3.     struct ashmem_area *asma = file-&gt;private_data;  
4.     long ret = -ENOTTY;  
5.   
6.     switch (cmd) {  
7.     ......  
8.     case ASHMEM_SET_SIZE:  
9.         ret = -EINVAL;  
10.         if (!asma-&gt;file) {  
11.             ret = 0;  
12.             asma-&gt;size = (size_t) arg;  
13.         }  
14.         break;  
15.     ......  
16.     }  
17.   
18.     return ret;  
19. }  
    这个实现很简单，只是把用户空间传进来的匿名共享内存的大小值保存在对应的asma-&gt;size域中。
    这样，ashmem_create_region函数就执先完成了，层层返回，最后回到应用程序框架层提供的接口Memory的构造函数中，整个匿名共 享内存的创建过程就完成了。前面我们说过过，Ashmem驱动程序不提供read和write文件操作，进程若要访问这个共享内存，必须要把这个设备文件 映射到自己的进程空间中，然后进行直接内存访问，这就是我们下面要介绍的匿名共享内存设备文件的内存映射操作了。

</rich_text><rich_text scale="h2" weight="heavy">二. 匿名共享内存设备文件的内存映射操作</rich_text><rich_text>
    在MemoryFile类的构造函数中，进行了匿名共享内存的创建操作后，下一步就是要把匿名共享内存设备文件映射到进程空间来了：
1. public class MemoryFile  
2. {  
3.     ......  
4.   
5.     // returns memory address for ashmem region  
6.     private static native int native_mmap(FileDescriptor fd, int length, int mode)  
7.         throws IOException;  
8.       
9.     ......  
10.   
11.     private int mAddress;   // address of ashmem memory  
12.       
13.     ......  
14.   
15.     /** 
16.     * Allocates a new ashmem region. The region is initially not purgable. 
17.     * 
18.     * @param name optional name for the file (can be null). 
19.     * @param length of the memory file in bytes. 
20.     * @throws IOException if the memory file could not be created. 
21.     */  
22.     public MemoryFile(String name, int length) throws IOException {  
23.         ......  
24.         mAddress = native_mmap(mFD, length, PROT_READ | PROT_WRITE);  
25.         ......  
26.     }  
27. }  
    映射匿名共享内存设备文件到进程空间是通过JNI方法native_mmap来进行的。这个JNI方法实现在frameworks/base/core/jni/adroid_os_MemoryFile.cpp文件中：
1. static jint android_os_MemoryFile_mmap(JNIEnv* env, jobject clazz, jobject fileDescriptor,  
2.         jint length, jint prot)  
3. {  
4.     int fd = jniGetFDFromFileDescriptor(env, fileDescriptor);  
5.     jint result = (jint)mmap(NULL, length, prot, MAP_SHARED, fd, 0);  
6.     if (!result)  
7.         jniThrowException(env, &quot;java/io/IOException&quot;, &quot;mmap failed&quot;);  
8.     return result;  
9. }  
    这里的文件描述符fd是在前面open匿名设备文件/dev/ashmem获得的，有个这个文件描述符后，就可以直接通过mmap来执行内存映射操作了。这个mmap系统调用最终进入到Ashmem驱动程序的ashmem_mmap函数中：
1. static int ashmem_mmap(struct file *file, struct vm_area_struct *vma)  
2. {  
3.     struct ashmem_area *asma = file-&gt;private_data;  
4.     int ret = 0;  
5.   
6.     mutex_lock(&amp;ashmem_mutex);  
7.   
8.     /* user needs to SET_SIZE before mapping */  
9.     if (unlikely(!asma-&gt;size)) {  
10.         ret = -EINVAL;  
11.         goto out;  
12.     }  
13.   
14.     /* requested protection bits must match our allowed protection mask */  
15.     if (unlikely((vma-&gt;vm_flags &amp; ~asma-&gt;prot_mask) &amp; PROT_MASK)) {  
16.         ret = -EPERM;  
17.         goto out;  
18.     }  
19.   
20.     if (!asma-&gt;file) {  
21.         char *name = ASHMEM_NAME_DEF;  
22.         struct file *vmfile;  
23.   
24.         if (asma-&gt;name[ASHMEM_NAME_PREFIX_LEN] != '\0')  
25.             name = asma-&gt;name;  
26.   
27.         /* ... and allocate the backing shmem file */  
28.         vmfile = shmem_file_setup(name, asma-&gt;size, vma-&gt;vm_flags);  
29.         if (unlikely(IS_ERR(vmfile))) {  
30.             ret = PTR_ERR(vmfile);  
31.             goto out;  
32.         }  
33.         asma-&gt;file = vmfile;  
34.     }  
35.     get_file(asma-&gt;file);  
36.   
37.     if (vma-&gt;vm_flags &amp; VM_SHARED)  
38.         shmem_set_file(vma, asma-&gt;file);  
39.     else {  
40.         if (vma-&gt;vm_file)  
41.             fput(vma-&gt;vm_file);  
42.         vma-&gt;vm_file = asma-&gt;file;  
43.     }  
44.     vma-&gt;vm_flags |= VM_CAN_NONLINEAR;  
45.   
46. out:  
47.     mutex_unlock(&amp;ashmem_mutex);  
48.     return ret;  
49. }  
    这个函数的实现也很简单，它调用了Linux内核提供的shmem_file_setup函数来在临时文件系统tmpfs中创建一个临时文件，这个临时文件与Ashmem驱动程序创建的匿名共享内存对应。函数shmem_file_setup是Linux内核中用来创建共享内存文件的方法，而Linux内核中的共享内存机制其实是一种进程间通信（IPC）机制，它的实现相对也是比较复杂，Android系统的匿名共享内存机制正是由于直接使用了Linux内核共享内存机制，它才会很小巧，它站在巨人的肩膀上了。关于Linux内核中的共享内存的相关知识，可以参考前面</rich_text><rich_text link="webs http://blog.csdn.net/luoshengyang/article/details/6557518">Android学习启动篇</rich_text><rich_text>一文中提到的一本参考书籍《Linux内核源代码情景分析》的第六章传统的Unix进程间通信第七小节共享内存。

    通过shmem_file_setup函数(</rich_text><rich_text foreground="#ffff00000000">mm/shmem.c</rich_text><rich_text>)创建的临时文件vmfile最终就保存在vma-&gt;file中了。这里的vma是由Linux内核的文件系统层传进来的，它的类型为struct  vm_area_struct，它表示的是当前进程空间中一块连续的虚拟地址空间，它的起始地址可以由用户来指定，也可以由内核自己来分配，这里我们从 JNI方法native_mmap调用的mmap的第一个参数为NULL可以看出，这块连续的虚拟地址空间的起始地址是由内核来指定的。文件内存映射操作完成后，用户访问这个范围的地址空间就相当于是访问对应的文件的内容了。有关Linux文件的内存映射操作，同样可以参考前面</rich_text><rich_text link="webs http://blog.csdn.net/luoshengyang/article/details/6557518">Android学习启动篇</rich_text><rich_text>一文中提到的一本参考书籍《Linux内核源代码情景分析》的第二章内存管理第十三小节系统调用mmap。从这里我们也可以看出，Android系统的匿名共享内存是在虚拟地址空间连续的，但是在物理地址空间就不一定是连续的了。
    同时，这个临时文件vmfile也会保存在asma-&gt;file域中，这样，Ashmem驱动程序后面就可以通过在asma-&gt;file来操作这个匿名内存共享文件了。
    函数ashmem_mmap执行完成后，经过层层返回到JNI方法native_mmap中去，就从mmap函数的返回值中得到了这块虚拟空间的起始地址了，这个起始地址最终返回到应用程序框架层的MemoryFile类的构造函数中，并且保存在成员变量mAddress中，后面，共享内存的读写操作就 是对这个地址空间进行操作了。

</rich_text><rich_text scale="h2" weight="heavy">三. 匿名共享内存的读写操作</rich_text><rich_text>
    因为前面对匿名共享内存文件进行内存映射操作，这里对匿名内存文件内容的读写操作就比较简单了，就像访问内存变量一样就行了。
    我们来看一下MemoryFile类的读写操作函数：
1. public class MemoryFile  
2. {  
3.     ......  
4.   
5.     private static native int native_read(FileDescriptor fd, int address, byte[] buffer,  
6.         int srcOffset, int destOffset, int count, boolean isUnpinned) throws IOException;  
7.     private static native void native_write(FileDescriptor fd, int address, byte[] buffer,  
8.         int srcOffset, int destOffset, int count, boolean isUnpinned) throws IOException;  
9.       
10.     ......  
11.   
12.     private FileDescriptor mFD;        // ashmem file descriptor  
13.     private int mAddress;   // address of ashmem memory  
14.     private int mLength;    // total length of our ashmem region  
15.     private boolean mAllowPurging = false;  // true if our ashmem region is unpinned  
16.   
17.     ......  
18.   
19.     /** 
20.     * Reads bytes from the memory file. 
21.     * Will throw an IOException if the file has been purged. 
22.     * 
23.     * @param buffer byte array to read bytes into. 
24.     * @param srcOffset offset into the memory file to read from. 
25.     * @param destOffset offset into the byte array buffer to read into. 
26.     * @param count number of bytes to read. 
27.     * @return number of bytes read. 
28.     * @throws IOException if the memory file has been purged or deactivated. 
29.     */  
30.     public int readBytes(byte[] buffer, int srcOffset, int destOffset, int count)   
31.     throws IOException {  
32.         if (isDeactivated()) {  
33.             throw new IOException(&quot;Can't read from deactivated memory file.&quot;);  
34.         }  
35.         if (destOffset &lt; 0 || destOffset &gt; buffer.length || count &lt; 0  
36.             || count &gt; buffer.length - destOffset  
37.             || srcOffset &lt; 0 || srcOffset &gt; mLength  
38.             || count &gt; mLength - srcOffset) {  
39.                 throw new IndexOutOfBoundsException();  
40.         }  
41.         return native_read(mFD, mAddress, buffer, srcOffset, destOffset, count, mAllowPurging);  
42.     }  
43.   
44.     /** 
45.     * Write bytes to the memory file. 
46.     * Will throw an IOException if the file has been purged. 
47.     * 
48.     * @param buffer byte array to write bytes from. 
49.     * @param srcOffset offset into the byte array buffer to write from. 
50.     * @param destOffset offset  into the memory file to write to. 
51.     * @param count number of bytes to write. 
52.     * @throws IOException if the memory file has been purged or deactivated. 
53.     */  
54.     public void writeBytes(byte[] buffer, int srcOffset, int destOffset, int count)  
55.         throws IOException {  
56.             if (isDeactivated()) {  
57.                 throw new IOException(&quot;Can't write to deactivated memory file.&quot;);  
58.             }  
59.             if (srcOffset &lt; 0 || srcOffset &gt; buffer.length || count &lt; 0  
60.                 || count &gt; buffer.length - srcOffset  
61.                 || destOffset &lt; 0 || destOffset &gt; mLength  
62.                 || count &gt; mLength - destOffset) {  
63.                     throw new IndexOutOfBoundsException();  
64.             }  
65.             native_write(mFD, mAddress, buffer, srcOffset, destOffset, count, mAllowPurging);  
66.     }  
67.   
68.     ......  
69. }  
        这里，我们可以看到，MemoryFile的匿名共享内存读写操作都是通过JNI方法来实现的，读操作和写操作的JNI方法分别是native_read和native_write，它们都是定义在frameworks/base/core/jni/adroid_os_MemoryFile.cpp文件中：
1. static jint android_os_MemoryFile_read(JNIEnv* env, jobject clazz,  
2.         jobject fileDescriptor, jint address, jbyteArray buffer, jint srcOffset, jint destOffset,  
3.         jint count, jboolean unpinned)  
4. {  
5.     int fd = jniGetFDFromFileDescriptor(env, fileDescriptor);  
6.     if (unpinned &amp;&amp; ashmem_pin_region(fd, 0, 0) == ASHMEM_WAS_PURGED) {  
7.         ashmem_unpin_region(fd, 0, 0);  
8.         jniThrowException(env, &quot;java/io/IOException&quot;, &quot;ashmem region was purged&quot;);  
9.         return -1;  
10.     }  
11.   
12.     env-&gt;SetByteArrayRegion(buffer, destOffset, count, (const jbyte *)address + srcOffset);  
13.   
14.     if (unpinned) {  
15.         ashmem_unpin_region(fd, 0, 0);  
16.     }  
17.     return count;  
18. }  
19.   
20. static jint android_os_MemoryFile_write(JNIEnv* env, jobject clazz,  
21.         jobject fileDescriptor, jint address, jbyteArray buffer, jint srcOffset, jint destOffset,  
22.         jint count, jboolean unpinned)  
23. {  
24.     int fd = jniGetFDFromFileDescriptor(env, fileDescriptor);  
25.     if (unpinned &amp;&amp; ashmem_pin_region(fd, 0, 0) == ASHMEM_WAS_PURGED) {  
26.         ashmem_unpin_region(fd, 0, 0);  
27.         jniThrowException(env, &quot;java/io/IOException&quot;, &quot;ashmem region was purged&quot;);  
28.         return -1;  
29.     }  
30.   
31.     env-&gt;GetByteArrayRegion(buffer, srcOffset, count, (jbyte *)address + destOffset);  
32.   
33.     if (unpinned) {  
34.         ashmem_unpin_region(fd, 0, 0);  
35.     }  
36.     return count;  
37. }  
    这里的address参数就是我们在前面执行mmap来映射匿名共享内存文件到内存中时，得到的进程虚拟地址空间的起始地址了，因此，这里就直接可以访问，不必进入到Ashmem驱动程序中去，这也是为什么Ashmem驱动程序没有提供read和write文件操作的原因。
    这里我们看到的ashmem_pin_region和ashmem_unpin_region两个函数是系统运行时库提供的接口，用来执行我们前面说的 匿名共享内存的锁定和解锁操作，它们的作用是告诉Ashmem驱动程序，它的哪些内存块是正在使用的，需要锁定，哪些内存是不需要使用了，可以它解锁，这 样，Ashmem驱动程序就可以辅助内存管理系统来有效地管理内存了。下面我们就看看Ashmem驱动程序是如果辅助内存管理系统来有效地管理内存的。

</rich_text><rich_text scale="h2" weight="heavy">四. 匿名共享内存的锁定和解锁操作</rich_text><rich_text>
    前面提到，Android系统的运行时库提到了执行匿名共享内存的锁定和解锁操作的两个函数ashmem_pin_region和 ashmem_unpin_region，它们实现在system/core/libcutils/ashmem-dev.c文件中：
1. int ashmem_pin_region(int fd, size_t offset, size_t len)  
2. {  
3.     struct ashmem_pin pin = { offset, len };  
4.     return ioctl(fd, ASHMEM_PIN, &amp;pin);  
5. }  
6.   
7. int ashmem_unpin_region(int fd, size_t offset, size_t len)  
8. {  
9.     struct ashmem_pin pin = { offset, len };  
10.     return ioctl(fd, ASHMEM_UNPIN, &amp;pin);  
11. }  
    它们的实现很简单，通过ASHMEM_PIN和ASHMEM_UNPIN两个ioctl操作来实现匿名共享内存的锁定和解锁操作。
    我们先看来一下ASHMEM_PIN和ASHMEM_UNPIN这两个命令号的定义，它们的定义可以在kernel/common/include/linux/ashmem.h文件中找到：
1. #define __ASHMEMIOC     0x77  
2.   
3. #define ASHMEM_PIN      _IOW(__ASHMEMIOC, 7, struct ashmem_pin)  
4. #define ASHMEM_UNPIN        _IOW(__ASHMEMIOC, 8, struct ashmem_pin)  
    它们的参数类型为struct ashmem_pin，它也是定义在kernel/common/include/linux/ashmem.h文件中：
1. struct ashmem_pin {  
2.     __u32 offset;   /* offset into region, in bytes, page-aligned */  
3.     __u32 len;  /* length forward from offset, in bytes, page-aligned */  
4. };  
    这个结构体只有两个域，分别表示要锁定或者要解锁的内块块的起始大小以及大小。
    在分析这两个操作之前，我们先来看一下Ashmem驱动程序中的一个数据结构struct ashmem_range，这个数据结构就是用来表示某一块被解锁（unpinnd）的内存：
1. /* 
2.  * ashmem_range - represents an interval of unpinned (evictable) pages 
3.  * Lifecycle: From unpin to pin 
4.  * Locking: Protected by `ashmem_mutex' 
5.  */  
6. struct ashmem_range {  
7.     struct list_head lru;       /* entry in LRU list */  
8.     struct list_head unpinned;  /* entry in its area's unpinned list */  
9.     struct ashmem_area *asma;   /* associated area */  
10.     size_t pgstart;         /* starting page, inclusive */  
11.     size_t pgend;           /* ending page, inclusive */  
12.     unsigned int purged;        /* ASHMEM_NOT or ASHMEM_WAS_PURGED */  
13. };  
        域asma表示这块被解锁的内存所属于的匿名共享内存，它通过域unpinned连接在asma-&gt;unpinned_list表示的列表中；域pgstart和paend表示这个内存块的开始和结束页面号，它们表示一个前后闭合的区间；域purged表示这个内存块占用的物理内存是否已经被回收；这块被解锁的内存块除了保存在它所属的匿名共享内存asma的解锁列表unpinned_list之外，还通过域lru保存在一个全局的最近最少使用列表ashmem_lru_list列表中，它的定义如下：
1. /* LRU list of unpinned pages, protected by ashmem_mutex */  
2. static LIST_HEAD(ashmem_lru_list);  
        了解了这个数据结构之后，我们就可以来看ashmem_ioctl函数中关于ASHMEM_PIN和ASHMEM_UNPIN的操作了：
1. static long ashmem_ioctl(struct file *file, unsigned int cmd, unsigned long arg)  
2. {  
3.     struct ashmem_area *asma = file-&gt;private_data;  
4.     long ret = -ENOTTY;  
5.   
6.     switch (cmd) {  
7.     ......  
8.     case ASHMEM_PIN:  
9.     case ASHMEM_UNPIN:  
10.         ret = ashmem_pin_unpin(asma, cmd, (void __user *) arg);  
11.         break;  
12.     ......  
13.     }  
14.   
15.     return ret;  
16. }  
        它们都是通过ashmem_pin_unpin来进一步处理：
1. static int ashmem_pin_unpin(struct ashmem_area *asma, unsigned long cmd,  
2.                 void __user *p)  
3. {  
4.     struct ashmem_pin pin;  
5.     size_t pgstart, pgend;  
6.     int ret = -EINVAL;  
7.   
8.     if (unlikely(!asma-&gt;file))  
9.         return -EINVAL;  
10.   
11.     if (unlikely(copy_from_user(&amp;pin, p, sizeof(pin))))  
12.         return -EFAULT;  
13.   
14.     /* per custom, you can pass zero for len to mean &quot;everything onward&quot; */  
15.     if (!pin.len)  
16.         pin.len = PAGE_ALIGN(asma-&gt;size) - pin.offset;  
17.   
18.     if (unlikely((pin.offset | pin.len) &amp; ~PAGE_MASK))  
19.         return -EINVAL;  
20.   
21.     if (unlikely(((__u32) -1) - pin.offset &lt; pin.len))  
22.         return -EINVAL;  
23.   
24.     if (unlikely(PAGE_ALIGN(asma-&gt;size) &lt; pin.offset + pin.len))  
25.         return -EINVAL;  
26.   
27.     pgstart = pin.offset / PAGE_SIZE;  
28.     pgend = pgstart + (pin.len / PAGE_SIZE) - 1;  
29.   
30.     mutex_lock(&amp;ashmem_mutex);  
31.   
32.     switch (cmd) {  
33.     case ASHMEM_PIN:  
34.         ret = ashmem_pin(asma, pgstart, pgend);  
35.         break;  
36.     case ASHMEM_UNPIN:  
37.         ret = ashmem_unpin(asma, pgstart, pgend);  
38.         break;  
39.     ......  
40.     }  
41.   
42.     mutex_unlock(&amp;ashmem_mutex);  
43.   
44.     return ret;  
45. }  
        首先是获得用户空间传进来的参数，并保存在本地变量pin中，这是一个struct ashmem_pin类型的变量，这个结构体我们在前面已经见过了，它包括了要pin/unpin的内存块的起始地址和大小，这里的起始地址和大小都是以字节为单位的，因此，通过转换把它们换成以页面为单位的，并且保存在本地变量pgstart和pgend中。这里除了要对参数作一个安全性检查外，还要一个处理逻辑是，如果从用户空间传进来的内块块的大小值为0 ，则认为是要pin/unpin整个匿名共享内存。
         函数最后根据当前要执行的是ASHMEM_PIN操作还是ASHMEM_UNPIN操作来分别执行ashmem_pin和ashmem_unpin来进 一步处理。创建匿名共享内存时，默认所有的内存都是pinned状态的，只有用户告诉Ashmem驱动程序要unpin某一块内存时，Ashmem驱动程 序才会把这块内存unpin，之后，用户可以再告诉Ashmem驱动程序要重新pin某一块之前被unpin过的内块，从而把这块内存从unpinned 状态改为pinned状态，也就是说，执行ASHMEM_PIN操作时，目标对象必须是一块当前处于unpinned状态的内存块。
       我们先来看一下ASHMEM_UNPIN操作，进入到ashmem_unpin函数：
1. /* 
2.  * ashmem_unpin - unpin the given range of pages. Returns zero on success. 
3.  * 
4.  * Caller must hold ashmem_mutex. 
5.  */  
6. static int ashmem_unpin(struct ashmem_area *asma, size_t pgstart, size_t pgend)  
7. {  
8.     struct ashmem_range *range, *next;  
9.     unsigned int purged = ASHMEM_NOT_PURGED;  
10.   
11. restart:  
12.     list_for_each_entry_safe(range, next, &amp;asma-&gt;unpinned_list, unpinned) {  
13.         /* short circuit: this is our insertion point */  
14.         if (range_before_page(range, pgstart))  
15.             break;  
16.   
17.         /* 
18.          * The user can ask us to unpin pages that are already entirely 
19.          * or partially pinned. We handle those two cases here. 
20.          */  
21.         if (page_range_subsumed_by_range(range, pgstart, pgend))  
22.             return 0;  
23.         if (page_range_in_range(range, pgstart, pgend)) {  
24.             pgstart = min_t(size_t, range-&gt;pgstart, pgstart),  
25.             pgend = max_t(size_t, range-&gt;pgend, pgend);  
26.             purged |= range-&gt;purged;  
27.             range_del(range);  
28.             goto restart;  
29.         }  
30.     }  
31.   
32.     return range_alloc(asma, range, purged, pgstart, pgend);  
33. }  
        这个函数的主体就是在遍历asma-&gt;unpinned_list列表，从中查找当前处于unpinned状态的内存块是否与将要unpin的内存块[pgstart, pgend]是否相交，如果相交，则要执行合并操作，即调整pgstart和pgend的大小，然后通过调用range_del函数删掉原来的已经被unpinned过的内存块，最后再通过range_alloc函数来重新unpinned这块调整过后的内存块[pgstart, pgend]，这里新的内存块[pgstart, pgend]已经包含了刚才所有被删掉的unpinned状态的内存。注意，这里如果找到一块相并的内存块，并且调整了pgstart和pgend的大小之后，要重新再扫描一遍asma-&gt;unpinned_list列表，因为新的内存块[pgstart, pgend]可能还会与前后的处于unpinned状态的内存块发生相交。

        我们来看一下range_before_page的操作，这是一个宏定义：
1. #define range_before_page(range, page) \  
2.   ((range)-&gt;pgend &lt; (page))  
        表示range描述的内存块是否在page页面之前，如果是，则整个描述就结束了。从这里我们可以看出asma-&gt;unpinned_list列表是按照页面号从大到小进行排列的，并且每一块被unpin的内存都是不相交的。
        
        再来看一下page_range_subsumed_by_range的操作，这也是一个宏定义：
1. #define page_range_subsumed_by_range(range, start, end) \  
2.   (((range)-&gt;pgstart &lt;= (start)) &amp;&amp; ((range)-&gt;pgend &gt;= (end)))  
       表示range描述的内存块是不是包含了[start, end]这个内存块，如果包含了，则说明当前要unpin的内存块已经处于unpinned状态，什么也不用操作，直接返回即可。

       再看page_range_in_range的操作，它也是一个宏定义：
1. #define page_range_in_range(range, start, end) \  
2.   (page_in_range(range, start) || page_in_range(range, end) || \  
3.    page_range_subsumes_range(range, start, end))  

      它用到的其它两个宏分别定义为：
1. #define page_range_subsumed_by_range(range, start, end) \  
2.   (((range)-&gt;pgstart &lt;= (start)) &amp;&amp; ((range)-&gt;pgend &gt;= (end)))  
3.   
4. #define page_in_range(range, page) \  
5.  (((range)-&gt;pgstart &lt;= (page)) &amp;&amp; ((range)-&gt;pgend &gt;= (page)))  
      它们都是用来判断两个内存区间是否相交的。
      两个内存块相交分为四种情况：
     </rich_text><rich_text foreground="#FFFF00"> </rich_text><rich_text foreground="#3366FF">|-------range-----|</rich_text><rich_text foreground="#FFFF00"> </rich_text><rich_text>      </rich_text><rich_text foreground="#FF9900"> |-------range------|</rich_text><rich_text>      </rich_text><rich_text foreground="#990000"> |--------range---------|</rich_text><rich_text>               </rich_text><rich_text foreground="#330033">  |----range---|</rich_text><rich_text>
      </rich_text><rich_text foreground="#3366FF"> |-start----end-|  </rich_text><rich_text>     </rich_text><rich_text foreground="#FF9900">|-start-----end-| </rich_text><rich_text>                         </rich_text><rich_text foreground="#990000">|-start-------end-| </rich_text><rich_text>      </rich_text><rich_text foreground="#330033"> |-start-----------end-|</rich_text><rich_text>
                  (1)                                (2)                                   (3)                                            (4)
      第一种情况，前面已经讨论过了，对于第二到第四种情况，都是需要执行合并操作的。
      再来看从asma-&gt;unpinned_list中删掉内存块的range_del函数：
1. static void range_del(struct ashmem_range *range)  
2. {  
3.     list_del(&amp;range-&gt;unpinned);  
4.     if (range_on_lru(range))  
5.         lru_del(range);  
6.     kmem_cache_free(ashmem_range_cachep, range);  
7. }  
      这个函数首先把range从相应的unpinned_list列表中删除，然后判断它是否在lru列表中：
1. #define range_on_lru(range) \  
2.   ((range)-&gt;purged == ASHMEM_NOT_PURGED)  
      如果它的状态purged等于ASHMEM_NOT_PURGED，即对应的物理页面尚未被回收，它就位于lru列表中，通过调用lru_del函数进行删除：
1. static inline void lru_del(struct ashmem_range *range)  
2. {  
3.     list_del(&amp;range-&gt;lru);  
4.     lru_count -= range_size(range);  
5. }  
       最后调用kmem_cache_free将它从slab缓冲区ashmem_range_cachep中释放。
       
        这里的slab缓冲区ashmem_range_cachep定义如下：
        1. static struct kmem_cache *ashmem_range_cachep __read_mostly;  
       
        它和前面介绍的slab缓冲区ashmem_area_cachep一样，是在Ashmem驱动程序模块初始化函数ashmem_init进行初始化的：
1. static int __init ashmem_init(void)  
2. {  
3.     int ret;  
4.   
5.     ......  
6.   
7.     ashmem_range_cachep = kmem_cache_create(&quot;ashmem_range_cache&quot;,  
8.         sizeof(struct ashmem_range),  
9.         0, 0, NULL);  
10.     if (unlikely(!ashmem_range_cachep)) {  
11.         printk(KERN_ERR &quot;ashmem: failed to create slab cache\n&quot;);  
12.         return -ENOMEM;  
13.     }  
14.   
15.     ......  
16.   
17.     printk(KERN_INFO &quot;ashmem: initialized\n&quot;);  
18.   
19.     return 0;  
20. }  
       回到ashmem_unpin函数中，我们再来看看range_alloc函数的实现：
1. /* 
2.  * range_alloc - allocate and initialize a new ashmem_range structure 
3.  * 
4.  * 'asma' - associated ashmem_area 
5.  * 'prev_range' - the previous ashmem_range in the sorted asma-&gt;unpinned list 
6.  * 'purged' - initial purge value (ASMEM_NOT_PURGED or ASHMEM_WAS_PURGED) 
7.  * 'start' - starting page, inclusive 
8.  * 'end' - ending page, inclusive 
9.  * 
10.  * Caller must hold ashmem_mutex. 
11.  */  
12. static int range_alloc(struct ashmem_area *asma,  
13.                struct ashmem_range *prev_range, unsigned int purged,  
14.                size_t start, size_t end)  
15. {  
16.     struct ashmem_range *range;  
17.   
18.     range = kmem_cache_zalloc(ashmem_range_cachep, GFP_KERNEL);  
19.     if (unlikely(!range))  
20.         return -ENOMEM;  
21.   
22.     range-&gt;asma = asma;  
23.     range-&gt;pgstart = start;  
24.     range-&gt;pgend = end;  
25.     range-&gt;purged = purged;  
26.   
27.     list_add_tail(&amp;range-&gt;unpinned, &amp;prev_range-&gt;unpinned);  
28.   
29.     if (range_on_lru(range))  
30.         lru_add(range);  
31.   
32.     return 0;  
33. }  
       这个函数的作用是从slab 缓冲区中ashmem_range_cachep分配一个ashmem_range，然后对它作相应的初始化，放在相应的ashmem_area-&gt;unpinned_list列表中，并且还要判断这个range的purged是否是ASHMEM_NOT_PURGED状态，如果是，还要把它放在lru列表中：
1. static inline void lru_add(struct ashmem_range *range)  
2. {  
3.     list_add_tail(&amp;range-&gt;lru, &amp;ashmem_lru_list);  
4.     lru_count += range_size(range);  
5. }  
    这样，ashmem_unpin的源代码我们就分析完了。
    接着，我们再来看一下ASHMEM_PIN操作，进入到ashmem_pin函数：
1. /* 
2.  * ashmem_pin - pin the given ashmem region, returning whether it was 
3.  * previously purged (ASHMEM_WAS_PURGED) or not (ASHMEM_NOT_PURGED). 
4.  * 
5.  * Caller must hold ashmem_mutex. 
6.  */  
7. static int ashmem_pin(struct ashmem_area *asma, size_t pgstart, size_t pgend)  
8. {  
9.     struct ashmem_range *range, *next;  
10.     int ret = ASHMEM_NOT_PURGED;  
11.   
12.     list_for_each_entry_safe(range, next, &amp;asma-&gt;unpinned_list, unpinned) {  
13.         /* moved past last applicable page; we can short circuit */  
14.         if (range_before_page(range, pgstart))  
15.             break;  
16.   
17.         /* 
18.          * The user can ask us to pin pages that span multiple ranges, 
19.          * or to pin pages that aren't even unpinned, so this is messy. 
20.          * 
21.          * Four cases: 
22.          * 1. The requested range subsumes an existing range, so we 
23.          *    just remove the entire matching range. 
24.          * 2. The requested range overlaps the start of an existing 
25.          *    range, so we just update that range. 
26.          * 3. The requested range overlaps the end of an existing 
27.          *    range, so we just update that range. 
28.          * 4. The requested range punches a hole in an existing range, 
29.          *    so we have to update one side of the range and then 
30.          *    create a new range for the other side. 
31.          */  
32.         if (page_range_in_range(range, pgstart, pgend)) {  
33.             ret |= range-&gt;purged;  
34.   
35.             /* Case #1: Easy. Just nuke the whole thing. */  
36.             if (page_range_subsumes_range(range, pgstart, pgend)) {  
37.                 range_del(range);  
38.                 continue;  
39.             }  
40.   
41.             /* Case #2: We overlap from the start, so adjust it */  
42.             if (range-&gt;pgstart &gt;= pgstart) {  
43.                 range_shrink(range, pgend + 1, range-&gt;pgend);  
44.                 continue;  
45.             }  
46.   
47.             /* Case #3: We overlap from the rear, so adjust it */  
48.             if (range-&gt;pgend &lt;= pgend) {  
49.                 range_shrink(range, range-&gt;pgstart, pgstart-1);  
50.                 continue;  
51.             }  
52.   
53.             /* 
54.              * Case #4: We eat a chunk out of the middle. A bit 
55.              * more complicated, we allocate a new range for the 
56.              * second half and adjust the first chunk's endpoint. 
57.              */  
58.             range_alloc(asma, range, range-&gt;purged,  
59.                     pgend + 1, range-&gt;pgend);  
60.             range_shrink(range, range-&gt;pgstart, pgstart - 1);  
61.             break;  
62.         }  
63.     }  
64.   
65.     return ret;  
66. }  
    前面我们说过，被pin的内存块，必须是在unpinned_list列表中的，如果不在，就什么都不用做。要判断要pin的内存块是否在unpinned_list列表中，又要通过遍历相应的asma-&gt;unpinned_list列表来找出与之相交的内存块了。这个函数的处理方法大体与前面的ashmem_unpin函数是一致的，也是要考虑四种不同的相交情况，这里就不详述了，读者可以自己分析一下。
    这里我们只看一下range_shrink函数的实现：
1. /* 
2.  * range_shrink - shrinks a range 
3.  * 
4.  * Caller must hold ashmem_mutex. 
5.  */  
6. static inline void range_shrink(struct ashmem_range *range,  
7.                 size_t start, size_t end)  
8. {  
9.     size_t pre = range_size(range);  
10.   
11.     range-&gt;pgstart = start;  
12.     range-&gt;pgend = end;  
13.   
14.     if (range_on_lru(range))  
15.         lru_count -= pre - range_size(range);  
16. }  
    这个函数的实现很简单，只是调整一下range描述的内存块的起始页面号，如果它是位于lru列表中，还要调整一下在lru列表中的总页面数大小。
    这样，匿名共享内存的ASHMEM_PIN和ASHMEM_UNPIN操作就介绍完了，但是，我们还看不出来Ashmem驱动程序是怎么样辅助内存管理 系统来有效管理内存的。有了前面这些unpinned的内存块列表之后，下面我们就看一下Ashmem驱动程序是怎么样辅助内存管理系统来有效管理内存 的。
    首先看一下Ashmem驱动程序模块初始化函数ashmem_init：
1. static struct shrinker ashmem_shrinker = {  
2.     .shrink = ashmem_shrink,  
3.     .seeks = DEFAULT_SEEKS * 4,  
4. };  
5.   
6. static int __init ashmem_init(void)  
7. {  
8.     int ret;  
9.   
10.     ......  
11.   
12.     register_shrinker(&amp;ashmem_shrinker);  
13.   
14.     printk(KERN_INFO &quot;ashmem: initialized\n&quot;);  
15.   
16.     return 0;  
17. }  
    这里通过调用register_shrinker函数向内存管理系统注册一个内存回收算法函数。在Linux内核中，当系统内存紧张时，内存管理系统就会进行内存回收算法，将一些最近没有用过的内存换出物理内存去，这样可以增加物理内存的供应。因此，当内存管理系统进行内存回收时，就会调用到这里的ashmem_shrink函数，让Ashmem驱动程序执行内存回收操作：
1. /* 
2.  * ashmem_shrink - our cache shrinker, </rich_text><rich_text foreground="#ffff00000000">called from mm/vmscan.c :: shrink_slab</rich_text><rich_text> 
3.  * 
4.  * 'nr_to_scan' is the number of objects (pages) to prune, or 0 to query how 
5.  * many objects (pages) we have in total. 
6.  * 
7.  * 'gfp_mask' is the mask of the allocation that got us into this mess. 
8.  * 
9.  * Return value is the number of objects (pages) remaining, or -1 if we cannot 
10.  * proceed without risk of deadlock (due to gfp_mask). 
11.  * 
12.  * We approximate LRU via least-recently-unpinned, jettisoning unpinned partial 
13.  * chunks of ashmem regions LRU-wise one-at-a-time until we hit 'nr_to_scan' 
14.  * pages freed. 
15.  */  
16. static int ashmem_shrink(int nr_to_scan, gfp_t gfp_mask)  
17. {  
18.     struct ashmem_range *range, *next;  
19.   
20.     /* We might recurse into filesystem code, so bail out if necessary */  
21.     if (nr_to_scan &amp;&amp; !(gfp_mask &amp; __GFP_FS))  
22.         return -1;  
23.     if (!nr_to_scan)  
24.         return lru_count;  
25.   
26.     mutex_lock(&amp;ashmem_mutex);  
27.     list_for_each_entry_safe(range, next, &amp;ashmem_lru_list, lru) {  
28.         struct inode *inode = range-&gt;asma-&gt;file-&gt;f_dentry-&gt;d_inode;  
29.         loff_t start = range-&gt;pgstart * PAGE_SIZE;  
30.         loff_t end = (range-&gt;pgend + 1) * PAGE_SIZE - 1;  
31.   
32.         vmtruncate_range(inode, start, end);  
33.         range-&gt;purged = ASHMEM_WAS_PURGED;  
34.         lru_del(range);  
35.   
36.         nr_to_scan -= range_size(range);  
37.         if (nr_to_scan &lt;= 0)  
38.             break;  
39.     }  
40.     mutex_unlock(&amp;ashmem_mutex);  
41.   
42.     return lru_count;  
43. }  
    这里的参数nr_to_scan表示要扫描的页数，如果是0，则表示要查询一下，当前Ashmem驱动程序有多少页面可以回收，这里就等于挂在lru列表的内块页面的总数了，即lru_count；否则，就要开始扫描lru列表，从中回收内存了，直到回收的内存页数等于nr_to_scan，或者已经没有内存可回收为止。回收内存页面是通过vm_truncate_range函数进行的，这个函数定义在kernel/common/mm/memory.c文件中，它是Linux内核内存管理系统实现的，有兴趣的读者可以研究一下。
    这样，Android系统匿名共享内存Ashmem驱动程序源代码就分析完了，在下一篇文章中，我们将继续分析Android系统的匿名共享内存机制，研究它是如何通过Binder进程间通信机制实现在不同进程程进行内存共享的，敬请关注。
</rich_text></node><node name="在进程间共享的原理分析 " prog_lang="custom-colors" readonly="False" tags="" unique_id="32"><rich_text>    在前面一篇文章</rich_text><rich_text link="webs http://blog.csdn.net/luoshengyang/article/details/6664554">Android系统匿名共享内存Ashmem（Anonymous Shared Memory）驱动程序源代码分析</rich_text><rich_text>中，我们系统地介绍了Android系统匿名共享内存的实现原理，其中着重介绍了它是如何辅助内存管理系统来有效地管理内存的，在再前面一篇文章</rich_text><rich_text foreground="#000000" link="webs http://blog.csdn.net/luoshengyang/article/details/6651971">Android系统匿名共享内存Ashmem（Anonymous Shared Memory）简要介绍和学习计划</rich_text><rich_text>中，我们还提到，Android系统匿名共享内存的另外一特点是通过Binder进程间通信机制来实现进程间共享的，本文中，将详细介绍Android系统匿名共享内存是如何使用Binder进程间通信机制来实现进程间共享的。
    由于Android系统匿名共享内存在进程间共享的原理涉及到Binder进程间通信机制的相关知识，所以希望读者在继续阅读本文之前，最好对Android系统的Binder进程间通信机制有一定的了解，具体可以参考</rich_text><rich_text link="webs http://blog.csdn.net/luoshengyang/article/details/6618363">Android进程间通信（IPC）机制Binder简要介绍和学习计划</rich_text><rich_text>这篇文章。
    在</rich_text><rich_text link="webs http://blog.csdn.net/luoshengyang/article/details/6651971">Android系统匿名共享内存Ashmem（Anonymous Shared Memory）简要介绍和学习计划</rich_text><rich_text>这 篇文章中，我们举了一个例子来简要地介绍了Android系统的匿名共享内存机制及其使用方法，在这篇文章中，我们继续以这个实例来说明Android系 统的匿名共享内存是如何使用Binder进程间通信机制来实现进程间共享的。为了方便描述，结合前面的Binder进程间通信机制知识，我们通过下面这个 序列图来总结这个实例中的匿名共享内存文件的文件描述符在进程间传输的过程：
</rich_text><rich_text justification="left"></rich_text><rich_text>

         这里，  我们需要关注的便是虚线框部分了，它在Binder驱动程序中实现了在两个进程中共享同一个打开文件的方法。我们知道，在Linux系统中，文件描述符其实就是一个整数。每一个进程在内核空间都有一个打开文件的数组，这个文件描述符的整数值就是用来索引这个数组的，而且，这个文件描述符只是在本进程内有效，也就是说，在不同的进程中，相同的文件描述符的值，代表的可能是不同的打开文件。因此，在进程间传输文件描述符时，不能简要地把一个文件描述符从一个进程传给另外一个进程，中间必须做一过转换，使得这个文件描述在目标进程中是有效的，并且它和源进程的文件描述符所对应的打开文件是一致的，这样才能保证共享。
        在</rich_text><rich_text link="webs http://blog.csdn.net/luoshengyang/article/details/6621566">浅谈Service Manager成为Android进程间通信（IPC）机制Binder守护进程之路</rich_text><rich_text>一文中，我们介绍了用来传输的Binder对象的数据结构struct flat_binder_object，它定义在kernel/common/drivers/staging/android/binder.h 文件中：
1. /* 
2.  * This is the flattened representation of a Binder object for transfer 
3.  * between processes.  The 'offsets' supplied as part of a binder transaction 
4.  * contains offsets into the data where these structures occur.  The Binder 
5.  * driver takes care of re-writing the structure type and data as it moves 
6.  * between processes. 
7.  */  
8. struct flat_binder_object {  
9.     /* 8 bytes for large_flat_header. */  
10.     unsigned long       type;  
11.     unsigned long       flags;  
12.   
13.     /* 8 bytes of data. */  
14.     union {  
15.         void        *binder;    /* local object */  
16.         signed long handle;     /* remote object */  
17.     };  
18.   
19.     /* extra data associated with local object */  
20.     void            *cookie;  
21. };  
        域type是一个枚举类型，它的取值范围是：
1. enum {  
2.     BINDER_TYPE_BINDER  = B_PACK_CHARS('s', 'b', '*', B_TYPE_LARGE),  
3.     BINDER_TYPE_WEAK_BINDER = B_PACK_CHARS('w', 'b', '*', B_TYPE_LARGE),  
4.     BINDER_TYPE_HANDLE  = B_PACK_CHARS('s', 'h', '*', B_TYPE_LARGE),  
5.     BINDER_TYPE_WEAK_HANDLE = B_PACK_CHARS('w', 'h', '*', B_TYPE_LARGE),  
6.     BINDER_TYPE_FD      = B_PACK_CHARS('f', 'd', '*', B_TYPE_LARGE),  
7. };  
        这里我们要介绍的Binder对象的type便是BINDER_TYPE_FD了，要传输的文件描述符的值保存在handle域中。
        在</rich_text><rich_text link="webs http://blog.csdn.net/luoshengyang/article/details/6629298">Android系统进程间通信（IPC）机制Binder中的Server启动过程源代码分析</rich_text><rich_text>一文中，我们详细介绍了Binder对象在进程间通信传输的完整过程，这里就不再详述了，有兴趣的读都可以回过头去参考一下。这里，我们只关注文件描述符类型的Binder对象在Binder驱动程序中的相关处理逻辑。
        文件描述符类型的Binder对象在Binder驱动程序中的相关处理逻辑实现在binder_transact函数，这个函数定义在kernel/common/drivers/staging/android/binder.c文件中：
1. static void  
2. binder_transaction(struct binder_proc *proc, struct binder_thread *thread,  
3. struct binder_transaction_data *tr, int reply)  
4. {  
5.     struct binder_transaction *t;  
6.     struct binder_work *tcomplete;  
7.     size_t *offp, *off_end;  
8.     struct binder_proc *target_proc;  
9.     struct binder_thread *target_thread = NULL;  
10.     struct binder_node *target_node = NULL;  
11.     struct list_head *target_list;  
12.     wait_queue_head_t *target_wait;  
13.     struct binder_transaction *in_reply_to = NULL;  
14.     struct binder_transaction_log_entry *e;  
15.     uint32_t return_error;  
16.   
17.     ......  
18.       
19.   
20.     offp = (size_t *)(t-&gt;buffer-&gt;data + ALIGN(tr-&gt;data_size, sizeof(void *)));  
21.   
22.     ......  
23.   
24.     off_end = (void *)offp + tr-&gt;offsets_size;  
25.     for (; offp &lt; off_end; offp++) {  
26.         struct flat_binder_object *fp;  
27.         ......  
28.         fp = (struct flat_binder_object *)(t-&gt;buffer-&gt;data + *offp);  
29.         switch (fp-&gt;type) {  
30.         ......  
31.         case BINDER_TYPE_FD: {  
32.             int target_fd;  
33.             struct file *file;  
34.   
35.             if (reply) {  
36.                 if (!(in_reply_to-&gt;flags &amp; TF_ACCEPT_FDS)) {  
37.                     binder_user_error(&quot;binder: %d:%d got reply with fd, %ld, but target does not allow fds\n&quot;,  
38.                                     proc-&gt;pid, thread-&gt;pid, fp-&gt;handle);  
39.                     return_error = BR_FAILED_REPLY;  
40.                     goto err_fd_not_allowed;  
41.                 }  
42.             } else if (!target_node-&gt;accept_fds) {  
43.                 binder_user_error(&quot;binder: %d:%d got transaction with fd, %ld, but target does not allow fds\n&quot;,  
44.                                 proc-&gt;pid, thread-&gt;pid, fp-&gt;handle);  
45.                 return_error = BR_FAILED_REPLY;  
46.                 goto err_fd_not_allowed;  
47.             }  
48.   
49.             file = fget(fp-&gt;handle);  
50.             if (file == NULL) {  
51.                 binder_user_error(&quot;binder: %d:%d got transaction with invalid fd, %ld\n&quot;,  
52.                                     proc-&gt;pid, thread-&gt;pid, fp-&gt;handle);  
53.                 return_error = BR_FAILED_REPLY;  
54.                 goto err_fget_failed;  
55.             }  
56.             target_fd = task_get_unused_fd_flags(target_proc, O_CLOEXEC);  
57.             if (target_fd &lt; 0) {  
58.                 fput(file);  
59.                 return_error = BR_FAILED_REPLY;  
60.                 goto err_get_unused_fd_failed;  
61.             }  
62.             task_fd_install(target_proc, target_fd, file);  
63.             if (binder_debug_mask &amp; BINDER_DEBUG_TRANSACTION)  
64.                     printk(KERN_INFO &quot;        fd %ld -&gt; %d\n&quot;, fp-&gt;handle, target_fd);  
65.             /* TODO: fput? */  
66.             fp-&gt;handle = target_fd;  
67.         } break;  
68.   
69.         ......  
70.         }  
71.     }  
72.       
73.     ......  
74.   
75. }  
    这里，我们先明确一下在</rich_text><rich_text link="webs http://blog.csdn.net/luoshengyang/article/details/6651971">Android系统匿名共享内存Ashmem（Anonymous Shared Memory）简要介绍和学习计划</rich_text><rich_text>这篇文章中所举的例子获取匿名共享内存文件的文件描述符的场景。匿名共享内存文件是在Server进程创建的，Client通过IMemoryService.getFileDescriptor去获取Server进程所创建的匿名共享内存文件的文件描述符，Server进程在返回这个文件描述符的过程中进入到Binder驱动程序，即这里的binder_transact函数。因此，这里的当前执行binder_transact函数的进程是Server进程，即源进程是Server进程，而目标进程是Client进程，就是这里的target_proc所表示的进程了。
    函数binder_transaction处理文件描述符类型的Binder对象就在中间的for循环里面。
    首先是获得Binder对象，并保存在本地变量fp中：
    1. fp = (struct flat_binder_object *)(t-&gt;buffer-&gt;data + *offp);  
       
    文件描述符的值就保存在fp-&gt;handle中，通过fget函数取回这个文件描述符所对应的打开文件结构：
    1. file = fget(fp-&gt;handle);  
    这里的file是一个struct file指针，它表示一个打开文件结构。注间，在Linux系统中，打开文件结构struct file是可以在进程间共享的，它与文件描述符不一样。
       
    接着在目标进程中获得一个空闲的文件描述符：
    1. target_fd = task_get_unused_fd_flags(target_proc, O_CLOEXEC);  
    
    现在，在目标进程中，打开文件结构有了，文件描述符也有了，接下来就可以把这个文件描述符和这个打开文件结构关联起来就可以了：
    1. task_fd_install(target_proc, target_fd, file);  

</rich_text><rich_text weight="heavy">drivers/staging/android/binder.c</rich_text><rich_text>
/*
 * copied from fd_install
 */
static void task_fd_install(
	struct binder_proc *proc, unsigned int fd, struct file *file)
{
	struct files_struct *files = proc-&gt;files;
	struct fdtable *fdt;

	if (files == NULL)
		return;

	spin_lock(&amp;files-&gt;file_lock);
	fdt = files_fdtable(files);
	BUG_ON(fdt-&gt;fd[fd] != NULL);
	rcu_assign_pointer(fdt-&gt;fd[fd], file);
	spin_unlock(&amp;files-&gt;file_lock);
}
    
    由于这个Binder对象最终是要返回给目标进程的，所以还要修改fp-&gt;handle的值，它原来表示的是在源进程中的文件描述符，现在要改成目标进程的文件描述符：
    1. fp-&gt;handle = target_fd;  
    
    这样，对文件描述符类型的Binder对象的处理就完成了。目标进程拿到这个文件描述符后，就可以和源进程一起共享打开文件了。
    至此，Android系统匿名共享内存利用Binder进程间通信机制来实现进程间共享的学习就结束了，整个Android系统匿名共享内存机制的学习也完成了，希望对读者有所帮助，重新学习Android系统匿名共享内存机制请回到</rich_text><rich_text link="webs http://blog.csdn.net/luoshengyang/article/details/6651971">Android系统匿名共享内存Ashmem（Anonymous Shared Memory）简要介绍和学习计划</rich_text><rich_text>一文。
</rich_text><encoded_png char_offset="689"></encoded_png></node></node><node name="android启动流程" prog_lang="custom-colors" readonly="False" tags="" unique_id="1"><rich_text>
</rich_text><node name="bootloader" prog_lang="custom-colors" readonly="False" tags="" unique_id="2"><rich_text>摘要：本文讲解Android系统在启动过程中的关键动作，摈弃特定平台之间的差异，讨论共性的部分，至于启动更加详细的过程，需要结合代码分析，这里给出流程框架，旨在让大家对开机过程更明了。
 
关键词：U-boot、Linux、Android
 
目录：
       第一部分：Bootloader启动
一、Bootloader的定义和种类
二、Arm特定平台的Bootloader
三、U-boot启动流程分析
 
       第二部分：Linux启动
一、zImage是怎样炼成的？
二、linux的c启动阶段
 
       第三部分：Android启动
一、init进程
二、init启动的各种服务
              三、android启动图示
              
       对于Android整个启动过程来说，基本可以划分成三个阶段：Bootloader引导、Linux kernel启动、Android启动。下面分别对每个阶段一一展开讨论。
 
第一部分：Bootloader启动
一、             Bootloader的定义和种类
简单地说，BootLoader是在操作系统运行之前运行的一段程序，它可以将系统的软硬件
环境带到一个合适状态，为运行操作系统做好准备。这样描述是比较抽象的，但是它的任务确实不多，终极目标就是把OS拉起来运行。
 
在嵌入式系统世界里存在各种各样的Bootloader，种类划分也有多种方式。除了按照处
理器体系结构不同划分以外，还有功能复杂程度的不同。
先区分一下Bootloader和</rich_text><rich_text link="webs http://blog.csdn.net/lizhiguo0532/article/details/7017503#_msocom_1">Monitor[l1] </rich_text><rich_text>： 严格来说，Bootloader只是引导OS运行起来的代
码；而Monitor另外还提供了很多的命令行接口，可以进行调试、读写内存、烧写Flash、配置环境变量等。在开发过程中Monitor提供了 很好地调试功能，不过在开发结束之后，可以完全将其设置成一个Bootloader。所以习惯上将其叫做Bootloader。
 
 
</rich_text><rich_text justification="left"></rich_text><rich_text>

       更多bootloader还有：ROLO、Etherboot、ARMboot 、LinuxBIOS等。
       
       对于每种体系结构，都有一系列开放源码Bootloader可以选用:
       X86：X86的工作站和服务器上一般使用LILO和GRUB。
       ARM：最早有为ARM720处理器开发板所做的固件，又有了armboot，StrongARM平
台的blob，还有S3C2410处理器开发板上的vivi等。现在armboot已经并入了U-Boot，所以U-Boot也支持ARM/XSCALE平台。U-Boot已经成为ARM平台事实上的标准Bootloader。
       PowerPC：最早使用于ppcboot，不过现在大多数直接使用U-boot。
       MIPS：最早都是MIPS开发商自己写的bootloader，不过现在U-boot也支持MIPS架构。
       M68K：Redboot能够支持m68k系列的系统。
       
二、             Arm特定平台的bootloader
到目前为止，我们公司已经做过多个Arm平台的android方案，包括：marvell(pxa935)、
informax(im9815)、mediatek(mt6516/6517)、broadcom(bcm2157)。由于不同处理器芯片厂商对 arm  core的封装差异比较大，所以不同的arm处理器，对于上电引导都是由特定处理器芯片厂商自己开发的程序，这个上电引导程序通常比较简单，会初始化硬 件，提供下载模式等，然后才会加载通常的bootloader。
下面是几个arm平台的bootloader方案：
marvell(pxa935) :                bootROM + </rich_text><rich_text link="webs http://blog.csdn.net/lizhiguo0532/article/details/7017503#_msocom_4">OBM [l4] </rich_text><rich_text>+ BLOB
informax(im9815) :             bootROM + barbox + U-boot
mediatek(mt6516/6517) :     bootROM + </rich_text><rich_text link="webs http://blog.csdn.net/lizhiguo0532/article/details/7017503#_msocom_5">pre-loader[l5]</rich_text><rich_text>  + U-boot
broadcom(bcm2157) :          bootROM + boot1/boot2 + U-boot
 
为了明确U-boot之前的两个loader的作用，下面以broadcom平台为例，看下在上电之
后到U-boot的流程，如图1.2.1：
</rich_text><rich_text justification="left"></rich_text><rich_text>
                                          图1.2.1 broadcom平台上电流程
 
 
三、             U-boot启动流程分析
最常用的bootloader还是U-boot，可以引导多种操作系统，支持多种架构的CPU。它支持的操作系统有：Linux、NetBSD、 VxWorks、QNX、RTEMS、ARTOS、LynxOS等，支持的CPU架构有：ARM、PowerPC、MISP、X86、NIOS、 Xscale等。
 
手机系统不像其他的嵌入式系统，它还需要在启动的过程中关心CP的启动，这个时候就涉及到CP的image和唤醒时刻，而一般的嵌入式系统的uboot只负责引导OS内核。所以这里我们也暂不关心CP的启动，而主要关心AP侧。
从上面第二小节中可以看出，bootloader通常都包含有处理器厂商开发的上电引导程序，不过也不是所有的处理都是这样，比如三星的 S3C24X0系列，它的bootROM直接跳到U-boot中执行，首先由bootROM将U-boot的前4KB拷贝到处理器ISRAM，接着在U- boot的前4KB中必须保证要完成的两项主要工作：初始化DDR，nand和nand控制器，接着将U-boot剩余的code拷贝到SDRAM中，然 后跳到SDRAM的对应地址上去继续跑U-boot。
所以</rich_text><rich_text link="webs http://blog.csdn.net/lizhiguo0532/article/details/7017503#_msocom_6">U-boot[l6] </rich_text><rich_text>的启动过程，大致上可以分成两个阶段：第一阶段，汇编代码；第二阶段，c代码。
       
3.1 第一阶段
       U-boot的第一条指令从cpu/arm920t/start.S文件开始，第一阶段主要做了如下事情：
       
       1. 设置CPU进入SVC模式(系统管理模式)，cpsr[4:0]=0xd3。
       2. 关中断，INTMSK=0xFFFFFFFF, INTSUBMSK=0x3FF。
       3. 关看门狗，WTCON=0x0。
4. 调用s3c2410_cache_flush_all函数，使TLBS，I、D Cache，WB中数据失效。
5. 时钟设置CLKDIVN=0x3 , FCLK:HCLK:PCLK = 1:2:4。
6. 读取mp15的c1寄存器，将最高两位改成11，表示选择了异步时钟模型。
7. 检查系统的复位状态，以确定是不是从睡眠唤醒。
8.  ldr r0,_TEXT_BASE
    adr r1,_start
    cmp r0,r1
    blne cpu_init_crit
    根据这几条语句来判断系统是从nand启动的还是直接将程序下载到SDRAM中运行
的，这里涉及到</rich_text><rich_text link="webs http://blog.csdn.net/lizhiguo0532/article/details/7017503#_msocom_7">运行时域[l7] </rich_text><rich_text>和 位置无关代码的概念，ldr  r0,_TEXT_BASE的作用是将board/nextdvr2410/config.mk文件中定义的TEXT_BASE值 （0x33f80000）装载到r0中，adr  r1,_start该指令是条伪指令，在编译的时候会被转换成ADD或SUB指令根据当前pc值计算出_start标号的地址，这样的话就可以知道当前程 序在什么地址运行（位置无关代码：做成程序的所有指令都是相对寻址的指令，包括跳转指令等，这样代码就可以不在链接所指定的地址上运行）。在上电之后，系 统从nand启动，这里得到r0和r1值是不一样的，r0=0x33f80000，而r1=0x00000000。所以接下来会执行 cpu_init_crit函数。
 
9. cpu_init_crit函数，主要完成了两个工作：首先使ICache and Dcache，TLBs中早期内容失效，再设置p15  control register c1，关闭MMU，Dcache，但是打开了Icache和Fault  checking，（要求mmu和Dcache是必须要关闭的，而Icache可以打开可以关闭）；其次调用/board/nextdvr2410 /memsetup.S文件中的memsetup函数来建立对SDRAM的访问时序。
 
10. Relocate函数，加载nand flash中的uboot到SDRAM中，代码会加载到0x33f80000开始的地址，空间大小是512。
1). ndf2ram函数
a.  设置NFCONF，使能2410的nand 控制器，初始化ECC，disable chip等
b.  enable chip，复位chip，读nand状态，判断是否busy，空闲的话再次disable chip；
c.  为调用c函数准备堆栈空间，这里的堆栈是放在uboot代码在SDRAM空间的最后位置armboot_end开始的128KB地址处（包含3 words for abort-stack，实际的SP位置是128*1024-12B处）。
d.  调用c函数copy_uboot_to_ram():nandll_reset()  设置NFCONF（新增设置了时间参数，其余设置和前面一样），复位nand  flash；nandll_read_blocks(),传递了3个参数给它，0x33f80000,0x0,  9*NAND_BLOCK_SIZE.这里在读的过程中检查每个块的坏块标志，如果是坏块，则跳过不读。详情不叙，请看uboot的注释。该部分的c代码 在cpu/arm920t/Nand_cp.c文件中
e.  ok_nand_read函数：读取SDRAM的前4k内容和SRAM的4K内容进行比较，只要出现不一样的地方就会进入死循环状态，目的就是为了确保转移代码的正确性。
f.  跳回到调用ndf2ram函数处继续执行

2). ldr pc, _start_armboot
    _start_armboot: .word start_armboot
    这里将会进入第二阶段的c代码部分：start_armboot()函数，/lib_arm/board.c。
 
3.2 第二阶段
    第二阶段从文件/lib_arm/board.c的start_armboot()函数开始。
    
1.     定义一个struct global_data结构体指针gd，struct global_data结构体对象gd_data，
    定义一个struct bd_info结构体对象bd_data，
    定义一个指向函数的二级指针init_fnc_ptr，
    定义的全局结构体对象都是放在堆栈中的,gd是放在寄存器中的。
2.     gd=&amp;gd_data，gd-&gt;bd = &amp;bd_data，并且全部空间清0。
3.     init_fnc_ptr = init_sequence(一个初始化函数指针数组)。将会在接下来的for循环中提取出每一个函数来依次执行完。
init_fnc_t *init_sequence[] = {
    cpu_init,       /* 基本的处理器相关配置 -- cpu/arm920t/cpu.c */
    board_init,         
/* 基本的板级相关配置 -- board/nextdvr2410/nextdvr2410.c */
    interrupt_init,/* 初始化中断处理 -- cpu/arm920t/interrupt.c */
    env_init,       /* 初始化环境变量 -- common/env_flash.c */
    init_baudrate,  /* 初始化波特率设置 -- lib_arm/board.c */
    serial_init,    /* 串口通讯设置 -- cpu/arm920t/serial.c */
    console_init_f,/* 控制台初始化阶段1 -- common/console.c */
    display_banner,/* 打印u-boot信息 -- lib_arm/board.c */
    dram_init,  /* 配置可用的RAM -- board/nextdvr2410/nextdvr2410.c */
    display_dram_config,/* 显示RAM的配置大小 -- lib_arm/board.c */
#if defined(CONFIG_VCMA9)
         checkboard,     /* display board info */
#endif
    NULL,
};

cpu_init：根据需要设定IRQ，FIR堆栈。如果使用中断的话，中断堆栈就接在后面。 
board_init：设置LOCKTIME，配置MPLL，UPLL，配置IO  ports，设置gd-&gt;bd-&gt;bi_arch_number（553），gd-&gt;bd-&gt;bi_boot_params =  0x30000100设置boot参数地址，使能Icache和Dcache。
interrupt_init：使用timer 4来作为系统clock， 即时钟滴答， 10ms一次，到点就产生一个中断，但由于此时中断还没打开所以这个中断不会响应。
env_init：该函数主要做关于环境变量的工作，这个环境变量可以不用存放在nor或者nand  flash上，直接在内存中生成(default_environment)。不过对于那些掉电需要保存的参数来说，保存在flash上无疑是最可靠的方 式。有的uboot还支持冗余存储，也就是存两份做备份。
        在env初始化的时候，是通过env_init—&gt;nandll_read_blocks将位于nand第9块上的环境变量（16K）全部读入到0x33ef0000这个起始地址中来，在接下来将堆空间分配好之后，在函数env_relocate中，通过 在堆中获得一块区域来存放环境变量，env_ptr指向这块区域，接下来所谓的重新获得环境变量无非就是将原来0x33ef0000开始的16K数据拷贝 到env_ptr所指的区域中去。这里分第一次uboot启动（泛指只要在第一次运行saveenv指令之前所启动的uboot过程）和保存过环境变量的 情况，但实质是一样的，所不同的是，第一次uboot启动，nand第9块区域中的数据肯定不是什么环境变量，所以这是的crc校验肯定出错，所以这时系 统使用了默认的环境变量，但是只要这个默认的环境变量没有写到nand中(运行saveenv)的话，uboot的每次启动都被认为是第一次启动。而保存 过环境变量之后的话，在执行env_init的时候，就是从nand中读出了实际存在的环境变量参数，至于修不修改环境变量，保不保存，都没有上面的那种 情况出现了。
 
    init_baudrate：第一次启动uboot的时候，采用nextdvr2410nand.h中定义的115200默认波特率，后面的启动如果说在参数里设置了新的波特率的话就会用新的波特率来初始化。    
    display_banner：打印uboot的一些信息，版本信息：NC-Boot 1.5 日期-时间 ，coed范围，bss开始地址，IRQ、FIR堆栈地址。
    dram_init: gd-&gt;bd-&gt;bi_dram[0].start = PHYS_SDRAM_1;
    
    gd-&gt;bd-&gt;bi_dram[0].size  = PHYS_SDRAM_1_SIZE;设置板级数据中
    的SDRAM开始地址和大小
    display_dram_config：打印SDRAM的配置信息，如下：
                    …
    RAM Configuration:
    Bank#0: 30000000 64 MB
    …
    Checkboard: NULL
 
4.     配置可用的flash空间，并且打印出相关信息，flash_init()和display_flash_config()。
 
5.     mem_malloc_init()函数,分配堆空间
    CFG_MALLOC_LEN = 16K(CFG_ENV_SIZE)+128K
    mem_malloc_start = _armboot_start(0x33f80000)- CFG_MALLOC_LEN
    mem_malloc_end = _armboot_start(0x33f80000)
 
6.     env_relocate该函数的作用是将0x33ef0000开始16K的环境参数拷贝到堆空间中去。
 
7.    gd-&gt;bd-&gt;bi_ip_addr = getenv_IPaddr  (&quot;ipaddr&quot;)通过这中方式获得环境变量列表中的ipaddr参数（开发板ip），获得环境变量中的MAC地址，设置到 gd-&gt;bd-&gt;bi_enetaddr[reg]中。
8.     devices_init函数，创建了devlist，但是只有一个串口设备注册在内。
9.     console_init_r函数：控制台完全初始化，此后可以使用函数serial_getc和serial_putc或者putc和getc来输出log。
 
10.  使能中断，如果有网卡设备，设置网卡MAC和IP地址。
 
11.  main_loop ()；定义于common/main.c。到此所有的初始化工作已经完成，main_loop在标准输入设备中接受命令，然后分析，查找和执行。
去掉所有无关紧要的宏和代码，main_loop()函数如下：
void main_loop()
{
    static char lastcommand[CFG_CBSIZE] = { 0, };
    int len;
    int rc = 1;
    int flag;
    char *s;
    int bootdelay;
 
    s = getenv (&quot;bootdelay&quot;);   //自动启动内核等待延时
    bootdelay = 
        s ? (int)simple_strtol(s, NULL, 10) : CONFIG_BOOTDELAY;
     
    s = getenv (&quot;bootcmd&quot;);  //取得环境中设置的启动命令行    
    if (bootdelay &gt;= 0 &amp;&amp; s &amp;&amp; !abortboot (bootdelay)){
        run_command (s, 0);
        //执行启动命令行,smdk2410.h中没有定义CONFIG_BOOTCOMMAND，所以没有命令执行。
    }
    
    for (;;) {
        len = readline(CFG_PROMPT);
        //读取键入的命令行到console_buffer
         
         flag = 0;       /* assume no special flags for now */
         if (len &gt; 0)
             strcpy (lastcommand, console_buffer);
            //拷贝命令行到lastcommand.
         else if (len == 0)
             flag |= CMD_FLAG_REPEAT;
             if (len == -1)
             puts (&quot;\n&quot;);
         else
             rc = run_command (lastcommand, flag);　//执行这个命令行。
   
     if (rc &lt;= 0) {
      /* invalid command or not repeatable, forget it */
      lastcommand[0] = 0;
    }
}
12.  在上面的main_loop函数中，通常在开发完成的阶段都会设置一个bootcmd的环境
变量，然后将延时bootdelay设置成0，这样当u-boot跑到这里的时候就不会因为用户按下了任意键就进入了命令行模式，可以直接运行 bootcmd的命令来直接加载kernel的Image然后移交控制权。如果进入了命令行模式，我们也可以手动输入命令来启动系统，输入的命令也是基本 和bootcmd一样。
 
不过值得一提的是，从这里开始到引导内核的函数do_bootimg_linux()之前，不同
厂商之间做的都和原始的U-boot代码差别挺大，不过万变不离其宗，都是加载各种各样的Image到SDRAM中，不过关于CP部分的Image 有的厂商是在这里加载，有的是kernel起来后来有kernel来加载，不过都需要加载的Image就是linux  kernel的Image。为了方便，只讨论加载kernel Image的情况。
    
    在继续往下之前，有必要提一下几种不同格式linux kernel编译之后所产生的镜像文件,包括其各种头和ramdisk的混合，容易让人迷糊。
    ramdisk是linux内核启动过程中需要使用的一种临时文件系统，它要么单独编译成ramdisk.img(也有叫initrd或者initramfs)，要么编译进内核。
     Linux编译之后最终会产生zImage文件，不过呢，为了迎合U-boot的要求，所以也有专门为U-boot的引导做一个uImage，这个只是加 了一个U-boot中定义的一个head而已，用于U-boot中检查，当然前面的ramdisk.img也是需要加这个头的，头里面有这个Image的 魔数，大小，类型等信息。现在的android中的u-boot也有要求加头的，他对U-boot进行了改进和优化，做成了自己的一套检查机制，所以现在 android编译出来linux部分的Image的名字叫boot.img。
    这个boot.img是zImage和ramdisk.img合成之后的，而且还加了专门的头，这个head和U-boot原始的不一样，具体的源码路径可以参考：system/core/mkbootimg/。
/*
** +-----------------+ 
** | boot header     | 1 page
** +-----------------+
** | kernel          | n pages  
** +-----------------+
** | ramdisk         | m pages  
** +-----------------+
** | second stage    | o pages
** +-----------------+
**
** n = (kernel_size + page_size - 1) / page_size
** m = (ramdisk_size + page_size - 1) / page_size
** o = (second_size + page_size - 1) / page_size
*/
Android就没有在ramdisk和zImage上单独重复加头了，不过近期做的mtk的平台，他们有点怪，除了上面的额外信息之外，还在这二者上单独加了标志字符串,ROOTFS和KERNEL。    
     了解了上面这些内容之后，对于从nand上加载uImage或者boot.img，都需要经过分离head进行检查，ok之后才会真正地将数据导入 SDRAM。另外别忘了的是，如果ramdisk.img是单独的，那么在加载linux  kernel的镜像的时候也需要将其加载进SDRAM，如果是编译到内核了，那就不用了。

</rich_text><rich_text weight="heavy">build/core/Makefile</rich_text><rich_text>
</rich_text><rich_text foreground="#ffff00000000">BUILT_RAMDISK_TARGET := $(PRODUCT_OUT)/ramdisk.img

# We just build this directly to the install location.
INSTALLED_RAMDISK_TARGET := $(BUILT_RAMDISK_TARGET)
$(INSTALLED_RAMDISK_TARGET): $(MKBOOTFS) $(INTERNAL_RAMDISK_FILES) | $(MINIGZIP)
	$(call pretty,&quot;Target ram disk: $@&quot;)
	$(hide) $(MKBOOTFS) $(TARGET_ROOT_OUT) | $(MINIGZIP) &gt; $@

</rich_text><rich_text foreground="#00000000ffff">MKBOOTFS是mkbootfs
TARGET_ROOT_OUT是out/...../root目录
MINIGZIP是minigzip
</rich_text><rich_text foreground="#ffff00000000">		
INTERNAL_BOOTIMAGE_ARGS := \
	$(addprefix --second ,$(INSTALLED_2NDBOOTLOADER_TARGET)) \
	--kernel $(INSTALLED_KERNEL_TARGET) \
	--ramdisk $(INSTALLED_RAMDISK_TARGET)	
</rich_text><rich_text>
</rich_text><rich_text foreground="#ffff00000000">INTERNAL_BOOTIMAGE_FILES := $(filter-out --%,$(INTERNAL_BOOTIMAGE_ARGS))

BOARD_KERNEL_CMDLINE := $(strip $(BOARD_KERNEL_CMDLINE))
ifdef BOARD_KERNEL_CMDLINE
  INTERNAL_BOOTIMAGE_ARGS += --cmdline &quot;$(BOARD_KERNEL_CMDLINE)&quot;
endif

BOARD_KERNEL_BASE := $(strip $(BOARD_KERNEL_BASE))
ifdef BOARD_KERNEL_BASE
  INTERNAL_BOOTIMAGE_ARGS += --base $(BOARD_KERNEL_BASE)
endif

BOARD_KERNEL_PAGESIZE := $(strip $(BOARD_KERNEL_PAGESIZE))
ifdef BOARD_KERNEL_PAGESIZE
  INTERNAL_BOOTIMAGE_ARGS += --pagesize $(BOARD_KERNEL_PAGESIZE)
endif

INSTALLED_BOOTIMAGE_TARGET := $(PRODUCT_OUT)/boot.img

ifeq ($(TARGET_BOOTIMAGE_USE_EXT2),true)
tmp_dir_for_image := $(call intermediates-dir-for,EXECUTABLES,boot_img)/bootimg
INTERNAL_BOOTIMAGE_ARGS += --tmpdir $(tmp_dir_for_image)
INTERNAL_BOOTIMAGE_ARGS += --genext2fs $(MKEXT2IMG)
$(INSTALLED_BOOTIMAGE_TARGET): $(MKEXT2IMG) $(INTERNAL_BOOTIMAGE_FILES)
	$(call pretty,&quot;Target boot image: $@&quot;)
	$(hide) $(MKEXT2BOOTIMG) $(INTERNAL_BOOTIMAGE_ARGS) --output $@

else # TARGET_BOOTIMAGE_USE_EXT2 != true

$(INSTALLED_BOOTIMAGE_TARGET): $(MKBOOTIMG) $(INTERNAL_BOOTIMAGE_FILES)
	$(call pretty,&quot;Target boot image: $@&quot;)
	$(hide) $(MKBOOTIMG) $(INTERNAL_BOOTIMAGE_ARGS) $(BOARD_MKBOOTIMG_ARGS) --output $@
	$(hide) $(call assert-max-image-size,$@,$(BOARD_BOOTIMAGE_PARTITION_SIZE),raw)
endif # TARGET_BOOTIMAGE_USE_EXT2

else	# TARGET_NO_KERNEL
# HACK: The top-level targets depend on the bootimage.  Not all targets
# can produce a bootimage, though, and emulator targets need the ramdisk
# instead.  Fake it out by calling the ramdisk the bootimage.
# TODO: make the emulator use bootimages, and make mkbootimg accept
#       kernel-less inputs.
INSTALLED_BOOTIMAGE_TARGET := $(INSTALLED_RAMDISK_TARGET)
endif
</rich_text><rich_text>
</rich_text><rich_text foreground="#00000000ffff">MKBOOTIMG是mkbootimg
上面的脚本使用mkbootimg来生成boot.img

</rich_text><rich_text>    
    通常我们的uboot起来之后，我们会运行下面的命令之一来启动内核
tftp 0x30800000 uImage;bootm (地址可选)
或者
nand read 0x30800000 0x40000 0x200000 ; bootm
    
    例如informax的平台u-boot的bootcmd是：
    #define BOOTCMD 
&quot;mcu_clk 260;a7vector_SDRAM;dsp_clk 130;nand read 0x46000000 0x200000 0x400000;boot_from_flash boot&quot;
很明显，原始U-boot中没有boot_from_flash命令，是经过他们改造过的。不过功能基本一样。所以还是以bootm来引导uImage为例来讨论。
 
        bootm命令位于cmd_bootm.c文件中:
        U_BOOT_CMD(
            bootm,  CFG_MAXARGS,    1,  do_bootm,
            &quot;bootm   - boot application image from memory\n&quot;,
            &quot;[addr [arg ...]]\n    - boot application image stored in memory\n&quot;
            &quot;        passing arguments 'arg ...'; when booting a Linux kernel,\n&quot;
            &quot;        'arg' can be the address of an initrd image\n&quot;
);

在将nand上0x40000开始的2MB数据拷贝到SDRAM的0x30800000之后，就开始执行bootm命令，其所做的工作大致如下： 
12.1如果bootm命令没有带地址参数，将会采用默认地址0x30800000，带地址则保存下这个参数地址。
12.2 从SDRAM的0x30800000开始拷贝64字节到一个head结构体中进行crc32校验，校验ok之后将会调用调用函数print_image_hdr()打印出如下信息：
    Image Name:   Linux-2.6.8-rc2-nc-v1
    Created:      2010-05-04   4:14:19 UTC
    Image Type:   ARM Linux Kernel Image (uncompressed)
    Data Size:    1054712 Bytes =  1 MB
    Load Address: 30008000
    Entry Point:  30008000
 
12.3 跳过64字节的head，开始校验kernel的Image数据，校验码ok之后会打印：Verifying Checksum ... OK

12.4 核对cpu类型

12.5 检查Image的类型
 
12.6  禁止中断，检查内核的压缩类型，这里不是指的image和zImage的区别，而是有没有在这基础上进行ZIP或ZIP2的压缩。通常这里是没有这样的压缩的。所以接下来将0x30800000+64B开始的zImage数据搬运到ih_load（0x30008000）处，这个数据就是kernel的 Image数据。
 
12.7 根据head中OS的类型，如果是linux，head中类型值就是IH_OS_LINUX，所以接下来会执行u-boot到kernel的过渡程序。
do_bootm_linux (cmdtp, flag, argc, argv, addr, len_ptr, verify);
 
12.8定义thekernel函数指针，获取bootargs参数给commandline指针。
12.9 theKernel = (void (*)(int, int, uint))ntohl(hdr-&gt;ih_ep)，将内核的入口地址赋给thekernel函数指针。
12.10将传递给内核的参数放在0x30000100处，以tag的方式存放，主要放置了memory和cmdline的参数。
12.11关中断，关闭IDCache,同时使ID Cache数据失效。
12.12再次获取bi_arch_number参数为553。
12.13 theKernel (0, bd-&gt;bi_arch_number, bd-&gt;bi_boot_params)进入内核，第一个参数必须为0，第二个参数为机器类型553，第三个参数为传递给内核参数的其实地址0x30000100。
 
总结下，U-Boot调用内核之前，下面的条件必须满足：
a.  R0=0,R1为机器类型ID，参考linux/arch/arm/tools/mach-types,R2为启动参数tag列表在RAM中的基地址。
b.  CPU的工作模式必须为SVC模式,必须禁止中断（IRQS和FIRS）。
c.  数据cache和MMU必须关闭，指令cache可以打开也可以关闭。
 
这里移交控制权之后，u-boot的使命就算是完成了。说起来U-boot命运挺悲惨的，因为它重要而却最不受内核待见。接下来内核的启动更加复杂。
 </rich_text><table char_offset="862" col_max="400" col_min="40"><row><cell>Bootloader
</cell><cell>Monitor?
</cell><cell>描述
</cell><cell>X86
</cell><cell>ARM
</cell><cell>PowerPC
</cell></row><row><cell>U-boot
</cell><cell>是
</cell><cell>通用引导程序
</cell><cell>是
</cell><cell>是
</cell><cell>是
</cell></row><row><cell>RedBoot[l2] 
</cell><cell>是
</cell><cell>基于eCos的引导程序
</cell><cell>是
</cell><cell>是
</cell><cell>是
</cell></row><row><cell>BLOB[l3] 
</cell><cell>否
</cell><cell>(StrongARM构架)LART(主板)等硬件平台的引导程序
</cell><cell>否
</cell><cell>是
</cell><cell>否
</cell></row><row><cell>LILO
</cell><cell>否
</cell><cell>Linux磁盘引导程序
</cell><cell>是
</cell><cell>否
</cell><cell>否
</cell></row><row><cell>GRUB
</cell><cell>否
</cell><cell>GNU的LILO替代程序
</cell><cell>是
</cell><cell>否
</cell><cell>否
</cell></row><row><cell>Loadlin
</cell><cell>否
</cell><cell>从DOS引导Linux
</cell><cell>是
</cell><cell>否
</cell><cell>否
</cell></row><row><cell>Vivi
</cell><cell>是
</cell><cell>韩国mizi 公司开发的bootloader
</cell><cell>否
</cell><cell>是
</cell><cell>否
</cell></row><row><cell>点击这里</cell><cell>点击这里</cell><cell>点击这里</cell><cell>点击这里</cell><cell>点击这里</cell><cell>点击这里</cell></row></table><encoded_png char_offset="1920">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</encoded_png></node><node name="linux启动" prog_lang="custom-colors" readonly="False" tags="" unique_id="3"><rich_text scale="h1">第二部分：linux启动 </rich_text><rich_text>
</rich_text><rich_text scale="h2" weight="heavy">一、zImage是怎样炼成的？</rich_text><rich_text>
    zImage是linux内核编译之后产生的最终文件，它的生成过程比较复杂，这里不谈编译过程，只聊聊编译的最后阶段：
    1.  arm-linux-gnu-ld用arch/arm/kernel/vmlinux.lds、arch/arm/kernel/head.o、
    arch/arm/kernel/init_task.o、各子目录下的built-in.o、lib/lib.a  、arch/arm/lib/lib.a生成顶层目录下的vmlinux （根据arch/arm/kernel/vmlinux.lds来链接  0xc0008000）
 
    2. 生成system.map, 置于顶层目录之下。
    3. arm-linux-gnu-objcopy，去掉顶层vmlinux两个段-R .note -R .comment
的调试信息，减小映像文件的大小，此时大概3M多，生成arch/arm/boot/Image。
 
    4. gzip -f -9 &lt; arch/arm/boot/compressed/../Image &gt;  arch/arm/boot/compressed/piggy.gz，读入arch/arm/boot/Image的内容，以最大压缩比进行压缩，生成 arch/arm/boot/compressed/目录下的piggy.gz。
 
    5. arm-linux-gnu-gcc，在arch/arm/boot/compressed/piggy.S文件中是直接引入piggy.gz的内容 （piggy.gz其实已经是二进制数据了），然后生成arch/arm/boot/compressed/piggy.o文件。下面是piggy.S的 内容
    其中所选择的行就是加入了piggy.gz的内容，通过编译生成piggy.o文件，以备后面接下来的ld链接。
 
    6.  arm-linux-gnu-ld，在arch/arm/boot/compressed/piggy.o的基础上，加入重定位地址和参数地址的同时，加 入解压缩的代码（arch/arm/boot/compressed/head.o、misc.o）,
    最后生成arch/arm/boot /compressed目录的vmlinux，此时在解压缩代码中还含有调试信息（根据arch/arm/boot/compressed /vmlinux.lds来链接 0x0）vmlinux.lds开始处。
    注意到了27行的吗？*(.piggydata)就表示需要将piggydata这个段放在这个位置，而piggydata这个段放的是什么呢？往后翻翻，看看第五步的图片，呵呵，其实就是将按最大压缩比压缩之后的Image，
    压缩之后叫piggy.gz中的二进制数据。
 
    7. arm-linux-gnu-objcopy，去掉解压缩代码中的调试信息段，最后生成arch/arm/boot/目录下的zImage。
    
    8. /bin/sh 
    /home/farsight/Resources/kernel/linux-2.6.14/scripts/mkuboot.sh -A  arm -O linux -T kernel -C none -a 0x30008000 -e 0x30008000 -n  'Linux-2.6.14' -d arch/arm/boot/zImage arch/arm/boot/uImage
    调用mkimage在arch/arm/boot/zImage的基础上加入64字节的uImage头，和入口地址，装载地址， 最终生成arch/arm/boot/目录下的uImage文件。
        
    实际上zImage是经过了高压缩之后在和解压缩程序合并在一起生成的。知道了这些之后，我们就可以给linux的启动大致分成3段：zImage解压缩、kernel的汇编启动阶段、kernel的c启动阶段。
    前两个阶段因为都是汇编写成的，代码读起来晦涩难懂，内存分布复杂，涉及MMU、解压缩等众多知识。如果有对这部分感兴趣的，可以自行分析，遇到问题可以上网查资料或者找我，这里就不详细分析了。下面是第二阶段汇编启动的主线，可以了解下：
    1. 确定 processor type 
    2. 确定 machine type
    3. 手动创建页表  
    4. 调用平台特定的cpu setup函数,设置中断地址，刷新Cache，开启Cache 
                         (在struct proc_info_list中,in proc-arm920.S) 
    5. 开启mmu I、D cache ，设置cp15的控制寄存器，设置TTB寄存器为0x30004000
    6. 切换数据（根据需要赋值数据段，清bss段，保存processor ID 和 machine type 
        和 cp15的控制寄存器值）
    7. 最终跳转到start_kernel    
(在__switch_data的结束的时候,调用了 b start_kernel)
</rich_text><rich_text scale="h3" weight="heavy">1.内存布局</rich_text><rich_text>
</rich_text><rich_text justification="left"></rich_text><rich_text>
    在开发板 tqs3c2440中，SDRAM连接到内存控制器的Bank6中，它的开始内存地址是0x30000000，大小为64M，即0x20000000。  ARM Linux  kernel将SDRAM的开始地址定义为PHYS_OFFSET。经bootloader加载kernel并由自解压部分代码运行后，最终kernel 被放置到KERNEL_RAM_PADDR（=PHYS_OFFSET  + TEXT_OFFSET，即0x30008000）地址上的一段内存，经此放置后，kernel代码以后均不会被移动。
在进入 kernel代码前，即bootloader和自解压缩阶段，ARM未开启MMU功能。因此kernel启动代码一个重要功能是设置好相应的页表，并开启 MMU功能。为了支持MMU功能，kernel镜像中的所有符号，包括代码段和数据段的符号，在链接时都生成了它在开启MMU时，所在物理内存地址映射到 的虚拟内存地址。
    以arm  kernel第一个符号（函数）stext为例，在编译链接，它生成的虚拟地址是0xc0008000，而放置它的物理地址为0x30008000（还记 得这是PHYS_OFFSET+TEXT_OFFSET吗？）。实际上这个变换可以利用简单的公式进行表示：va = pa – PHYS_OFFSET  + PAGE_OFFSET。Arm linux最终的kernel空间的页表，就是按照这个关系来建立。

</rich_text><rich_text scale="h3" weight="heavy">2. stext函数</rich_text><rich_text>
    stext函数定义在Arch/arm/kernel/head.S，它的功能是获取处理器类型和机器类型信息，并创建临时的页表，然后开启MMU功能，并跳进第一个C语言函数start_kernel。
    stext函数的在前置条件是：MMU, D-cache, 关闭; r0 = 0, r1 = machine nr, r2 = atags prointer.
</rich_text><rich_text weight="heavy">arch/arm/kernel/head.S:</rich_text><rich_text>
	.section &quot;.text.head&quot;, &quot;ax&quot;
ENTRY(stext)
	setmode	PSR_F_BIT | PSR_I_BIT | SVC_MODE, r9 @ ensure svc mode
						@ and irqs disabled
	mrc	p15, 0, r9, c0, c0		@ get processor id
	bl	__lookup_processor_type		@ r5=procinfo r9=cpuid
	movs	r10, r5				@ invalid processor (r5=0)?
	beq	__error_p			@ yes, error 'p'
	bl	__lookup_machine_type		@ r5=machinfo
	movs	r8, r5				@ invalid machine (r5=0)?
	beq	__error_a			@ yes, error 'a'
	bl	__vet_atags
	bl	__create_page_tables

	/*
	 * The following calls CPU specific code in a position independent
	 * manner.  See arch/arm/mm/proc-*.S for details.  r10 = base of
	 * xxx_proc_info structure selected by __lookup_machine_type
	 * above.  On return, the CPU will be ready for the MMU to be
	 * turned on, and r0 will hold the CPU control register value.
	 */
</rich_text><rich_text foreground="#00000000ffff">    /*先是从proc_info结构中的中跳进__arm920_setup函数，       
    * 然后执__enable_mmu 函数。最后在__enable_mmu函数通过mov pc, r13来执行__switch_data，       
    * __switch_data函数在最后一条语句，鱼跃龙门，跳进第一个C语言函数start_kernel。   
    */ 	
</rich_text><rich_text>	ldr	r13, __switch_data		@ address to jump to after
						@ mmu has been enabled
	adr	lr, BSYM(__enable_mmu)		@ return (PIC) address
    ARM(	add	pc, r10, #PROCINFO_INITFUNC	)
    THUMB(	add	r12, r10, #PROCINFO_INITFUNC	)
    THUMB(	mov	pc, r12				)
ENDPROC(stext)

</rich_text><rich_text scale="h3" weight="heavy">3. __lookup_processor_type函数</rich_text><rich_text>
</rich_text><rich_text foreground="#000000" weight="heavy">arch/arm/kernel/head-common.S:</rich_text><rich_text foreground="#000000">     </rich_text><rich_text>
/*
 * Read processor ID register (CP#15, CR0), and look up in the linker-built
 * supported processor list.  Note that we can't use the absolute addresses
 * for the __proc_info lists since we aren't running with the MMU on
 * (and therefore, we are not in the correct address space).  We have to
 * calculate the offset.
 *
 *	r9 = cpuid
 * Returns:
 *	r3, r4, r6 corrupted
 *	r5 = proc_info pointer in physical address space
 *	r9 = cpuid (preserved)
 */
__lookup_processor_type:
    </rich_text><rich_text foreground="#00000000ffff">/* adr 是相对寻址，它的寻计算结果是将当前PC值加上3f符号与PC的偏移量 
    * 而PC是物理地址，因此r3的结果也是3f符号的物理地址 */</rich_text><rich_text>
	adr	r3, 3f
</rich_text><rich_text foreground="#00000000ffff">    /* r5值为__proc_info_bein, r6值为__proc_ino_end，而r7值为.，   
    * 也即3f符号的链接地址。请注意，在链接期间，__proc_info_begin和   
    * __proc_info_end以及.均是链接地址，也即虚执地址。   
    */ 	</rich_text><rich_text>
	ldmia	r3, {r5 - r7}
	add	r3, r3, #8
	</rich_text><rich_text foreground="#00000000ffff">/* r3为3f的物理地址，而r7为3f的虚拟地址。结果是r3为虚拟地址与物理地址的差值，即PHYS_OFFSET - PAGE_OFFSET。*/</rich_text><rich_text>    
	sub	r3, r3, r7			@ get offset between virt&amp;phys
	</rich_text><rich_text foreground="#00000000ffff">/* r5为__proc_info_begin的物理地址, 即r5指针__proc_info数组的首地址 */</rich_text><rich_text>
	add	r5, r5, r3			@ convert virt addresses to
	</rich_text><rich_text foreground="#00000000ffff">/* r6为__proc_info_end的物理地址 */</rich_text><rich_text>
	add	r6, r6, r3			@ physical address space
	</rich_text><rich_text foreground="#00000000ffff">/* 读取r5指向的__proc_info数组元素的CPUID和mask值 */</rich_text><rich_text>
1:	ldmia	r5, {r3, r4}			@ value, mask
</rich_text><rich_text foreground="#00000000ffff">    /* 将当前CPUID和mask相与，并与数组元素中的CPUID比较是否相同   
    * 若相同，则找到当前CPU的__proc_info定义，r5指向访元素并返回。   
    */    
</rich_text><rich_text>	and	r4, r4, r9			@ mask wanted bits
	teq	r3, r4
	beq	2f
	</rich_text><rich_text foreground="#00000000ffff">/* r5指向下一个__proc_info元素 */</rich_text><rich_text>
	add	r5, r5, #PROC_INFO_SZ		@ sizeof(proc_info_list)
	</rich_text><rich_text foreground="#00000000ffff">/* 是否遍历完所有__proc_info元素 */</rich_text><rich_text>
	cmp	r5, r6
	blo	1b
	mov	r5, #0				@ unknown processor
2:	mov	pc, lr
ENDPROC(__lookup_processor_type)

/*
 * This provides a C-API version of the above function.
 */
ENTRY(lookup_processor_type)
	stmfd	sp!, {r4 - r7, r9, lr}
	mov	r9, r0
	bl	__lookup_processor_type
	mov	r0, r5
	ldmfd	sp!, {r4 - r7, r9, pc}
ENDPROC(lookup_processor_type)

/*
 * Look in &lt;asm/procinfo.h&gt; and arch/arm/kernel/arch.[ch] for
 * more information about the __proc_info and __arch_info structures.
 */
	.align	2
3:	.long	__proc_info_begin
	.long	__proc_info_end
4:	.long	.
	.long	__arch_info_begin
	.long	__arch_info_end	
	
	这里的执行过程其实比较简单就是在__proc_info_begin和__proc_info_end这个段里面里面去读取我们注册在里面的proc_info_list这个结构体，这个结构体的定义在arch/arm/include/asm/procinfo.h，具体实现根据你使用的cpu的架构在arch/arm/mm/里面找到具体的实现，这里我们使用的ARM11是proc-v6.S，我们可以看看这个结构体：
 	.section &quot;.proc.info.init&quot;, #alloc, #execinstr

	/*
	 * Match any ARMv6 processor core.
	 */
	.type	__v6_proc_info, #object
__v6_proc_info:
	.long	0x0007b000
	.long	0x0007f000
	.long   PMD_TYPE_SECT | \
		PMD_SECT_AP_WRITE | \
		PMD_SECT_AP_READ | \
		PMD_FLAGS
	.long   PMD_TYPE_SECT | \
		PMD_SECT_XN | \
		PMD_SECT_AP_WRITE | \
		PMD_SECT_AP_READ
	b	__v6_setup
	.long	cpu_arch_name
	.long	cpu_elf_name
	.long	HWCAP_SWP|HWCAP_HALF|HWCAP_THUMB|HWCAP_FAST_MULT|HWCAP_EDSP|HWCAP_JAVA
	.long	cpu_v6_name
	.long	v6_processor_functions
	.long	v6wbi_tlb_fns
	.long	v6_user_fns
	.long	v6_cache_fns
	.size	__v6_proc_info, . - __v6_proc_info

    检测完proc_info_list以后就开始检测machine_type了，这个函数的实现也在head－common.S里面，__lookup_machine_type   和__lookup_processor_type像对孪生兄弟，它们的行为都是很类似的：__lookup_machine_type根据r1寄存器的 机器编号到.arch.info.init段的数组中依次查找机器编号与r1相同的记录。它使了与它孪生兄弟同样的手法进行虚拟地址到物理地址的转换计 算。
我们看看它具体的实现：
</rich_text><rich_text weight="heavy">arch/arm/kernel/head-common.S:</rich_text><rich_text>     
__lookup_machine_type:
	adr	r3, 4b
	ldmia	r3, {r4, r5, r6}
	sub	r3, r3, r4			@ get offset between virt&amp;phys
	add	r5, r5, r3			@ convert virt addresses to
	add	r6, r6, r3			@ physical address space
1:	ldr	r3, [r5, #MACHINFO_TYPE]	@ get machine type
	teq	r3, r1				@ matches loader number?
	beq	2f				@ found
	add	r5, r5, #SIZEOF_MACHINE_DESC	@ next machine_desc
	cmp	r5, r6
	blo	1b
	mov	r5, #0				@ unknown machine
2:	mov	pc, lr
ENDPROC(__lookup_machine_type)
    这里的过程基本上是同proc的检查是一样的，这里主要检查芯片的类型，比如我们现在的芯片是MSM7X27FFA，这也是一个结构体，它的头文件在arch/arm/include/asm/arch/arch.h里面(machine_desc)，它具体的实现根据你对芯片类型的选择而不同，这里我们使用的是高通的7x27,具体实现在arch/arm/mach-msm/board-msm7x27.c里面，这些结构体最后都会注册到_arch_info_begin和_arch_info_end段里面，具体的大家可以看看vmlinux.lds或者system.map，这里的lookup会根据bootloader传过来的nr来在__arch_info里面的相匹配的类型，没有的话就寻找下一个machin_desk结构体，直到找到相应的结构体，并会将结构体的地址赋值给寄存器，如果没有的话就会赋值为0的。一般来说这里的machine_type会有好几个，因为不同的芯片类型可能使用的都是同一个cpu架构。
    MACHINE_START的定义在arch/arm/include/asm/mach/arch.h，如下：
#define MACHINE_START(_type,_name)			\
static const struct machine_desc __mach_desc_##_type	\
 __used							\
 __attribute__((__section__(&quot;.arch.info.init&quot;))) = {	\
	.nr		= MACH_TYPE_##_type,		\
	.name		= _name,

#define MACHINE_END				\
};

</rich_text><rich_text foreground="#ffff00000000">MACH_TYPE_##_type是根据arch/arm/tools/mach-types里的定义产生的，定义在include/asm/mach-types.h</rich_text><rich_text>

    对processor和machine的检查完以后就会检查atags parameter的有效性，关于这个atag具体的定义我们可以在./include/asm/setup.h里面看到，它实际是一个结构体和一个联合体构成的结合体，里面的size都是以字来计算的。这里的atags param是bootloader创建的，里面包含了ramdisk以及其他memory分配的一些信息，存储在boot.img头部结构体定义的地址中
</rich_text><rich_text weight="heavy">arch/arm/kernel/head-common.S:</rich_text><rich_text>
/* Determine validity of the r2 atags pointer.  The heuristic requires
 * that the pointer be aligned, in the first 16k of physical RAM and
 * that the ATAG_CORE marker is first and present.  Future revisions
 * of this function may be more lenient with the physical address and
 * may also be able to move the ATAGS block if necessary.
 *
 * r8  = machinfo
 *
 * Returns:
 *  r2 either valid atags pointer, or zero
 *  r5, r6 corrupted
 */
__vet_atags:
	tst	r2, #0x3			@ aligned?
	bne	1f

	ldr	r5, [r2, #0]			@ is first tag ATAG_CORE?
	cmp	r5, #ATAG_CORE_SIZE
	cmpne	r5, #ATAG_CORE_SIZE_EMPTY
	bne	1f
	ldr	r5, [r2, #4]
	ldr	r6, =ATAG_CORE
	cmp	r5, r6
	bne	1f

	mov	pc, lr				@ atag pointer is ok

1:	mov	r2, #0
	mov	pc, lr
ENDPROC(__vet_atags)


</rich_text><rich_text scale="h3" weight="heavy">4. 为kernel建立临时页表create_table_pages</rich_text><rich_text>
    前面提及到，kernel里面的所有符号在链接时，都使用了虚拟地址值。在完成基本的初始化后，kernel代码将跳到第一个C语言函数start_kernel来执行，在哪个时候，这些虚拟地址必须能够对它所存放在真正内存位置，否则运行将为出错。为此，CPU必须开启MMU，但在开启  MMU前，必须为虚拟地址到物理地址的映射建立相应的面表。在开启MMU后，kernel指并不马上将PC值指向start_kernl，而是要做一些C语言运行期的设置，如堆栈，重定义等工作后才跳到start_kernel去执行。在此过程中，PC值还是物理地址，因此还需要为这段内存空间建立va  = pa的内存映射关系。当然，本函数建立的所有页表都会在将来paging_init销毁再重建，这是临时过度性的映射关系和页表。
    在介绍__create_table_pages前，先认识一个macro pgtbl，它将KERNL_RAM_PADDR – 0x4000的值赋给rd寄存器，从下面的使用中可以看它，该值是页表在物理内存的基础，也即页表放在kernel开始地址下的16K的地方。
</rich_text><rich_text weight="heavy">arch/arm/kernel/head.S:</rich_text><rich_text>
/*
 * Setup the initial page tables.  We only setup the barest
 * amount which are required to get the kernel running, which
 * generally means mapping in the kernel code.
 *
 * r8  = machinfo
 * r9  = cpuid
 * r10 = procinfo
 *
 * Returns:
 *  r0, r3, r6, r7 corrupted
 *  r4 = physical page table address
 */
__create_page_tables:
</rich_text><rich_text foreground="#00000000ffff">    /* r4 = KERNEL_RAM_PADDR – 0x4000 = 0x30004000   
    * 后面的C代码中的swapper_pg_dir变量，它的值也指向0x30004000   
    * 内存地址，不过它的值是虚拟内存地址，即0xc0004000   
    */  </rich_text><rich_text>
	pgtbl	r4				@ page table address

	/*
	 * Clear the 16K level 1 swapper page table
	 */
	</rich_text><rich_text foreground="#00000000ffff">/* 将从r4到KERNEL_RAP_PADDR的16K页表空间清空。 */  </rich_text><rich_text>
	mov	r0, r4
	mov	r3, #0
	add	r6, r0, #0x4000
1:	str	r3, [r0], #4
	str	r3, [r0], #4
	str	r3, [r0], #4
	str	r3, [r0], #4
	teq	r0, r6
	bne	1b

    /* 还记得r10指向开发板相应的proc_info元素吗？这里它将的mm_mmuflags值读到r7中。   
    * PROCINFO_MM_MMUFLAGS值为8，可对应上面列出来的__arm920_proc_info结构或你相应开发板结构的值来查看该mmu_flags值。   
    * 这里的flags就是用于设置目录项的flags。查看该mmu_flags的定义，发现它是要求一级页表是section。   
    */  
	ldr	r7, [r10, #PROCINFO_MM_MMUFLAGS] @ mm_mmuflags

	/*
	 * Create identity mapping for first MB of kernel to
	 * cater for the MMU enable.  This identity mapping
	 * will be removed by paging_init().  We use our current program
	 * counter to determine corresponding section base address.
	 */
</rich_text><rich_text foreground="#00000000ffff">    /* r3 = ((pc &gt;&gt; 20) &lt;&lt; 20) | r7， 即取PC以1M向下对齐的地址。R6 = pc &gt;&gt; 20也即r6 = 0x300(pgd_idx)，   
    * 即PC对所有1M内存空间，在页表中的下标。                                       
    * R7值表明该目录项是section，即它映射的大小是1M。故刚好一个目录项就可以映射kernel上的1M空间。   
    * 这个暂时的va = pa映射只建立1M大小内存的，而不需要建立整个kernel镜像范围的映射。   
    * 因为这个va = pa的映射只有当前汇编语言才使用，一量跳进start_kernel后，这将不会用到了。而汇编代码在链接时，   
    * 已将它安排到代码段的最前面了
    */	</rich_text><rich_text>
	mov	r6, pc
	mov	r6, r6, lsr #20			@ start of kernel section
	orr	r3, r7, r6, lsl #20		@ flags + kernel base
	</rich_text><rich_text foreground="#00000000ffff">/* 将目录内空写到页表相应位置，即((uint32_t *)r4)[pgd_idx] = r3 */</rich_text><rich_text>
	str	r3, [r4, r6, lsl #2]		@ identity mapping
</rich_text><rich_text foreground="#00000000ffff">    /* 上面代码段为[pc &amp;(~0xfffff), (pc + 0xfffff) &amp;(~0xfffff)]的物理内存空间建立了va = pa的映射关系。*/</rich_text><rich_text>
    
	/*
	 * Now setup the pagetables for our kernel direct
	 * mapped region.
	 */            
</rich_text><rich_text foreground="#00000000ffff">    /* 下面为kernel镜像所占有空间，即KERNL_START到KERNEL_END建立内存映射，   
    * 映射关系为：va = pa – PHYS + PAGE_OFFSET。注意，这里的KENEL_START是kernel空间开始的虚拟地址。   
    * 这里的目录表项同样是section，即一个项映射1M的内存。   
    
    * KERNEL_START = PAGE_OFFSET + TEXT_OFFSET，   
    * r0 = ((uint32_t *)(r4))[ (KERNEL_START &amp; 0xff000000) &gt;&gt; 18]，   
    * 即r0指向KERNEL_START&amp;0xff000000(即kernel以16M向下对齐的)虚拟地址，所在项表目录中的位置。   </rich_text><rich_text>
    </rich_text><rich_text foreground="#00000000ffff">*/</rich_text><rich_text>	
	add	r0, r4,  #(KERNEL_START &amp; 0xff000000) &gt;&gt; 18
</rich_text><rich_text foreground="#00000000ffff">    /* r0 = ((uint32_t *)r0)[(KERNEL_START &amp; 0x00f00000) &gt;&gt; 18]   
    * 执行前r0指向kernel以16M向下对齐的虚拟地址，而这里再加上KERNEL_START未以16M向对齐部分的偏移量。   
    * 将原来r3的值写到页表目录中。R3的值就是之前已建立好va=pa映射的那个PA值。   
    */ 	
</rich_text><rich_text>	str	r3, [r0, #(KERNEL_START &amp; 0x00f00000) &gt;&gt; 18]!
	</rich_text><rich_text foreground="#00000000ffff">/* r6为kernel镜像的尾部虚拟地址。*/</rich_text><rich_text>
	ldr	r6, =(KERNEL_END - 1)
	</rich_text><rich_text foreground="#00000000ffff">/* 指向下一个即将要填写的目录项 */</rich_text><rich_text>
	add	r0, r0, #4
	</rich_text><rich_text foreground="#00000000ffff">/* r6指向KERNEL_END- 1虚拟地址所在的目录表项的位置 */</rich_text><rich_text>
	add	r6, r4, r6, lsr #18
1:	cmp	r0, r6
    </rich_text><rich_text foreground="#00000000ffff">/* 每填一个目录项，后一个比前一个所指向的物理地址大1M。*/</rich_text><rich_text>
	add	r3, r3, #1 &lt;&lt; 20
	strls	r3, [r0], #4
	bls	1b

#ifdef CONFIG_XIP_KERNEL
	/*
	 * Map some ram to cover our .data and .bss areas.
	 */
	orr	r3, r7, #(KERNEL_RAM_PADDR &amp; 0xff000000)
	.if	(KERNEL_RAM_PADDR &amp; 0x00f00000)
	orr	r3, r3, #(KERNEL_RAM_PADDR &amp; 0x00f00000)
	.endif
	add	r0, r4,  #(KERNEL_RAM_VADDR &amp; 0xff000000) &gt;&gt; 18
	str	r3, [r0, #(KERNEL_RAM_VADDR &amp; 0x00f00000) &gt;&gt; 18]!
	ldr	r6, =(_end - 1)
	add	r0, r0, #4
	add	r6, r4, r6, lsr #18
1:	cmp	r0, r6
	add	r3, r3, #1 &lt;&lt; 20
	strls	r3, [r0], #4
	bls	1b
#endif

	/*
	 * Then map first 1MB of ram in case it contains our boot params.
	 */
</rich_text><rich_text foreground="#00000000ffff">    /* 通常kernel的启动参数由bootloader放到了物理内存的第1个M上，所以需要为RAM上的第1个M建立映射。   
    * 上面已为PHYS_OFFSET + TEXT_OFFSET建立了映射，如果TEXT_OFFSET小于0x00100000的话，   
    * 上面代码应该也为SDRAM的第一个M建立了映射，但如果大于0x0010000则不会。   
    * 所以这里无论如何均为SDRAM的第一个M建立映射（不知分析对否，还请指正）。   
    */  	</rich_text><rich_text>
	add	r0, r4, #PAGE_OFFSET &gt;&gt; 18
	orr	r6, r7, #(PHYS_OFFSET &amp; 0xff000000)
	.if	(PHYS_OFFSET &amp; 0x00f00000)
	orr	r6, r6, #(PHYS_OFFSET &amp; 0x00f00000)
	.endif
	str	r6, [r0]

#ifdef CONFIG_DEBUG_LL
	ldr	r7, [r10, #PROCINFO_IO_MMUFLAGS] @ io_mmuflags
	/*
	 * Map in IO space for serial debugging.
	 * This allows debug messages to be output
	 * via a serial console before paging_init.
	 */
	ldr	r3, [r8, #MACHINFO_PGOFFIO]
	add	r0, r4, r3
	rsb	r3, r3, #0x4000			@ PTRS_PER_PGD*sizeof(long)
	cmp	r3, #0x0800			@ limit to 512MB
	movhi	r3, #0x0800
	add	r6, r0, r3
	ldr	r3, [r8, #MACHINFO_PHYSIO]
	orr	r3, r3, r7
1:	str	r3, [r0], #4
	add	r3, r3, #1 &lt;&lt; 20
	teq	r0, r6
	bne	1b
#if defined(CONFIG_ARCH_NETWINDER) || defined(CONFIG_ARCH_CATS)
	/*
	 * If we're using the NetWinder or CATS, we also need to map
	 * in the 16550-type serial port for the debug messages
	 */
	add	r0, r4, #0xff000000 &gt;&gt; 18
	orr	r3, r7, #0x7c000000
	str	r3, [r0]
#endif
#ifdef CONFIG_ARCH_RPC
	/*
	 * Map in screen at 0x02000000 &amp; SCREEN2_BASE
	 * Similar reasons here - for debug.  This is
	 * only for Acorn RiscPC architectures.
	 */
	add	r0, r4, #0x02000000 &gt;&gt; 18
	orr	r3, r7, #0x02000000
	str	r3, [r0]
	add	r0, r4, #0xd8000000 &gt;&gt; 18
	str	r3, [r0]
#endif
#endif
	mov	pc, lr
ENDPROC(__create_page_tables)

</rich_text><rich_text scale="h3" weight="heavy">5. 开启MMU</rich_text><rich_text>
看完页表的建立，想必开启MMU的代码也是小菜一碟吧。此函数的主要功能是将页表的基址加到cp15中的面表指针寄存器，同时设置域访问(domain access)寄存器
</rich_text><rich_text weight="heavy">arch/arm/kernel/head.S</rich_text><rich_text>
/*
 * Setup common bits before finally enabling the MMU.  Essentially
 * this is just loading the page table pointer and domain access
 * registers.
 */
__enable_mmu:
    </rich_text><rich_text foreground="#00000000ffff">/* 这里设置是否为非对齐内存访问产生异常 */</rich_text><rich_text> 
#ifdef CONFIG_ALIGNMENT_TRAP
	orr	r0, r0, #CR_A
#else
	bic	r0, r0, #CR_A
#endif
    </rich_text><rich_text foreground="#00000000ffff">/* 是否禁用数据缓存功能*/</rich_text><rich_text>
#ifdef CONFIG_CPU_DCACHE_DISABLE
	bic	r0, r0, #CR_C
#endif
    </rich_text><rich_text foreground="#00000000ffff">/* 是否禁用CPU_BPREDICT ?，不是很清楚此选项 */</rich_text><rich_text>
#ifdef CONFIG_CPU_BPREDICT_DISABLE
	bic	r0, r0, #CR_Z
#endif
    </rich_text><rich_text foreground="#00000000ffff">/* 是否禁用指令缓存功能 */</rich_text><rich_text>
#ifdef CONFIG_CPU_ICACHE_DISABLE
	bic	r0, r0, #CR_I
#endif
</rich_text><rich_text foreground="#00000000ffff">    /* 设置域访问寄存器的值。这里设置每个domain的属性是否上面建立的页表中，  
    * 每个目录项的damon值一起进行访问控制检查。具体情况请参考ARM处理器手册。  
    */  
</rich_text><rich_text>	mov	r5, #(domain_val(DOMAIN_USER, DOMAIN_MANAGER) | \
		      domain_val(DOMAIN_KERNEL, DOMAIN_MANAGER) | \
		      domain_val(DOMAIN_TABLE, DOMAIN_MANAGER) | \
		      domain_val(DOMAIN_IO, DOMAIN_CLIENT))
	mcr	p15, 0, r5, c3, c0, 0		@ load domain access register
	mcr	p15, 0, r4, c2, c0, 0		@ load page table pointer
	b	__turn_mmu_on
ENDPROC(__enable_mmu)
/*
 * Enable the MMU.  This completely changes the structure of the visible
 * memory space.  You will not be able to trace execution through this.
 * If you have an enquiry about this, *please* check the linux-arm-kernel
 * mailing list archives BEFORE sending another post to the list.
 *
 *  r0  = cp#15 control register
 *  r13 = *virtual* address to jump to upon completion
 *
 * other registers depend on the function called upon completion
 */
	.align	5
__turn_mmu_on:
	mov	r0, r0
</rich_text><rich_text foreground="#00000000ffff">    /* 将r0的值写到控制寄存器中。这里，终于开启MMU功能了。  
    * 查阅手册说控制寄存器的0位置1表示开启MMU，但这里r0的第0是多少呢（还请大家指正）  
    */    	
</rich_text><rich_text>	mcr	p15, 0, r0, c1, c0, 0		@ write control reg
	mrc	p15, 0, r3, c0, c0, 0		@ read id reg	
	mov	r3, r3
</rich_text><rich_text foreground="#00000000ffff">    /* 转跳到r13的函数中去，r13为__mmap_switched函数的虚拟地址，  
    * 从stext函数的未尾可以找到它的赋值。故从此开始pc的值就真正在内存的虚拟地址空间了。  
    */  	
</rich_text><rich_text>	mov	r3, r13	
	mov	pc, r3
ENDPROC(__turn_mmu_on)

</rich_text><rich_text scale="h3" weight="heavy">6.__mmap_switched函数</rich_text><rich_text>
__mmap_switched函数专用来设置C语言的执行环境，比如重定位工作，堆栈，以及BSS段的清零。 
__switch_data变量先定义了一系里面处量的数据，如重定位和数据段的地址，BSS段的地址，pocessor_id和__mach_arch_type变量的地址等。
</rich_text><rich_text weight="heavy">arch/arm/kernel/head-common.S:</rich_text><rich_text>
#define ATAG_CORE 0x54410001
#define ATAG_CORE_SIZE ((2*4 + 3*4) &gt;&gt; 2)
#define ATAG_CORE_SIZE_EMPTY ((2*4) &gt;&gt; 2)

	.align	2
	.type	__switch_data, %object

__switch_data:
	.long	__mmap_switched
	.long	__data_loc			@ r4
	.long	_data				@ r5
	.long	__bss_start			@ r6
	.long	_end				@ r7
	.long	processor_id			@ r4
	.long	__machine_arch_type		@ r5
	.long	__atags_pointer			@ r6
	.long	cr_alignment			@ r7
	.long	init_thread_union + THREAD_START_SP @ sp

/*
 * The following fragment of code is executed with the MMU on in MMU mode,
 * and uses absolute addresses; this is not position independent.
 *
 *  r0  = cp#15 control register
 *  r1  = machine ID
 *  r2  = atags pointer
 *  r9  = processor ID
 */
__mmap_switched:
	adr	r3, __switch_data + 4

	ldmia	r3!, {r4, r5, r6, r7}
</rich_text><rich_text foreground="#00000000ffff">    /* 下面这段代码类似于这段C代码, 即将整个数据段从__data_loc拷贝到_data段。   
    * if (__data_loc  == _data || _data != _bass_start)   
    *    memcpy(_data, __data_loc, _bss_start - _data);   
    */   
</rich_text><rich_text>	cmp	r4, r5				@ Copy data segment if needed
1:	cmpne	r5, r6
	ldrne	fp, [r4], #4
	strne	fp, [r5], #4
	bne	1b
    
    </rich_text><rich_text foreground="#00000000ffff">/* 将BSS段，也即从_bss_start到_end的内存清零。 */</rich_text><rich_text>
	mov	fp, #0				@ Clear BSS (and zero fp)
1:	cmp	r6, r7
	strcc	fp, [r6],#4
	bcc	1b

</rich_text><rich_text foreground="#00000000ffff">    /* r4 = processor_id,   
    * r5 = __machine_arch_type   
    * r6 = __atags_pointer   
    * r7 = cr_alignment   
    * sp = init_thread_union + THREAD_START_SP   
    * 为什么将栈顶指针设置为init_thread_union + THREAD_START_SP   
    * init_head_union 变量是一个大小为THREAD_SIZE的union，它在编译时，放到数据段的前面。   
    * 初步估计这块空间是内核堆栈。故在跳入C语言代码时，它SP的值设置为init_thread_union + THREAD_START_SP。   
    * 注意THREAD_START_SP定义为THREAD_SIZE – 8，中间为什么留出8个字节呢？是与ARM的堆栈操作有关吗？ 还有用专向start_kernel函数传递参数？   
    */ 
</rich_text><rich_text> ARM(	ldmia	r3, {r4, r5, r6, r7, sp})
 THUMB(	ldmia	r3, {r4, r5, r6, r7}	)
 THUMB(	ldr	sp, [r3, #16]		)
	str	r9, [r4]			@ Save processor ID
	str	r1, [r5]			@ Save machine type
	str	r2, [r6]			@ Save atags pointer
	bic	r4, r0, #CR_A			@ Clear 'A' bit
</rich_text><rich_text foreground="#00000000ffff">    /* cr_alignment变量的后面接着放置cr_no_alignment,    
    * r0为打开alignment检测时，控制寄存器的值，而r4为关闭时的值,   
    * 这里分将将打开和关闭alignment检查的控制寄存器的值写到   
    * cr_alignment和cr_no_alignement变量中。   
    */   	</rich_text><rich_text>
	stmia	r7, {r0, r4}			@ Save control register values
</rich_text><rich_text foreground="#00000000ffff">    /* 跳到start_kernel(init/main.c)函数，此函数代码用纯C来实现，它会调用各个平台的相关初始化函数，   
    * 来实现不同平台的初始化工作。至此，arm linux的启动工作完成。   
    */ 	
</rich_text><rich_text>	b	start_kernel
ENDPROC(__mmap_switched)

</rich_text><rich_text scale="h2" weight="heavy">二、linux的c启动阶段</rich_text><rich_text>
    经过解压缩和汇编启动两个阶段，将会进入init/Main.c中的start_kernel()函数去继续执行。(2.6.1x、2.6.2x和2.6.3x之间的差异比较大，下面的分析基于2.6.14)
    1. printk(linux_banner)打印内核的一些信息，版本，作者，编译器版本，日期等信息。
 
    2. 接下来执行是一个极其重要的函数setup_arch(),主要做一些板级初始化，cpu初始化，tag参数解析，u-boot传递的cmdline解析，建立mmu工作页表(memtable_init)，初始化内存布局， 调用 mmap_io建立GPIO,IRQ,MEMCTRL,UART，及其他外设的静态映射表，对时钟,定时器，uart进行初始化,  
    cpu_init(): {
        打印一些关于cpu的信息，比如cpu id，cache  大小等。
        另外重要的是设置了IRQ、ABT、UND三种模式的stack空间，分别都是12个字节。最后将系统切换到svc模式
    }。
 
    3. sched_init():初始化每个处理器的可运行队列，设置系统初始化进程即0号进程。
 
    4. 建立系统内存页区(zone)链表  build_all_zonelists()。
 
    5. printk(KERN_NOTICE &quot;Kernel command line: %s\n&quot;, saved_command_line);
    打印出从uboot传递过来的command_line字符串，在setup_arch函数中获得的。
 
    6.  parse_early_param()，这里分析的是系统能够辨别的一些早期参数（这个函数甚至可以去掉，__setup形式的参数），
    而且在分析的时候并不是以setup_arch(&amp;command_line)传出来的command_line为基础，而是以最原生态的 saved_command_line为基础的。
 
    7. parse_args(&quot;Booting kernel&quot;, command_line, __start___param,
                __stop___param - __start___param,
                &amp;unknown_bootoption);
    对于比较新的版本真正起作用的函数，与parse_early_param()相比，此处对解析列表的处理范围加大了，解析列表中除了包括系统以setup定义的启动参数，还包括模块中定义的param参数以及系统不能辨别的参数。
    __start___param是param参数的起始地址，在System.map文件中能看到
    __stop___param - __start___param是参数个数
    unknown_bootoption是对应与启动参数不是param的相应处理函数（查看parse_one()就知道怎么回事）。
 
    8. 在前面的setup_arch -&gt; paging_init -&gt; memtable_init函数中为系统创建页表的时候，中断向量表的虚地址init_maps,是用alloc_bootmem_low_pages分配的，
    ARM规定中断向量表的地址只能是0或0xFFFF0000，所以该函数里有部分代码的作用就是映射一个物理页到0或0xFFFF0000。
    trap_init函数做了以下的工作：
    把放在.Lcvectors处的系统8个意外入口跳转指令搬到高端中断向量0xffff0000处，再将__stubs_start到__stubs_end之间的各种意外初始化代码搬到0xffff0200处等。
 
    9. init_IRQ()
     初始化系统中所有的中断描述结构数组：irq_desc[NR_IRQS]。接着执行init_arch_irq函数，该函数是在setup_arch函 数最后初始化的一个全局函数指针，指向了smdk2410_init_irq函数（in  mach-smdk2410.c）,实际上是调用了   s3c24xx_init_irq函数。在该函数中，首先清除所有的中断未决标志，之后就初始化中断的 触发方式和屏蔽位，还有中断句柄初始化，这里不是最终用户的中断函数，而是do_level_IRQ或者do_edge_IRQ函数，在这两个函数中都使 用过__do_irq函数来找到真正最终驱动程序注册在系统中的中断处理函数。
 
    10. softirq_init():内核的软中断机制初始化函数。
 
    12.console_init():
    初始化系统的控制台结构，该函数执行后调用printk函数将log_buf中所有符合打印级别的系统信息打印到控制台上。
 
    13. profile_init()函数
    /* 对系统剖析做相关初始化， 系统剖析用于系统调用*/
    //profile是用来对系统剖析的，在系统调试的时候有用
    //需要打开内核选项，并且在bootargs中有profile这一项才能开启这个功能/*
    profile只是内核的一个调试性能的工具，这个可以通过menuconfig中profiling support打开。
    
    14. vfs_caches_init()
    该函数主要完成的是文件系统相关的初始化，cache、inode等高速缓存的建立，在mnt_init()函数中有注册并初始化sysfs、rootfs文件系统，这里只是在内存中建立他们的架构，
    创建了超级块，并没有真正挂 载上去。关于这个rootfs需要说明的是，这个文件系统生命期更加短暂的，为什么？之前说的ramdisk大家是否还记得，ramdisk即将在后面释放到内存空间，
    来代替这里的rootfs出现在根目录之下，而这个rootfs则退居二线，隐藏在一个二级目录中。本来在非android的系统上，这个 ramdisk也是一个暂时的文件系统，
    之后也会被真正的yaffs2之类的文件系统替换。不过呢，在android上，这个ramdisk还是挂载在根 目录下的，只是将system、userdata等真实文件系统挂载了对应的二级目录下。
        
     关于这部分ramdisk内容，有兴趣的下来可以继续探讨。
        
    15.      mem_init():
    最后内存初始化，释放前边标志为保留的所有页面,这个函数结束之后就不能再使
    用alloc_bootmem(),alloc_bootmem_low(),alloc_bootmem_pages()等申请低端内存的函数来申请内存，也就不能申请大块的连续物理内存了。
    
    16.     中间还省略了很多内容，涉及到很多东西，这里也没有时间详细讨论，有兴趣的自
    己研究代码吧！下面直接跳到start_kernel()函数的最后的一个重要函数:rest_init()。
    
    17.     rest_init函数创建了两个线程之后，自己调用cpu_idle()函数隐退了。
    创建的第一个线程，习惯上我们将其叫做1号内核线程，第二个线程叫2号内核线程，因为创建它们的父进程叫0号启动进程。
    说明一下：2.6.14的内核这里只创建了一个内核线程叫init线程，而上面创建两
    个线程的内核版本至少都是2.6.2x了，所以为了后面能和android的启动接上，所以这里开始linux转到2.2.29去。
 
    static noinline void __init_refok rest_init(void) __releases(kernel_lock)
    {
        int pid;
         
        …
        kernel_thread(kernel_init, NULL, CLONE_FS | CLONE_SIGHAND);
        pid = kernel_thread(kthreadd, NULL, CLONE_FS | CLONE_FILES);
        kthreadd_task = find_task_by_pid_ns(pid, &amp;init_pid_ns);
        …
        cpu_idle();
    }
    kthreadd这个线程之前的部门交流会上讨论过，新版本的linux将线程创建这个艰巨的工作专门交给了这个叫kthreadd的线程来完成。
    接下来既然0号启动进程idle了，那么剩下的工作就都转移到线程kernel_init中去了。
 
    18. kernel_init()
    这个线程的任务还是比较艰巨的，第一个重要任务就是调用函数do_basic_setup()，先调用driver_init()来构建sysfs的目录架构，然后调用do_initcalls()函数来一次执行linux编译时设置的系统函数。
     这里主要工作就是注册系统设备的驱动程序，关于driver和device的注册顺序，是可以互相交换，
    例如 
        通常的三星平台都有一个struct machine_desc结构体来描述平台相关的启动代码：
        MACHINE_START(SMDK2410, &quot;SMDK2410&quot;) /* @TODO: request a new identifier and switch
                    * to SMDK2410 */
        /* Maintainer: Jonas Dietsche */
        .phys_io    = S3C2410_PA_UART,
        .io_pg_offst    = (((u32)S3C24XX_VA_UART) &gt;&gt; 18) &amp; 0xfffc,
        .boot_params    = S3C2410_SDRAM_PA + 0x100,
        .map_io     = smdk2410_map_io,
        .init_irq   = s3c24xx_init_irq,
        .init_machine   = smdk2410_init,
        .timer      = &amp;s3c24xx_timer,
        MACHINE_END
        
        </rich_text><rich_text foreground="#ffff00000000">调用关系:  </rich_text><rich_text>      
        start_kernel()---&gt;setup_arch()---&gt;do_initcalls()---&gt;customize_machine()---&gt;smdk2410_init()
                              ---&gt;time_init()---&gt;s3c24xx_timer

</rich_text><rich_text weight="heavy">arch/arm/kernel/setup.c</rich_text><rich_text>
void __init setup_arch(char **cmdline_p)
{
	struct tag *tags = (struct tag *)&amp;init_tags;
	struct machine_desc *mdesc;
	char *from = default_command_line;

	unwind_init();

	setup_processor();
	mdesc = setup_machine(machine_arch_type);
	machine_name = mdesc-&gt;name;

	if (mdesc-&gt;soft_reboot)
		reboot_setup(&quot;s&quot;);

	if (__atags_pointer)
		tags = phys_to_virt(__atags_pointer);
	else if (mdesc-&gt;boot_params)
		tags = phys_to_virt(mdesc-&gt;boot_params);        </rich_text><rich_text foreground="#00000000ffff">//启动参数</rich_text><rich_text>

	/*
	 * If we have the old style parameters, convert them to
	 * a tag list.
	 */
	if (tags-&gt;hdr.tag != ATAG_CORE)
		convert_to_tag_list(tags);
	if (tags-&gt;hdr.tag != ATAG_CORE)
		tags = (struct tag *)&amp;init_tags;

	if (mdesc-&gt;fixup)
		mdesc-&gt;fixup(mdesc, tags, &amp;from, &amp;meminfo);

	if (tags-&gt;hdr.tag == ATAG_CORE) {
		if (meminfo.nr_banks != 0)
			squash_mem_tags(tags);
		save_atags(tags);
		parse_tags(tags);
	}

	init_mm.start_code = (unsigned long) _text;
	init_mm.end_code   = (unsigned long) _etext;
	init_mm.end_data   = (unsigned long) _edata;
	init_mm.brk	   = (unsigned long) _end;

	memcpy(boot_command_line, from, COMMAND_LINE_SIZE);
	boot_command_line[COMMAND_LINE_SIZE-1] = '\0';
	parse_cmdline(cmdline_p, from);
	paging_init(mdesc);
	request_standard_resources(&amp;meminfo, mdesc);

#ifdef CONFIG_SMP
	smp_init_cpus();
#endif

	cpu_init();
	tcm_init();

	/*
	 * Set up various architecture-specific pointers
	 */
	init_arch_irq = mdesc-&gt;init_irq;
	system_timer = mdesc-&gt;timer;
	init_machine = mdesc-&gt;init_machine;

#ifdef CONFIG_VT
#if defined(CONFIG_VGA_CONSOLE)
	conswitchp = &amp;vga_con;
#elif defined(CONFIG_DUMMY_CONSOLE)
	conswitchp = &amp;dummy_con;
#endif
#endif
	early_trap_init();
}

    所有devices的注册都是在smdk2410_init()函数中调用函数：
    platform_add_devices(smdk2410_devices, ARRAY_SIZE(smdk2410_devices));
    来完成，所以drivers的注册就放在后面了。不过这样注册是有一个坏处的，就是不能准确地控制driver代码中probe的执行先后顺序。
    现在mtk平台上的devices和drivers注册顺序想法，也就是先注册上drivers，然后再注册devices，这样的话，就可以控制probe函数的执行先后。
    
    include/linux/init.h文件中有这些优先级的定义：
    #define pure_initcall(fn)        __define_initcall(&quot;0&quot;,fn,0)
     
    #define core_initcall(fn)        __define_initcall(&quot;1&quot;,fn,1)
    #define core_initcall_sync(fn)       __define_initcall(&quot;1s&quot;,fn,1s)
    #define postcore_initcall(fn)        __define_initcall(&quot;2&quot;,fn,2)
    #define postcore_initcall_sync(fn)   __define_initcall(&quot;2s&quot;,fn,2s)
    #define arch_initcall(fn)        __define_initcall(&quot;3&quot;,fn,3)
    #define arch_initcall_sync(fn)       __define_initcall(&quot;3s&quot;,fn,3s)
    #define subsys_initcall(fn)      __define_initcall(&quot;4&quot;,fn,4)
    #define subsys_initcall_sync(fn) __define_initcall(&quot;4s&quot;,fn,4s)
    #define fs_initcall(fn)          __define_initcall(&quot;5&quot;,fn,5)
    #define fs_initcall_sync(fn)     __define_initcall(&quot;5s&quot;,fn,5s)
    #define rootfs_initcall(fn)      __define_initcall(&quot;rootfs&quot;,fn,rootfs)
    #define device_initcall(fn)      __define_initcall(&quot;6&quot;,fn,6)
    #define device_initcall_sync(fn) __define_initcall(&quot;6s&quot;,fn,6s)
    #define late_initcall(fn)        __define_initcall(&quot;7&quot;,fn,7)
    #define late_initcall_sync(fn)       __define_initcall(&quot;7s&quot;,fn,7s)
    当然函数的执行属性从1~7，通常我们见到的设备都是6、7级的。另外系统中所有的initcalll函数都是可以从linux根目录下的system.map中查看得到。
 
    接下来的一段代码就是来释放前面提到的ramdisk.img的：
    if (!ramdisk_execute_command)
         ramdisk_execute_command = &quot;/init&quot;;
     
    if (sys_access((const char __user *) ramdisk_execute_command, 0) != 0) {
         ramdisk_execute_command = NULL;
         prepare_namespace();
    }
    释放出来的ramdisk呈现出来的目录就是android编译出来之后，在out/…/root的目录一样了，这个目录下有一个init可执行程序，下面就准备启动它。
     
    接着调用init_post()函数，来打开console设备，这个时候我们的控制台就可以操作了，最后会执行以下代码来寻找和启动init程序：
    if (execute_command) {
         run_init_process(execute_command);
         printk(KERN_WARNING &quot;Failed to execute %s.  Attempting &quot;
                     &quot;defaults...\n&quot;, execute_command);
    }
    run_init_process(&quot;/sbin/init&quot;);
    run_init_process(&quot;/etc/init&quot;);
    run_init_process(&quot;/bin/init&quot;);
    run_init_process(&quot;/bin/sh&quot;);
     
    panic(&quot;No init found.  Try passing init= option to kernel.&quot;);
     
    这里执行的init程序需要我们在u-boot传给kernel的cmdline中使用init=/init
    来告知kernel，或者kernel启动代码中直接写死。否则在上面的那些目录中找不到init的话，系统就用panic机制将这个警告信息保存在nand的panic分区，在下次启动的时候，会自动将这个分区的信息输出。
     
    init进程是linux起来之后启动的第一个用户进程，android系统也就是在这个进
    程的基础上启动的。进程号是1。
</rich_text><encoded_png char_offset="2256"></encoded_png></node><node name="U-Boot与Linux内核的交互" prog_lang="custom-colors" readonly="False" tags="" unique_id="28"><rich_text>说明：本文所使用的U-Boot的版本是1.1.6，平台是S3C2440。

</rich_text><rich_text scale="h1" weight="heavy">目录</rich_text><rich_text>
一、简介
1.1标记列表
二、设置标记存放的地址
2.1相关的结构体定义
2.2标记存放地址的设定
三、标记的设置
3.1设置标记ATAG_CORE
3.2设置内存标记ATAG_MEM
3.3设置命令行标记ATAG_CMDLINE
3.4设置ATAG_NONE

</rich_text><rich_text scale="h2" weight="heavy">一、简介</rich_text><rich_text>
U-Boot与Linux内核的交互是单向的，U-Boot将各类参数传递给内核。由于他们不能同时运行，传递办法只能有一个个：U-Boot将参数放在某个约定的地方之后，在启动内核，内核启动后从这个地方获得参数。
</rich_text><rich_text scale="h2" weight="heavy">1.1标记列表</rich_text><rich_text>
除了约定好参数存放的地方外，还要规定参数的结构。Linux2.4.x以后的内核都以标记列表（tagged list）的形式来传递参数。标记就是一种数据结构；标记列表就是挨着存放的多个标记。标记列表以标记ATAG_CORE开始，以ATAGE_NONE结束。
标记的数据结构为tag，它是偶一个tag_header结构和一个联合体（union）组成。tag_header结构体表示标记的类型及长度，比如是表 示内存还是表示命令行参数等。对于不同类型的标记使用不同的联合体，比如表示内存=时使用tag_men32，表示命令行时使用tag_cmdline。 其定定义在include/asm-arm/setup.c文件中。
1. /*  
2.  * The new way of passing information: a list of tagged entries  
3.  */  
4.   
5. /* The list ends with an ATAG_NONE node. */  
6. #define ATAG_NONE   0x00000000  
7.   
8. struct tag_header {  
9.     u32 size;  
10.     u32 tag;  
11. };  
12.   
13. /* The list must start with an ATAG_CORE node */  
14. #define ATAG_CORE   0x54410001  
15.   
16. struct tag_core {  
17.     u32 flags;      /* bit 0 = read-only */  
18.     u32 pagesize;  
19.     u32 rootdev;  
20. };  
21.   
22. /* it is allowed to have multiple ATAG_MEM nodes */  
23. #define ATAG_MEM    0x54410002  
24.   
25. struct tag_mem32 {  
26.     u32 size;  
27.     u32 start;  /* physical start address */  
28. };  
29.   
30. /* VGA text type displays */  
31. #define ATAG_VIDEOTEXT  0x54410003  
32.   
33. struct tag_videotext {  
34.     u8      x;  
35.     u8      y;  
36.     u16     video_page;  
37.     u8      video_mode;  
38.     u8      video_cols;  
39.     u16     video_ega_bx;  
40.     u8      video_lines;  
41.     u8      video_isvga;  
42.     u16     video_points;  
43. };  
44.   
45. /* describes how the ramdisk will be used in kernel */  
46. #define ATAG_RAMDISK    0x54410004  
47.   
48. struct tag_ramdisk {  
49.     u32 flags;  /* bit 0 = load, bit 1 = prompt */  
50.     u32 size;   /* decompressed ramdisk size in _kilo_ bytes */  
51.     u32 start;  /* starting block of floppy-based RAM disk image */  
52. };  
53.   
54. /* describes where the compressed ramdisk image lives (virtual address) */  
55. /*  
56.  * this one accidentally used virtual addresses - as such,  
57.  * its depreciated.  
58.  */  
59. #define ATAG_INITRD 0x54410005  
60.   
61. /* describes where the compressed ramdisk image lives (physical address) */  
62. #define ATAG_INITRD2    0x54420005  
63.   
64. struct tag_initrd {  
65.     u32 start;  /* physical start address */  
66.     u32 size;   /* size of compressed ramdisk image in bytes */  
67. };  
68.   
69. /* board serial number. &quot;64 bits should be enough for everybody&quot; */  
70. #define ATAG_SERIAL 0x54410006  
71.   
72. struct tag_serialnr {  
73.     u32 low;  
74.     u32 high;  
75. };  
76.   
77. /* board revision */  
78. #define ATAG_REVISION   0x54410007  
79.   
80. struct tag_revision {  
81.     u32 rev;  
82. };  
83.   
84. /* initial values for vesafb-type framebuffers. see struct screen_info  
85.  * in include/linux/tty.h  
86.  */  
87. #define ATAG_VIDEOLFB   0x54410008  
88.   
89. struct tag_videolfb {  
90.     u16     lfb_width;  
91.     u16     lfb_height;  
92.     u16     lfb_depth;  
93.     u16     lfb_linelength;  
94.     u32     lfb_base;  
95.     u32     lfb_size;  
96.     u8      red_size;  
97.     u8      red_pos;  
98.     u8      green_size;  
99.     u8      green_pos;  
100.     u8      blue_size;  
101.     u8      blue_pos;  
102.     u8      rsvd_size;  
103.     u8      rsvd_pos;  
104. };  
105.   
106. /* command line: \0 terminated string */  
107. #define ATAG_CMDLINE    0x54410009  
108.   
109. struct tag_cmdline {  
110.     char    cmdline[1]; /* this is the minimum size */  
111. };  
112.   
113. /* acorn RiscPC specific information */  
114. #define ATAG_ACORN  0x41000101  
115.   
116. struct tag_acorn {  
117.     u32 memc_control_reg;  
118.     u32 vram_pages;  
119.     u8 sounddefault;  
120.     u8 adfsdrives;  
121. };  
122.   
123. /* footbridge memory clock, see arch/arm/mach-footbridge/arch.c */  
124. #define ATAG_MEMCLK 0x41000402  
125.   
126. struct tag_memclk {  
127.     u32 fmemclk;  
128. };  
129.   
130. struct tag {  
131.     struct tag_header hdr;  
132.     union {  
133.         struct tag_core     core;  
134.         struct tag_mem32    mem;  
135.         struct tag_videotext    videotext;  
136.         struct tag_ramdisk  ramdisk;  
137.         struct tag_initrd   initrd;  
138.         struct tag_serialnr serialnr;  
139.         struct tag_revision revision;  
140.         struct tag_videolfb videolfb;  
141.         struct tag_cmdline  cmdline;  
142.   
143.         /*  
144.          * Acorn specific  
145.          */  
146.         struct tag_acorn    acorn;  
147.   
148.         /*  
149.          * DC21285 specific  
150.          */  
151.         struct tag_memclk   memclk;  
152.     } u;  
153. };  
154.   
155. #define tag_next(t) ((struct tag *)((u32 *)(t) + (t)-&gt;hdr.size))  
156. #define tag_size(type) ((sizeof(struct tag_header) + sizeof(struct type)) &gt;&gt; 2) //???  

</rich_text><rich_text scale="h2" weight="heavy">二、设置标记存放的地址</rich_text><rich_text>
</rich_text><rich_text scale="h2" weight="heavy">2.1相关的结构体定义</rich_text><rich_text>
结构体bd中保存了标记存放的地址。bd结构体是gd结构体的一项，我们先看gd结构体，其定义在include/asm-arm/global_data.h文件中：
1. typedef struct  global_data {  
2.     bd_t        *bd;//开发板相关参数 ,结构体变量，参考u-boot.h   
3.     unsigned long   flags;//指示标志，如设备已经初始化标志等  
4.     unsigned long   baudrate;//串行口通讯速率  
5.     unsigned long   have_console;  
6.     /* serial_init() was called 如果执行了该函数，则设置为1 */  
7.     unsigned long   reloc_off;    
8.     /*   
9.      *Relocation Offset 重定位偏移，就是实际定向的位置与编译连接时指定的位置之差，一般为0  
10.         */  
11.     unsigned long   env_addr;   /* 环境参数地址*/  
12.     unsigned long   env_valid;  /* 环境参数CRC检验有效标志*/  
13.     unsigned long   fb_base;    /*帧缓冲区基地址*/  
14. #ifdef CONFIG_VFD  
15.     unsigned char   vfd_type;   /* 显示类型*/  
16. #endif  
17. #if 0  
18.     unsigned long   cpu_clk;    /*cpu时钟*/  
19.     unsigned long   bus_clk;    //总线时钟  
20.     unsigned long   ram_size;   /* RAM size */  
21.     unsigned long   reset_status;   /* reset status register at boot */  
22. #endif  
23.     void        **jt;   /* jump table 跳转表，用来登记&quot;函数调用地址&quot;*/  
24. } gd_t;  
接来下我们来看一下bd结构体，这个结构体定义在include/asm-arm/u-boot.h文件中：

1. typedef struct bd_info {  
2.     int         bi_baudrate;    /* 串口波特率*/  
3.     unsigned long   bi_ip_addr; /*  IP 地址*/  
4.     unsigned char   bi_enetaddr[6]; /* MAC地址*/  
5.     struct environment_s           *bi_env;  
6.     ulong           bi_arch_number; /*  板子的id*/  
7.     ulong           bi_boot_params; /* 启动参数*/  
8.     struct              /* RAM 配置*/  
9.     {  
10.     ulong start;  
11.     ulong size;  
12.     }bi_dram[CONFIG_NR_DRAM_BANKS];  
13. #ifdef CONFIG_HAS_ETH1  
14.     /* second onboard ethernet port */  
15.     unsigned char   bi_enet1addr[6];  
16. #endif  
17. } bd_t;  

</rich_text><rich_text scale="h3" weight="heavy">2.2标记存放地址的设定</rich_text><rich_text>
在board/smdk2410/smdk2410.c的board_init 函数设置了bi_boot_params 参数：
1. int board_init (void)  
2. {  
3.     S3C24X0_CLOCK_POWER * const clk_power = S3C24X0_GetBase_CLOCK_POWER();//获取时钟和电源配置寄存器的第一个寄存器的地址，寄存器的地上是连续的  
4.     S3C24X0_GPIO * const gpio = S3C24X0_GetBase_GPIO();//获取GPIO配置寄存器的第一个寄存器的地址  
5.   
6.     /* to reduce PLL lock time, adjust the LOCKTIME register */  
7.     clk_power-&gt;LOCKTIME = 0xFFFFFF;  
8.   
9.     /* configure MPLL */  
10.     clk_power-&gt;MPLLCON = ((M_MDIV &lt;&lt; 12) + (M_PDIV &lt;&lt; 4) + M_SDIV);  
11.   
12.     /* some delay between MPLL and UPLL */  
13.     delay (4000);  
14.   
15.     /* configure UPLL */  
16.     clk_power-&gt;UPLLCON = ((U_M_MDIV &lt;&lt; 12) + (U_M_PDIV &lt;&lt; 4) + U_M_SDIV);  
17.   
18.     /* some delay between MPLL and UPLL */  
19.     delay (8000);  
20.   
21.     /* set up the I/O ports */  
22.     gpio-&gt;GPACON = 0x007FFFFF;  
23.     gpio-&gt;GPBCON = 0x00044555;  
24.     gpio-&gt;GPBUP = 0x000007FF;  
25.     gpio-&gt;GPCCON = 0xAAAAAAAA;  
26.     gpio-&gt;GPCUP = 0x0000FFFF;  
27.     gpio-&gt;GPDCON = 0xAAAAAAAA;  
28.     gpio-&gt;GPDUP = 0x0000FFFF;  
29.     gpio-&gt;GPECON = 0xAAAAAAAA;  
30.     gpio-&gt;GPEUP = 0x0000FFFF;  
31.     gpio-&gt;GPFCON = 0x000055AA;  
32.     gpio-&gt;GPFUP = 0x000000FF;  
33.     gpio-&gt;GPGCON = 0xFF95FFBA;  
34.     gpio-&gt;GPGUP = 0x0000FFFF;  
35.     gpio-&gt;GPHCON = 0x002AFAAA;  
36.     gpio-&gt;GPHUP = 0x000007FF;  
37.   
38.     /* arch number of SMDK2410-Board */  
39.     gd-&gt;bd-&gt;bi_arch_number = MACH_TYPE_SMDK2410;  
40.   
41.     /* adress of boot parameters */  
42.     gd-&gt;bd-&gt;bi_boot_params = 0x30000100;  
43.   
44.     icache_enable();  //调用cpu/arm920t/cpu.c中的函数  
45.     dcache_enable();  
46.   
47.     return 0;  
48. }  

</rich_text><rich_text scale="h2" weight="heavy">三、标记的设置</rich_text><rich_text>
U-Boot通过bootm命令引导Linux内核，bootm命令对吼调用do_bootm_linux函数来引导内核。在do_bootm_linux函数就设置了标记，该函数的定义在lib_arm/armlinux.c中：
1. void do_bootm_linux (cmd_tbl_t *cmdtp, int flag, int argc, char *argv[],  
2.              ulong addr, ulong *len_ptr, int verify)  
3. {  
4.     ulong len = 0, checksum;  
5.     ulong initrd_start, initrd_end;  
6.     ulong data;  
7.     void (*theKernel)(int zero, int arch, uint params);  
8.     image_header_t *hdr = &amp;header;  
9.     bd_t *bd = gd-&gt;bd;  
10.   
11. #ifdef CONFIG_CMDLINE_TAG  
12.     char *commandline = getenv (&quot;bootargs&quot;);  
13. #endif  
14.   
15.     theKernel = (void (*)(int, int, uint))ntohl(hdr-&gt;ih_ep);  
16.     设置kernal加载地址  
17.   
18.     /*  
19.      * Check if there is an initrd image  
20.      */  
21.     用户自定义了initrd之后需要加载进来，整个过程需要进行头部以及整个数据内部校，类似于内核的加载校验，这里省略了。  
22. initial RAM disk 　　Linux初始 RAM磁盘（initrd）是在系统引导过程中挂载的一个临时根文件系统，用来支持两阶段的引导过程。initrd文件中包含了各种 可执行程序和驱动程序，它们可以用来挂载实际的根文件系统，然后再将这个 initrd RAM 磁盘卸载，并释放内存。在很多嵌入式Linux 系统 中，initrd 就是最终的根文件系统。  
23.     if (argc &gt;= 3) {  
24.         SHOW_BOOT_PROGRESS (9);  
25.   
26.         addr = simple_strtoul (argv[2], NULL, 16);  
27.   
28.         printf (&quot;## Loading Ramdisk Image at %08lx ...\n&quot;, addr);  
29.   
30.         /* Copy header so we can blank CRC field for re-calculation */  
31. #ifdef CONFIG_HAS_DATAFLASH  
32.         if (addr_dataflash (addr)) {  
33.             read_dataflash (addr, sizeof (image_header_t),  
34.                     (char *) &amp;header);  
35.         } else  
36. #endif  
37.             memcpy (&amp;header, (char *) addr,  
38.                 sizeof (image_header_t));  
39.   
40.         if (ntohl (hdr-&gt;ih_magic) != IH_MAGIC) {  
41.             printf (&quot;Bad Magic Number\n&quot;);  
42.             SHOW_BOOT_PROGRESS (-10);  
43.             do_reset (cmdtp, flag, argc, argv);  
44.         }  
45.   
46.         data = (ulong) &amp; header;  
47.         len = sizeof (image_header_t);  
48.   
49.         checksum = ntohl (hdr-&gt;ih_hcrc);  
50.         hdr-&gt;ih_hcrc = 0;  
51.   
52.         if (crc32 (0, (unsigned char *) data, len) != checksum) {  
53.             printf (&quot;Bad Header Checksum\n&quot;);  
54.             SHOW_BOOT_PROGRESS (-11);  
55.             do_reset (cmdtp, flag, argc, argv);  
56.         }  
57.   
58.         SHOW_BOOT_PROGRESS (10);  
59.   
60.         print_image_hdr (hdr);  
61.   
62.         data = addr + sizeof (image_header_t);  
63.         len = ntohl (hdr-&gt;ih_size);  
64.   
65. #ifdef CONFIG_HAS_DATAFLASH  
66.         if (addr_dataflash (addr)) {  
67.             read_dataflash (data, len, (char *) CFG_LOAD_ADDR);  
68.             data = CFG_LOAD_ADDR;  
69.         }  
70. #endif  
71.   
72.         if (verify) {  
73.             ulong csum = 0;  
74.   
75.             printf (&quot;   Verifying Checksum ... &quot;);  
76.             csum = crc32 (0, (unsigned char *) data, len);  
77.             if (csum != ntohl (hdr-&gt;ih_dcrc)) {  
78.                 printf (&quot;Bad Data CRC\n&quot;);  
79.                 SHOW_BOOT_PROGRESS (-12);  
80.                 do_reset (cmdtp, flag, argc, argv);  
81.             }  
82.             printf (&quot;OK\n&quot;);  
83.         }  
84.   
85.         SHOW_BOOT_PROGRESS (11);  
86.   
87.         if ((hdr-&gt;ih_os != IH_OS_LINUX) ||  
88.             (hdr-&gt;ih_arch != IH_CPU_ARM) ||  
89.             (hdr-&gt;ih_type != IH_TYPE_RAMDISK)) {  
90.             printf (&quot;No Linux ARM Ramdisk Image\n&quot;);  
91.             SHOW_BOOT_PROGRESS (-13);  
92.             do_reset (cmdtp, flag, argc, argv);  
93.         }  
94.   
95. #if defined(CONFIG_B2) || defined(CONFIG_EVB4510) || defined(CONFIG_ARMADILLO)  
96.         /*  
97.          *we need to copy the ramdisk to SRAM to let Linux boot  
98.          */  
99.         memmove ((void *) ntohl(hdr-&gt;ih_load), (uchar *)data, len);  
100.         data = ntohl(hdr-&gt;ih_load);  
101. #endif /* CONFIG_B2 || CONFIG_EVB4510 */  
102.   
103.         /*  
104.          * Now check if we have a multifile image  
105.          */  
106.     } else if ((hdr-&gt;ih_type == IH_TYPE_MULTI) &amp;&amp; (len_ptr[1])) {  
107.         ulong tail = ntohl (len_ptr[0]) % 4;  
108.         int i;  
109.   
110.         SHOW_BOOT_PROGRESS (13);  
111.   
112.         /* skip kernel length and terminator */  
113.         data = (ulong) (&amp;len_ptr[2]);  
114.         /* skip any additional image length fields */  
115.         for (i = 1; len_ptr[i]; ++i)  
116.             data += 4;  
117.         /* add kernel length, and align */  
118.         data += ntohl (len_ptr[0]);  
119.         if (tail) {  
120.             data += 4 - tail;  
121.         }  
122.   
123.         len = ntohl (len_ptr[1]);  
124.   
125.     } else {  
126.         /*  
127.          * no initrd image  
128.          */  
129.         SHOW_BOOT_PROGRESS (14);  
130.   
131.         len = data = 0;  
132.     }  
133.   
134. #ifdef  DEBUG  
135.     if (!data) {  
136.         printf (&quot;No initrd\n&quot;);  
137.     }  
138. #endif  
139.   
140.     if (data) {  
141.         initrd_start = data;  
142.         initrd_end = initrd_start + len;  
143.     } else {  
144.         initrd_start = 0;  
145.         initrd_end = 0;  
146.     }  
147.   
148.     SHOW_BOOT_PROGRESS (15);  
149.   
150.     debug (&quot;## Transferring control to Linux (at address %08lx) ...\n&quot;,  
151.            (ulong) theKernel);  
152.   
153. #if defined (CONFIG_SETUP_MEMORY_TAGS) || \  
154.     defined (CONFIG_CMDLINE_TAG) || \  
155.     defined (CONFIG_INITRD_TAG) || \  
156.     defined (CONFIG_SERIAL_TAG) || \  
157.     defined (CONFIG_REVISION_TAG) || \  
158.     defined (CONFIG_LCD) || \  
159.     defined (CONFIG_VFD)  
160.     setup_start_tag (bd);设置各种tag，用于传递参数给Linux  
161. #ifdef CONFIG_SERIAL_TAG  
162.     setup_serial_tag (¶ms);  
163. #endif  
164. #ifdef CONFIG_REVISION_TAG  
165.     setup_revision_tag (¶ms);  
166. #endif  
167. #ifdef CONFIG_SETUP_MEMORY_TAGS  
168.     setup_memory_tags (bd);  
169. #endif  
170. #ifdef CONFIG_CMDLINE_TAG  
171.     setup_commandline_tag (bd, commandline);  
172. #endif  
173. #ifdef CONFIG_INITRD_TAG  
174.     if (initrd_start &amp;&amp; initrd_end)  
175.         setup_initrd_tag (bd, initrd_start, initrd_end);  
176. #endif  
177. #if defined (CONFIG_VFD) || defined (CONFIG_LCD)  
178.     setup_videolfb_tag ((gd_t *) gd);  
179. #endif  
180.     setup_end_tag (bd);  
181. #endif  
182.   
183.     /* we assume that the kernel is in place */  
184.     printf (&quot;\nStarting kernel ...\n\n&quot;);打印信息  
185.   
186. #ifdef CONFIG_USB_DEVICE  
187.     {  
188.         extern void udc_disconnect (void);  
189.         udc_disconnect ();  
190.     }  
191. #endif  
192.   
193.     cleanup_before_linux ();启动之前先做一些清理工作cpu/arm920t/cpu.c  
194.   
195. 调用内核需要传递的参数如下：  
196. R0：必须为0  
197. R1：机器类型ID，本机为ARM（bd-&gt;bi_arch_number）  
198. R2：启动参数列表在内存中的位置（bd-&gt;bi_boot_params）  
199.     theKernel (0, bd-&gt;bi_arch_number, bd-&gt;bi_boot_params);  
200. }  

</rich_text><rich_text scale="h3">3.1设置标记ATAG_CORE</rich_text><rich_text>
标记列表以标记ATAG_CORE开始
1. static void setup_start_tag (bd_t *bd)  
2. {  
3.     params = (struct tag *) bd-&gt;bi_boot_params;  
4.   
5.     params-&gt;hdr.tag = ATAG_CORE;  
6.     params-&gt;hdr.size = tag_size (tag_core);  
7.   
8.     params-&gt;u.core.flags = 0;  
9.     params-&gt;u.core.pagesize = 0;  
10.     params-&gt;u.core.rootdev = 0;  
11.   
12.     params = tag_next (params);//指向当前标记的末尾  
13. }  

</rich_text><rich_text scale="h3" weight="heavy">3.2设置内存标记ATAG_MEM</rich_text><rich_text>
在board/smdk2410/smdk2410.c的dram_init函数设置了bd的bi_dram结构体：
1. int dram_init (void)  
2. {  
3.     gd-&gt;bd-&gt;bi_dram[0].start = PHYS_SDRAM_1;  
4.     gd-&gt;bd-&gt;bi_dram[0].size = PHYS_SDRAM_1_SIZE;  
5.   
6.     return 0;  
7. }  

下面是这边内存标记的结构体：
1. static void setup_memory_tags (bd_t *bd)  
2. {  
3.     int i;  
4.   
5.     for (i = 0; i &lt; CONFIG_NR_DRAM_BANKS; i++) {  
6.         params-&gt;hdr.tag = ATAG_MEM;  
7.         params-&gt;hdr.size = tag_size (tag_mem32);  
8.   
9.         params-&gt;u.mem.start = bd-&gt;bi_dram[i].start;  
10.         params-&gt;u.mem.size = bd-&gt;bi_dram[i].size;  
11.   
12.         params = tag_next (params);  
13.     }  
14. }  

</rich_text><rich_text scale="h3" weight="heavy">3.3设置命令行标记ATAG_CMDLINE</rich_text><rich_text>
命令行就是一个字符串，用来控制内核的一些行为。比如“root=/dev/mtdblock2 init=/linuxrc console=ttySAC0 ”表示根文件系统在MTD2分区上系统启动后执行的第一个程序为/linuxrc，控制台是ttySAC0 。
1. static void setup_commandline_tag (bd_t *bd, char *commandline)  
2. {  
3.     char *p;  
4.   
5.     if (!commandline)  
6.         return;  
7.   
8.     /* eat leading white space */  
9.     for (p = commandline; *p == ' '; p++);  
10.   
11.     /* skip non-existent command lines so the kernel will still  
12.      * use its default command line.  
13.      */  
14.     if (*p == '\0')  
15.         return;  
16.   
17.     params-&gt;hdr.tag = ATAG_CMDLINE;  
18.     params-&gt;hdr.size =  
19.         (sizeof (struct tag_header) + strlen (p) + 1 + 4) &gt;&gt; 2;  
20.   
21.     strcpy (params-&gt;u.cmdline.cmdline, p);  
22.   
23.     params = tag_next (params);  
24. }  

</rich_text><rich_text scale="h3" weight="heavy">3.4设置ATAG_NONE</rich_text><rich_text>
标记列表以标记ATAG_NONE介绍。
1. static void setup_end_tag (bd_t *bd)  
2. {  
3.     params-&gt;hdr.tag = ATAG_NONE;  
4.     params-&gt;hdr.size = 0;  
5. }  
说明：本文所使用的U-Boot的版本是1.1.6，平台是S3C2440。

</rich_text></node><node name="U-Boot直接引导zImage内核" prog_lang="custom-colors" readonly="False" tags="" unique_id="29"><rich_text>    U-boot1.1.6只能只能就能过mkimage工具加工后的内核镜像文件。 mkimage工具给zImage增加了一个64B大小的头。U-Boot是通过bootm命令来引导Linux内核的，bootm命令调用do_bootm函数来mkimage工具增加的头，最后调用do_bootm_linux函数引导去掉了mkimage工具增加的头的Linux内核，也就是zImage，启动的流程可以参考</rich_text><rich_text link="webs http://blog.csdn.net/ce123/article/details/7319290">图解U-Boot：引导内核分析</rich_text><rich_text>这篇博客。
    要让U-Boot直接引导zImage内核，只需在do_bootm函数中去掉对mkimage工具增加的头的分析，直接调用do_bootm_linux函数引导zImage内核即可。下面是经过修改的do_bootm函数，修改的部分用///////////包围起来了，省略号后面的就不需要改动了。这个函数common/cmd_bootm.c文件中。
1. int do_bootm (cmd_tbl_t *cmdtp, int flag, int argc, char *argv[])  
2. {  
3.     ulong   iflag;  
4.     ulong   addr;  
5.     ulong   data, len, checksum;  
6.     ulong  *len_ptr;  
7.     uint    unc_len = CFG_BOOTM_LEN;  
8.     int i, verify;  
9.     char    *name, *s;  
10.     int (*appl)(int, char *[]);  
11.     image_header_t *hdr = &amp;header;  
12.     s = getenv (&quot;verify&quot;);  
13.     verify = (s &amp;&amp; (*s == 'n')) ? 0 : 1;  
14.     if (argc &lt; 2) {  
15.         addr = load_addr;  
16.     } else {  
17.         addr = simple_strtoul(argv[1], NULL, 16);  
18.     }  
19.     SHOW_BOOT_PROGRESS (1);  
20. //////////////////////////////////////////////////////////////////////////////////  
21.     //printf (&quot;## Booting image at %08lx ...\n&quot;, addr);  
22.     printf (&quot;## Booting from zImage at %08lx ---by ce123\n&quot;, addr);  
23. #ifdef CONFIG_SILENT_CONSOLE  
24.         fixup_silent_linux();  
25. #endif  
26.         do_bootm_linux  (cmdtp, flag, argc, argv,  
27.                  addr, len_ptr, verify);  
28. //////////////////////////////////////////////////////////////////////////////////  
29. ......  

接下来还要修改一下lib_arm/armlinux.c中的do_bootm_linux函数。这里主要是修改kernal的加载地址（theKernel = (void (*)(int, int, uint))addr）。这就要求我们将zImage内核下载内存的addr处。并且用bootm addr进行引导，默认的地址是0x30008000，如果直接使用bootm进行引导，则需要将内核下载到0x30008000，否则无法引导内核。
1. void do_bootm_linux (cmd_tbl_t *cmdtp, int flag, int argc, char *argv[],  
2.              ulong addr, ulong *len_ptr, int verify)  
3. {  
4.     ulong len = 0, checksum;  
5.     ulong initrd_start, initrd_end;  
6.     ulong data;  
7.     void (*theKernel)(int zero, int arch, uint params);  
8.     image_header_t *hdr = &amp;header;  
9.     bd_t *bd = gd-&gt;bd;  
10.   
11.   
12. #ifdef CONFIG_CMDLINE_TAG  
13.     char *commandline = getenv (&quot;bootargs&quot;);  
14. #endif  
15.   
16.   
17.     //theKernel = (void (*)(int, int, uint))ntohl(hdr-&gt;ih_ep);  
18.     theKernel = (void (*)(int, int, uint))addr;  
下面是引导信息：
U-Boot 1.1.6 (Mar 11 2012 - 14:06:15)


DRAM:  64 MB
Flash:  2 MB
NAND:  256 MiB
In:    serial
Out:   serial
Err:   serial
Hit any key to stop autoboot:  0

NAND read: device 0 offset 0x240000, size 0x200000
 2097152 bytes read: OK
## Booting from zImage at 30008000 ---by ce123

Starting kernel ...

Uncompressing Linux.............................................................
............................................................. done, booting the
kernel.
</rich_text></node></node><node name="bus register" prog_lang="custom-colors" readonly="False" tags="" unique_id="4"><rich_text>    上面分析了kobject.kset,ktype.这三个结构联合起来一起构成了整个设备模型的基石.而bus.device.device_driver.则是基于kobject.kset.ktype之上的架构.
    在这里,总线,设备,驱动被有序的组和在一起.Bus.device.device_driver三者之间的关系如下图所示: 如上图所示.
      struct bus_type的p-&gt;drivers_kset(struct kset)指向注册在上面的驱动程序.它的p-&gt;device_kset(struct kset)上挂着注册在上面的设备.
    每次有一个新的设备注册到上面,都会去匹配右边的驱动,看是否能匹配上.如果匹配成功,则将设备结构的is_registerd域置为0.然后将设备添加到驱动的p-&gt;klist_devices域.
    同理,每注册一个驱动,都会去匹配左边的设备,.如果匹配成功,将则设备加到驱动的p-&gt;klist_devices域.再将设备的is_registerd置为0/这就是linux设备模型用来管理设备和驱动的基本架构. 我们来跟踪一下代码来看下详细的操作. 
    注册一个总线的接口为bus_register().我们照例分段分析: 
    int bus_register(struct bus_type *bus){     
        int retval;     struct bus_type_private *priv;     //分配存储空间
             
        priv = kzalloc(sizeof(struct bus_type_private), GFP_KERNEL);    
        if (!priv)         
            return -ENOMEM;      
            
        priv-&gt;bus = bus;     
        bus-&gt;p = priv;      
        BLOCKING_INIT_NOTIFIER_HEAD(&amp;priv-&gt;bus_notifier); 
             
        retval = kobject_set_name(&amp;priv-&gt;subsys.kobj, &quot;%s&quot;, bus-&gt;name);     
        if (retval)         
            goto out;      
            
        priv-&gt;subsys.kobj.kset = bus_kset;                          
        priv-&gt;subsys.kobj.ktype = &amp;bus_ktype;    
        priv-&gt;drivers_autoprobe = 1;      
        retval = kset_register(&amp;priv-&gt;subsys);     
        if (retval)         
            goto out;
            
     首先,先为struct bus_type的私有区分配空间,然后将其和struct bus_type关联起来.由于struct bus_type也要在sysfs文件中表示一个节点,因此,它也内嵌也一个kset的结构.这就是priv-&gt;subsys.
     首先,它为这个kset的名称赋值为bus的名称,然后将priv-&gt;subsys.kobj.kset指向bus_kset. priv-&gt;subsys.kobj.ktype指向bus_ktype;然后调用kset_reqister()将priv-&gt;subsys注册.这里涉及到的接口都在之前分析过.注册过后,应该会在bus_kset所表示的目录下创建一个总线名称的目录.并且用户空间的hotplug应该会检测到一个add事件.我们来看一下bus_kset到底指向的是什么:     
     bus_kset = kset_create_and_add(&quot;bus&quot;, &amp;bus_uevent_ops, NULL);
   从此可以看出.这个bus_kset在sysfs中的结点就是/sys/bus.在这里注册的struct bus_types就会在/sys/bus/下面出现.      
    retval = bus_create_file(bus, &amp;bus_attr_uevent);     
    if (retval)         
        goto bus_uevent_fail;
        
    bus_create_file()就是在priv-&gt;subsys.kobj的这个kobject上建立一个普通属性的文件.这个文件的属性对应在bus_attr_uevent.
   读写操作对应在priv-&gt;subsys.kobj.ktype中.我们到后面才统一分析bus注册时候的文件创建      
    priv-&gt;devices_kset = kset_create_and_add(&quot;devices&quot;, NULL, 
                                &amp;priv-&gt;subsys.kobj);     
    if (!priv-&gt;devices_kset) {         
        retval = -ENOMEM;         
        goto bus_devices_fail;     
    }
          
    priv-&gt;drivers_kset = kset_create_and_add(&quot;drivers&quot;, NULL, 
                                &amp;priv-&gt;subsys.kobj); 
    if (!priv-&gt;drivers_kset) {         
        retval = -ENOMEM;         
        goto bus_drivers_fail;     
    }
          
    klist_init(&amp;priv-&gt;klist_devices, klist_devices_get, klist_devices_put); 
    klist_init(&amp;priv-&gt;klist_drivers, NULL, NULL);
   这段代码会在bus所在的目录下建立两个目录,分别为devices和drivers.并初始化挂载设备和驱动的链表      
    retval = add_probe_files(bus);     
    if (retval)         
        goto bus_probe_files_fail;
        
    retval = bus_add_attrs(bus);     
    if (retval)         
        goto bus_attrs_fail;      
        
    pr_debug(&quot;bus: '%s': registered/n&quot;, bus-&gt;name);     
    
    return 0;
    
   在这里,会为bus_attr_drivers_probe, bus_attr_drivers_autoprobe.注册bus_type中的属性建立文件 
    bus_attrs_fail:     
        remove_probe_files(bus);
    bus_probe_files_fail:     
        kset_unregister(bus-&gt;p-&gt;drivers_kset);
    bus_drivers_fail:     
        kset_unregister(bus-&gt;p-&gt;devices_kset);
    bus_devices_fail:     
        bus_remove_file(bus, &amp;bus_attr_uevent);
    bus_uevent_fail:     
        kset_unregister(&amp;bus-&gt;p-&gt;subsys);     
        kfree(bus-&gt;p);
    out:     
    return retval;
}
    这段代码为出错处理; 
    struct kset *kset_create_and_add(const char *name,  struct kset_uevent_ops *uevent_ops, 
                                                             struct kobject *parent_kobj){     
        struct kset *kset;     
        int error;
             
     //创建一个kset     
        kset = kset_create(name, uevent_ops, parent_kobj);     
        if (!kset)         
            return NULL;
                 
      //注册kset     
        error = kset_register(kset);     
        if (error) {        
         //如果注册失败,释放kset         
            kfree(kset);         
            return NULL;     
        }     
        
        return kset;
        }
         
        kset_create()用来创建一个struct kset结构.代码如下:
        static struct kset *kset_create(const char *name,                   
                                    struct kset_uevent_ops *uevent_ops,                   
                                    struct kobject *parent_kobj) {     
                                    struct kset *kset;      
                                    
            kset = kzalloc(sizeof(*kset), GFP_KERNEL);     
            if (!kset)         
                return NULL;
                     
            kobject_set_name(&amp;kset-&gt;kobj, name);     
            kset-&gt;uevent_ops = uevent_ops;     
            kset-&gt;kobj.parent = parent_kobj;      
            kset-&gt;kobj.ktype = &amp;kset_ktype;     
            kset-&gt;kobj.kset = NULL;      
            return kset;
        }
        
     我们注意,在这里创建kset时.为其内嵌的kobject指定其struct kobj_type ktype结构为kset_ktype.这个结构的定义如下:
        static struct kobj_type kset_ktype = {     
                .sysfs_ops    = &amp;kobj_sysfs_ops,
                .release = kset_release,
        };
        
      属性文件的读写操作全部都包含在sysfs_ops成员里.kobj_sysfs_ops的定义如下:
      struct sysfs_ops kobj_sysfs_ops = {     
            .show    = kobj_attr_show,     
            .store   = kobj_attr_store,
     }; 
     
     创建好了kset之后,会调用kset_register().这个函数就是kset操作的核心代码了.如下:
     int kset_register(struct kset *k) {     
        int err;
              
        if (!k)         
            return -EINVAL;
                  
        kset_init(k);     
        err = kobject_add_internal(&amp;k-&gt;kobj);     
        if (err)         
            return err;
                 
       kobject_uevent(&amp;k-&gt;kobj, KOBJ_ADD);     
       return 0;
    }
     
    void kset_init(struct kset *k)
    {
        kobject_init_internal(&amp;k-&gt;kobj);             //只是对kobj中的成员变量做一些赋值的初始化
        INIT_LIST_HEAD(&amp;k-&gt;list);
        spin_lock_init(&amp;k-&gt;list_lock);
    }  
    
    static int kobject_add_internal(struct kobject *kobj) {     
        int error = 0;     
        struct kobject *parent;
              
        if (!kobj)         
            return -ENOENT;     //如果kobject的名字为空.退出
                 
        if (!kobj-&gt;name || !kobj-&gt;name[0]) {         
            pr_debug(&quot;kobject: (%p): attempted to be registered with empty &quot;               &quot;name!/n&quot;, kobj);         
            WARN_ON(1);         
            return -EINVAL;     
      }
           
    //取kobject的父结点     
    parent = kobject_get(kobj-&gt;parent);
         
   //如果kobject的父结点没有指定，就将kset-&gt;kobject做为它的父结点     
    /* join kset if set, use it as parent if we do not already have one */     
    if (kobj-&gt;kset) {         
        if (!parent)              
            parent = kobject_get(&amp;kobj-&gt;kset-&gt;kobj);         
        kobj_kset_join(kobj);         
        kobj-&gt;parent = parent;     
    }     
   //调试用     
    pr_debug(&quot;kobject: '%s' (%p): %s: parent: '%s', set: '%s'/n&quot;,          kobject_name(kobj), kobj, __FUNCTION__,          parent ? kobject_name(parent) : &quot;&lt;NULL&gt;&quot;,          kobj-&gt;kset ? kobject_name(&amp;kobj-&gt;kset-&gt;kobj) : &quot;&lt;NULL&gt;&quot;);      
   //在sysfs中创建kobject的相关元素     
   error = create_dir(kobj);                              
   if (error) {         
        //v如果创建失败。减少相关的引用计数         
        kobj_kset_leave(kobj);         
        kobject_put(parent);         
        kobj-&gt;parent = NULL;          /* be noisy on error issues */         
        if (error == -EEXIST)              
            printk(KERN_ERR &quot;%s failed for %s with &quot;
                                    &quot;-EEXIST, don't try to register things with &quot;
                                    &quot;the same name in the same directory./n&quot;,                     __FUNCTION__, kobject_name(kobj));
        else              
            printk(KERN_ERR &quot;%s failed for %s (%d)/n&quot;,
                                 __FUNCTION__, kobject_name(kobj), error);         
            dump_stack();     
    } else         
     //如果创建成功。将state_in_sysfs建为1。表示该object已经在sysfs中了         
        kobj-&gt;state_in_sysfs = 1;      
     return error;
  } 
 这段代码比较简单，它主要完成kobject父结点的判断和选定，然后再调用create_dir（）在sysfs创建相关信息。该函数代码如下：
  static int create_dir(struct kobject *kobj) {     
    int error = 0;     
    
    if (kobject_name(kobj)) {          
      //为kobject创建目录         
      error = sysfs_create_dir(kobj);         
      if (!error) {              
      //为kobject-&gt;ktype中的属性创建文件              
        error = populate_dir(kobj);              
        if (error)                   
            sysfs_remove_dir(kobj);         
    }     
 }     
 
 return error;
 } 
 
 int sysfs_create_dir(struct kobject * kobj){     
    struct sysfs_dirent *parent_sd, *sd;     
    int error = 0;      
    
    BUG_ON(!kobj);     /*如果kobject的parnet存在。就在目录点的目录下创建这个目录。如果没有父结点不存在，就在/sys下面创建结点。*/     
    if (kobj-&gt;parent)         
        parent_sd = kobj-&gt;parent-&gt;sd;     
    else         
        parent_sd = &amp;sysfs_root;      //在sysfs中创建目录     
     //create_dir（）就是在sysfs中创建目录的接口，在之前已经详细分析过了     
     error = create_dir(kobj, parent_sd, kobject_name(kobj), &amp;sd);     
     if (!error)         
        kobj-&gt;sd = sd;     
     return error;
  }
  接着看为kobject-&gt;ktype中的属性创建文件。这是在populate_dir（）中完成的。代码如下：
  static int populate_dir(struct kobject *kobj){     
    struct kobj_type *t = get_ktype(kobj);     
    struct attribute *attr;     
    int error = 0;     
    int i;      
    
    if (t &amp;&amp; t-&gt;default_attrs) {         
        for (i = 0; (attr = t-&gt;default_attrs[i]) != NULL; i++) {              
            error = sysfs_create_file(kobj, attr);              
            if (error)                   
                break;         
        }     
    }
         
    return error;
 }
 这段代码比较简单。它遍历ktype中的属性。然后为其建立文件。请注意：文件的操作最后都会回溯到ktype-&gt;sysfs_ops的show和store这两个函数中.假如对于上面的bus_register()函数传入的参数为：
 struct bus_type ldd_bus_type = {
        .name = &quot;ldd&quot;,
        .match = ldd_match,
        .hotplug  = ldd_hotplug,
};
则通过bus_register()函数调用后，在/sys/bus/目录下出现的框图大概是这样的：。。。。在kset_init()里会初始化kset中的其它字段.然后调用kobject_add_internal()为其内嵌的kobject结构建立空间层次结构.
之后因为添加了kset.会产生一个事件.这个事件是通过用户空间的hotplug程序处理的.这就是kset明显不同于kobject的地方.</rich_text></node><node name="device register" prog_lang="custom-colors" readonly="False" tags="" unique_id="5"><rich_text>    这篇文章也是从别的地方转载的，我的目的是搞清楚：当调用device_register()函数向系统注册一个设备的时候，我注册进去的设备是如何和他 父设备关联起来的，以及如何加入到他所在的总线设备中的，但针对这个问题，好像通过这篇文章了解的并不透彻。但具体到代码分析的最后关于设备和驱动是如何 绑定的，这并不是我这篇文章的重点，但大概看了一下，有点类型i2c总线上设备和驱动的匹配过程。
看下图：
 
</rich_text><rich_text justification="left"></rich_text><rich_text>
在分析程序的过程中看到了把kobj-&gt;kset赋值为(kset)device_kset(即图中黑线实现的部分),但没有看到什么时候把 dev-&gt;kobj-&gt;parent赋值为device_kset-&gt;kobj(图中的红线实现的部分)，在调用函数 setup_parent()中是对dev-&gt;kobject-&gt;parent赋值了，但不明白在setup_parent()函数中是怎么 找到device_kset的。说实在话，对setup_parent()函数不明白，也没分析清楚。（在此补充一下，分析了一下 setup_parent()函数，实现了红线的部分）
 
这篇文章将那个3个注册函数说说，把整个设备模型框架搭建起来，当然，是重点部分了。在这之前希望你已经懂得总线、设备、驱动的数据结构及其里面的有关数据结构。关于调用的函数，如果显示为粗体，那么在下面我有分析。
 
转载于：</rich_text><rich_text link="webs http://student.csdn.net/space.php?uid=111596&amp;do=blog&amp;id=56043">http://student.csdn.net/space.php?uid=111596&amp;do=blog&amp;id=56043</rich_text><rich_text>

来自：drivers/base/core.c
int device_register(struct device *dev)
{
    device_initialize(dev);                 //初始化设备
    return device_add(dev);              //添加设备
}

void device_initialize(struct device *dev)
{
    //图中的黑线实现部分的代码
    dev-&gt;kobj.kset = devices_kset;                //设置设备的kobject所属集合，devices_kset其实在第一层，sys/devices/
    kobject_init(&amp;dev-&gt;kobj, &amp;device_ktype);       //初始化设备的kobject
    INIT_LIST_HEAD(&amp;dev-&gt;dma_pools);           //初始化设备的DMA池，用于传递大数据
    mutex_init(&amp;dev-&gt;mutex);                              //初始化互斥锁
    lockdep_set_novalidate_class(&amp;dev-&gt;mutex);
    spin_lock_init(&amp;dev-&gt;devres_lock);               //初始化自旋锁，用于同步子设备链表
    INIT_LIST_HEAD(&amp;dev-&gt;devres_head);         //初始化子设备链表头
    device_pm_init(dev);
    set_dev_node(dev, -1);
}

int device_add(struct device *dev)
{
    struct device *parent = NULL;
    struct class_interface *class_intf;
    int error = -EINVAL;

    dev = get_device(dev);         //增加设备的kobject的引用计数
    if (!dev)
        goto done;

    if (!dev-&gt;p) {                  
        error = device_private_init(dev);             //初始化设备的私有成员
        if (error)
            goto done;
    }

    /*
     * for statically allocated devices, which should all be converted
     * some day, we need to initialize the name. We prevent reading back
     * the name, and force the use of dev_name()
     */
    if (dev-&gt;init_name) {
        dev_set_name(dev, &quot;%s&quot;, dev-&gt;init_name);         //设置设备kobject的名称
        dev-&gt;init_name = NULL;
    }

    if (!dev_name(dev)) {
        error = -EINVAL;
        goto name_error;
    }

    pr_debug(&quot;device: '%s': %s/n&quot;, dev_name(dev), __func__);

    parent = get_device(dev-&gt;parent);         //增加父设备kobject的引用
    setup_parent(dev, parent);                    //设置该设备kobject父对象（父对象是谁呢）

    /* use parent numa_node */
    if (parent)
        set_dev_node(dev, dev_to_node(parent));

    /* first, register with generic layer. */
    /* we require the name to be set before, and pass NULL */
    error = kobject_add(&amp;dev-&gt;kobj, dev-&gt;kobj.parent, NULL);          //将设备kobject添加进父对象设备模型
    if (error)
        goto Error;

    /* notify platform of device entry */
    if (platform_notify)
        platform_notify(dev);

    error = device_create_file(dev, &amp;uevent_attr);
    if (error)
        goto attrError;

    if (MAJOR(dev-&gt;devt)) {
        error = device_create_file(dev, &amp;devt_attr);
        if (error)
            goto ueventattrError;

        error = device_create_sys_dev_entry(dev);
        if (error)
            goto devtattrError;

        devtmpfs_create_node(dev);
    }

    error = device_add_class_symlinks(dev);
    if (error)
        goto SymlinkError;
    error = device_add_attrs(dev);
    if (error)
        goto AttrsError;
   调用bus_add_device在sysfs中添加两个链接：一个在总线目录下指向设备，另一个在设备的目录下指向总线子系统。
    error = bus_add_device(dev);          //将设备添加进总线中
    if (error)
        goto BusError;
    error = dpm_sysfs_add(dev);
    if (error)
        goto DPMError;
    device_pm_add(dev);

    /* Notify clients of device addition.  This call must come
     * after dpm_sysf_add() and before kobject_uevent().
     */
    if (dev-&gt;bus)
        blocking_notifier_call_chain(&amp;dev-&gt;bus-&gt;p-&gt;bus_notifier,
                         BUS_NOTIFY_ADD_DEVICE, dev);

    kobject_uevent(&amp;dev-&gt;kobj, KOBJ_ADD);
    bus_probe_device试图自动探测设备。如果能够找到合适的驱动程序，则将设备添加到bus-&gt;klist_devices.设备还需要添加到父结点的子结点链表中，图中蓝色线的实现部分（此前，设备知道其父结点，但父结点不知道子结点的存在）
    bus_probe_device(dev);                                       //现在该为设备在总线上寻找合适的驱动了
    if (parent)
        klist_add_tail(&amp;dev-&gt;p-&gt;knode_parent,
                   &amp;parent-&gt;p-&gt;klist_children);                   //将设备添加到父设备的子设备链表中

    if (dev-&gt;class) {
        mutex_lock(&amp;dev-&gt;class-&gt;p-&gt;class_mutex);
        /* tie the class to the device */
        klist_add_tail(&amp;dev-&gt;knode_class,
                   &amp;dev-&gt;class-&gt;p-&gt;class_devices);

        /* notify any interfaces that the device is here */
        list_for_each_entry(class_intf,
                    &amp;dev-&gt;class-&gt;p-&gt;class_interfaces, node)
            if (class_intf-&gt;add_dev)
                class_intf-&gt;add_dev(dev, class_intf);
        mutex_unlock(&amp;dev-&gt;class-&gt;p-&gt;class_mutex);
    }
done:
    put_device(dev);
    return error;
 DPMError:
    bus_remove_device(dev);
 BusError:
    device_remove_attrs(dev);
 AttrsError:
    device_remove_class_symlinks(dev);
 SymlinkError:
    if (MAJOR(dev-&gt;devt))
        devtmpfs_delete_node(dev);
    if (MAJOR(dev-&gt;devt))
        device_remove_sys_dev_entry(dev);
 devtattrError:
    if (MAJOR(dev-&gt;devt))
        device_remove_file(dev, &amp;devt_attr);
 ueventattrError:
    device_remove_file(dev, &amp;uevent_attr);
 attrError:
    kobject_uevent(&amp;dev-&gt;kobj, KOBJ_REMOVE);
    kobject_del(&amp;dev-&gt;kobj);
 Error:
    cleanup_device_parent(dev);
    if (parent)
        put_device(parent);
name_error:
    kfree(dev-&gt;p);
    dev-&gt;p = NULL;
    goto done;
}
 
int device_private_init(struct device *dev)
{
    dev-&gt;p = kzalloc(sizeof(*dev-&gt;p), GFP_KERNEL);
    if (!dev-&gt;p)
        return -ENOMEM;
    dev-&gt;p-&gt;device = dev;                                                //指向设备自己
    klist_init(&amp;dev-&gt;p-&gt;klist_children, klist_children_get,
           klist_children_put);             //初始化设备私有成员的子设备链表，还有两个函数，关于增加和减少子设备引用计数的
    return 0;
}
static void setup_parent(struct device *dev, struct device *parent)
{
    struct kobject *kobj;
    kobj = get_device_parent(dev, parent);        //得到设备kobject的父对象
    if (kobj)
        dev-&gt;kobj.parent = kobj;
}
int bus_add_device(struct device *dev)
{
    struct bus_type *bus = bus_get(dev-&gt;bus);
    int error = 0;

    if (bus) {
        pr_debug(&quot;bus: '%s': add device %s/n&quot;, bus-&gt;name, dev_name(dev));
        error = device_add_attrs(bus, dev);
        if (error)
            goto out_put;
        error = sysfs_create_link(&amp;bus-&gt;p-&gt;devices_kset-&gt;kobj,
                        &amp;dev-&gt;kobj, dev_name(dev));
        if (error)
            goto out_id;
        error = sysfs_create_link(&amp;dev-&gt;kobj,
                &amp;dev-&gt;bus-&gt;p-&gt;subsys.kobj, &quot;subsystem&quot;);
        if (error)
            goto out_subsys;
        error = make_deprecated_bus_links(dev);
        if (error)
            goto out_deprecated;
        klist_add_tail(&amp;dev-&gt;p-&gt;knode_bus, &amp;bus-&gt;p-&gt;klist_devices);      //关键点了，将设备添加进总线的设备链表
    }
    return 0;

out_deprecated:
    sysfs_remove_link(&amp;dev-&gt;kobj, &quot;subsystem&quot;);
out_subsys:
    sysfs_remove_link(&amp;bus-&gt;p-&gt;devices_kset-&gt;kobj, dev_name(dev));
out_id:
    device_remove_attrs(bus, dev);
out_put:
    bus_put(dev-&gt;bus);
    return error;
}
void bus_probe_device(struct device *dev)
{
    struct bus_type *bus = dev-&gt;bus;
    int ret;

    if (bus &amp;&amp; bus-&gt;p-&gt;drivers_autoprobe) {        //如果需要自动匹配驱动
        ret = device_attach(dev);                          //为设备寻找驱动
        WARN_ON(ret &lt; 0);
    }
}
int device_attach(struct device *dev)
{
    int ret = 0;

    device_lock(dev);          //锁住设备
    if (dev-&gt;driver) {                                    //如果设备有驱动
        ret = device_bind_driver(dev);          //那么将设备和驱动绑定
        if (ret == 0)
            ret = 1;
        else {
            dev-&gt;driver = NULL;
            ret = 0;
        }
    } else {
        pm_runtime_get_noresume(dev);
        ret = bus_for_each_drv(dev-&gt;bus, NULL, dev, __device_attach); //否则，在总线上寻找驱动与该设备进行匹配
        pm_runtime_put_sync(dev);
    }
    device_unlock(dev);
    return ret;
}
int device_bind_driver(struct device *dev)
{
    int ret;

    ret = driver_sysfs_add(dev);    
    if (!ret)
        driver_bound(dev);   //驱动绑定设备
    return ret;
}
int bus_for_each_drv(struct bus_type *bus, struct device_driver *start,
             void *data, int (*fn)(struct device_driver *, void *))
{
    struct klist_iter i;
    struct device_driver *drv;
    int error = 0;

    if (!bus)
        return -EINVAL;

    klist_iter_init_node(&amp;bus-&gt;p-&gt;klist_drivers, &amp;i,
                 start ? &amp;start-&gt;p-&gt;knode_bus : NULL);   //初始化i结构体
    while ((drv = next_driver(&amp;i)) &amp;&amp; !error)   //遍历总线上的驱动
        error = fn(drv, data);                            //将驱动和设备进行匹配，这里的fn=__device_attach
    klist_iter_exit(&amp;i);
    return error;
}
 
static int __device_attach(struct device_driver *drv, void *data)
{
    struct device *dev = data;

    if (!driver_match_device(drv, dev))     //现用总线上的match匹配函数进行低级匹配
        return 0;

    return driver_probe_device(drv, dev);   //在来高级匹配
}
 
static inline int driver_match_device(struct device_driver *drv,  struct device *dev)
{
    return drv-&gt;bus-&gt;match ? drv-&gt;bus-&gt;match(dev, drv) : 1;      //看到没，这里要调用总线上定义的match函数
}
 
int driver_probe_device(struct device_driver *drv, struct device *dev)
{
    int ret = 0;

    if (!device_is_registered(dev))  //设备是否注册
        return -ENODEV;

    pr_debug(&quot;bus: '%s': %s: matched device %s with driver %s/n&quot;,
         drv-&gt;bus-&gt;name, __func__, dev_name(dev), drv-&gt;name);

    pm_runtime_get_noresume(dev);
    pm_runtime_barrier(dev);
    ret = really_probe(dev, drv);  //调用真正的匹配
    pm_runtime_put_sync(dev);

    return ret;
}
 
static int really_probe(struct device *dev, struct device_driver *drv)
{
    int ret = 0;

    atomic_inc(&amp;probe_count);
    pr_debug(&quot;bus: '%s': %s: probing driver %s with device %s/n&quot;,
         drv-&gt;bus-&gt;name, __func__, drv-&gt;name, dev_name(dev));
    WARN_ON(!list_empty(&amp;dev-&gt;devres_head));

    dev-&gt;driver = drv;
    if (driver_sysfs_add(dev)) {
        printk(KERN_ERR &quot;%s: driver_sysfs_add(%s) failed/n&quot;,
            __func__, dev_name(dev));
        goto probe_failed;
    }

    if (dev-&gt;bus-&gt;probe) {         //现用总线上定义的probe函数尝试一下
        ret = dev-&gt;bus-&gt;probe(dev);
        if (ret)
            goto probe_failed;
    } else if (drv-&gt;probe) {       //如果不行，在用驱动上的probe尝试
        ret = drv-&gt;probe(dev);
        if (ret)
            goto probe_failed;
    }

    driver_bound(dev);      //驱动绑定设备
    ret = 1;
    pr_debug(&quot;bus: '%s': %s: bound device %s to driver %s/n&quot;,
         drv-&gt;bus-&gt;name, __func__, dev_name(dev), drv-&gt;name);
    goto done;

probe_failed:
    devres_release_all(dev);
    driver_sysfs_remove(dev);
    dev-&gt;driver = NULL;

    if (ret != -ENODEV &amp;&amp; ret != -ENXIO) {
        /* driver matched but the probe failed */
        printk(KERN_WARNING
               &quot;%s: probe of %s failed with error %d/n&quot;,
               drv-&gt;name, dev_name(dev), ret);
    }
    /*
     * Ignore errors returned by -&gt;probe so that the next driver can try
     * its luck.
     */
    ret = 0;
done:
    atomic_dec(&amp;probe_count);
    wake_up(&amp;probe_waitqueue);
    return ret;
}
 
</rich_text><encoded_png char_offset="204"></encoded_png></node><node name="i2c" prog_lang="custom-colors" readonly="False" tags="" unique_id="6"><rich_text>
</rich_text><node name="i2c bus" prog_lang="custom-colors" readonly="False" tags="" unique_id="7"><rich_text>在drivers/i2c/busses下包含各种I2C总线驱动，如S3C2440的I2C总线驱动i2c-s3c2410.c，使用GPIO模拟I2C总线的驱动i2c-gpio.c，这里只分析i2c-gpio.c。
i2c-gpio.c它是gpio模拟I2C总线的驱动，总线也是个设备，在这里将总线当作平台设备处理，那驱动当然是平台设备驱动，看它的驱动注册和注销函数。

1. static int __init i2c_gpio_init(void)  
2. {  
3.     int ret;  
4.   
5.     ret = platform_driver_register(&amp;i2c_gpio_driver);  
6.     if (ret)  
7.         printk(KERN_ERR &quot;i2c-gpio: probe failed: %d\n&quot;, ret);  
8.   
9.     return ret;  
10. }  
11. module_init(i2c_gpio_init);  
12.   
13. static void __exit i2c_gpio_exit(void)  
14. {  
15.     platform_driver_unregister(&amp;i2c_gpio_driver);  
16. }  
17. module_exit(i2c_gpio_exit);  

没有什么好说的，它的初始化和注销函数就是注册和注销一个平台设备驱动，直接看它的platform_driver结构i2c_gpio_driver
1. static struct platform_driver i2c_gpio_driver = {  
2.     .driver     = {  
3.         .name   = &quot;i2c-gpio&quot;,  
4.         .owner  = THIS_MODULE,  
5.     },  
6.     .probe      = i2c_gpio_probe,  
7.     .remove     = __devexit_p(i2c_gpio_remove),  
8. };  
小提示：是不是我们应该注册一个平台设备，以和这个驱动匹配，那先来注册这个平台设备。
先定义这个平台设备结构，至于怎么注册平台设备我想大家都应该知道吧。
1. #if defined(CONFIG_I2C_GPIO) | \   
2.     defined(CONFIG_I2C_GPIO_MODULE)   
3. static struct i2c_gpio_platform_data i2c_gpio_adapter_data = {   
4.     .sda_pin = PINID_GPMI_D05,   
5.     .scl_pin = PINID_GPMI_D04,   
6.     .udelay = 5, //100KHz   
7.     .timeout = 100,   
8.     .sda_is_open_drain = 1,   
9.     .scl_is_open_drain = 1,   
10. };   
11.   
12. static struct platform_device i2c_gpio = {   
13.     .name = &quot;i2c-gpio&quot;,   
14.     .id = 0,   
15.     .dev = {   
16.         .platform_data = &amp;i2c_gpio_adapter_data,   
17.         .release = mxs_nop_release,   
18.         },   
19. };   
20. #endif  
在这里struct platform_device结构中的name字段要和struct platform_driver中driver字段中name字段要相同，因为平台总线就是通过这个来判断设备和驱动是否匹配的。注意这里的id将它赋值了0，至于到底有什么用，后面再来细看。这个结构里面还包含一个最重要的数据i2c_gpio_adapter_data，它struct  i2c_gpio_platform_data结构类型变量，这个结构体类型定义在include/linux/i2c-gpio.h中。
1. struct i2c_gpio_platform_data {  
2.     unsigned int    sda_pin;  
3.     unsigned int    scl_pin;  
4.     int     udelay;  
5.     int     timeout;  
6.     unsigned int    sda_is_open_drain:1;  
7.     unsigned int    scl_is_open_drain:1;  
8.     unsigned int    scl_is_output_only:1;  
9. };  
这个结构体主要描述gpio模拟i2c总线，sda_pin和scl_pin表示使用哪两个IO管脚来模拟I2C总线，udelay和timeout分别为它的时钟频率和超时时间，sda_is_open_drain和scl_is_open_drain表示sda、scl这两个管脚是否是开漏(opendrain)电路，如果是设置为1，scl_is_output_only表示scl这个管脚是否只是作为输出，如果是设置为1。
回到驱动中，看其中最重要的i2c_gpio_probe。
1. static int __devinit i2c_gpio_probe(struct platform_device *pdev)  
2. {  
3.     struct i2c_gpio_platform_data *pdata;  
4.     struct i2c_algo_bit_data *bit_data;  
5.     struct i2c_adapter *adap;  
6.     int ret;  
7.   
8.     pdata = pdev-&gt;dev.platform_data;  
9.     if (!pdata)  
10.         return -ENXIO;  
11.   
12.     ret = -ENOMEM;  
13.     adap = kzalloc(sizeof(struct i2c_adapter), GFP_KERNEL);  
14.     if (!adap)  
15.         goto err_alloc_adap;  
16.     bit_data = kzalloc(sizeof(struct i2c_algo_bit_data), GFP_KERNEL);  
17.     if (!bit_data)  
18.         goto err_alloc_bit_data;  
19.   
20.     ret = gpio_request(pdata-&gt;sda_pin, &quot;sda&quot;);  
21.     if (ret)  
22.         goto err_request_sda;  
23.     ret = gpio_request(pdata-&gt;scl_pin, &quot;scl&quot;);  
24.     if (ret)  
25.         goto err_request_scl;  
26.   
27.     if (pdata-&gt;sda_is_open_drain) {  
28.         gpio_direction_output(pdata-&gt;sda_pin, 1);  
29.         bit_data-&gt;setsda = i2c_gpio_setsda_val;  
30.     } else {  
31.         gpio_direction_input(pdata-&gt;sda_pin);  
32.         bit_data-&gt;setsda = i2c_gpio_setsda_dir;  
33.     }  
34.   
35.     if (pdata-&gt;scl_is_open_drain || pdata-&gt;scl_is_output_only) {  
36.         gpio_direction_output(pdata-&gt;scl_pin, 1);  
37.         bit_data-&gt;setscl = i2c_gpio_setscl_val;  
38.     } else {  
39.         gpio_direction_input(pdata-&gt;scl_pin);  
40.         bit_data-&gt;setscl = i2c_gpio_setscl_dir;  
41.     }  
42.   
43.     if (!pdata-&gt;scl_is_output_only)  
44.         bit_data-&gt;getscl = i2c_gpio_getscl;  
45.     bit_data-&gt;getsda = i2c_gpio_getsda;  
46.   
47.     if (pdata-&gt;udelay)  
48.         bit_data-&gt;udelay = pdata-&gt;udelay;  
49.     else if (pdata-&gt;scl_is_output_only)  
50.         bit_data-&gt;udelay = 50;           /* 10 kHz */  
51.     else  
52.         bit_data-&gt;udelay = 5;            /* 100 kHz */  
53.   
54.     if (pdata-&gt;timeout)  
55.         bit_data-&gt;timeout = pdata-&gt;timeout;  
56.     else  
57.         bit_data-&gt;timeout = HZ / 10;     /* 100 ms */  
58.   
59.     bit_data-&gt;data = pdata;  
60.   
61.     adap-&gt;owner = THIS_MODULE;  
62.     snprintf(adap-&gt;name, sizeof(adap-&gt;name), &quot;i2c-gpio%d&quot;, pdev-&gt;id);  
63.     adap-&gt;algo_data = bit_data;  
64.     adap-&gt;class = I2C_CLASS_HWMON | I2C_CLASS_SPD;  
65.     adap-&gt;dev.parent = &amp;pdev-&gt;dev;  
66.   
67.     /* 
68.      * If &quot;dev-&gt;id&quot; is negative we consider it as zero. 
69.      * The reason to do so is to avoid sysfs names that only make 
70.      * sense when there are multiple adapters. 
71.      */  
72.     adap-&gt;nr = (pdev-&gt;id != -1) ? pdev-&gt;id : 0;  
73.     ret = i2c_bit_add_numbered_bus(adap);  
74.     if (ret)  
75.         goto err_add_bus;  
76.   
77.     platform_set_drvdata(pdev, adap);  
78.   
79.     dev_info(&amp;pdev-&gt;dev, &quot;using pins %u (SDA) and %u (SCL%s)\n&quot;,  
80.          pdata-&gt;sda_pin, pdata-&gt;scl_pin,  
81.          pdata-&gt;scl_is_output_only  
82.          ? &quot;, no clock stretching&quot; : &quot;&quot;);  
83.   
84.     return 0;  
85.   
86. err_add_bus:  
87.     gpio_free(pdata-&gt;scl_pin);  
88. err_request_scl:  
89.     gpio_free(pdata-&gt;sda_pin);  
90. err_request_sda:  
91.     kfree(bit_data);  
92. err_alloc_bit_data:  
93.     kfree(adap);  
94. err_alloc_adap:  
95.     return ret;  
96. }  
从这句开始pdata= pdev-&gt;dev.platform_data;这不正是我们在平台设备结构中定义的数据吗。然后是使用kzalloc申请两段内存空间，一个是为结构struct  i2c_adapter申请的，另一个是为结构structi2c_algo_bit_data申请的。
struct i2c_adapter结构定义在include/linux/i2c.h中
1. struct i2c_adapter {  
2.     struct module *owner;  
3.     unsigned int id;  
4.     unsigned int class;       /* classes to allow probing for */  
5.     const struct i2c_algorithm *algo; /* the algorithm to access the bus */  
6.     void *algo_data;  
7.   
8.     /* data fields that are valid for all devices   */  
9.     u8 level;           /* nesting level for lockdep */  
10.     struct mutex bus_lock;  
11.   
12.     int timeout;            /* in jiffies */  
13.     int retries;  
14.     struct device dev;      /* the adapter device */  
15.   
16.     int nr;  
17.     char name[48];  
18.     struct completion dev_released;  
19. };  
在I2C子系统中，I2C适配器使用结构struct i2c_adapter描述，代表一条实际的I2C总线。
struct i2c_algo_bit_data结构定义在include/linux/i2c-algo-bit.h中
1. struct i2c_algo_bit_data {  
2.     void *data;     /* private data for lowlevel routines */  
3.     void (*setsda) (void *data, int state);  
4.     void (*setscl) (void *data, int state);  
5.     int  (*getsda) (void *data);  
6.     int  (*getscl) (void *data);  
7.   
8.     /* local settings */  
9.     int udelay;     /* half clock cycle time in us, 
10.                    minimum 2 us for fast-mode I2C, 
11.                    minimum 5 us for standard-mode I2C and SMBus, 
12.                    maximum 50 us for SMBus */  
13.     int timeout;        /* in jiffies */  
14. };  
这个结构主要用来定义对GPIO管脚的一些操作，还是回到probe中
接下来使用gpio_request去申请这个两个GPIO管脚，申请的目的是为了防止重复使用管脚。然后是根据struct i2c_gpio_platform_data结构中定义的后面三个数据对struct  i2c_algo_bit_data结构中的函数指针做一些赋值操作。接下来是I2C时钟频率和超时设置，如果在struct i2c_gpio_platform_data结构中定义了值，那么就采用定义的值，否则就采用默认的值。然后是对struct  i2c_adapter结构的一些赋值操作，比如指定它的父设备为这里的平台设备，前面在平台设备中定义了一个id，这里用到了，赋给了struct i2c_adapter中的nr成员，这个值表示总线号，这里的总线号和硬件无关，只是在软件上的区分。然后到了最后的主角i2c_bit_add_numbered_bus，这个函数定义在drivers/i2c/algos/i2c-algo-bit.c中
1. int i2c_bit_add_numbered_bus(struct i2c_adapter *adap)  
2. {  
3.     int err;  
4.   
5.     err = i2c_bit_prepare_bus(adap);  
6.     if (err)  
7.         return err;  
8.   
9.     return i2c_add_numbered_adapter(adap);  
10. }  
先看i2c_bit_prepare_bus函数
1. static int i2c_bit_prepare_bus(struct i2c_adapter *adap)  
2. {  
3.     struct i2c_algo_bit_data *bit_adap = adap-&gt;algo_data;  
4.   
5.     if (bit_test) {  
6.         int ret = test_bus(bit_adap, adap-&gt;name);  
7.         if (ret &lt; 0)  
8.             return -ENODEV;  
9.     }  
10.   
11.     /* register new adapter to i2c module... */  
12.     adap-&gt;algo = &amp;i2c_bit_algo;  
13.     adap-&gt;retries = 3;  
14.   
15.     return 0;  
16. }  
bit_test为模块参数，这里不管它，看这样一句adap-&gt;algo= &amp;i2c_bit_algo;
来看这个结构定义
1. static const struct i2c_algorithm i2c_bit_algo = {  
2.     .master_xfer    = bit_xfer,  
3.     .functionality  = bit_func,  
4. };  
先看这个结构类型在哪里定义的include/linux/i2c.h
1. struct i2c_algorithm {  
2.     /* If an adapter algorithm can't do I2C-level access, set master_xfer 
3.        to NULL. If an adapter algorithm can do SMBus access, set 
4.        smbus_xfer. If set to NULL, the SMBus protocol is simulated 
5.        using common I2C messages */  
6.     /* master_xfer should return the number of messages successfully 
7.        processed, or a negative value on error */  
8.     int (*master_xfer)(struct i2c_adapter *adap, struct i2c_msg *msgs,  
9.                int num);  
10.     int (*smbus_xfer) (struct i2c_adapter *adap, u16 addr,  
11.                unsigned short flags, char read_write,  
12.                u8 command, int size, union i2c_smbus_data *data);  
13.   
14.     /* To determine what the adapter supports */  
15.     u32 (*functionality) (struct i2c_adapter *);  
16. };  
其实也没什么，就三个函数指针外加一长串注释
这个结构的master_xfer指针为主机的数据传输，具体来看bit_xfer这个函数，这个函数和I2C协议相关，I2C协议规定要先发送起始信号，才能开始进行数据的传输，最后数据传输完成后发送停止信号，看接下来代码对I2C协议要熟悉，所以这里的关键点是I2C协议。
1. static int bit_xfer(struct i2c_adapter *i2c_adap,  
2.             struct i2c_msg msgs[], int num)  
3. {  
4.     struct i2c_msg *pmsg;  
5.     struct i2c_algo_bit_data *adap = i2c_adap-&gt;algo_data;  
6.     int i, ret;  
7.     unsigned short nak_ok;  
8.   
9.     bit_dbg(3, &amp;i2c_adap-&gt;dev, &quot;emitting start condition\n&quot;);  
10.     /*发送起始信号*/  
11.     i2c_start(adap);  
12.     for (i = 0; i &lt; num; i++) {  
13.         pmsg = &amp;msgs[i];  
14.         nak_ok = pmsg-&gt;flags &amp; I2C_M_IGNORE_NAK;  
15.         if (!(pmsg-&gt;flags &amp; I2C_M_NOSTART)) {  
16.             if (i) {  
17.                 bit_dbg(3, &amp;i2c_adap-&gt;dev, &quot;emitting &quot;  
18.                     &quot;repeated start condition\n&quot;);  
19.                 i2c_repstart(adap);  
20.             }  
21.             ret = bit_doAddress(i2c_adap, pmsg);  
22.             if ((ret != 0) &amp;&amp; !nak_ok) {  
23.                 bit_dbg(1, &amp;i2c_adap-&gt;dev, &quot;NAK from &quot;  
24.                     &quot;device addr 0x%02x msg #%d\n&quot;,  
25.                     msgs[i].addr, i);  
26.                 goto bailout;  
27.             }  
28.         }  
29.         if (pmsg-&gt;flags &amp; I2C_M_RD) {  
30.             /* read bytes into buffer*/  
31.             ret = readbytes(i2c_adap, pmsg);  
32.             if (ret &gt;= 1)  
33.                 bit_dbg(2, &amp;i2c_adap-&gt;dev, &quot;read %d byte%s\n&quot;,  
34.                     ret, ret == 1 ? &quot;&quot; : &quot;s&quot;);  
35.             if (ret &lt; pmsg-&gt;len) {  
36.                 if (ret &gt;= 0)  
37.                     ret = -EREMOTEIO;  
38.                 goto bailout;  
39.             }  
40.         } else {  
41.             /* write bytes from buffer */  
42.             ret = sendbytes(i2c_adap, pmsg);  
43.             if (ret &gt;= 1)  
44.                 bit_dbg(2, &amp;i2c_adap-&gt;dev, &quot;wrote %d byte%s\n&quot;,  
45.                     ret, ret == 1 ? &quot;&quot; : &quot;s&quot;);  
46.             if (ret &lt; pmsg-&gt;len) {  
47.                 if (ret &gt;= 0)  
48.                     ret = -EREMOTEIO;  
49.                 goto bailout;  
50.             }  
51.         }  
52.     }  
53.     ret = i;  
54.   
55. bailout:  
56.     bit_dbg(3, &amp;i2c_adap-&gt;dev, &quot;emitting stop condition\n&quot;);  
57.     i2c_stop(adap);  
58.     return ret;  
59. }  
1.发送起始信号
i2c_start(adap);
看这个函数前，先看I2C协议怎么定义起始信号的
</rich_text><rich_text justification="left"></rich_text><rich_text>
起始信号就是在SCL为高电平期间，SDA从高到低的跳变，再来看代码是怎么实现的
1. static void i2c_start(struct i2c_algo_bit_data *adap)  
2. {  
3.     /* assert: scl, sda are high */  
4.     setsda(adap, 0);  
5.     udelay(adap-&gt;udelay);  
6.     scllo(adap);  
7. }  
这些setsda和setscl这些都是使用的总线的函数，在这里是使用的i2c-gpio.c中定义的函数，还记得那一系列判断赋值吗。
1. #define setsda(adap, val)   adap-&gt;setsda(adap-&gt;data, val)  
2. #define setscl(adap, val)   adap-&gt;setscl(adap-&gt;data, val)  
3. #define getsda(adap)        adap-&gt;getsda(adap-&gt;data)  
4. #define getscl(adap)        adap-&gt;getscl(adap-&gt;data)  
2.往下是个大的for循环
到了这里又不得不说这个struct i2c_msg结构，这个结构定义在include/linux/i2c.h中
1. struct i2c_msg {  
2.     __u16 addr; /* slave address            */  
3.     __u16 flags;  
4. #define I2C_M_TEN       0x0010  /* this is a ten bit chip address */  
5. #define I2C_M_RD        0x0001  /* read data, from slave to master */  
6. #define I2C_M_NOSTART       0x4000  /* if I2C_FUNC_PROTOCOL_MANGLING */  
7. #define I2C_M_REV_DIR_ADDR  0x2000  /* if I2C_FUNC_PROTOCOL_MANGLING */  
8. #define I2C_M_IGNORE_NAK    0x1000  /* if I2C_FUNC_PROTOCOL_MANGLING */  
9. #define I2C_M_NO_RD_ACK     0x0800  /* if I2C_FUNC_PROTOCOL_MANGLING */  
10. #define I2C_M_RECV_LEN      0x0400  /* length will be first received byte */  
11.     __u16 len;      /* msg length               */  
12.     __u8 *buf;      /* pointer to msg data          */  
13. };  
这个结构专门用于数据传输相关的addr为I2C设备地址，flags为一些标志位，len为数据的长度，buf为数据。这里宏定义的一些标志还是需要了解一下。
I2C_M_TEN表示10位设备地址
I2C_M_RD读标志
I2C_M_NOSTART无起始信号标志
I2C_M_IGNORE_NAK忽略应答信号标志
回到for，这里的num代表有几个struct i2c_msg，进入for语句，接下来是个if语句，判断这个设备是否定义了I2C_M_NOSTART标志，这个标志主要用于写操作时，不必重新发送起始信号和设备地址，但是对于读操作就不同了，要调用i2c_repstart这个函数去重新发送起始信号，调用bit_doAddress函数去重新构造设备地址字节，来看这个函数。
1. static int bit_doAddress(struct i2c_adapter *i2c_adap, struct i2c_msg *msg)  
2. {  
3.     unsigned short flags = msg-&gt;flags;  
4.     unsigned short nak_ok = msg-&gt;flags &amp; I2C_M_IGNORE_NAK;  
5.     struct i2c_algo_bit_data *adap = i2c_adap-&gt;algo_data;  
6.   
7.     unsigned char addr;  
8.     int ret, retries;  
9.   
10.     retries = nak_ok ? 0 : i2c_adap-&gt;retries;  
11.   
12.     if (flags &amp; I2C_M_TEN) {  
13.         /* a ten bit address */  
14.         addr = 0xf0 | ((msg-&gt;addr &gt;&gt; 7) &amp; 0x03);  
15.         bit_dbg(2, &amp;i2c_adap-&gt;dev, &quot;addr0: %d\n&quot;, addr);  
16.         /* try extended address code...*/  
17.         ret = try_address(i2c_adap, addr, retries);  
18.         if ((ret != 1) &amp;&amp; !nak_ok)  {  
19.             dev_err(&amp;i2c_adap-&gt;dev,  
20.                 &quot;died at extended address code\n&quot;);  
21.             return -EREMOTEIO;  
22.         }  
23.         /* the remaining 8 bit address */  
24.         ret = i2c_outb(i2c_adap, msg-&gt;addr &amp; 0x7f);  
25.         if ((ret != 1) &amp;&amp; !nak_ok) {  
26.             /* the chip did not ack / xmission error occurred */  
27.             dev_err(&amp;i2c_adap-&gt;dev, &quot;died at 2nd address code\n&quot;);  
28.             return -EREMOTEIO;  
29.         }  
30.         if (flags &amp; I2C_M_RD) {  
31.             bit_dbg(3, &amp;i2c_adap-&gt;dev, &quot;emitting repeated &quot;  
32.                 &quot;start condition\n&quot;);  
33.             i2c_repstart(adap);  
34.             /* okay, now switch into reading mode */  
35.             addr |= 0x01;  
36.             ret = try_address(i2c_adap, addr, retries);  
37.             if ((ret != 1) &amp;&amp; !nak_ok) {  
38.                 dev_err(&amp;i2c_adap-&gt;dev,  
39.                     &quot;died at repeated address code\n&quot;);  
40.                 return -EREMOTEIO;  
41.             }  
42.         }  
43.     } else {        /* normal 7bit address  */  
44.         addr = msg-&gt;addr &lt;&lt; 1;  
45.         if (flags &amp; I2C_M_RD)  
46.             addr |= 1;  
47.         if (flags &amp; I2C_M_REV_DIR_ADDR)  
48.             addr ^= 1;  
49.         ret = try_address(i2c_adap, addr, retries);  
50.         if ((ret != 1) &amp;&amp; !nak_ok)  
51.             return -ENXIO;  
52.     }  
53.   
54.     return 0;  
55. }  
这里先做了一个判断，10位设备地址和7位设备地址分别做不同的处理，通常一条I2C总线上不会挂那么多I2C设备，所以10位地址不常用，直接看对7位地址的处理。struct  i2c_msg中addr中是真正的设备地址，而这里发送的addr高7位才是设备地址，最低位为读写位，如果为读，最低位为1，如果为写，最低位为0。所以要将struct  i2c_msg中addr向左移1位，如果定义了I2C_M_RD标志，就将addr或上1，前面就说过，这个标志就代表读，如果是写，这里就不用处理，因为最低位本身就是0。最后调用try_address函数将这个地址字节发送出去。
1. static int try_address(struct i2c_adapter *i2c_adap,  
2.                unsigned char addr, int retries)  
3. {  
4.     struct i2c_algo_bit_data *adap = i2c_adap-&gt;algo_data;  
5.     int i, ret = 0;  
6.   
7.     for (i = 0; i &lt;= retries; i++) {  
8.         ret = i2c_outb(i2c_adap, addr);  
9.         if (ret == 1 || i == retries)  
10.             break;  
11.         bit_dbg(3, &amp;i2c_adap-&gt;dev, &quot;emitting stop condition\n&quot;);  
12.         i2c_stop(adap);  
13.         udelay(adap-&gt;udelay);  
14.         yield();  
15.         bit_dbg(3, &amp;i2c_adap-&gt;dev, &quot;emitting start condition\n&quot;);  
16.         i2c_start(adap);  
17.     }  
18.     if (i &amp;&amp; ret)  
19.         bit_dbg(1, &amp;i2c_adap-&gt;dev, &quot;Used %d tries to %s client at &quot;  
20.             &quot;0x%02x: %s\n&quot;, i + 1,  
21.             addr &amp; 1 ? &quot;read from&quot; : &quot;write to&quot;, addr &gt;&gt; 1,  
22.             ret == 1 ? &quot;success&quot; : &quot;failed, timeout?&quot;);  
23.     return ret;  
24. }  
最主要的就是调用i2c_outb发送一个字节，retries为重复次数，看前面adap-&gt;retries= 3;
如果发送失败，也就是设备没有给出应答信号，那就发送停止信号，发送起始信号，再发送这个地址字节，这就叫retries。来看这个具体的i2c_outb函数
1. static int i2c_outb(struct i2c_adapter *i2c_adap, unsigned char c)  
2. {  
3.     int i;  
4.     int sb;  
5.     int ack;  
6.     struct i2c_algo_bit_data *adap = i2c_adap-&gt;algo_data;  
7.   
8.     /* assert: scl is low */  
9.     for (i = 7; i &gt;= 0; i--) {  
10.         sb = (c &gt;&gt; i) &amp; 1;  
11.         setsda(adap, sb);  
12.         udelay((adap-&gt;udelay + 1) / 2);  
13.         if (sclhi(adap) &lt; 0) { /* timed out */  
14.             bit_dbg(1, &amp;i2c_adap-&gt;dev, &quot;i2c_outb: 0x%02x, &quot;  
15.                 &quot;timeout at bit #%d\n&quot;, (int)c, i);  
16.             return -ETIMEDOUT;  
17.         }  
18.         /* FIXME do arbitration here: 
19.          * if (sb &amp;&amp; !getsda(adap)) -&gt; ouch! Get out of here. 
20.          * 
21.          * Report a unique code, so higher level code can retry 
22.          * the whole (combined) message and *NOT* issue STOP. 
23.          */  
24.         scllo(adap);  
25.     }  
26.     sdahi(adap);  
27.     if (sclhi(adap) &lt; 0) { /* timeout */  
28.         bit_dbg(1, &amp;i2c_adap-&gt;dev, &quot;i2c_outb: 0x%02x, &quot;  
29.             &quot;timeout at ack\n&quot;, (int)c);  
30.         return -ETIMEDOUT;  
31.     }  
32.   
33.     /* read ack: SDA should be pulled down by slave, or it may 
34.      * NAK (usually to report problems with the data we wrote). 
35.      */  
36.     ack = !getsda(adap);    /* ack: sda is pulled low -&gt; success */  
37.     bit_dbg(2, &amp;i2c_adap-&gt;dev, &quot;i2c_outb: 0x%02x %s\n&quot;, (int)c,  
38.         ack ? &quot;A&quot; : &quot;NA&quot;);  
39.   
40.     scllo(adap);  
41.     return ack;  
42.     /* assert: scl is low (sda undef) */  
43. }  
这个函数有两个参数，一个是structi2c_adapter代表I2C主机，一个是发送的字节数据。那么I2C是怎样将一个字节数据发送出去的呢，那再来看看协议。
</rich_text><rich_text justification="left"></rich_text><rich_text>

首先是发送字节数据的最高位，在时钟为高电平期间将一位数据发送出去，最后是发送字节数据的最低位。发送完成之后，我们需要一个ACK信号，要不然我怎么知道发送成功没有，ACK信号就是在第九个时钟周期时数据线为低，所以在一个字节数据传送完成后，还要将数据线拉高，我们看程序中就是这一句sdahi(adap);等待这个ACK信号的到来，这样一个字节数据就发送完成。
回到bit_xfer函数中，前面只是将设备地址字节发送出去了，那么接下来就是该发送数据了。
注意：这里的数据包括操作设备的基地址
如果是读则调用readbytes函数去读，如果是写则调用sendbytes去写，先看readbytes函数
1. static int readbytes(struct i2c_adapter *i2c_adap, struct i2c_msg *msg)  
2. {  
3.     int inval;  
4.     int rdcount = 0;    /* counts bytes read */  
5.     unsigned char *temp = msg-&gt;buf;  
6.     int count = msg-&gt;len;  
7.     const unsigned flags = msg-&gt;flags;  
8.   
9.     while (count &gt; 0) {  
10.         inval = i2c_inb(i2c_adap);  
11.         if (inval &gt;= 0) {  
12.             *temp = inval;  
13.             rdcount++;  
14.         } else {   /* read timed out */  
15.             break;  
16.         }  
17.   
18.         temp++;  
19.         count--;  
20.   
21.         /* Some SMBus transactions require that we receive the 
22.            transaction length as the first read byte. */  
23.         if (rdcount == 1 &amp;&amp; (flags &amp; I2C_M_RECV_LEN)) {  
24.             if (inval &lt;= 0 || inval &gt; I2C_SMBUS_BLOCK_MAX) {  
25.                 if (!(flags &amp; I2C_M_NO_RD_ACK))  
26.                     acknak(i2c_adap, 0);  
27.                 dev_err(&amp;i2c_adap-&gt;dev, &quot;readbytes: invalid &quot;  
28.                     &quot;block length (%d)\n&quot;, inval);  
29.                 return -EREMOTEIO;  
30.             }  
31.             /* The original count value accounts for the extra 
32.                bytes, that is, either 1 for a regular transaction, 
33.                or 2 for a PEC transaction. */  
34.             count += inval;  
35.             msg-&gt;len += inval;  
36.         }  
37.   
38.         bit_dbg(2, &amp;i2c_adap-&gt;dev, &quot;readbytes: 0x%02x %s\n&quot;,  
39.             inval,  
40.             (flags &amp; I2C_M_NO_RD_ACK)  
41.                 ? &quot;(no ack/nak)&quot;  
42.                 : (count ? &quot;A&quot; : &quot;NA&quot;));  
43.   
44.         if (!(flags &amp; I2C_M_NO_RD_ACK)) {  
45.             inval = acknak(i2c_adap, count);  
46.             if (inval &lt; 0)  
47.                 return inval;  
48.         }  
49.     }  
50.     return rdcount;  
51. }  
其中一个大的while循环，调用i2c_inb去读一个字节，count为数据的长度，单位为多少个字节，
那就来看i2c_inb函数。
1. static int i2c_inb(struct i2c_adapter *i2c_adap)  
2. {  
3.     /* read byte via i2c port, without start/stop sequence  */  
4.     /* acknowledge is sent in i2c_read.         */  
5.     int i;  
6.     unsigned char indata = 0;  
7.     struct i2c_algo_bit_data *adap = i2c_adap-&gt;algo_data;  
8.   
9.     /* assert: scl is low */  
10.     sdahi(adap);  
11.     for (i = 0; i &lt; 8; i++) {  
12.         if (sclhi(adap) &lt; 0) { /* timeout */  
13.             bit_dbg(1, &amp;i2c_adap-&gt;dev, &quot;i2c_inb: timeout at bit &quot;  
14.                 &quot;#%d\n&quot;, 7 - i);  
15.             return -ETIMEDOUT;  
16.         }  
17.         indata *= 2;  
18.         if (getsda(adap))  
19.             indata |= 0x01;  
20.         setscl(adap, 0);  
21.         udelay(i == 7 ? adap-&gt;udelay / 2 : adap-&gt;udelay);  
22.     }  
23.     /* assert: scl is low */  
24.     return indata;  
25. }  
再来看sendbytes函数
1. static int sendbytes(struct i2c_adapter *i2c_adap, struct i2c_msg *msg)  
2. {  
3.     const unsigned char *temp = msg-&gt;buf;  
4.     int count = msg-&gt;len;  
5.     unsigned short nak_ok = msg-&gt;flags &amp; I2C_M_IGNORE_NAK;  
6.     int retval;  
7.     int wrcount = 0;  
8.   
9.     while (count &gt; 0) {  
10.         retval = i2c_outb(i2c_adap, *temp);  
11.   
12.         /* OK/ACK; or ignored NAK */  
13.         if ((retval &gt; 0) || (nak_ok &amp;&amp; (retval == 0))) {  
14.             count--;  
15.             temp++;  
16.             wrcount++;  
17.   
18.         /* A slave NAKing the master means the slave didn't like 
19.          * something about the data it saw.  For example, maybe 
20.          * the SMBus PEC was wrong. 
21.          */  
22.         } else if (retval == 0) {  
23.             dev_err(&amp;i2c_adap-&gt;dev, &quot;sendbytes: NAK bailout.\n&quot;);  
24.             return -EIO;  
25.   
26.         /* Timeout; or (someday) lost arbitration 
27.          * 
28.          * FIXME Lost ARB implies retrying the transaction from 
29.          * the first message, after the &quot;winning&quot; master issues 
30.          * its STOP.  As a rule, upper layer code has no reason 
31.          * to know or care about this ... it is *NOT* an error. 
32.          */  
33.         } else {  
34.             dev_err(&amp;i2c_adap-&gt;dev, &quot;sendbytes: error %d\n&quot;,  
35.                     retval);  
36.             return retval;  
37.         }  
38.     }  
39.     return wrcount;  
40. }  
也是一个大的while循环，同发送地址字节一样，也是调用i2c_outb去发送一个字节，count也是数据长度，由于i2c_outb函数在前面发送设备地址那里已经介绍了，这里也就不贴出来了。
还是回到bit_xfer函数，数据传输完成后，调用i2c_stop函数发送停止信号。我们看停止信号函数怎么去实现的。
1. static void i2c_stop(struct i2c_algo_bit_data *adap)  
2. {  
3.     /* assert: scl is low */  
4.     sdalo(adap);  
5.     sclhi(adap);  
6.     setsda(adap, 1);  
7.     udelay(adap-&gt;udelay);  
8. }  
看前面发送起始信号的那张图，停止信号就是在时钟为高电平期间，数据线从低到高的跳变。我们看程序是先将数据线拉低，将时钟线拉高，最后将数据拉高，这样就够成了一个停止信号。
还是回到i2c_bit_add_numbered_bus这个函数中来，看另外一个函数调用i2c_add_numbered_adapter。
1. int i2c_add_numbered_adapter(struct i2c_adapter *adap)  
2. {  
3.     int id;  
4.     int status;  
5.   
6.     if (adap-&gt;nr &amp; ~MAX_ID_MASK)  
7.         return -EINVAL;  
8.   
9. retry:  
10.     if (idr_pre_get(&amp;i2c_adapter_idr, GFP_KERNEL) == 0)  
11.         return -ENOMEM;  
12.   
13.     mutex_lock(&amp;core_lock);  
14.     /* &quot;above&quot; here means &quot;above or equal to&quot;, sigh; 
15.      * we need the &quot;equal to&quot; result to force the result 
16.      */  
17.     status = idr_get_new_above(&amp;i2c_adapter_idr, adap, adap-&gt;nr, &amp;id);  
18.     if (status == 0 &amp;&amp; id != adap-&gt;nr) {  
19.         status = -EBUSY;  
20.         idr_remove(&amp;i2c_adapter_idr, id);  
21.     }  
22.     mutex_unlock(&amp;core_lock);  
23.     if (status == -EAGAIN)  
24.         goto retry;  
25.   
26.     if (status == 0)  
27.         status = i2c_register_adapter(adap);  
28.     return status;  
29. }  
最重要的是这句i2c_register_adapter，注册这条I2C总线，进去看看
1. static int i2c_register_adapter(struct i2c_adapter *adap)  
2. {  
3.     int res = 0, dummy;  
4.   
5.     /* Can't register until after driver model init */  
6.     if (unlikely(WARN_ON(!i2c_bus_type.p))) {  
7.         res = -EAGAIN;  
8.         goto out_list;  
9.     }  
10.   
11.     mutex_init(&amp;adap-&gt;bus_lock);  
12.   
13.     /* Set default timeout to 1 second if not already set */  
14.     if (adap-&gt;timeout == 0)  
15.         adap-&gt;timeout = HZ;  
16.   
17.     dev_set_name(&amp;adap-&gt;dev, &quot;i2c-%d&quot;, adap-&gt;nr);  
18.     adap-&gt;dev.bus = &amp;i2c_bus_type;  
19.     adap-&gt;dev.type = &amp;i2c_adapter_type;  
20.     res = device_register(&amp;adap-&gt;dev);  
21.     if (res)  
22.         goto out_list;  
23.   
24.     dev_dbg(&amp;adap-&gt;dev, &quot;adapter [%s] registered\n&quot;, adap-&gt;name);  
25.   
26. #ifdef CONFIG_I2C_COMPAT  
27.     res = class_compat_create_link(i2c_adapter_compat_class, &amp;adap-&gt;dev,  
28.                        adap-&gt;dev.parent);  
29.     if (res)  
30.         dev_warn(&amp;adap-&gt;dev,  
31.              &quot;Failed to create compatibility class link\n&quot;);  
32. #endif  
33.   
34.     /* create pre-declared device nodes */  
35.     if (adap-&gt;nr &lt; __i2c_first_dynamic_bus_num)  
36.         i2c_scan_static_board_info(adap);  
37.   
38.     /* Notify drivers */  
39.     mutex_lock(&amp;core_lock);  
40.     dummy = bus_for_each_drv(&amp;i2c_bus_type, NULL, adap,  
41.                  i2c_do_add_adapter);  
42.     mutex_unlock(&amp;core_lock);  
43.   
44.     return 0;  
45.   
46. out_list:  
47.     mutex_lock(&amp;core_lock);  
48.     idr_remove(&amp;i2c_adapter_idr, adap-&gt;nr);  
49.     mutex_unlock(&amp;core_lock);  
50.     return res;  
51. }  
看内核代码有时就会这样，会陷入内核代码的汪洋大海中，而拔不出来，直接后果是最后都忘记看这段代码的目的，丧失继续看下去的信心。所以为了避免这样情况出现，所以最好在开始看代码的时候要明确目标，我通过这段代码到底要了解什么东西，主干要抓住，其它枝叶就不要看了。
在这里我认为主要的有
1.注册这个I2C总线设备
1. adap-&gt;dev.bus = &amp;i2c_bus_type;  
2. adap-&gt;dev.type = &amp;i2c_adapter_type;  
3. res = device_register(&amp;adap-&gt;dev);  
这个设备的总线类型为i2c_bus_type
1. struct bus_type i2c_bus_type = {  
2.     .name       = &quot;i2c&quot;,  
3.     .match      = i2c_device_match,  
4.     .probe      = i2c_device_probe,  
5.     .remove     = i2c_device_remove,  
6.     .shutdown   = i2c_device_shutdown,  
7.     .suspend    = i2c_device_suspend,  
8.     .resume     = i2c_device_resume,  
9. };  
看一下它的match函数
1. static int i2c_device_match(struct device *dev, struct device_driver *drv)  
2. {  
3.     struct i2c_client   *client = i2c_verify_client(dev);  
4.     struct i2c_driver   *driver;  
5.   
6.     if (!client)  
7.         return 0;  
8.   
9.     driver = to_i2c_driver(drv);  
10.     /* match on an id table if there is one */  
11.     if (driver-&gt;id_table)  
12.         return i2c_match_id(driver-&gt;id_table, client) != NULL;  
13.   
14.     return 0;  
15. }  
这个match函数主要用来匹配我们的I2C设备和I2C驱动的，如果匹配成功，最后会调用驱动的probe函数，来看它如何匹配的。
1. static const struct i2c_device_id *i2c_match_id(const struct i2c_device_id *id,  
2.                         const struct i2c_client *client)  
3. {  
4.     while (id-&gt;name[0]) {  
5.         if (strcmp(client-&gt;name, id-&gt;name) == 0)  
6.             return id;  
7.         id++;  
8.     }  
9.     return NULL;  
10. }  
就是判断I2C设备的name字段和驱动中id_table中定义的name字段是否相等。
2.往这条总线上添加设备
1. static void i2c_scan_static_board_info(struct i2c_adapter *adapter)  
2. {  
3.     struct i2c_devinfo  *devinfo;  
4.   
5.     down_read(&amp;__i2c_board_lock);  
6.     list_for_each_entry(devinfo, &amp;__i2c_board_list, list) {  
7.         if (devinfo-&gt;busnum == adapter-&gt;nr  
8.                 &amp;&amp; !i2c_new_device(adapter,  
9.                         &amp;devinfo-&gt;board_info))  
10.             dev_err(&amp;adapter-&gt;dev,  
11.                 &quot;Can't create device at 0x%02x\n&quot;,  
12.                 devinfo-&gt;board_info.addr);  
13.     }  
14.     up_read(&amp;__i2c_board_lock);  
15. }  
遍历__i2c_board_list这条链表，看下面的if语句，首先要让struct i2c_devinfo结构中的busnum等于struct  i2c_adapter中的nr，我们前面也说了，这个nr就是i2c总线的总线号，这里可以理解为是在往这条总线上添加设备。所以，如果我们要向I2C注册一个I2C设备的话，直接向__i2c_board_list添加一个设备信息就可以了，先来看这个设备信息结构是怎么定义的。
1. struct i2c_board_info {  
2.     char        type[I2C_NAME_SIZE];  
3.     unsigned short  flags;  
4.     unsigned short  addr;  
5.     void        *platform_data;  
6.     struct dev_archdata *archdata;  
7.     int     irq;  
8. };  
定义这样一个信息呢一般使用一个宏I2C_BOARD_INFO
1. #define I2C_BOARD_INFO(dev_type, dev_addr) \  
2.     .type = dev_type, .addr = (dev_addr)  
dev_type为设备的名字，前面也说了，这个name一定要和I2C驱动相同。addr为设备的地址。
定义了这样一组信息之后呢，接下来当然是往链表添加这些信息了。
1. int __init  
2. i2c_register_board_info(int busnum,  
3.     struct i2c_board_info const *info, unsigned len)  
4. {  
5.     int status;  
6.   
7.     down_write(&amp;__i2c_board_lock);  
8.   
9.     /* dynamic bus numbers will be assigned after the last static one */  
10.     if (busnum &gt;= __i2c_first_dynamic_bus_num)  
11.         __i2c_first_dynamic_bus_num = busnum + 1;  
12.   
13.     for (status = 0; len; len--, info++) {  
14.         struct i2c_devinfo  *devinfo;  
15.   
16.         devinfo = kzalloc(sizeof(*devinfo), GFP_KERNEL);  
17.         if (!devinfo) {  
18.             pr_debug(&quot;i2c-core: can't register boardinfo!\n&quot;);  
19.             status = -ENOMEM;  
20.             break;  
21.         }  
22.   
23.         devinfo-&gt;busnum = busnum;  
24.         devinfo-&gt;board_info = *info;  
25.         list_add_tail(&amp;devinfo-&gt;list, &amp;__i2c_board_list);  
26.     }  
27.   
28.     up_write(&amp;__i2c_board_lock);  
29.   
30.     return status;  
31. }  
第一个参数呢需要注意，它是I2C总线号，一定要和具体的I2C总线对应。我们看又定义了这样一个结构struct i2c_devinfo。
1. struct i2c_devinfo {  
2.     struct list_head    list;  
3.     int         busnum;  
4.     struct i2c_board_info   board_info;  
5. };  
最后是调用list_add_tail往__i2c_board_list这条链表添加设备信息。
然后是i2c_new_device
1. struct i2c_client *  
2. i2c_new_device(struct i2c_adapter *adap, struct i2c_board_info const *info)  
3. {  
4.     struct i2c_client   *client;  
5.     int         status;  
6.   
7.     /*为I2C设备申请内存*/  
8.     client = kzalloc(sizeof *client, GFP_KERNEL);  
9.     if (!client)  
10.         return NULL;  
11.   
12.     /*指定I2C设备的总线*/  
13.     client-&gt;adapter = adap;  
14.   
15.     client-&gt;dev.platform_data = info-&gt;platform_data;  
16.   
17.     if (info-&gt;archdata)  
18.         client-&gt;dev.archdata = *info-&gt;archdata;  
19.   
20.     client-&gt;flags = info-&gt;flags;  
21.     client-&gt;addr = info-&gt;addr; /*I2C设备地址*/  
22.     client-&gt;irq = info-&gt;irq;  
23.   
24.     strlcpy(client-&gt;name, info-&gt;type, sizeof(client-&gt;name));  
25.   
26.     /*检查这个地址有没有被设备占用*/  
27.     /* Check for address business */  
28.     status = i2c_check_addr(adap, client-&gt;addr);  
29.     if (status)  
30.         goto out_err;  
31.   
32.     client-&gt;dev.parent = &amp;client-&gt;adapter-&gt;dev; /*指定设备的父设备*/  
33.     client-&gt;dev.bus = &amp;i2c_bus_type; /*指定设备的总线类型*/  
34.     client-&gt;dev.type = &amp;i2c_client_type;  
35.   
36.     dev_set_name(&amp;client-&gt;dev, &quot;%d-%04x&quot;, i2c_adapter_id(adap),  
37.              client-&gt;addr);  
38.     status = device_register(&amp;client-&gt;dev); /*注册设备*/  
39.     if (status)  
40.         goto out_err;  
41.   
42.     dev_dbg(&amp;adap-&gt;dev, &quot;client [%s] registered with bus id %s\n&quot;,  
43.         client-&gt;name, dev_name(&amp;client-&gt;dev));  
44.   
45.     return client;  
46.   
47. out_err:  
48.     dev_err(&amp;adap-&gt;dev, &quot;Failed to register i2c client %s at 0x%02x &quot;  
49.         &quot;(%d)\n&quot;, client-&gt;name, client-&gt;addr, status);  
50.     kfree(client);  
51.     return NULL;  
52. }  
这个函数的功能是新建一个I2C设备并注册它，在I2C子系统中，I2C设备使用结构structi2c_client描述，那么首先要申请内存空间，I2C设备的主机是谁，必须知道挂载到哪条总线上的，然后就是一些赋值操作，最后就是注册设备，那么这个设备就实实在在的挂在到这条总线上了，这也是新的I2C设备注册方式。
3.i2c_do_add_adapter
你看说着说着就跑远了
1. static int i2c_do_add_adapter(struct device_driver *d, void *data)  
2. {  
3.     struct i2c_driver *driver = to_i2c_driver(d);  
4.     struct i2c_adapter *adap = data;  
5.   
6.     /* Detect supported devices on that bus, and instantiate them */  
7.     i2c_detect(adap, driver);  
8.   
9.     /* Let legacy drivers scan this bus for matching devices */  
10.     if (driver-&gt;attach_adapter) {  
11.         /* We ignore the return code; if it fails, too bad */  
12.         driver-&gt;attach_adapter(adap);  
13.     }  
14.     return 0;  
15. }  
前面通过i2c_scan_static_board_info往I2C总线上添加设备是新的方式，而这里调用每个I2C设备驱动的attach_adapter函数，然后在attach_adapter函数中去实现设备的注册，这是老的方式，i2c-dev.c中就是采用的这种方式。至此，总线这块就看完了。
</rich_text><encoded_png char_offset="11945"></encoded_png><encoded_png char_offset="18895"></encoded_png></node><node name="i2c driver" prog_lang="custom-colors" readonly="False" tags="" unique_id="8"><rich_text>struct i2c_driver {
	unsigned int class;

	/* Notifies the driver that a new bus has appeared or is about to be
	 * removed. You should avoid using this, it will be removed in a
	 * near future.
	 */
	int (*attach_adapter)(struct i2c_adapter *) __deprecated;
	int (*detach_adapter)(struct i2c_adapter *) __deprecated;

	/* Standard driver model interfaces */
	int (*probe)(struct i2c_client *, const struct i2c_device_id *);
	int (*remove)(struct i2c_client *);

	/* driver model interfaces that don't relate to enumeration  */
	void (*shutdown)(struct i2c_client *);
	int (*suspend)(struct i2c_client *, pm_message_t mesg);
	int (*resume)(struct i2c_client *);

	/* Alert callback, for example for the SMBus alert protocol.
	 * The format and meaning of the data value depends on the protocol.
	 * For the SMBus alert protocol, there is a single bit of data passed
	 * as the alert response's low bit (&quot;event flag&quot;).
	 */
	void (*alert)(struct i2c_client *, unsigned int data);

	/* a ioctl like command that can be used to perform specific functions
	 * with the device.
	 */
	int (*command)(struct i2c_client *client, unsigned int cmd, void *arg);

	struct device_driver driver;
	const struct i2c_device_id *id_table;

	/* Device detection callback for automatic device creation */
	int (*detect)(struct i2c_client *, struct i2c_board_info *);
	const unsigned short *address_list;
	struct list_head clients;
};

</rich_text><rich_text scale="h3" weight="heavy">1.以ft5x_ts.c为范例:</rich_text><rich_text>
static const struct i2c_device_id ft5x_ts_id[] = {
	{ CTP_NAME, 0 },
	{}
};
MODULE_DEVICE_TABLE(i2c, ft5x_ts_id);

static struct i2c_driver ft5x_ts_driver = {
	.class          = I2C_CLASS_HWMON,
	.probe		= ft5x_ts_probe,
	.remove		= __devexit_p(ft5x_ts_remove),
	.id_table	= ft5x_ts_id,
	.suspend        = ft5x_ts_suspend,
	.resume         = ft5x_ts_resume,
	.driver	= {
		.name	= CTP_NAME,
		.owner	= THIS_MODULE,
	},
	.address_list	= normal_i2c,
};

static int __init ft5x_ts_init(void) {
    ft5x_ts_driver.detect = ctp_detect;
    ret = i2c_add_driver(&amp;ft5x_ts_driver);
}

i2c_add_driver定义在linux/i2c.h中的一个宏，它实际调用
int i2c_register_driver(struct module *owner, struct i2c_driver *driver)
{
	int res;

	/* Can't register until after driver model init */
	if (unlikely(WARN_ON(!i2c_bus_type.p)))
		return -EAGAIN;

	/* add the driver to the list of i2c drivers in the driver core */
	driver-&gt;driver.owner = owner;
	driver-&gt;driver.bus = &amp;i2c_bus_type;

	/* When registration returns, the driver core
	 * will have called probe() for all matching-but-unbound devices.
	 */
	res = driver_register(&amp;driver-&gt;driver);
	if (res)
		return res;

	/* Drivers should switch to dev_pm_ops instead. */
	if (driver-&gt;suspend)
		pr_warn(&quot;i2c-core: driver [%s] using legacy suspend method\n&quot;,
			driver-&gt;driver.name);
	if (driver-&gt;resume)
		pr_warn(&quot;i2c-core: driver [%s] using legacy resume method\n&quot;,
			driver-&gt;driver.name);

	pr_debug(&quot;i2c-core: driver [%s] registered\n&quot;, driver-&gt;driver.name);

	INIT_LIST_HEAD(&amp;driver-&gt;clients);
	/* Walk the adapters that are already present */
	i2c_for_each_dev(driver, __process_new_driver); 

	return 0;
}

扫描i2c bus的adapter设备。
int i2c_for_each_dev(void *data, int (*fn)(struct device *, void *))
{
	int res;

	mutex_lock(&amp;core_lock);
	res = bus_for_each_dev(&amp;i2c_bus_type, NULL, data, fn);
	mutex_unlock(&amp;core_lock);

	return res;
}
EXPORT_SYMBOL_GPL(i2c_for_each_dev);

static int __process_new_driver(struct device *dev, void *data)
{
	if (dev-&gt;type != &amp;i2c_adapter_type)
		return 0;
	return i2c_do_add_adapter(data, to_i2c_adapter(dev));
}

i2c_do_add_adapter调用
static int i2c_detect(struct i2c_adapter *adapter, struct i2c_driver *driver)
{
	const unsigned short *address_list;
	struct i2c_client *temp_client;
	int i, err = 0;
	int adap_id = i2c_adapter_id(adapter);

	address_list = driver-&gt;address_list;            //ft5x_ts的address_list!=NULL, driver-&gt;detect != NULL
	if (!driver-&gt;detect || !address_list)
		return 0;

	/* Stop here if the classes do not match */
	if (!(adapter-&gt;class &amp; driver-&gt;class))
		return 0;

	/* Set up a temporary client to help detect callback */
	temp_client = kzalloc(sizeof(struct i2c_client), GFP_KERNEL);
	if (!temp_client)
		return -ENOMEM;
	temp_client-&gt;adapter = adapter;

	for (i = 0; address_list[i] != I2C_CLIENT_END; i += 1) {
		dev_dbg(&amp;adapter-&gt;dev, &quot;found normal entry for adapter %d, &quot;
			&quot;addr 0x%02x\n&quot;, adap_id, address_list[i]);
		temp_client-&gt;addr = address_list[i];
		err = i2c_detect_address(temp_client, driver);
		if (unlikely(err))
			break;
	}

	kfree(temp_client);
	return err;
}

static int i2c_detect_address(struct i2c_client *temp_client,
			      struct i2c_driver *driver)
{
	struct i2c_board_info info;
	struct i2c_adapter *adapter = temp_client-&gt;adapter;
	int addr = temp_client-&gt;addr;
	int err;

	/* Make sure the address is valid */
	err = i2c_check_addr_validity(addr);
	if (err) {
		dev_warn(&amp;adapter-&gt;dev, &quot;Invalid probe address 0x%02x\n&quot;,
			 addr);
		return err;
	}

	/* Skip if already in use */
	if (i2c_check_addr_busy(adapter, addr))
		return 0;
#ifndef CONFIG_ARCH_SUN7I
	/* Make sure there is something at this address */
	if (!i2c_default_probe(adapter, addr))
		return 0;
#endif

	/* Finally call the custom detection function */
	memset(&amp;info, 0, sizeof(struct i2c_board_info));
	info.addr = addr;
	err = driver-&gt;detect(temp_client, &amp;info);                   //调用ctp_detect()
	if (err) {
		/* -ENODEV is returned if the detection fails. We catch it
		   here as this isn't an error. */
		return err == -ENODEV ? 0 : err;
	}

	/* Consistency check */
	if (info.type[0] == '\0') {
		dev_err(&amp;adapter-&gt;dev, &quot;%s detection function provided &quot;
			&quot;no name for 0x%x\n&quot;, driver-&gt;driver.name,
			addr);
	} else {
		struct i2c_client *client;

		/* Detection succeeded, instantiate the device */
		dev_dbg(&amp;adapter-&gt;dev, &quot;Creating %s at 0x%02x\n&quot;,
			info.type, info.addr);
		client = i2c_new_device(adapter, &amp;info);                //注册新的设备, 注册的过程中匹配相应的驱动
		if (client)
			list_add_tail(&amp;client-&gt;detected, &amp;driver-&gt;clients);
		else
			dev_err(&amp;adapter-&gt;dev, &quot;Failed creating %s at 0x%02x\n&quot;,
				info.type, info.addr);
	}
	return 0;
}

struct i2c_client *
i2c_new_device(struct i2c_adapter *adap, struct i2c_board_info const *info)
{
	struct i2c_client	*client;
	int			status;

	client = kzalloc(sizeof *client, GFP_KERNEL);
	if (!client)
		return NULL;

	client-&gt;adapter = adap;

	client-&gt;dev.platform_data = info-&gt;platform_data;

	if (info-&gt;archdata)
		client-&gt;dev.archdata = *info-&gt;archdata;

	client-&gt;flags = info-&gt;flags;
	client-&gt;addr = info-&gt;addr;
	client-&gt;irq = info-&gt;irq;

	strlcpy(client-&gt;name, info-&gt;type, sizeof(client-&gt;name));

	/* Check for address validity */
	status = i2c_check_client_addr_validity(client);
	if (status) {
		dev_err(&amp;adap-&gt;dev, &quot;Invalid %d-bit I2C address 0x%02hx\n&quot;,
			client-&gt;flags &amp; I2C_CLIENT_TEN ? 10 : 7, client-&gt;addr);
		goto out_err_silent;
	}

	/* Check for address business */
	status = i2c_check_addr_busy(adap, client-&gt;addr);
	if (status)
		goto out_err;

	client-&gt;dev.parent = &amp;client-&gt;adapter-&gt;dev;
	client-&gt;dev.bus = &amp;i2c_bus_type;
	client-&gt;dev.type = &amp;i2c_client_type;
	client-&gt;dev.of_node = info-&gt;of_node;

	/* For 10-bit clients, add an arbitrary offset to avoid collisions */
	dev_set_name(&amp;client-&gt;dev, &quot;%d-%04x&quot;, i2c_adapter_id(adap),
		     client-&gt;addr | ((client-&gt;flags &amp; I2C_CLIENT_TEN)
				     ? 0xa000 : 0));
	status = device_register(&amp;client-&gt;dev);
	if (status)
		goto out_err;

	dev_dbg(&amp;adap-&gt;dev, &quot;client [%s] registered with bus id %s\n&quot;,
		client-&gt;name, dev_name(&amp;client-&gt;dev));

	return client;

out_err:
	dev_err(&amp;adap-&gt;dev, &quot;Failed to register i2c client %s at 0x%02x &quot;
		&quot;(%d)\n&quot;, client-&gt;name, client-&gt;addr, status);
out_err_silent:
	kfree(client);
	return NULL;
}

</rich_text><rich_text scale="h1" weight="heavy">2. i2c数据结构</rich_text><rich_text>
static const struct dev_pm_ops i2c_device_pm_ops = {
	.suspend = i2c_device_pm_suspend,
	.resume = i2c_device_pm_resume,
	.freeze = i2c_device_pm_freeze,
	.thaw = i2c_device_pm_thaw,
	.poweroff = i2c_device_pm_poweroff,
	.restore = i2c_device_pm_restore,
	SET_RUNTIME_PM_OPS(
		pm_generic_runtime_suspend,
		pm_generic_runtime_resume,
		pm_generic_runtime_idle
	)
};

struct bus_type i2c_bus_type = {
	.name		= &quot;i2c&quot;,
	.match		= i2c_device_match,
	.probe		= i2c_device_probe,
	.remove		= i2c_device_remove,
	.shutdown	= i2c_device_shutdown,
	.pm		= &amp;i2c_device_pm_ops,
};
EXPORT_SYMBOL_GPL(i2c_bus_type);

static struct device_type i2c_client_type = {
	.groups		= i2c_dev_attr_groups,
	.uevent		= i2c_device_uevent,
	.release	= i2c_client_dev_release,
};
</rich_text></node></node><node name="linux设备模型" prog_lang="custom-colors" readonly="False" tags="" unique_id="9"><rich_text>
</rich_text><node name="kobject，kset，ktype" prog_lang="custom-colors" readonly="False" tags="" unique_id="13"><rich_text>一、sysfs文件系统下的每个目录对应于一个kobj，kset是kobj的封装，内嵌了一个kobj，其代表kset自身，ktype代表属性 操作集，但由于通用性，因此把ktype单独剥离出来，kobj，kset，ktype成为了各个驱动模型最底层的关联元素，并由此形成了sys下的各种 拓扑结构。
二、关于kobject
      首先看一下kobject的原型
          
 </rich_text><rich_text foreground="#008080">1</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> kobject {
</rich_text><rich_text foreground="#008080"> 2</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">const</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">char</rich_text><rich_text>        *name;         </rich_text><rich_text foreground="#008000">//名字
</rich_text><rich_text foreground="#008080"> 3</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> list_head    entry;         </rich_text><rich_text foreground="#008000">//连接到kset建立层次结构
</rich_text><rich_text foreground="#008080"> 4</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> kobject        *parent;       </rich_text><rich_text foreground="#008000">//指向父节点，面向对象的层次架构
</rich_text><rich_text foreground="#008080"> 5</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> kset        *kset;        
</rich_text><rich_text foreground="#008080"> 6</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> kobj_type    *ktype;        </rich_text><rich_text foreground="#008000">//属性文件
</rich_text><rich_text foreground="#008080"> 7</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> sysfs_dirent    *sd;
</rich_text><rich_text foreground="#008080"> 8</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> kref        kref;          </rich_text><rich_text foreground="#008000">//引用计数
</rich_text><rich_text foreground="#008080"> 9</rich_text><rich_text>     unsigned </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> state_initialized:</rich_text><rich_text foreground="#800080">1</rich_text><rich_text>;      </rich_text><rich_text foreground="#008000">//初始化状态...
</rich_text><rich_text foreground="#008080">10</rich_text><rich_text>     unsigned </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> state_in_sysfs:</rich_text><rich_text foreground="#800080">1</rich_text><rich_text>;
</rich_text><rich_text foreground="#008080">11</rich_text><rich_text>     unsigned </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> state_add_uevent_sent:</rich_text><rich_text foreground="#800080">1</rich_text><rich_text>;
</rich_text><rich_text foreground="#008080">12</rich_text><rich_text>     unsigned </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> state_remove_uevent_sent:</rich_text><rich_text foreground="#800080">1</rich_text><rich_text>;
</rich_text><rich_text foreground="#008080">13</rich_text><rich_text>     unsigned </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> uevent_suppress:</rich_text><rich_text foreground="#800080">1</rich_text><rich_text>;
</rich_text><rich_text foreground="#008080">14</rich_text><rich_text> };

   分析一下kobject的初始化过程
   初始化函数为
          
  </rich_text><rich_text foreground="#008080">1</rich_text><rich_text> ---</rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> kobject_init_and_add(</rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> kobject *kobj, </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> kobj_type *ktype,  </rich_text><rich_text foreground="#008000">//参数为kobject和属性结构体
</rich_text><rich_text foreground="#008080">  2</rich_text><rich_text>              </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> kobject *parent, </rich_text><rich_text foreground="#0000ff">const</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">char</rich_text><rich_text> *fmt, ...)
</rich_text><rich_text foreground="#008080">  3</rich_text><rich_text> {
</rich_text><rich_text foreground="#008080">  4</rich_text><rich_text>     va_list args;
</rich_text><rich_text foreground="#008080">  5</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> retval;
</rich_text><rich_text foreground="#008080">  6</rich_text><rich_text>     kobject_init(kobj, ktype);   
</rich_text><rich_text foreground="#008080">  7</rich_text><rich_text>     va_start(args, fmt);
</rich_text><rich_text foreground="#008080">  8</rich_text><rich_text>     retval = kobject_add_varg(kobj, parent, fmt, args);
</rich_text><rich_text foreground="#008080">  9</rich_text><rich_text>     va_end(args);
</rich_text><rich_text foreground="#008080"> 10</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text> retval;
</rich_text><rich_text foreground="#008080"> 11</rich_text><rich_text> }
</rich_text><rich_text foreground="#008080"> 12</rich_text><rich_text> ---</rich_text><rich_text foreground="#0000ff">void</rich_text><rich_text> kobject_init(</rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> kobject *kobj, </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> kobj_type *ktype)
</rich_text><rich_text foreground="#008080"> 13</rich_text><rich_text> {
</rich_text><rich_text foreground="#008080"> 14</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">char</rich_text><rich_text> *err_str;
</rich_text><rich_text foreground="#008080"> 15</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (!kobj) {                        </rich_text><rich_text foreground="#008000">//kobj为NULL错误退出
</rich_text><rich_text foreground="#008080"> 16</rich_text><rich_text>         err_str = </rich_text><rich_text foreground="#800000">&quot;invalid kobject pointer!&quot;</rich_text><rich_text>;
</rich_text><rich_text foreground="#008080"> 17</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">goto</rich_text><rich_text> error;
</rich_text><rich_text foreground="#008080"> 18</rich_text><rich_text>     }
</rich_text><rich_text foreground="#008080"> 19</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (!ktype) {                       </rich_text><rich_text foreground="#008000">//ktype为NULL错误退出
</rich_text><rich_text foreground="#008080"> 20</rich_text><rich_text>         err_str = </rich_text><rich_text foreground="#800000">&quot;must have a ktype to be initialized properly!/n&quot;</rich_text><rich_text>;
</rich_text><rich_text foreground="#008080"> 21</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">goto</rich_text><rich_text> error;
</rich_text><rich_text foreground="#008080"> 22</rich_text><rich_text>     }
</rich_text><rich_text foreground="#008080"> 23</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (kobj-&gt;state_initialized) {   </rich_text><rich_text foreground="#008000">//如果初始化状态为1报错
</rich_text><rich_text foreground="#008080"> 24</rich_text><rich_text>         </rich_text><rich_text foreground="#008000">/* do not error out as sometimes we can recover */</rich_text><rich_text>
</rich_text><rich_text foreground="#008080"> 25</rich_text><rich_text>         printk(KERN_ERR </rich_text><rich_text foreground="#800000">&quot;kobject (%p): tried to init an initialized &quot;</rich_text><rich_text>
</rich_text><rich_text foreground="#008080"> 26</rich_text><rich_text>                </rich_text><rich_text foreground="#800000">&quot;object, something is seriously wrong./n&quot;</rich_text><rich_text>, kobj);
</rich_text><rich_text foreground="#008080"> 27</rich_text><rich_text>         dump_stack();
</rich_text><rich_text foreground="#008080"> 28</rich_text><rich_text>     }
</rich_text><rich_text foreground="#008080"> 29</rich_text><rich_text>     kobject_init_internal(kobj);       </rich_text><rich_text foreground="#008000">//初始化kobj 
</rich_text><rich_text foreground="#008080"> 30</rich_text><rich_text>     kobj-&gt;ktype = ktype;            </rich_text><rich_text foreground="#008000">//关联obj和ktype
</rich_text><rich_text foreground="#008080"> 31</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text>;
</rich_text><rich_text foreground="#008080"> 32</rich_text><rich_text> error:
</rich_text><rich_text foreground="#008080"> 33</rich_text><rich_text>     printk(KERN_ERR </rich_text><rich_text foreground="#800000">&quot;kobject (%p): %s/n&quot;</rich_text><rich_text>, kobj, err_str);
</rich_text><rich_text foreground="#008080"> 34</rich_text><rich_text>     dump_stack();
</rich_text><rich_text foreground="#008080"> 35</rich_text><rich_text> }
</rich_text><rich_text foreground="#008080"> 36</rich_text><rich_text> -------</rich_text><rich_text foreground="#0000ff">static</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">void</rich_text><rich_text> kobject_init_internal(</rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> kobject *kobj)
</rich_text><rich_text foreground="#008080"> 37</rich_text><rich_text> {
</rich_text><rich_text foreground="#008080"> 38</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (!kobj)
</rich_text><rich_text foreground="#008080"> 39</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text>;
</rich_text><rich_text foreground="#008080"> 40</rich_text><rich_text>     kref_init(&amp;kobj-&gt;kref);        </rich_text><rich_text foreground="#008000">//计数变成1
</rich_text><rich_text foreground="#008080"> 41</rich_text><rich_text>     INIT_LIST_HEAD(&amp;kobj-&gt;entry);  </rich_text><rich_text foreground="#008000">//都指向自己，prev和next
</rich_text><rich_text foreground="#008080"> 42</rich_text><rich_text>     kobj-&gt;state_in_sysfs = </rich_text><rich_text foreground="#800080">0</rich_text><rich_text>;
</rich_text><rich_text foreground="#008080"> 43</rich_text><rich_text>     kobj-&gt;state_add_uevent_sent = </rich_text><rich_text foreground="#800080">0</rich_text><rich_text>;
</rich_text><rich_text foreground="#008080"> 44</rich_text><rich_text>     kobj-&gt;state_remove_uevent_sent = </rich_text><rich_text foreground="#800080">0</rich_text><rich_text>;
</rich_text><rich_text foreground="#008080"> 45</rich_text><rich_text>     kobj-&gt;state_initialized = </rich_text><rich_text foreground="#800080">1</rich_text><rich_text>;
</rich_text><rich_text foreground="#008080"> 46</rich_text><rich_text> }
</rich_text><rich_text foreground="#008080"> 47</rich_text><rich_text> -------</rich_text><rich_text foreground="#0000ff">static</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> kobject_add_varg(</rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> kobject *kobj, </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> kobject *parent,
</rich_text><rich_text foreground="#008080"> 48</rich_text><rich_text>                 </rich_text><rich_text foreground="#0000ff">const</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">char</rich_text><rich_text> *fmt, va_list vargs)
</rich_text><rich_text foreground="#008080"> 49</rich_text><rich_text> {
</rich_text><rich_text foreground="#008080"> 50</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> retval;
</rich_text><rich_text foreground="#008080"> 51</rich_text><rich_text>     retval = kobject_set_name_vargs(kobj, fmt, vargs);  </rich_text><rich_text foreground="#008000">//设置名字，名字中不能有“/”
</rich_text><rich_text foreground="#008080"> 52</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (retval) {
</rich_text><rich_text foreground="#008080"> 53</rich_text><rich_text>         printk(KERN_ERR </rich_text><rich_text foreground="#800000">&quot;kobject: can not set name properly!/n&quot;</rich_text><rich_text>);
</rich_text><rich_text foreground="#008080"> 54</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text> retval;
</rich_text><rich_text foreground="#008080"> 55</rich_text><rich_text>     }
</rich_text><rich_text foreground="#008080"> 56</rich_text><rich_text>     kobj-&gt;parent = parent;                 </rich_text><rich_text foreground="#008000">//设置parent，其父节点
</rich_text><rich_text foreground="#008080"> 57</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text> kobject_add_internal(kobj);
</rich_text><rich_text foreground="#008080"> 58</rich_text><rich_text> }
</rich_text><rich_text foreground="#008080"> 59</rich_text><rich_text> ----</rich_text><rich_text foreground="#0000ff">static</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> kobject_add_internal(</rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> kobject *kobj)
</rich_text><rich_text foreground="#008080"> 60</rich_text><rich_text> {
</rich_text><rich_text foreground="#008080"> 61</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> error = </rich_text><rich_text foreground="#800080">0</rich_text><rich_text>;
</rich_text><rich_text foreground="#008080"> 62</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> kobject *parent;
</rich_text><rich_text foreground="#008080"> 63</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (!kobj)
</rich_text><rich_text foreground="#008080"> 64</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text> -ENOENT;
</rich_text><rich_text foreground="#008080"> 65</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (!kobj-&gt;name || !kobj-&gt;name[</rich_text><rich_text foreground="#800080">0</rich_text><rich_text>]) {             </rich_text><rich_text foreground="#008000">//名字不能为空
</rich_text><rich_text foreground="#008080"> 66</rich_text><rich_text>         WARN(</rich_text><rich_text foreground="#800080">1</rich_text><rich_text>, </rich_text><rich_text foreground="#800000">&quot;kobject: (%p): attempted to be registered with empty &quot;</rich_text><rich_text>
</rich_text><rich_text foreground="#008080"> 67</rich_text><rich_text>              </rich_text><rich_text foreground="#800000">&quot;name!/n&quot;</rich_text><rich_text>, kobj);
</rich_text><rich_text foreground="#008080"> 68</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text> -EINVAL;
</rich_text><rich_text foreground="#008080"> 69</rich_text><rich_text>     }
</rich_text><rich_text foreground="#008080"> 70</rich_text><rich_text>     parent = kobject_get(kobj-&gt;parent);  </rich_text><rich_text foreground="#008000">//如果parent为真，则增加kobj-&gt;kref计数，也就是父节点的引用计数
</rich_text><rich_text foreground="#008080"> 71</rich_text><rich_text>     </rich_text><rich_text foreground="#008000">/* join kset if set, use it as parent if we do not already have one */</rich_text><rich_text>
</rich_text><rich_text foreground="#008080"> 72</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (kobj-&gt;kset) {                   
</rich_text><rich_text foreground="#008080"> 73</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (!parent)
</rich_text><rich_text foreground="#008080"> 74</rich_text><rich_text>             parent = kobject_get(&amp;kobj-&gt;kset-&gt;kobj);  </rich_text><rich_text foreground="#008000">//如果kobj-parent父节点为NULL那么就用kobj-&gt;kset-&gt;kobj
</rich_text><rich_text foreground="#008080"> 75</rich_text><rich_text> </rich_text><rich_text foreground="#008000">//  作其父节点，并增加其引用计数
</rich_text><rich_text foreground="#008080"> 76</rich_text><rich_text>         kobj_kset_join(kobj);                         </rich_text><rich_text foreground="#008000">//把kobj的entry成员添加到kobj-&gt;kset&gt;list的尾部，现在的层次就是
</rich_text><rich_text foreground="#008080"> 77</rich_text><rich_text>         kobj-&gt;parent = parent;                     </rich_text><rich_text foreground="#008000">//kobj-&gt;kset-&gt;list指向kobj-&gt;parent 
</rich_text><rich_text foreground="#008080"> 78</rich_text><rich_text>     }                                                     </rich_text><rich_text foreground="#008000">//    -&gt;parent 指向kset-&gt;kobj                          
</rich_text><rich_text foreground="#008080"> 79</rich_text><rich_text>     pr_debug(</rich_text><rich_text foreground="#800000">&quot;kobject: '%s' (%p): %s: parent: '%s', set: '%s'/n&quot;</rich_text><rich_text>,
</rich_text><rich_text foreground="#008080"> 80</rich_text><rich_text>          kobject_name(kobj), kobj, __func__,
</rich_text><rich_text foreground="#008080"> 81</rich_text><rich_text>          parent ? kobject_name(parent) : </rich_text><rich_text foreground="#800000">&quot;&lt;NULL&gt;&quot;</rich_text><rich_text>,
</rich_text><rich_text foreground="#008080"> 82</rich_text><rich_text>          kobj-&gt;kset ? kobject_name(&amp;kobj-&gt;kset-&gt;kobj) : </rich_text><rich_text foreground="#800000">&quot;&lt;NULL&gt;&quot;</rich_text><rich_text>);
</rich_text><rich_text foreground="#008080"> 83</rich_text><rich_text>     error = create_dir(kobj);   </rich_text><rich_text foreground="#008000">//利用kobj创建目录和属性文件，其中会判断，如果parent为NULL那么就在sysfs_root下创建
</rich_text><rich_text foreground="#008080"> 84</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (error) {
</rich_text><rich_text foreground="#008080"> 85</rich_text><rich_text>         kobj_kset_leave(kobj);
</rich_text><rich_text foreground="#008080"> 86</rich_text><rich_text>         kobject_put(parent);
</rich_text><rich_text foreground="#008080"> 87</rich_text><rich_text>         kobj-&gt;parent = NULL;
</rich_text><rich_text foreground="#008080"> 88</rich_text><rich_text>         </rich_text><rich_text foreground="#008000">/* be noisy on error issues */</rich_text><rich_text>
</rich_text><rich_text foreground="#008080"> 89</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (error == -EEXIST)
</rich_text><rich_text foreground="#008080"> 90</rich_text><rich_text>             printk(KERN_ERR </rich_text><rich_text foreground="#800000">&quot;%s failed for %s with &quot;</rich_text><rich_text>
</rich_text><rich_text foreground="#008080"> 91</rich_text><rich_text>                    </rich_text><rich_text foreground="#800000">&quot;-EEXIST, don't try to register things with &quot;</rich_text><rich_text>
</rich_text><rich_text foreground="#008080"> 92</rich_text><rich_text>                    </rich_text><rich_text foreground="#800000">&quot;the same name in the same directory./n&quot;</rich_text><rich_text>,
</rich_text><rich_text foreground="#008080"> 93</rich_text><rich_text>                    __func__, kobject_name(kobj));
</rich_text><rich_text foreground="#008080"> 94</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">else</rich_text><rich_text>
</rich_text><rich_text foreground="#008080"> 95</rich_text><rich_text>             printk(KERN_ERR </rich_text><rich_text foreground="#800000">&quot;%s failed for %s (%d)/n&quot;</rich_text><rich_text>,
</rich_text><rich_text foreground="#008080"> 96</rich_text><rich_text>                    __func__, kobject_name(kobj), error);
</rich_text><rich_text foreground="#008080"> 97</rich_text><rich_text>         dump_stack();
</rich_text><rich_text foreground="#008080"> 98</rich_text><rich_text>     } </rich_text><rich_text foreground="#0000ff">else</rich_text><rich_text>
</rich_text><rich_text foreground="#008080"> 99</rich_text><rich_text>         kobj-&gt;state_in_sysfs = </rich_text><rich_text foreground="#800080">1</rich_text><rich_text>;
</rich_text><rich_text foreground="#008080">100</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text> error;
</rich_text><rich_text foreground="#008080">101</rich_text><rich_text> }
</rich_text><rich_text foreground="#008080">102</rich_text><rich_text> ---</rich_text><rich_text foreground="#0000ff">static</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> create_dir(</rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> kobject *kobj)
</rich_text><rich_text foreground="#008080">103</rich_text><rich_text> {
</rich_text><rich_text foreground="#008080">104</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> error = </rich_text><rich_text foreground="#800080">0</rich_text><rich_text>;
</rich_text><rich_text foreground="#008080">105</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (kobject_name(kobj)) {
</rich_text><rich_text foreground="#008080">106</rich_text><rich_text>         error = sysfs_create_dir(kobj);       </rich_text><rich_text foreground="#008000">//创建目录
</rich_text><rich_text foreground="#008080">107</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (!error) {
</rich_text><rich_text foreground="#008080">108</rich_text><rich_text>             error = populate_dir(kobj);   </rich_text><rich_text foreground="#008000">//创建属性文件
</rich_text><rich_text foreground="#008080">109</rich_text><rich_text>             </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (error)
</rich_text><rich_text foreground="#008080">110</rich_text><rich_text>                 sysfs_remove_dir(kobj);
</rich_text><rich_text foreground="#008080">111</rich_text><rich_text>         }
</rich_text><rich_text foreground="#008080">112</rich_text><rich_text>     }
</rich_text><rich_text foreground="#008080">113</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text> error;
</rich_text><rich_text foreground="#008080">114</rich_text><rich_text> }
 
三、关于 kset
      首先看一下kset的原型
         
</rich_text><rich_text foreground="#008080">1</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> kset {
</rich_text><rich_text foreground="#008080">2</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> list_head list;  </rich_text><rich_text foreground="#008000">//连接着他下面的kobj成员，与kobj-entry关联
</rich_text><rich_text foreground="#008080">3</rich_text><rich_text>     spinlock_t list_lock;
</rich_text><rich_text foreground="#008080">4</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> kobject kobj;    </rich_text><rich_text foreground="#008000">//代表kset自己
</rich_text><rich_text foreground="#008080">5</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">const</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> kset_uevent_ops *uevent_ops;
</rich_text><rich_text foreground="#008080">6</rich_text><rich_text> };

       再来看一下kset的初始化操作，kset表现为更高级一点的kobj，其初始化操作仍然是围绕其内部的kobj展开的。
 </rich_text><rich_text foreground="#008080">1</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> kset *kset_create_and_add(</rich_text><rich_text foreground="#0000ff">const</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">char</rich_text><rich_text> *name,
</rich_text><rich_text foreground="#008080"> 2</rich_text><rich_text>                  </rich_text><rich_text foreground="#0000ff">const</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> kset_uevent_ops *uevent_ops,
</rich_text><rich_text foreground="#008080"> 3</rich_text><rich_text>                  </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> kobject *parent_kobj)
</rich_text><rich_text foreground="#008080"> 4</rich_text><rich_text> {
</rich_text><rich_text foreground="#008080"> 5</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> kset *kset;
</rich_text><rich_text foreground="#008080"> 6</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> error;
</rich_text><rich_text foreground="#008080"> 7</rich_text><rich_text>     kset = kset_create(name, uevent_ops, parent_kobj);  </rich_text><rich_text foreground="#008000">//创建kset，关联操作函数和其父节点
</rich_text><rich_text foreground="#008080"> 8</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (!kset)
</rich_text><rich_text foreground="#008080"> 9</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text> NULL;
</rich_text><rich_text foreground="#008080">10</rich_text><rich_text>     error = kset_register(kset);
</rich_text><rich_text foreground="#008080">11</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (error) {
</rich_text><rich_text foreground="#008080">12</rich_text><rich_text>         kfree(kset);
</rich_text><rich_text foreground="#008080">13</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text> NULL;
</rich_text><rich_text foreground="#008080">14</rich_text><rich_text>     }
</rich_text><rich_text foreground="#008080">15</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text> kset;
</rich_text><rich_text foreground="#008080">16</rich_text><rich_text> }
</rich_text><rich_text foreground="#008080">17</rich_text><rich_text> ---</rich_text><rich_text foreground="#0000ff">static</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> kset *kset_create(</rich_text><rich_text foreground="#0000ff">const</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">char</rich_text><rich_text> *name,
</rich_text><rich_text foreground="#008080">18</rich_text><rich_text>                 </rich_text><rich_text foreground="#0000ff">const</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> kset_uevent_ops *uevent_ops,
</rich_text><rich_text foreground="#008080">19</rich_text><rich_text>                 </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> kobject *parent_kobj)
</rich_text><rich_text foreground="#008080">20</rich_text><rich_text> {
</rich_text><rich_text foreground="#008080">21</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> kset *kset;
</rich_text><rich_text foreground="#008080">22</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> retval;
</rich_text><rich_text foreground="#008080">23</rich_text><rich_text>     kset = kzalloc(</rich_text><rich_text foreground="#0000ff">sizeof</rich_text><rich_text>(*kset), GFP_KERNEL);  </rich_text><rich_text foreground="#008000">//申请结构体内存
</rich_text><rich_text foreground="#008080">24</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (!kset)
</rich_text><rich_text foreground="#008080">25</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text> NULL;
</rich_text><rich_text foreground="#008080">26</rich_text><rich_text>     retval = kobject_set_name(&amp;kset-&gt;kobj, name);  </rich_text><rich_text foreground="#008000">//设置名字
</rich_text><rich_text foreground="#008080">27</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (retval) {
</rich_text><rich_text foreground="#008080">28</rich_text><rich_text>         kfree(kset);
</rich_text><rich_text foreground="#008080">29</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text> NULL;
</rich_text><rich_text foreground="#008080">30</rich_text><rich_text>     }
</rich_text><rich_text foreground="#008080">31</rich_text><rich_text>     kset-&gt;uevent_ops = uevent_ops;               </rich_text><rich_text foreground="#008000">//关联操作函数
</rich_text><rich_text foreground="#008080">32</rich_text><rich_text>     kset-&gt;kobj.parent = parent_kobj;             </rich_text><rich_text foreground="#008000">//关联父节点
</rich_text><rich_text foreground="#008080">33</rich_text><rich_text>     </rich_text><rich_text foreground="#008000">/*
</rich_text><rich_text foreground="#008080">34</rich_text><rich_text> </rich_text><rich_text foreground="#008000">     * The kobject of this kset will have a type of kset_ktype and belong to
</rich_text><rich_text foreground="#008080">35</rich_text><rich_text> </rich_text><rich_text foreground="#008000">     * no kset itself.  That way we can properly free it when it is
</rich_text><rich_text foreground="#008080">36</rich_text><rich_text> </rich_text><rich_text foreground="#008000">     * finished being used.
</rich_text><rich_text foreground="#008080">37</rich_text><rich_text> </rich_text><rich_text foreground="#008000">*/</rich_text><rich_text>
</rich_text><rich_text foreground="#008080">38</rich_text><rich_text>     kset-&gt;kobj.ktype = &amp;kset_ktype;            </rich_text><rich_text foreground="#008000">//关联属性文件
</rich_text><rich_text foreground="#008080">39</rich_text><rich_text>     kset-&gt;kobj.kset = NULL;                    
</rich_text><rich_text foreground="#008080">40</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text> kset;
</rich_text><rich_text foreground="#008080">41</rich_text><rich_text> }
</rich_text><rich_text foreground="#008080">42</rich_text><rich_text> ----</rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> kset_register(</rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> kset *k)
</rich_text><rich_text foreground="#008080">43</rich_text><rich_text> {
</rich_text><rich_text foreground="#008080">44</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> err;
</rich_text><rich_text foreground="#008080">45</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (!k)
</rich_text><rich_text foreground="#008080">46</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text> -EINVAL;
</rich_text><rich_text foreground="#008080">47</rich_text><rich_text>     kset_init(k);
</rich_text><rich_text foreground="#008080">48</rich_text><rich_text>     err = kobject_add_internal(&amp;k-&gt;kobj);     </rich_text><rich_text foreground="#008000">//调用kobj操作函数    
</rich_text><rich_text foreground="#008080">49</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (err)
</rich_text><rich_text foreground="#008080">50</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text> err;
</rich_text><rich_text foreground="#008080">51</rich_text><rich_text>     kobject_uevent(&amp;k-&gt;kobj, KOBJ_ADD);
</rich_text><rich_text foreground="#008080">52</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text> </rich_text><rich_text foreground="#800080">0</rich_text><rich_text>;
</rich_text><rich_text foreground="#008080">53</rich_text><rich_text> }
</rich_text><rich_text foreground="#008080">54</rich_text><rich_text> ----</rich_text><rich_text foreground="#0000ff">void</rich_text><rich_text> kset_init(</rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> kset *k)
</rich_text><rich_text foreground="#008080">55</rich_text><rich_text> {
</rich_text><rich_text foreground="#008080">56</rich_text><rich_text>     kobject_init_internal(&amp;k-&gt;kobj);          </rich_text><rich_text foreground="#008000">//调用kobj操作函数
</rich_text><rich_text foreground="#008080">57</rich_text><rich_text>     INIT_LIST_HEAD(&amp;k-&gt;list);
</rich_text><rich_text foreground="#008080">58</rich_text><rich_text>     spin_lock_init(&amp;k-&gt;list_lock);
</rich_text><rich_text foreground="#008080">59</rich_text><rich_text> }</rich_text></node><node name="bus，device，driver分析(一)" prog_lang="custom-colors" readonly="False" tags="" unique_id="12"><rich_text>  内核的开发者将总线，设备，驱动这三者用软件思想抽象了出来，巧妙的建立了其间的关系，使之更形象化。结合前面所学的知识，总的来说其三者间的关系为 bus有两条链表，分别用于挂接设备和驱动，指定了其自身bus的device或者driver最后都会分别连接到对应bus的这两条链表上，而总线又有 其始端，为bus_kset，一个driver可以对应于几个设备，因此driver同样有其设备链表，用于挂接可以操作的设备，其自身也有bus挂接 点，用于将自身挂接到对应bus（每个driver只属于一条总线），而对于device，一个设备只属于一条总线，只能有一个driver与其对应，因 此对于device，都是单一的，一个driver挂接点，一个bus挂接点，device与bus相同的是都有始端，device为 devices_kset，因此device的注册同时会出现在对应的bus目录和device总目录下。好了，下面就以源码为例分别分析一下 bus，device，driver的注册过程。
 
一、bus的注册
      bus的注册比较简单，首先来看一下bus的结构：
     
 </rich_text><rich_text foreground="#008080">1</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> bus_type {
</rich_text><rich_text foreground="#008080"> 2</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">const</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">char</rich_text><rich_text>        *name;                </rich_text><rich_text foreground="#008000">//名字
</rich_text><rich_text foreground="#008080"> 3</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> bus_attribute    *bus_attrs;           </rich_text><rich_text foreground="#008000">//bus属性集
</rich_text><rich_text foreground="#008080"> 4</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device_attribute    *dev_attrs;           </rich_text><rich_text foreground="#008000">//device属性集
</rich_text><rich_text foreground="#008080"> 5</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> driver_attribute    *drv_attrs;           </rich_text><rich_text foreground="#008000">//driver属性集
</rich_text><rich_text foreground="#008080"> 6</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> (*match)(</rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device *dev, </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device_driver *drv);
</rich_text><rich_text foreground="#008080"> 7</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> (*uevent)(</rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device *dev, </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> kobj_uevent_env *env);
</rich_text><rich_text foreground="#008080"> 8</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> (*probe)(</rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device *dev);
</rich_text><rich_text foreground="#008080"> 9</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> (*remove)(</rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device *dev);
</rich_text><rich_text foreground="#008080">10</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">void</rich_text><rich_text> (*shutdown)(</rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device *dev);
</rich_text><rich_text foreground="#008080">11</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> (*suspend)(</rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device *dev, pm_message_t state);
</rich_text><rich_text foreground="#008080">12</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> (*resume)(</rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device *dev);
</rich_text><rich_text foreground="#008080">13</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">const</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> dev_pm_ops *pm;
</rich_text><rich_text foreground="#008080">14</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> bus_type_private *p;                   </rich_text><rich_text foreground="#008000">//bus的私有成员
</rich_text><rich_text foreground="#008080">15</rich_text><rich_text> };
</rich_text><rich_text foreground="#008080">16</rich_text><rich_text> </rich_text><rich_text foreground="#008000">//其中重点看一下私有成员结构体：
</rich_text><rich_text foreground="#008080">17</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> bus_type_private {
</rich_text><rich_text foreground="#008080">18</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> kset subsys;                           </rich_text><rich_text foreground="#008000">//bus内嵌的kset，代表其自身
</rich_text><rich_text foreground="#008080">19</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> kset *drivers_kset;                    
</rich_text><rich_text foreground="#008080">20</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> kset *devices_kset;
</rich_text><rich_text foreground="#008080">21</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> klist klist_devices;                   </rich_text><rich_text foreground="#008000">//包含devices链表及其操作函数
</rich_text><rich_text foreground="#008080">22</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> klist klist_drivers;                   </rich_text><rich_text foreground="#008000">//driver链表及其操作函数
</rich_text><rich_text foreground="#008080">23</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> blocking_notifier_head bus_notifier;
</rich_text><rich_text foreground="#008080">24</rich_text><rich_text>     unsigned </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> drivers_autoprobe:</rich_text><rich_text foreground="#800080">1</rich_text><rich_text>;              </rich_text><rich_text foreground="#008000">//匹配成功自动初始化标志
</rich_text><rich_text foreground="#008080">25</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> bus_type *bus;                          
</rich_text><rich_text foreground="#008080">26</rich_text><rich_text> };
  无论是bus，driver，还是device其本身特征都放在私有成员里，其注册时，都会申请并填充这个结构体，下面具体分析一下bus的注册流程，从bus_register开始：
     
</rich_text><rich_text foreground="#008080">1</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> bus_register(</rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> bus_type *bus)
</rich_text><rich_text foreground="#008080"> 2</rich_text><rich_text> {
</rich_text><rich_text foreground="#008080"> 3</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> retval;
</rich_text><rich_text foreground="#008080"> 4</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> bus_type_private *priv;
</rich_text><rich_text foreground="#008080"> 5</rich_text><rich_text>     priv = kzalloc(</rich_text><rich_text foreground="#0000ff">sizeof</rich_text><rich_text>(</rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> bus_type_private), GFP_KERNEL);    </rich_text><rich_text foreground="#008000">//进入时bus_type-&gt;bus_type_private为NULL
</rich_text><rich_text foreground="#008080"> 6</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (!priv)                                                      </rich_text><rich_text foreground="#008000">//该函数主要是对其的设置
</rich_text><rich_text foreground="#008080"> 7</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text> -ENOMEM;
</rich_text><rich_text foreground="#008080"> 8</rich_text><rich_text>     priv-&gt;bus = bus;                                                </rich_text><rich_text foreground="#008000">//私有成员的bus回指该bus
</rich_text><rich_text foreground="#008080"> 9</rich_text><rich_text>     bus-&gt;p = priv;                                                  </rich_text><rich_text foreground="#008000">//初始化bus-&gt;p,即其私有属性
</rich_text><rich_text foreground="#008080">10</rich_text><rich_text>     BLOCKING_INIT_NOTIFIER_HEAD(&amp;priv-&gt;bus_notifier);
</rich_text><rich_text foreground="#008080">11</rich_text><rich_text>     retval = kobject_set_name(&amp;priv-&gt;subsys.kobj, </rich_text><rich_text foreground="#800000">&quot;%s&quot;</rich_text><rich_text>, bus-&gt;name);  </rich_text><rich_text foreground="#008000">//设置该bus的名字，bus是kset的封装
</rich_text><rich_text foreground="#008080">12</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (retval)
</rich_text><rich_text foreground="#008080">13</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">goto</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">out</rich_text><rich_text>;
</rich_text><rich_text foreground="#008080">14</rich_text><rich_text>                                                       </rich_text><rich_text foreground="#008000">//bus_kset即为所有bus的总起始端点
</rich_text><rich_text foreground="#008080">15</rich_text><rich_text> </rich_text><rich_text foreground="#008000">//围绕bus内嵌的kset初始化，和kset的初始化时围绕
</rich_text><rich_text foreground="#008080">16</rich_text><rich_text>     priv-&gt;subsys.kobj.kset = bus_kset;                </rich_text><rich_text foreground="#008000">//kobj相似，没有parent时，就会用kset的kobj，此处即是
</rich_text><rich_text foreground="#008080">17</rich_text><rich_text>     priv-&gt;subsys.kobj.ktype = &amp;bus_ktype;                    </rich_text><rich_text foreground="#008000">//属性操作级别统一为bus_ktype
</rich_text><rich_text foreground="#008080">18</rich_text><rich_text>     priv-&gt;drivers_autoprobe = </rich_text><rich_text foreground="#800080">1</rich_text><rich_text>;                                    </rich_text><rich_text foreground="#008000">//设置该标志，当有driver注册时，会自动匹配devices
</rich_text><rich_text foreground="#008080">19</rich_text><rich_text> </rich_text><rich_text foreground="#008000">//上的设备并用probe初始化，
</rich_text><rich_text foreground="#008080">20</rich_text><rich_text> </rich_text><rich_text foreground="#008000">//当有device注册时也同样找到  driver并会初始化
</rich_text><rich_text foreground="#008080">21</rich_text><rich_text>     retval = kset_register(&amp;priv-&gt;subsys);                          </rich_text><rich_text foreground="#008000">//注册kset，创建目录结构，以及层次关系
</rich_text><rich_text foreground="#008080">22</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (retval)
</rich_text><rich_text foreground="#008080">23</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">goto</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">out</rich_text><rich_text>;
</rich_text><rich_text foreground="#008080">24</rich_text><rich_text>     retval = bus_create_file(bus, &amp;bus_attr_uevent);                </rich_text><rich_text foreground="#008000">//当前bus目录下生成bus_attr_uevent属性文件
</rich_text><rich_text foreground="#008080">25</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (retval)
</rich_text><rich_text foreground="#008080">26</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">goto</rich_text><rich_text> bus_uevent_fail;
</rich_text><rich_text foreground="#008080">27</rich_text><rich_text>     priv-&gt;devices_kset = kset_create_and_add(</rich_text><rich_text foreground="#800000">&quot;devices&quot;</rich_text><rich_text>, NULL,       </rich_text><rich_text foreground="#008000">//初始化bus目录下的devices目录，里面级联了该bus下设备，
</rich_text><rich_text foreground="#008080">28</rich_text><rich_text>                          &amp;priv-&gt;subsys.kobj);                    </rich_text><rich_text foreground="#008000">//仍然以kset为原型
</rich_text><rich_text foreground="#008080">29</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (!priv-&gt;devices_kset) {
</rich_text><rich_text foreground="#008080">30</rich_text><rich_text>         retval = -ENOMEM;
</rich_text><rich_text foreground="#008080">31</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">goto</rich_text><rich_text> bus_devices_fail;
</rich_text><rich_text foreground="#008080">32</rich_text><rich_text>     }
</rich_text><rich_text foreground="#008080">33</rich_text><rich_text>     priv-&gt;drivers_kset = kset_create_and_add(</rich_text><rich_text foreground="#800000">&quot;drivers&quot;</rich_text><rich_text>, NULL,       </rich_text><rich_text foreground="#008000">//初始化bus目录下的drivers目录，里面级联了该bus下设备的driver
</rich_text><rich_text foreground="#008080">34</rich_text><rich_text>                          &amp;priv-&gt;subsys.kobj);
</rich_text><rich_text foreground="#008080">35</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (!priv-&gt;drivers_kset) {
</rich_text><rich_text foreground="#008080">36</rich_text><rich_text>         retval = -ENOMEM;
</rich_text><rich_text foreground="#008080">37</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">goto</rich_text><rich_text> bus_drivers_fail;
</rich_text><rich_text foreground="#008080">38</rich_text><rich_text>     }
</rich_text><rich_text foreground="#008080">39</rich_text><rich_text>     klist_init(&amp;priv-&gt;klist_devices, klist_devices_get, klist_devices_put);  </rich_text><rich_text foreground="#008000">//初始化klist_devices里的操作函数成员
</rich_text><rich_text foreground="#008080">40</rich_text><rich_text>     klist_init(&amp;priv-&gt;klist_drivers, NULL, NULL);                            </rich_text><rich_text foreground="#008000">//klist_drivers里的操作函数置空
</rich_text><rich_text foreground="#008080">41</rich_text><rich_text>     retval = add_probe_files(bus);                                           </rich_text><rich_text foreground="#008000">//增加bus_attr_drivers_probe和bus_attr_drivers_autoprobe
</rich_text><rich_text foreground="#008080">42</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (retval)                                                              </rich_text><rich_text foreground="#008000">//属性文件
</rich_text><rich_text foreground="#008080">43</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">goto</rich_text><rich_text> bus_probe_files_fail;
</rich_text><rich_text foreground="#008080">44</rich_text><rich_text>     retval = bus_add_attrs(bus);                                             </rich_text><rich_text foreground="#008000">//增加默认的属性文件
</rich_text><rich_text foreground="#008080">45</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (retval)
</rich_text><rich_text foreground="#008080">46</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">goto</rich_text><rich_text> bus_attrs_fail;
</rich_text><rich_text foreground="#008080">47</rich_text><rich_text>     pr_debug(</rich_text><rich_text foreground="#800000">&quot;bus: '%s': registered/n&quot;</rich_text><rich_text>, bus-&gt;name);
</rich_text><rich_text foreground="#008080">48</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text> </rich_text><rich_text foreground="#800080">0</rich_text><rich_text>;
</rich_text><rich_text foreground="#008080">49</rich_text><rich_text> bus_attrs_fail:                                                               </rich_text><rich_text foreground="#008000">//以下为错误处理
</rich_text><rich_text foreground="#008080">50</rich_text><rich_text>     remove_probe_files(bus);
</rich_text><rich_text foreground="#008080">51</rich_text><rich_text> bus_probe_files_fail:
</rich_text><rich_text foreground="#008080">52</rich_text><rich_text>     kset_unregister(bus-&gt;p-&gt;drivers_kset);
</rich_text><rich_text foreground="#008080">53</rich_text><rich_text> bus_drivers_fail:
</rich_text><rich_text foreground="#008080">54</rich_text><rich_text>     kset_unregister(bus-&gt;p-&gt;devices_kset);
</rich_text><rich_text foreground="#008080">55</rich_text><rich_text> bus_devices_fail:
</rich_text><rich_text foreground="#008080">56</rich_text><rich_text>     bus_remove_file(bus, &amp;bus_attr_uevent);
</rich_text><rich_text foreground="#008080">57</rich_text><rich_text> bus_uevent_fail:
</rich_text><rich_text foreground="#008080">58</rich_text><rich_text>     kset_unregister(&amp;bus-&gt;p-&gt;subsys);
</rich_text><rich_text foreground="#008080">59</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">out</rich_text><rich_text>:
</rich_text><rich_text foreground="#008080">60</rich_text><rich_text>     kfree(bus-&gt;p);
</rich_text><rich_text foreground="#008080">61</rich_text><rich_text>     bus-&gt;p = NULL;
</rich_text><rich_text foreground="#008080">62</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text> retval;
</rich_text><rich_text foreground="#008080">63</rich_text><rich_text> }
    由此可见，bus又是kset的封装，bus_register主要完成了其私有成员bus_type_private的初始化，并初始化了其下的两个目 录devices和drivers，及其属性文件，bus有个自己的根目录也就是bus有个起始端点，是bus_kset，经过此番的注册，bus目录下 将会出现我们注册的bus，并且其下会有device和driver两个子目录，代表它下面的driver和device链表。
二、driver的注册
  下面看一下driver是怎么和bus关联起来的，首先看下driver的结构：
    
 </rich_text><rich_text foreground="#008080">1</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device_driver {
</rich_text><rich_text foreground="#008080"> 2</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">const</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">char</rich_text><rich_text>        *name;            </rich_text><rich_text foreground="#008000">//名字
</rich_text><rich_text foreground="#008080"> 3</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> bus_type        *bus;        </rich_text><rich_text foreground="#008000">//其所在的bus
</rich_text><rich_text foreground="#008080"> 4</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> module        *owner;
</rich_text><rich_text foreground="#008080"> 5</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">const</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">char</rich_text><rich_text>        *mod_name;    </rich_text><rich_text foreground="#008000">/* used for built-in modules */</rich_text><rich_text>
</rich_text><rich_text foreground="#008080"> 6</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">bool</rich_text><rich_text> suppress_bind_attrs;    </rich_text><rich_text foreground="#008000">/* disables bind/unbind via sysfs */</rich_text><rich_text>
</rich_text><rich_text foreground="#008080"> 7</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">#if</rich_text><rich_text> defined(CONFIG_OF)
</rich_text><rich_text foreground="#008080"> 8</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">const</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> of_device_id    *of_match_table;
</rich_text><rich_text foreground="#008080"> 9</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">#endif</rich_text><rich_text>
</rich_text><rich_text foreground="#008080">10</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> (*probe) (</rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device *dev);        </rich_text><rich_text foreground="#008000">//匹配成功时可能会调用到的函数
</rich_text><rich_text foreground="#008080">11</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> (*remove) (</rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device *dev);
</rich_text><rich_text foreground="#008080">12</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">void</rich_text><rich_text> (*shutdown) (</rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device *dev);
</rich_text><rich_text foreground="#008080">13</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> (*suspend) (</rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device *dev, pm_message_t state);
</rich_text><rich_text foreground="#008080">14</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> (*resume) (</rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device *dev);
</rich_text><rich_text foreground="#008080">15</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">const</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> attribute_group **groups;
</rich_text><rich_text foreground="#008080">16</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">const</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> dev_pm_ops *pm;
</rich_text><rich_text foreground="#008080">17</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> driver_private *p;                 </rich_text><rich_text foreground="#008000">//私有成员，表示driver
</rich_text><rich_text foreground="#008080">18</rich_text><rich_text> };
</rich_text><rich_text foreground="#008080">19</rich_text><rich_text> </rich_text><rich_text foreground="#008000">//重点看下driver的私有成员
</rich_text><rich_text foreground="#008080">20</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> driver_private {
</rich_text><rich_text foreground="#008080">21</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> kobject kobj;                      </rich_text><rich_text foreground="#008000">//代表driver自身
</rich_text><rich_text foreground="#008080">22</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> klist klist_devices;               </rich_text><rich_text foreground="#008000">//可以操控的设备链表
</rich_text><rich_text foreground="#008080">23</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> klist_node knode_bus;              </rich_text><rich_text foreground="#008000">//挂接到bus的节点
</rich_text><rich_text foreground="#008080">24</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> module_kobject *mkobj;             </rich_text><rich_text foreground="#008000">//模块相关
</rich_text><rich_text foreground="#008080">25</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device_driver *driver;             </rich_text><rich_text foreground="#008000">//回指该driver
</rich_text><rich_text foreground="#008080">26</rich_text><rich_text> };
  如同bus一样，重点的仍是可以代表其自身的私有属性，下面具体看一下driver的注册过程，从driver_register开始：
    
  </rich_text><rich_text foreground="#008080">1</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> driver_register(</rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device_driver *drv)
</rich_text><rich_text foreground="#008080">  2</rich_text><rich_text> {
</rich_text><rich_text foreground="#008080">  3</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> ret;
</rich_text><rich_text foreground="#008080">  4</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device_driver *other;
</rich_text><rich_text foreground="#008080">  5</rich_text><rich_text>     BUG_ON(!drv-&gt;bus-&gt;p);
</rich_text><rich_text foreground="#008080">  6</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> ((drv-&gt;bus-&gt;probe &amp;&amp; drv-&gt;probe) ||           </rich_text><rich_text foreground="#008000">//driver和bus的同名操作函数如果同时存在，会出现警告
</rich_text><rich_text foreground="#008080">  7</rich_text><rich_text>         (drv-&gt;bus-&gt;remove &amp;&amp; drv-&gt;remove) ||         </rich_text><rich_text foreground="#008000">//并且会优先选用bus的
</rich_text><rich_text foreground="#008080">  8</rich_text><rich_text>         (drv-&gt;bus-&gt;shutdown &amp;&amp; drv-&gt;shutdown))
</rich_text><rich_text foreground="#008080">  9</rich_text><rich_text>         printk(KERN_WARNING </rich_text><rich_text foreground="#800000">&quot;Driver '%s' needs updating - please use &quot;</rich_text><rich_text>
</rich_text><rich_text foreground="#008080"> 10</rich_text><rich_text>             </rich_text><rich_text foreground="#800000">&quot;bus_type methods/n&quot;</rich_text><rich_text>, drv-&gt;name);
</rich_text><rich_text foreground="#008080"> 11</rich_text><rich_text>     other = driver_find(drv-&gt;name, drv-&gt;bus);        </rich_text><rich_text foreground="#008000">//进入bus的driver链表，确认该driver是否已经注册
</rich_text><rich_text foreground="#008080"> 12</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (other) {
</rich_text><rich_text foreground="#008080"> 13</rich_text><rich_text>         put_driver(other);                            </rich_text><rich_text foreground="#008000">//找到了再减少引用计数，并且报错退出
</rich_text><rich_text foreground="#008080"> 14</rich_text><rich_text>         printk(KERN_ERR </rich_text><rich_text foreground="#800000">&quot;Error: Driver '%s' is already registered, &quot;</rich_text><rich_text>
</rich_text><rich_text foreground="#008080"> 15</rich_text><rich_text>             </rich_text><rich_text foreground="#800000">&quot;aborting.../n&quot;</rich_text><rich_text>, drv-&gt;name);
</rich_text><rich_text foreground="#008080"> 16</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text> -EBUSY;
</rich_text><rich_text foreground="#008080"> 17</rich_text><rich_text>     }
</rich_text><rich_text foreground="#008080"> 18</rich_text><rich_text>     ret = bus_add_driver(drv);                       </rich_text><rich_text foreground="#008000">//如果没有注册，那么把该driver加入所在bus
</rich_text><rich_text foreground="#008080"> 19</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (ret)
</rich_text><rich_text foreground="#008080"> 20</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text> ret;
</rich_text><rich_text foreground="#008080"> 21</rich_text><rich_text>     ret = driver_add_groups(drv, drv-&gt;groups);
</rich_text><rich_text foreground="#008080"> 22</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (ret)
</rich_text><rich_text foreground="#008080"> 23</rich_text><rich_text>         bus_remove_driver(drv);
</rich_text><rich_text foreground="#008080"> 24</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text> ret;
</rich_text><rich_text foreground="#008080"> 25</rich_text><rich_text> }
</rich_text><rich_text foreground="#008080"> 26</rich_text><rich_text> </rich_text><rich_text foreground="#008000">/****************************************************
</rich_text><rich_text foreground="#008080"> 27</rich_text><rich_text> </rich_text><rich_text foreground="#008000">× 跟踪一下driver_find(drv-&gt;name, drv-&gt;bus)
</rich_text><rich_text foreground="#008080"> 28</rich_text><rich_text> </rich_text><rich_text foreground="#008000">****************************************************/</rich_text><rich_text>
</rich_text><rich_text foreground="#008080"> 29</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device_driver *driver_find(</rich_text><rich_text foreground="#0000ff">const</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">char</rich_text><rich_text> *name, </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> bus_type *bus)
</rich_text><rich_text foreground="#008080"> 30</rich_text><rich_text> {
</rich_text><rich_text foreground="#008080"> 31</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> kobject *k = kset_find_obj(bus-&gt;p-&gt;drivers_kset, name);  </rich_text><rich_text foreground="#008000">//bus-&gt;p-&gt;drivers_kset代表bus下
</rich_text><rich_text foreground="#008080"> 32</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> driver_private *priv;                                    </rich_text><rich_text foreground="#008000">//的driver目录，此处会遍历bus的    
</rich_text><rich_text foreground="#008080"> 33</rich_text><rich_text> </rich_text><rich_text foreground="#008000">//driver链表，通过driver内嵌的
</rich_text><rich_text foreground="#008080"> 34</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (k) {                                                        </rich_text><rich_text foreground="#008000">//kobj名字比较
</rich_text><rich_text foreground="#008080"> 35</rich_text><rich_text>         priv = to_driver(k);
</rich_text><rich_text foreground="#008080"> 36</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text> priv-&gt;driver;                                 </rich_text><rich_text foreground="#008000">//如果找到同名的kobj那么返回该driver
</rich_text><rich_text foreground="#008080"> 37</rich_text><rich_text>     }
</rich_text><rich_text foreground="#008080"> 38</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text> NULL;
</rich_text><rich_text foreground="#008080"> 39</rich_text><rich_text> }
</rich_text><rich_text foreground="#008080"> 40</rich_text><rich_text> </rich_text><rich_text foreground="#008000">//看一下kset_find_obj吧:
</rich_text><rich_text foreground="#008080"> 41</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> kobject *kset_find_obj(</rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> kset *kset, </rich_text><rich_text foreground="#0000ff">const</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">char</rich_text><rich_text> *name)
</rich_text><rich_text foreground="#008080"> 42</rich_text><rich_text> {
</rich_text><rich_text foreground="#008080"> 43</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> kobject *k;
</rich_text><rich_text foreground="#008080"> 44</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> kobject *ret = NULL;
</rich_text><rich_text foreground="#008080"> 45</rich_text><rich_text>     spin_lock(&amp;kset-&gt;list_lock);
</rich_text><rich_text foreground="#008080"> 46</rich_text><rich_text>     list_for_each_entry(k, &amp;kset-&gt;list, entry) {                   </rich_text><rich_text foreground="#008000">//遍历bus下的driver链表，如果
</rich_text><rich_text foreground="#008080"> 47</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (kobject_name(k) &amp;&amp; !strcmp(kobject_name(k), name)) {   </rich_text><rich_text foreground="#008000">//找到那么返回找到的kobj，并且把
</rich_text><rich_text foreground="#008080"> 48</rich_text><rich_text>             ret = kobject_get(k);                                  </rich_text><rich_text foreground="#008000">//该driver的kobj引用计数+1
</rich_text><rich_text foreground="#008080"> 49</rich_text><rich_text>             </rich_text><rich_text foreground="#0000ff">break</rich_text><rich_text>;
</rich_text><rich_text foreground="#008080"> 50</rich_text><rich_text>         }
</rich_text><rich_text foreground="#008080"> 51</rich_text><rich_text>     }
</rich_text><rich_text foreground="#008080"> 52</rich_text><rich_text>     spin_unlock(&amp;kset-&gt;list_lock);
</rich_text><rich_text foreground="#008080"> 53</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text> ret;
</rich_text><rich_text foreground="#008080"> 54</rich_text><rich_text> }
</rich_text><rich_text foreground="#008080"> 55</rich_text><rich_text> </rich_text><rich_text foreground="#008000">/************************************************
</rich_text><rich_text foreground="#008080"> 56</rich_text><rich_text> </rich_text><rich_text foreground="#008000">× 再来跟踪一下driver_register里面的另外一个函数
</rich_text><rich_text foreground="#008080"> 57</rich_text><rich_text> </rich_text><rich_text foreground="#008000">× bus_add_driver(drv)
</rich_text><rich_text foreground="#008080"> 58</rich_text><rich_text> </rich_text><rich_text foreground="#008000">************************************************/</rich_text><rich_text>
</rich_text><rich_text foreground="#008080"> 59</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> bus_add_driver(</rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device_driver *drv) 
</rich_text><rich_text foreground="#008080"> 60</rich_text><rich_text> {
</rich_text><rich_text foreground="#008080"> 61</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> bus_type *bus;
</rich_text><rich_text foreground="#008080"> 62</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> driver_private *priv;
</rich_text><rich_text foreground="#008080"> 63</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> error = </rich_text><rich_text foreground="#800080">0</rich_text><rich_text>;
</rich_text><rich_text foreground="#008080"> 64</rich_text><rich_text>     bus = bus_get(drv-&gt;bus);                                        </rich_text><rich_text foreground="#008000">//取得其所在bus的指针
</rich_text><rich_text foreground="#008080"> 65</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (!bus)
</rich_text><rich_text foreground="#008080"> 66</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text> -EINVAL;
</rich_text><rich_text foreground="#008080"> 67</rich_text><rich_text>     pr_debug(</rich_text><rich_text foreground="#800000">&quot;bus: '%s': add driver %s/n&quot;</rich_text><rich_text>, bus-&gt;name, drv-&gt;name);   </rich_text><rich_text foreground="#008000">//开始初始化这个driver的私有成员，
</rich_text><rich_text foreground="#008080"> 68</rich_text><rich_text> </rich_text><rich_text foreground="#008000">//和bus类似
</rich_text><rich_text foreground="#008080"> 69</rich_text><rich_text>     priv = kzalloc(</rich_text><rich_text foreground="#0000ff">sizeof</rich_text><rich_text>(*priv), GFP_KERNEL);
</rich_text><rich_text foreground="#008080"> 70</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (!priv) {
</rich_text><rich_text foreground="#008080"> 71</rich_text><rich_text>         error = -ENOMEM;
</rich_text><rich_text foreground="#008080"> 72</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">goto</rich_text><rich_text> out_put_bus;
</rich_text><rich_text foreground="#008080"> 73</rich_text><rich_text>     }
</rich_text><rich_text foreground="#008080"> 74</rich_text><rich_text>     klist_init(&amp;priv-&gt;klist_devices, NULL, NULL);                   </rich_text><rich_text foreground="#008000">//设备操作函数清空，设备链表初始化
</rich_text><rich_text foreground="#008080"> 75</rich_text><rich_text>     priv-&gt;driver = drv;                                             
</rich_text><rich_text foreground="#008080"> 76</rich_text><rich_text>     drv-&gt;p = priv;
</rich_text><rich_text foreground="#008080"> 77</rich_text><rich_text>     priv-&gt;kobj.kset = bus-&gt;p-&gt;drivers_kset;                          </rich_text><rich_text foreground="#008000">//kset指定到bus下面
</rich_text><rich_text foreground="#008080"> 78</rich_text><rich_text>     error = kobject_init_and_add(&amp;priv-&gt;kobj, &amp;driver_ktype, NULL,   </rich_text><rich_text foreground="#008000">//建立层次结构和属性文件
</rich_text><rich_text foreground="#008080"> 79</rich_text><rich_text>                      </rich_text><rich_text foreground="#800000">&quot;%s&quot;</rich_text><rich_text>, drv-&gt;name);
</rich_text><rich_text foreground="#008080"> 80</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (error)
</rich_text><rich_text foreground="#008080"> 81</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">goto</rich_text><rich_text> out_unregister;
</rich_text><rich_text foreground="#008080"> 82</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (drv-&gt;bus-&gt;p-&gt;drivers_autoprobe) {                            </rich_text><rich_text foreground="#008000">//bus的自动匹配如果设置为真，
</rich_text><rich_text foreground="#008080"> 83</rich_text><rich_text>         error = driver_attach(drv);                                  </rich_text><rich_text foreground="#008000">//那么到bus的devices上去匹配设备
</rich_text><rich_text foreground="#008080"> 84</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (error)
</rich_text><rich_text foreground="#008080"> 85</rich_text><rich_text>             </rich_text><rich_text foreground="#0000ff">goto</rich_text><rich_text> out_unregister;
</rich_text><rich_text foreground="#008080"> 86</rich_text><rich_text>     }
</rich_text><rich_text foreground="#008080"> 87</rich_text><rich_text>     klist_add_tail(&amp;priv-&gt;knode_bus, &amp;bus-&gt;p-&gt;klist_drivers);        </rich_text><rich_text foreground="#008000">//把driver挂接到bus的driver链表
</rich_text><rich_text foreground="#008080"> 88</rich_text><rich_text>     module_add_driver(drv-&gt;owner, drv);
</rich_text><rich_text foreground="#008080"> 89</rich_text><rich_text>     error = driver_create_file(drv, &amp;driver_attr_uevent);            </rich_text><rich_text foreground="#008000">//以下添加该driver相关属性文件
</rich_text><rich_text foreground="#008080"> 90</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (error) {
</rich_text><rich_text foreground="#008080"> 91</rich_text><rich_text>         printk(KERN_ERR </rich_text><rich_text foreground="#800000">&quot;%s: uevent attr (%s) failed/n&quot;</rich_text><rich_text>,
</rich_text><rich_text foreground="#008080"> 92</rich_text><rich_text>             __func__, drv-&gt;name);
</rich_text><rich_text foreground="#008080"> 93</rich_text><rich_text>     }
</rich_text><rich_text foreground="#008080"> 94</rich_text><rich_text>     error = driver_add_attrs(bus, drv);
</rich_text><rich_text foreground="#008080"> 95</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (error) {
</rich_text><rich_text foreground="#008080"> 96</rich_text><rich_text>         </rich_text><rich_text foreground="#008000">/* How the hell do we get out of this pickle? Give up */</rich_text><rich_text>
</rich_text><rich_text foreground="#008080"> 97</rich_text><rich_text>         printk(KERN_ERR </rich_text><rich_text foreground="#800000">&quot;%s: driver_add_attrs(%s) failed/n&quot;</rich_text><rich_text>,
</rich_text><rich_text foreground="#008080"> 98</rich_text><rich_text>             __func__, drv-&gt;name);
</rich_text><rich_text foreground="#008080"> 99</rich_text><rich_text>     }
</rich_text><rich_text foreground="#008080">100</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (!drv-&gt;suppress_bind_attrs) {
</rich_text><rich_text foreground="#008080">101</rich_text><rich_text>         error = add_bind_files(drv);
</rich_text><rich_text foreground="#008080">102</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (error) {
</rich_text><rich_text foreground="#008080">103</rich_text><rich_text>             </rich_text><rich_text foreground="#008000">/* Ditto */</rich_text><rich_text>
</rich_text><rich_text foreground="#008080">104</rich_text><rich_text>             printk(KERN_ERR </rich_text><rich_text foreground="#800000">&quot;%s: add_bind_files(%s) failed/n&quot;</rich_text><rich_text>,
</rich_text><rich_text foreground="#008080">105</rich_text><rich_text>                 __func__, drv-&gt;name);
</rich_text><rich_text foreground="#008080">106</rich_text><rich_text>         }
</rich_text><rich_text foreground="#008080">107</rich_text><rich_text>     }
</rich_text><rich_text foreground="#008080">108</rich_text><rich_text>     kobject_uevent(&amp;priv-&gt;kobj, KOBJ_ADD);
</rich_text><rich_text foreground="#008080">109</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text> </rich_text><rich_text foreground="#800080">0</rich_text><rich_text>;
</rich_text><rich_text foreground="#008080">110</rich_text><rich_text> out_unregister:
</rich_text><rich_text foreground="#008080">111</rich_text><rich_text>     kobject_put(&amp;priv-&gt;kobj);
</rich_text><rich_text foreground="#008080">112</rich_text><rich_text>     kfree(drv-&gt;p);
</rich_text><rich_text foreground="#008080">113</rich_text><rich_text>     drv-&gt;p = NULL;
</rich_text><rich_text foreground="#008080">114</rich_text><rich_text> out_put_bus:
</rich_text><rich_text foreground="#008080">115</rich_text><rich_text>     bus_put(bus);
</rich_text><rich_text foreground="#008080">116</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text> error;
</rich_text><rich_text foreground="#008080">117</rich_text><rich_text> }
</rich_text><rich_text foreground="#008080">118</rich_text><rich_text> </rich_text><rich_text foreground="#008000">/****************************************************************
</rich_text><rich_text foreground="#008080">119</rich_text><rich_text> </rich_text><rich_text foreground="#008000">× 接下来就剩下最终要的匹配函数driver_attach(drv)了，我们来看一下：
</rich_text><rich_text foreground="#008080">120</rich_text><rich_text> </rich_text><rich_text foreground="#008000">****************************************************************/</rich_text><rich_text>
</rich_text><rich_text foreground="#008080">121</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> driver_attach(</rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device_driver *drv)                            </rich_text><rich_text foreground="#008000">//遍历bus的设备链表找到
</rich_text><rich_text foreground="#008080">122</rich_text><rich_text> {                                                                       </rich_text><rich_text foreground="#008000">//合适的设备就调用__driver_attach，
</rich_text><rich_text foreground="#008080">123</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text> bus_for_each_dev(drv-&gt;bus, NULL, drv, __driver_attach);      </rich_text><rich_text foreground="#008000">//NULL表示从头开始遍历
</rich_text><rich_text foreground="#008080">124</rich_text><rich_text> }  
</rich_text><rich_text foreground="#008080">125</rich_text><rich_text> </rich_text><rich_text foreground="#008000">//============
</rich_text><rich_text foreground="#008080">126</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> bus_for_each_dev(</rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> bus_type *bus, </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device *start,
</rich_text><rich_text foreground="#008080">127</rich_text><rich_text>              </rich_text><rich_text foreground="#0000ff">void</rich_text><rich_text> *data, </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> (*fn)(</rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device *, </rich_text><rich_text foreground="#0000ff">void</rich_text><rich_text> *))
</rich_text><rich_text foreground="#008080">128</rich_text><rich_text> {
</rich_text><rich_text foreground="#008080">129</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> klist_iter i;
</rich_text><rich_text foreground="#008080">130</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device *dev;
</rich_text><rich_text foreground="#008080">131</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> error = </rich_text><rich_text foreground="#800080">0</rich_text><rich_text>;
</rich_text><rich_text foreground="#008080">132</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (!bus)
</rich_text><rich_text foreground="#008080">133</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text> -EINVAL;
</rich_text><rich_text foreground="#008080">134</rich_text><rich_text>     klist_iter_init_node(&amp;bus-&gt;p-&gt;klist_devices, &amp;i,              </rich_text><rich_text foreground="#008000">//进入bus的devices链表
</rich_text><rich_text foreground="#008080">135</rich_text><rich_text>                  (start ? &amp;start-&gt;p-&gt;knode_bus : NULL));
</rich_text><rich_text foreground="#008080">136</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">while</rich_text><rich_text> ((dev = next_device(&amp;i)) &amp;&amp; !error)                     </rich_text><rich_text foreground="#008000">//设备存在则调用fn即__driver_attach
</rich_text><rich_text foreground="#008080">137</rich_text><rich_text>         error = fn(dev, data);                                    </rich_text><rich_text foreground="#008000">//进行匹配
</rich_text><rich_text foreground="#008080">138</rich_text><rich_text>     klist_iter_exit(&amp;i);
</rich_text><rich_text foreground="#008080">139</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text> error;
</rich_text><rich_text foreground="#008080">140</rich_text><rich_text> } 
</rich_text><rich_text foreground="#008080">141</rich_text><rich_text> </rich_text><rich_text foreground="#008000">/*********************************************
</rich_text><rich_text foreground="#008080">142</rich_text><rich_text> </rich_text><rich_text foreground="#008000">× 接着看一下__driver_attach这个函数
</rich_text><rich_text foreground="#008080">143</rich_text><rich_text> </rich_text><rich_text foreground="#008000">*********************************************/</rich_text><rich_text>
</rich_text><rich_text foreground="#008080">144</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">static</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> __driver_attach(</rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device *dev, </rich_text><rich_text foreground="#0000ff">void</rich_text><rich_text> *data)
</rich_text><rich_text foreground="#008080">145</rich_text><rich_text> {
</rich_text><rich_text foreground="#008080">146</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device_driver *drv = data;
</rich_text><rich_text foreground="#008080">147</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (!driver_match_device(drv, dev))                </rich_text><rich_text foreground="#008000">//进行匹配
</rich_text><rich_text foreground="#008080">148</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text> </rich_text><rich_text foreground="#800080">0</rich_text><rich_text>;
</rich_text><rich_text foreground="#008080">149</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (dev-&gt;parent)    </rich_text><rich_text foreground="#008000">/* Needed for USB */</rich_text><rich_text>
</rich_text><rich_text foreground="#008080">150</rich_text><rich_text>         device_lock(dev-&gt;parent);
</rich_text><rich_text foreground="#008080">151</rich_text><rich_text>     device_lock(dev);
</rich_text><rich_text foreground="#008080">152</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (!dev-&gt;driver)                               </rich_text><rich_text foreground="#008000">//如果设备没有指定driver
</rich_text><rich_text foreground="#008080">153</rich_text><rich_text>         driver_probe_device(drv, dev);              </rich_text><rich_text foreground="#008000">//那么需要初始化匹配到的这个设备
</rich_text><rich_text foreground="#008080">154</rich_text><rich_text>     device_unlock(dev);
</rich_text><rich_text foreground="#008080">155</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (dev-&gt;parent)
</rich_text><rich_text foreground="#008080">156</rich_text><rich_text>         device_unlock(dev-&gt;parent);
</rich_text><rich_text foreground="#008080">157</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text> </rich_text><rich_text foreground="#800080">0</rich_text><rich_text>;
</rich_text><rich_text foreground="#008080">158</rich_text><rich_text> }
</rich_text><rich_text foreground="#008080">159</rich_text><rich_text> </rich_text><rich_text foreground="#008000">/*********************************************
</rich_text><rich_text foreground="#008080">160</rich_text><rich_text> </rich_text><rich_text foreground="#008000">× 又遇到两个分支，囧，先看一下driver_match_device 
</rich_text><rich_text foreground="#008080">161</rich_text><rich_text> </rich_text><rich_text foreground="#008000">*********************************************/</rich_text><rich_text> 
</rich_text><rich_text foreground="#008080">162</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">static</rich_text><rich_text> inline </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> driver_match_device(</rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device_driver *drv,      </rich_text><rich_text foreground="#008000">//bus的match存在就用bus的
</rich_text><rich_text foreground="#008080">163</rich_text><rich_text>                                       </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device *dev)             </rich_text><rich_text foreground="#008000">//，否则就直接匹配成功...
</rich_text><rich_text foreground="#008080">164</rich_text><rich_text> {                                                                     </rich_text><rich_text foreground="#008000">//match通常实现为首先扫描
</rich_text><rich_text foreground="#008080">165</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text> drv-&gt;bus-&gt;match ? drv-&gt;bus-&gt;match(dev, drv) : </rich_text><rich_text foreground="#800080">1</rich_text><rich_text>;           </rich_text><rich_text foreground="#008000">//driver支持的id设备表，如果
</rich_text><rich_text foreground="#008080">166</rich_text><rich_text> }                                                                     </rich_text><rich_text foreground="#008000">//为NULL就用名字进行匹配
</rich_text><rich_text foreground="#008080">167</rich_text><rich_text> </rich_text><rich_text foreground="#008000">/************************************
</rich_text><rich_text foreground="#008080">168</rich_text><rich_text> </rich_text><rich_text foreground="#008000">× 再来看一下driver_probe_device这个函数 
</rich_text><rich_text foreground="#008080">169</rich_text><rich_text> </rich_text><rich_text foreground="#008000">************************************/</rich_text><rich_text> 
</rich_text><rich_text foreground="#008080">170</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> driver_probe_device(</rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device_driver *drv, </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device *dev)
</rich_text><rich_text foreground="#008080">171</rich_text><rich_text> {
</rich_text><rich_text foreground="#008080">172</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> ret = </rich_text><rich_text foreground="#800080">0</rich_text><rich_text>;
</rich_text><rich_text foreground="#008080">173</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (!device_is_registered(dev))                              </rich_text><rich_text foreground="#008000">//判断该设备是否已经注册
</rich_text><rich_text foreground="#008080">174</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text> -ENODEV;
</rich_text><rich_text foreground="#008080">175</rich_text><rich_text>     pr_debug(</rich_text><rich_text foreground="#800000">&quot;bus: '%s': %s: matched device %s with driver %s/n&quot;</rich_text><rich_text>,
</rich_text><rich_text foreground="#008080">176</rich_text><rich_text>          drv-&gt;bus-&gt;name, __func__, dev_name(dev), drv-&gt;name);
</rich_text><rich_text foreground="#008080">177</rich_text><rich_text>     pm_runtime_get_noresume(dev);
</rich_text><rich_text foreground="#008080">178</rich_text><rich_text>     pm_runtime_barrier(dev);
</rich_text><rich_text foreground="#008080">179</rich_text><rich_text>     ret = really_probe(dev, drv);                               </rich_text><rich_text foreground="#008000">//调用really_probe
</rich_text><rich_text foreground="#008080">180</rich_text><rich_text>     pm_runtime_put_sync(dev);
</rich_text><rich_text foreground="#008080">181</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text> ret;
</rich_text><rich_text foreground="#008080">182</rich_text><rich_text> }
</rich_text><rich_text foreground="#008080">183</rich_text><rich_text> </rich_text><rich_text foreground="#008000">/************************************
</rich_text><rich_text foreground="#008080">184</rich_text><rich_text> </rich_text><rich_text foreground="#008000">× 看一下device_is_registered
</rich_text><rich_text foreground="#008080">185</rich_text><rich_text> </rich_text><rich_text foreground="#008000">************************************/</rich_text><rich_text>
</rich_text><rich_text foreground="#008080">186</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">static</rich_text><rich_text> inline </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> device_is_registered(</rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device *dev)
</rich_text><rich_text foreground="#008080">187</rich_text><rich_text> {
</rich_text><rich_text foreground="#008080">188</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text> dev-&gt;kobj.state_in_sysfs;                           </rich_text><rich_text foreground="#008000">//在sysfs中表示已经注册
</rich_text><rich_text foreground="#008080">189</rich_text><rich_text> }
</rich_text><rich_text foreground="#008080">190</rich_text><rich_text> </rich_text><rich_text foreground="#008000">/************************************
</rich_text><rich_text foreground="#008080">191</rich_text><rich_text> </rich_text><rich_text foreground="#008000">× 再看really_probe
</rich_text><rich_text foreground="#008080">192</rich_text><rich_text> </rich_text><rich_text foreground="#008000">************************************/</rich_text><rich_text>
</rich_text><rich_text foreground="#008080">193</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">static</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> really_probe(</rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device *dev, </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device_driver *drv)
</rich_text><rich_text foreground="#008080">194</rich_text><rich_text> {
</rich_text><rich_text foreground="#008080">195</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> ret = </rich_text><rich_text foreground="#800080">0</rich_text><rich_text>;
</rich_text><rich_text foreground="#008080">196</rich_text><rich_text>     atomic_inc(&amp;probe_count);
</rich_text><rich_text foreground="#008080">197</rich_text><rich_text>     pr_debug(</rich_text><rich_text foreground="#800000">&quot;bus: '%s': %s: probing driver %s with device %s/n&quot;</rich_text><rich_text>,
</rich_text><rich_text foreground="#008080">198</rich_text><rich_text>          drv-&gt;bus-&gt;name, __func__, drv-&gt;name, dev_name(dev));
</rich_text><rich_text foreground="#008080">199</rich_text><rich_text>     WARN_ON(!list_empty(&amp;dev-&gt;devres_head));
</rich_text><rich_text foreground="#008080">200</rich_text><rich_text>     dev-&gt;driver = drv;                                     </rich_text><rich_text foreground="#008000">//device的driver初始化成该driver
</rich_text><rich_text foreground="#008080">201</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (driver_sysfs_add(dev)) {                      
</rich_text><rich_text foreground="#008080">202</rich_text><rich_text>                  printk(KERN_ERR </rich_text><rich_text foreground="#800000">&quot;%s: driver_sysfs_add(%s) failed/n&quot;</rich_text><rich_text>,
</rich_text><rich_text foreground="#008080">203</rich_text><rich_text>             __func__, dev_name(dev));
</rich_text><rich_text foreground="#008080">204</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">goto</rich_text><rich_text> probe_failed;
</rich_text><rich_text foreground="#008080">205</rich_text><rich_text>     }
</rich_text><rich_text foreground="#008080">206</rich_text><rich_text>                                                          </rich_text><rich_text foreground="#008000">//利用probe初始化设备
</rich_text><rich_text foreground="#008080">207</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (dev-&gt;bus-&gt;probe) {                               </rich_text><rich_text foreground="#008000">//如果bus的probe存在就用bus的，
</rich_text><rich_text foreground="#008080">208</rich_text><rich_text>         ret = dev-&gt;bus-&gt;probe(dev);                      </rich_text><rich_text foreground="#008000">//如果bus的不存在driver的存在
</rich_text><rich_text foreground="#008080">209</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (ret)                                         </rich_text><rich_text foreground="#008000">//再用driver的
</rich_text><rich_text foreground="#008080">210</rich_text><rich_text>             </rich_text><rich_text foreground="#0000ff">goto</rich_text><rich_text> probe_failed;
</rich_text><rich_text foreground="#008080">211</rich_text><rich_text>     } </rich_text><rich_text foreground="#0000ff">else</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (drv-&gt;probe) {
</rich_text><rich_text foreground="#008080">212</rich_text><rich_text>         ret = drv-&gt;probe(dev);
</rich_text><rich_text foreground="#008080">213</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (ret)
</rich_text><rich_text foreground="#008080">214</rich_text><rich_text>             </rich_text><rich_text foreground="#0000ff">goto</rich_text><rich_text> probe_failed;
</rich_text><rich_text foreground="#008080">215</rich_text><rich_text>     }
</rich_text><rich_text foreground="#008080">216</rich_text><rich_text>     driver_bound(dev);                              </rich_text><rich_text foreground="#008000">//调用driver_bound进行绑定
</rich_text><rich_text foreground="#008080">217</rich_text><rich_text>     ret = </rich_text><rich_text foreground="#800080">1</rich_text><rich_text>;
</rich_text><rich_text foreground="#008080">218</rich_text><rich_text>     pr_debug(</rich_text><rich_text foreground="#800000">&quot;bus: '%s': %s: bound device %s to driver %s/n&quot;</rich_text><rich_text>,
</rich_text><rich_text foreground="#008080">219</rich_text><rich_text>          drv-&gt;bus-&gt;name, __func__, dev_name(dev), drv-&gt;name);
</rich_text><rich_text foreground="#008080">220</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">goto</rich_text><rich_text> done;
</rich_text><rich_text foreground="#008080">221</rich_text><rich_text> probe_failed:
</rich_text><rich_text foreground="#008080">222</rich_text><rich_text>     devres_release_all(dev);
</rich_text><rich_text foreground="#008080">223</rich_text><rich_text>     driver_sysfs_remove(dev);
</rich_text><rich_text foreground="#008080">224</rich_text><rich_text>     dev-&gt;driver = NULL;
</rich_text><rich_text foreground="#008080">225</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (ret != -ENODEV &amp;&amp; ret != -ENXIO) {
</rich_text><rich_text foreground="#008080">226</rich_text><rich_text>         </rich_text><rich_text foreground="#008000">/* driver matched but the probe failed */</rich_text><rich_text>
</rich_text><rich_text foreground="#008080">227</rich_text><rich_text>         printk(KERN_WARNING
</rich_text><rich_text foreground="#008080">228</rich_text><rich_text>                </rich_text><rich_text foreground="#800000">&quot;%s: probe of %s failed with error %d/n&quot;</rich_text><rich_text>,
</rich_text><rich_text foreground="#008080">229</rich_text><rich_text>                drv-&gt;name, dev_name(dev), ret);
</rich_text><rich_text foreground="#008080">230</rich_text><rich_text>     }
</rich_text><rich_text foreground="#008080">231</rich_text><rich_text>     </rich_text><rich_text foreground="#008000">/*
</rich_text><rich_text foreground="#008080">232</rich_text><rich_text> </rich_text><rich_text foreground="#008000">     * Ignore errors returned by -&gt;probe so that the next driver can try
</rich_text><rich_text foreground="#008080">233</rich_text><rich_text> </rich_text><rich_text foreground="#008000">     * its luck.
</rich_text><rich_text foreground="#008080">234</rich_text><rich_text> </rich_text><rich_text foreground="#008000">*/</rich_text><rich_text>
</rich_text><rich_text foreground="#008080">235</rich_text><rich_text>     ret = </rich_text><rich_text foreground="#800080">0</rich_text><rich_text>;
</rich_text><rich_text foreground="#008080">236</rich_text><rich_text> done:
</rich_text><rich_text foreground="#008080">237</rich_text><rich_text>     atomic_dec(&amp;probe_count);
</rich_text><rich_text foreground="#008080">238</rich_text><rich_text>     wake_up(&amp;probe_waitqueue);
</rich_text><rich_text foreground="#008080">239</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text> ret;
</rich_text><rich_text foreground="#008080">240</rich_text><rich_text> }
</rich_text><rich_text foreground="#008080">241</rich_text><rich_text> </rich_text><rich_text foreground="#008000">/**********************************
</rich_text><rich_text foreground="#008080">242</rich_text><rich_text> </rich_text><rich_text foreground="#008000">* 最后跟一下driver_bound(dev)这个函数
</rich_text><rich_text foreground="#008080">243</rich_text><rich_text> </rich_text><rich_text foreground="#008000">**********************************/</rich_text><rich_text>
</rich_text><rich_text foreground="#008080">244</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">static</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">void</rich_text><rich_text> driver_bound(</rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device *dev)
</rich_text><rich_text foreground="#008080">245</rich_text><rich_text> {
</rich_text><rich_text foreground="#008080">246</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (klist_node_attached(&amp;dev-&gt;p-&gt;knode_driver)) {                   </rich_text><rich_text foreground="#008000">//判断是否已经绑定
</rich_text><rich_text foreground="#008080">247</rich_text><rich_text>         printk(KERN_WARNING </rich_text><rich_text foreground="#800000">&quot;%s: device %s already bound/n&quot;</rich_text><rich_text>,
</rich_text><rich_text foreground="#008080">248</rich_text><rich_text>             __func__, kobject_name(&amp;dev-&gt;kobj));
</rich_text><rich_text foreground="#008080">249</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text>;
</rich_text><rich_text foreground="#008080">250</rich_text><rich_text>     }
</rich_text><rich_text foreground="#008080">251</rich_text><rich_text>     pr_debug(</rich_text><rich_text foreground="#800000">&quot;driver: '%s': %s: bound to device '%s'/n&quot;</rich_text><rich_text>, dev_name(dev),
</rich_text><rich_text foreground="#008080">252</rich_text><rich_text>          __func__, dev-&gt;driver-&gt;name);
</rich_text><rich_text foreground="#008080">253</rich_text><rich_text>     klist_add_tail(&amp;dev-&gt;p-&gt;knode_driver, &amp;dev-&gt;driver-&gt;p-&gt;klist_devices);  </rich_text><rich_text foreground="#008000">//将设备添加
</rich_text><rich_text foreground="#008080">254</rich_text><rich_text> </rich_text><rich_text foreground="#008000">//到driver的链表
</rich_text><rich_text foreground="#008080">255</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (dev-&gt;bus)
</rich_text><rich_text foreground="#008080">256</rich_text><rich_text>         blocking_notifier_call_chain(&amp;dev-&gt;bus-&gt;p-&gt;bus_notifier,
</rich_text><rich_text foreground="#008080">257</rich_text><rich_text>                          BUS_NOTIFY_BOUND_DRIVER, dev);
</rich_text><rich_text foreground="#008080">258</rich_text><rich_text> }
</rich_text><rich_text foreground="#008080">259</rich_text><rich_text> </rich_text><rich_text foreground="#008000">//all end</rich_text><rich_text>
   总结一下，driver的注册，主要涉及将自身挂接到bus的driver链表，并将匹配到的设备加入自己的device链表，并且将匹配到的 device的driver成员初始化为该driver，私有属性的driver节点也挂到driver的设备链表下，其中匹配函数是利用利用bus的 match函数，该函数通常判断如果driver有id表，就查表匹配，如果没有就用driver和device名字匹配。当匹配成功后如果自动初始化标 志允许则调用初始化函数probe，bus的probe优先级始终高于driver的。另外注意一点driver是没有总的起始端点的，driver不是 可具体描述的事物。
</rich_text></node><node name="bus，device，driver分析(二)" prog_lang="custom-colors" readonly="False" tags="" unique_id="11"><rich_text>上篇分析了bus，driver的注册过程，这篇主要分析device的注册，并总结给出个流程图。
三、device的注册
   还是照例先看一下device的结构：
 </rich_text><rich_text foreground="#008080">1</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device {
</rich_text><rich_text foreground="#008080"> 2</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device        *parent;
</rich_text><rich_text foreground="#008080"> 3</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device_private    *p;                                              </rich_text><rich_text foreground="#008000">//私有属性结构，重点
</rich_text><rich_text foreground="#008080"> 4</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> kobject kobj;
</rich_text><rich_text foreground="#008080"> 5</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">const</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">char</rich_text><rich_text>        *init_name; </rich_text><rich_text foreground="#008000">/* initial name of the device */</rich_text><rich_text>
</rich_text><rich_text foreground="#008080"> 6</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device_type    *type;
</rich_text><rich_text foreground="#008080"> 7</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> mutex        mutex;    </rich_text><rich_text foreground="#008000">/* mutex to synchronize calls to
</rich_text><rich_text foreground="#008080"> 8</rich_text><rich_text> </rich_text><rich_text foreground="#008000">                     * its driver.
</rich_text><rich_text foreground="#008080"> 9</rich_text><rich_text> </rich_text><rich_text foreground="#008000">*/</rich_text><rich_text>
</rich_text><rich_text foreground="#008080">10</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> bus_type    *bus;        </rich_text><rich_text foreground="#008000">/* type of bus device is on */</rich_text><rich_text>            </rich_text><rich_text foreground="#008000">//所在bus
</rich_text><rich_text foreground="#008080">11</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device_driver *driver;    </rich_text><rich_text foreground="#008000">/* which driver has allocated this    //匹配的driver
</rich_text><rich_text foreground="#008080">12</rich_text><rich_text> </rich_text><rich_text foreground="#008000">                       device */</rich_text><rich_text>
</rich_text><rich_text foreground="#008080">13</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">void</rich_text><rich_text>        *platform_data;    </rich_text><rich_text foreground="#008000">/* Platform specific data, device
</rich_text><rich_text foreground="#008080">14</rich_text><rich_text> </rich_text><rich_text foreground="#008000">                       core doesn't touch it */</rich_text><rich_text>
</rich_text><rich_text foreground="#008080">15</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> dev_pm_info    power;
</rich_text><rich_text foreground="#008080">16</rich_text><rich_text> #ifdef CONFIG_NUMA
</rich_text><rich_text foreground="#008080">17</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text>        numa_node;    </rich_text><rich_text foreground="#008000">/* NUMA node this device is close to */</rich_text><rich_text>
</rich_text><rich_text foreground="#008080">18</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">#endif</rich_text><rich_text>
</rich_text><rich_text foreground="#008080">19</rich_text><rich_text>     u64        *dma_mask;    </rich_text><rich_text foreground="#008000">/* dma mask (if dma'able device) */</rich_text><rich_text>
</rich_text><rich_text foreground="#008080">20</rich_text><rich_text>     u64        coherent_dma_mask;</rich_text><rich_text foreground="#008000">/* Like dma_mask, but for
</rich_text><rich_text foreground="#008080">21</rich_text><rich_text> </rich_text><rich_text foreground="#008000">                         alloc_coherent mappings as
</rich_text><rich_text foreground="#008080">22</rich_text><rich_text> </rich_text><rich_text foreground="#008000">                         not all hardware supports
</rich_text><rich_text foreground="#008080">23</rich_text><rich_text> </rich_text><rich_text foreground="#008000">                         64 bit addresses for consistent
</rich_text><rich_text foreground="#008080">24</rich_text><rich_text> </rich_text><rich_text foreground="#008000">                         allocations such descriptors. */</rich_text><rich_text>
</rich_text><rich_text foreground="#008080">25</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device_dma_parameters *dma_parms;
</rich_text><rich_text foreground="#008080">26</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> list_head    dma_pools;    </rich_text><rich_text foreground="#008000">/* dma pools (if dma'ble) */</rich_text><rich_text>
</rich_text><rich_text foreground="#008080">27</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> dma_coherent_mem    *dma_mem; </rich_text><rich_text foreground="#008000">/* internal for coherent mem
</rich_text><rich_text foreground="#008080">28</rich_text><rich_text> </rich_text><rich_text foreground="#008000">                         override */</rich_text><rich_text>
</rich_text><rich_text foreground="#008080">29</rich_text><rich_text>     </rich_text><rich_text foreground="#008000">/* arch specific additions */</rich_text><rich_text>
</rich_text><rich_text foreground="#008080">30</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> dev_archdata    archdata;
</rich_text><rich_text foreground="#008080">31</rich_text><rich_text> #ifdef CONFIG_OF
</rich_text><rich_text foreground="#008080">32</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device_node    *of_node;
</rich_text><rich_text foreground="#008080">33</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">#endif</rich_text><rich_text>
</rich_text><rich_text foreground="#008080">34</rich_text><rich_text>     dev_t            devt;    </rich_text><rich_text foreground="#008000">/* dev_t, creates the sysfs &quot;dev&quot; */</rich_text><rich_text>
</rich_text><rich_text foreground="#008080">35</rich_text><rich_text>     spinlock_t        devres_lock;
</rich_text><rich_text foreground="#008080">36</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> list_head    devres_head;
</rich_text><rich_text foreground="#008080">37</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> klist_node    knode_class;
</rich_text><rich_text foreground="#008080">38</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">class</rich_text><rich_text>        *</rich_text><rich_text foreground="#0000ff">class</rich_text><rich_text>;
</rich_text><rich_text foreground="#008080">39</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">const</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> attribute_group **groups;    </rich_text><rich_text foreground="#008000">/* optional groups */</rich_text><rich_text>
</rich_text><rich_text foreground="#008080">40</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">void</rich_text><rich_text>    (*release)(</rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device *dev);
</rich_text><rich_text foreground="#008080">41</rich_text><rich_text> };
</rich_text><rich_text foreground="#008080">42</rich_text><rich_text> </rich_text><rich_text foreground="#008000">//重点看一下私有属性结构
</rich_text><rich_text foreground="#008080">43</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device_private {
</rich_text><rich_text foreground="#008080">44</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> klist klist_children;             </rich_text><rich_text foreground="#008000">//子集结构
</rich_text><rich_text foreground="#008080">45</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> klist_node knode_parent;          </rich_text><rich_text foreground="#008000">//父级挂接点
</rich_text><rich_text foreground="#008080">46</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> klist_node knode_driver;          </rich_text><rich_text foreground="#008000">//driver挂接点
</rich_text><rich_text foreground="#008080">47</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> klist_node knode_bus;             </rich_text><rich_text foreground="#008000">//bus挂接点
</rich_text><rich_text foreground="#008080">48</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">void</rich_text><rich_text> *driver_data;
</rich_text><rich_text foreground="#008080">49</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device *device;                   </rich_text><rich_text foreground="#008000">//回指
</rich_text><rich_text foreground="#008080">50</rich_text><rich_text> };

接下来详细看一下device的注册device_register:
  </rich_text><rich_text foreground="#008080">1</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> device_register(</rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device *dev)
</rich_text><rich_text foreground="#008080">  2</rich_text><rich_text> {
</rich_text><rich_text foreground="#008080">  3</rich_text><rich_text>     device_initialize(dev);                </rich_text><rich_text foreground="#008000">//初始化dev
</rich_text><rich_text foreground="#008080">  4</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text> device_add(dev);                </rich_text><rich_text foreground="#008000">//添加dev
</rich_text><rich_text foreground="#008080">  5</rich_text><rich_text> }
</rich_text><rich_text foreground="#008080">  6</rich_text><rich_text> </rich_text><rich_text foreground="#008000">/******************************
</rich_text><rich_text foreground="#008080">  7</rich_text><rich_text> </rich_text><rich_text foreground="#008000">* 先看一下device_initialize(dev)
</rich_text><rich_text foreground="#008080">  8</rich_text><rich_text> </rich_text><rich_text foreground="#008000">******************************/</rich_text><rich_text>
</rich_text><rich_text foreground="#008080">  9</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">void</rich_text><rich_text> device_initialize(</rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device *dev)
</rich_text><rich_text foreground="#008080"> 10</rich_text><rich_text> {
</rich_text><rich_text foreground="#008080"> 11</rich_text><rich_text>     dev-&gt;kobj.kset = devices_kset;                  </rich_text><rich_text foreground="#008000">//可见device和bus都有其起始的kset，而driver没有
</rich_text><rich_text foreground="#008080"> 12</rich_text><rich_text>     kobject_init(&amp;dev-&gt;kobj, &amp;device_ktype);        </rich_text><rich_text foreground="#008000">//初始化这个kobj并建立层次关系以及属性文件，此时
</rich_text><rich_text foreground="#008080"> 13</rich_text><rich_text>     INIT_LIST_HEAD(&amp;dev-&gt;dma_pools);                </rich_text><rich_text foreground="#008000">//是放到了总的device文件目录下面
</rich_text><rich_text foreground="#008080"> 14</rich_text><rich_text>     mutex_init(&amp;dev-&gt;mutex);
</rich_text><rich_text foreground="#008080"> 15</rich_text><rich_text>     lockdep_set_novalidate_class(&amp;dev-&gt;mutex);
</rich_text><rich_text foreground="#008080"> 16</rich_text><rich_text>     spin_lock_init(&amp;dev-&gt;devres_lock);
</rich_text><rich_text foreground="#008080"> 17</rich_text><rich_text>     INIT_LIST_HEAD(&amp;dev-&gt;devres_head);
</rich_text><rich_text foreground="#008080"> 18</rich_text><rich_text>     device_pm_init(dev);
</rich_text><rich_text foreground="#008080"> 19</rich_text><rich_text>     set_dev_node(dev, -</rich_text><rich_text foreground="#800080">1</rich_text><rich_text>);
</rich_text><rich_text foreground="#008080"> 20</rich_text><rich_text> }
</rich_text><rich_text foreground="#008080"> 21</rich_text><rich_text> </rich_text><rich_text foreground="#008000">/******************************
</rich_text><rich_text foreground="#008080"> 22</rich_text><rich_text> </rich_text><rich_text foreground="#008000">* 再来看一下device_add(dev)
</rich_text><rich_text foreground="#008080"> 23</rich_text><rich_text> </rich_text><rich_text foreground="#008000">******************************/</rich_text><rich_text>
</rich_text><rich_text foreground="#008080"> 24</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> device_add(</rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device *dev)
</rich_text><rich_text foreground="#008080"> 25</rich_text><rich_text> {
</rich_text><rich_text foreground="#008080"> 26</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device *parent = NULL;
</rich_text><rich_text foreground="#008080"> 27</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> class_interface *class_intf;
</rich_text><rich_text foreground="#008080"> 28</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> error = -EINVAL;
</rich_text><rich_text foreground="#008080"> 29</rich_text><rich_text>     dev = get_device(dev);
</rich_text><rich_text foreground="#008080"> 30</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (!dev)
</rich_text><rich_text foreground="#008080"> 31</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">goto</rich_text><rich_text> done;
</rich_text><rich_text foreground="#008080"> 32</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (!dev-&gt;p) {
</rich_text><rich_text foreground="#008080"> 33</rich_text><rich_text>         error = device_private_init(dev);                        </rich_text><rich_text foreground="#008000">//初始化dev的私有成员，及其链表操作函数
</rich_text><rich_text foreground="#008080"> 34</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (error)
</rich_text><rich_text foreground="#008080"> 35</rich_text><rich_text>             </rich_text><rich_text foreground="#0000ff">goto</rich_text><rich_text> done;
</rich_text><rich_text foreground="#008080"> 36</rich_text><rich_text>     }
</rich_text><rich_text foreground="#008080"> 37</rich_text><rich_text>     </rich_text><rich_text foreground="#008000">/*
</rich_text><rich_text foreground="#008080"> 38</rich_text><rich_text> </rich_text><rich_text foreground="#008000">     * for statically allocated devices, which should all be converted
</rich_text><rich_text foreground="#008080"> 39</rich_text><rich_text> </rich_text><rich_text foreground="#008000">     * some day, we need to initialize the name. We prevent reading back
</rich_text><rich_text foreground="#008080"> 40</rich_text><rich_text> </rich_text><rich_text foreground="#008000">     * the name, and force the use of dev_name()
</rich_text><rich_text foreground="#008080"> 41</rich_text><rich_text> </rich_text><rich_text foreground="#008000">*/</rich_text><rich_text>
</rich_text><rich_text foreground="#008080"> 42</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (dev-&gt;init_name) {
</rich_text><rich_text foreground="#008080"> 43</rich_text><rich_text>         dev_set_name(dev, </rich_text><rich_text foreground="#800000">&quot;%s&quot;</rich_text><rich_text>, dev-&gt;init_name);                 </rich_text><rich_text foreground="#008000">//设置名字，给kobj
</rich_text><rich_text foreground="#008080"> 44</rich_text><rich_text>         dev-&gt;init_name = NULL;
</rich_text><rich_text foreground="#008080"> 45</rich_text><rich_text>     }
</rich_text><rich_text foreground="#008080"> 46</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (!dev_name(dev)) {                                         </rich_text><rich_text foreground="#008000">//名字为空出错退出
</rich_text><rich_text foreground="#008080"> 47</rich_text><rich_text>         error = -EINVAL;
</rich_text><rich_text foreground="#008080"> 48</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">goto</rich_text><rich_text> name_error;
</rich_text><rich_text foreground="#008080"> 49</rich_text><rich_text>     }
</rich_text><rich_text foreground="#008080"> 50</rich_text><rich_text>     pr_debug(</rich_text><rich_text foreground="#800000">&quot;device: '%s': %s/n&quot;</rich_text><rich_text>, dev_name(dev), __func__);
</rich_text><rich_text foreground="#008080"> 51</rich_text><rich_text>     parent = get_device(dev-&gt;parent);                          </rich_text><rich_text foreground="#008000">//返回父节点，如果有返回，没有返回NULL
</rich_text><rich_text foreground="#008080"> 52</rich_text><rich_text>     setup_parent(dev, parent);                   
</rich_text><rich_text foreground="#008080"> 53</rich_text><rich_text>     </rich_text><rich_text foreground="#008000">/* use parent numa_node */</rich_text><rich_text>
</rich_text><rich_text foreground="#008080"> 54</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (parent)
</rich_text><rich_text foreground="#008080"> 55</rich_text><rich_text>         set_dev_node(dev, dev_to_node(parent));
</rich_text><rich_text foreground="#008080"> 56</rich_text><rich_text>     </rich_text><rich_text foreground="#008000">/* first, register with generic layer. */</rich_text><rich_text>
</rich_text><rich_text foreground="#008080"> 57</rich_text><rich_text>     </rich_text><rich_text foreground="#008000">/* we require the name to be set before, and pass NULL */</rich_text><rich_text>
</rich_text><rich_text foreground="#008080"> 58</rich_text><rich_text>     error = kobject_add(&amp;dev-&gt;kobj, dev-&gt;kobj.parent, NULL);   </rich_text><rich_text foreground="#008000">//初始化kobj与其父节点的连接
</rich_text><rich_text foreground="#008080"> 59</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (error)
</rich_text><rich_text foreground="#008080"> 60</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">goto</rich_text><rich_text> Error;
</rich_text><rich_text foreground="#008080"> 61</rich_text><rich_text>     </rich_text><rich_text foreground="#008000">/* notify platform of device entry */</rich_text><rich_text>
</rich_text><rich_text foreground="#008080"> 62</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (platform_notify)
</rich_text><rich_text foreground="#008080"> 63</rich_text><rich_text>         platform_notify(dev);
</rich_text><rich_text foreground="#008080"> 64</rich_text><rich_text>     error = device_create_file(dev, &amp;uevent_attr);             </rich_text><rich_text foreground="#008000">//产生属性文件
</rich_text><rich_text foreground="#008080"> 65</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (error)
</rich_text><rich_text foreground="#008080"> 66</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">goto</rich_text><rich_text> attrError;
</rich_text><rich_text foreground="#008080"> 67</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (MAJOR(dev-&gt;devt)) {
</rich_text><rich_text foreground="#008080"> 68</rich_text><rich_text>         error = device_create_file(dev, &amp;devt_attr);             </rich_text><rich_text foreground="#008000">//在sys下产生dev属性文件
</rich_text><rich_text foreground="#008080"> 69</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (error)
</rich_text><rich_text foreground="#008080"> 70</rich_text><rich_text>             </rich_text><rich_text foreground="#0000ff">goto</rich_text><rich_text> ueventattrError;
</rich_text><rich_text foreground="#008080"> 71</rich_text><rich_text>         error = device_create_sys_dev_entry(dev);
</rich_text><rich_text foreground="#008080"> 72</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (error)
</rich_text><rich_text foreground="#008080"> 73</rich_text><rich_text>             </rich_text><rich_text foreground="#0000ff">goto</rich_text><rich_text> devtattrError;
</rich_text><rich_text foreground="#008080"> 74</rich_text><rich_text>         devtmpfs_create_node(dev);                               
</rich_text><rich_text foreground="#008080"> 75</rich_text><rich_text>     }
</rich_text><rich_text foreground="#008080"> 76</rich_text><rich_text>     error = device_add_class_symlinks(dev);                    
</rich_text><rich_text foreground="#008080"> 77</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (error)
</rich_text><rich_text foreground="#008080"> 78</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">goto</rich_text><rich_text> SymlinkError;
</rich_text><rich_text foreground="#008080"> 79</rich_text><rich_text>     error = device_add_attrs(dev);                             </rich_text><rich_text foreground="#008000">//增加属性文件
</rich_text><rich_text foreground="#008080"> 80</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (error)
</rich_text><rich_text foreground="#008080"> 81</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">goto</rich_text><rich_text> AttrsError;
</rich_text><rich_text foreground="#008080"> 82</rich_text><rich_text>     error = bus_add_device(dev);                               </rich_text><rich_text foreground="#008000">//把device的bus节点挂到bus的设备节点上
</rich_text><rich_text foreground="#008080"> 83</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (error)
</rich_text><rich_text foreground="#008080"> 84</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">goto</rich_text><rich_text> BusError;
</rich_text><rich_text foreground="#008080"> 85</rich_text><rich_text>     error = dpm_sysfs_add(dev);
</rich_text><rich_text foreground="#008080"> 86</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (error)
</rich_text><rich_text foreground="#008080"> 87</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">goto</rich_text><rich_text> DPMError;
</rich_text><rich_text foreground="#008080"> 88</rich_text><rich_text>     device_pm_add(dev);
</rich_text><rich_text foreground="#008080"> 89</rich_text><rich_text>     </rich_text><rich_text foreground="#008000">/* Notify clients of device addition.  This call must come
</rich_text><rich_text foreground="#008080"> 90</rich_text><rich_text> </rich_text><rich_text foreground="#008000">     * after dpm_sysf_add() and before kobject_uevent().
</rich_text><rich_text foreground="#008080"> 91</rich_text><rich_text> </rich_text><rich_text foreground="#008000">*/</rich_text><rich_text>
</rich_text><rich_text foreground="#008080"> 92</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (dev-&gt;bus)
</rich_text><rich_text foreground="#008080"> 93</rich_text><rich_text>         blocking_notifier_call_chain(&amp;dev-&gt;bus-&gt;p-&gt;bus_notifier,
</rich_text><rich_text foreground="#008080"> 94</rich_text><rich_text>                          BUS_NOTIFY_ADD_DEVICE, dev);
</rich_text><rich_text foreground="#008080"> 95</rich_text><rich_text>     kobject_uevent(&amp;dev-&gt;kobj, KOBJ_ADD);
</rich_text><rich_text foreground="#008080"> 96</rich_text><rich_text>     bus_probe_device(dev);                                    </rich_text><rich_text foreground="#008000">//匹配driver
</rich_text><rich_text foreground="#008080"> 97</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (parent)
</rich_text><rich_text foreground="#008080"> 98</rich_text><rich_text>         klist_add_tail(&amp;dev-&gt;p-&gt;knode_parent,                 </rich_text><rich_text foreground="#008000">//把该设备的节点挂到其父节点的链表
</rich_text><rich_text foreground="#008080"> 99</rich_text><rich_text>                    &amp;parent-&gt;p-&gt;klist_children);
</rich_text><rich_text foreground="#008080">100</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (dev-&gt;</rich_text><rich_text foreground="#0000ff">class</rich_text><rich_text>) {
</rich_text><rich_text foreground="#008080">101</rich_text><rich_text>         mutex_lock(&amp;dev-&gt;</rich_text><rich_text foreground="#0000ff">class</rich_text><rich_text>-&gt;p-&gt;class_mutex);
</rich_text><rich_text foreground="#008080">102</rich_text><rich_text>         </rich_text><rich_text foreground="#008000">/* tie the class to the device */</rich_text><rich_text>
</rich_text><rich_text foreground="#008080">103</rich_text><rich_text>         klist_add_tail(&amp;dev-&gt;knode_class,
</rich_text><rich_text foreground="#008080">104</rich_text><rich_text>                    &amp;dev-&gt;</rich_text><rich_text foreground="#0000ff">class</rich_text><rich_text>-&gt;p-&gt;class_devices);
</rich_text><rich_text foreground="#008080">105</rich_text><rich_text>         </rich_text><rich_text foreground="#008000">/* notify any interfaces that the device is here */</rich_text><rich_text>
</rich_text><rich_text foreground="#008080">106</rich_text><rich_text>         list_for_each_entry(class_intf,
</rich_text><rich_text foreground="#008080">107</rich_text><rich_text>                     &amp;dev-&gt;</rich_text><rich_text foreground="#0000ff">class</rich_text><rich_text>-&gt;p-&gt;class_interfaces, node)
</rich_text><rich_text foreground="#008080">108</rich_text><rich_text>             </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (class_intf-&gt;add_dev)
</rich_text><rich_text foreground="#008080">109</rich_text><rich_text>                 class_intf-&gt;add_dev(dev, class_intf);
</rich_text><rich_text foreground="#008080">110</rich_text><rich_text>         mutex_unlock(&amp;dev-&gt;</rich_text><rich_text foreground="#0000ff">class</rich_text><rich_text>-&gt;p-&gt;class_mutex);
</rich_text><rich_text foreground="#008080">111</rich_text><rich_text>     }
</rich_text><rich_text foreground="#008080">112</rich_text><rich_text> done:
</rich_text><rich_text foreground="#008080">113</rich_text><rich_text>     put_device(dev);
</rich_text><rich_text foreground="#008080">114</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text> error;
</rich_text><rich_text foreground="#008080">115</rich_text><rich_text>  DPMError:
</rich_text><rich_text foreground="#008080">116</rich_text><rich_text>     bus_remove_device(dev);
</rich_text><rich_text foreground="#008080">117</rich_text><rich_text>  BusError:
</rich_text><rich_text foreground="#008080">118</rich_text><rich_text>     device_remove_attrs(dev);
</rich_text><rich_text foreground="#008080">119</rich_text><rich_text>  AttrsError:
</rich_text><rich_text foreground="#008080">120</rich_text><rich_text>     device_remove_class_symlinks(dev);
</rich_text><rich_text foreground="#008080">121</rich_text><rich_text>  SymlinkError:
</rich_text><rich_text foreground="#008080">122</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (MAJOR(dev-&gt;devt))
</rich_text><rich_text foreground="#008080">123</rich_text><rich_text>         devtmpfs_delete_node(dev);
</rich_text><rich_text foreground="#008080">124</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (MAJOR(dev-&gt;devt))
</rich_text><rich_text foreground="#008080">125</rich_text><rich_text>         device_remove_sys_dev_entry(dev);
</rich_text><rich_text foreground="#008080">126</rich_text><rich_text>  devtattrError:
</rich_text><rich_text foreground="#008080">127</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (MAJOR(dev-&gt;devt))
</rich_text><rich_text foreground="#008080">128</rich_text><rich_text>         device_remove_file(dev, &amp;devt_attr);
</rich_text><rich_text foreground="#008080">129</rich_text><rich_text>  ueventattrError:
</rich_text><rich_text foreground="#008080">130</rich_text><rich_text>     device_remove_file(dev, &amp;uevent_attr);
</rich_text><rich_text foreground="#008080">131</rich_text><rich_text>  attrError:
</rich_text><rich_text foreground="#008080">132</rich_text><rich_text>     kobject_uevent(&amp;dev-&gt;kobj, KOBJ_REMOVE);
</rich_text><rich_text foreground="#008080">133</rich_text><rich_text>     kobject_del(&amp;dev-&gt;kobj);
</rich_text><rich_text foreground="#008080">134</rich_text><rich_text>  Error:
</rich_text><rich_text foreground="#008080">135</rich_text><rich_text>     cleanup_device_parent(dev);
</rich_text><rich_text foreground="#008080">136</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (parent)
</rich_text><rich_text foreground="#008080">137</rich_text><rich_text>         put_device(parent);
</rich_text><rich_text foreground="#008080">138</rich_text><rich_text> name_error:
</rich_text><rich_text foreground="#008080">139</rich_text><rich_text>     kfree(dev-&gt;p);
</rich_text><rich_text foreground="#008080">140</rich_text><rich_text>     dev-&gt;p = NULL;
</rich_text><rich_text foreground="#008080">141</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">goto</rich_text><rich_text> done;
</rich_text><rich_text foreground="#008080">142</rich_text><rich_text> }
</rich_text><rich_text foreground="#008080">143</rich_text><rich_text> </rich_text><rich_text foreground="#008000">/***********************************************
</rich_text><rich_text foreground="#008080">144</rich_text><rich_text> </rich_text><rich_text foreground="#008000">* 重点看一下bus_probe_device匹配driver以及初始化过程
</rich_text><rich_text foreground="#008080">145</rich_text><rich_text> </rich_text><rich_text foreground="#008000">***********************************************/</rich_text><rich_text>
</rich_text><rich_text foreground="#008080">146</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">void</rich_text><rich_text> bus_probe_device(</rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device *dev)
</rich_text><rich_text foreground="#008080">147</rich_text><rich_text> {
</rich_text><rich_text foreground="#008080">148</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> bus_type *bus = dev-&gt;bus;
</rich_text><rich_text foreground="#008080">149</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> ret;
</rich_text><rich_text foreground="#008080">150</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (bus &amp;&amp; bus-&gt;p-&gt;drivers_autoprobe) {         </rich_text><rich_text foreground="#008000">//设置了自动匹配初始化那么就开始匹配
</rich_text><rich_text foreground="#008080">151</rich_text><rich_text>         ret = device_attach(dev);
</rich_text><rich_text foreground="#008080">152</rich_text><rich_text>         WARN_ON(ret &lt; </rich_text><rich_text foreground="#800080">0</rich_text><rich_text>);
</rich_text><rich_text foreground="#008080">153</rich_text><rich_text>     }
</rich_text><rich_text foreground="#008080">154</rich_text><rich_text> }
</rich_text><rich_text foreground="#008080">155</rich_text><rich_text> </rich_text><rich_text foreground="#008000">/******************
</rich_text><rich_text foreground="#008080">156</rich_text><rich_text> </rich_text><rich_text foreground="#008000">* 继续device_attach
</rich_text><rich_text foreground="#008080">157</rich_text><rich_text> </rich_text><rich_text foreground="#008000">******************/</rich_text><rich_text>
</rich_text><rich_text foreground="#008080">158</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> device_attach(</rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device *dev)
</rich_text><rich_text foreground="#008080">159</rich_text><rich_text> {
</rich_text><rich_text foreground="#008080">160</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> ret = </rich_text><rich_text foreground="#800080">0</rich_text><rich_text>;
</rich_text><rich_text foreground="#008080">161</rich_text><rich_text>     device_lock(dev);
</rich_text><rich_text foreground="#008080">162</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (dev-&gt;driver) {                            </rich_text><rich_text foreground="#008000">//默认指定了driver就直接绑定
</rich_text><rich_text foreground="#008080">163</rich_text><rich_text>         ret = device_bind_driver(dev);
</rich_text><rich_text foreground="#008080">164</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (ret == </rich_text><rich_text foreground="#800080">0</rich_text><rich_text>)
</rich_text><rich_text foreground="#008080">165</rich_text><rich_text>             ret = </rich_text><rich_text foreground="#800080">1</rich_text><rich_text>;
</rich_text><rich_text foreground="#008080">166</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">else</rich_text><rich_text> {
</rich_text><rich_text foreground="#008080">167</rich_text><rich_text>             dev-&gt;driver = NULL;
</rich_text><rich_text foreground="#008080">168</rich_text><rich_text>             ret = </rich_text><rich_text foreground="#800080">0</rich_text><rich_text>;
</rich_text><rich_text foreground="#008080">169</rich_text><rich_text>         }
</rich_text><rich_text foreground="#008080">170</rich_text><rich_text>     } </rich_text><rich_text foreground="#0000ff">else</rich_text><rich_text> {                                      </rich_text><rich_text foreground="#008000">//没有指定就进行遍历匹配
</rich_text><rich_text foreground="#008080">171</rich_text><rich_text>         pm_runtime_get_noresume(dev);
</rich_text><rich_text foreground="#008080">172</rich_text><rich_text>         ret = bus_for_each_drv(dev-&gt;bus, NULL, dev, __device_attach);
</rich_text><rich_text foreground="#008080">173</rich_text><rich_text>         pm_runtime_put_sync(dev);
</rich_text><rich_text foreground="#008080">174</rich_text><rich_text>     }
</rich_text><rich_text foreground="#008080">175</rich_text><rich_text>     device_unlock(dev);
</rich_text><rich_text foreground="#008080">176</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text> ret;
</rich_text><rich_text foreground="#008080">177</rich_text><rich_text> }
</rich_text><rich_text foreground="#008080">178</rich_text><rich_text> </rich_text><rich_text foreground="#008000">/**************************
</rich_text><rich_text foreground="#008080">179</rich_text><rich_text> </rich_text><rich_text foreground="#008000">* 再来看device_bind_driver分支
</rich_text><rich_text foreground="#008080">180</rich_text><rich_text> </rich_text><rich_text foreground="#008000">**************************/</rich_text><rich_text>
</rich_text><rich_text foreground="#008080">181</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> device_bind_driver(</rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device *dev)
</rich_text><rich_text foreground="#008080">182</rich_text><rich_text> {
</rich_text><rich_text foreground="#008080">183</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> ret;
</rich_text><rich_text foreground="#008080">184</rich_text><rich_text>     ret = driver_sysfs_add(dev);
</rich_text><rich_text foreground="#008080">185</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (!ret)
</rich_text><rich_text foreground="#008080">186</rich_text><rich_text>         driver_bound(dev);              </rich_text><rich_text foreground="#008000">//主要是完成了将私有成员的driver节点挂到
</rich_text><rich_text foreground="#008080">187</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text> ret;                         </rich_text><rich_text foreground="#008000">//了driver的设备链表
</rich_text><rich_text foreground="#008080">188</rich_text><rich_text> }
</rich_text><rich_text foreground="#008080">189</rich_text><rich_text> </rich_text><rich_text foreground="#008000">/**************************
</rich_text><rich_text foreground="#008080">190</rich_text><rich_text> </rich_text><rich_text foreground="#008000">* 先看bus_for_each_drv分支
</rich_text><rich_text foreground="#008080">191</rich_text><rich_text> </rich_text><rich_text foreground="#008000">**************************/</rich_text><rich_text>
</rich_text><rich_text foreground="#008080">192</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> bus_for_each_drv(</rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> bus_type *bus, </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device_driver *start,
</rich_text><rich_text foreground="#008080">193</rich_text><rich_text>              </rich_text><rich_text foreground="#0000ff">void</rich_text><rich_text> *data, </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> (*fn)(</rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device_driver *, </rich_text><rich_text foreground="#0000ff">void</rich_text><rich_text> *))
</rich_text><rich_text foreground="#008080">194</rich_text><rich_text> {
</rich_text><rich_text foreground="#008080">195</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> klist_iter i;
</rich_text><rich_text foreground="#008080">196</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device_driver *drv;
</rich_text><rich_text foreground="#008080">197</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> error = </rich_text><rich_text foreground="#800080">0</rich_text><rich_text>;
</rich_text><rich_text foreground="#008080">198</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (!bus)
</rich_text><rich_text foreground="#008080">199</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text> -EINVAL;
</rich_text><rich_text foreground="#008080">200</rich_text><rich_text>     klist_iter_init_node(&amp;bus-&gt;p-&gt;klist_drivers, &amp;i,           </rich_text><rich_text foreground="#008000">//和driver遍历device类似，从头开始遍历bus的driver链表
</rich_text><rich_text foreground="#008080">201</rich_text><rich_text>                  start ? &amp;start-&gt;p-&gt;knode_bus : NULL);         </rich_text><rich_text foreground="#008000">//发现一个driver就调用fn即__device_attach进行匹配
</rich_text><rich_text foreground="#008080">202</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">while</rich_text><rich_text> ((drv = next_driver(&amp;i)) &amp;&amp; !error)
</rich_text><rich_text foreground="#008080">203</rich_text><rich_text>         error = fn(drv, data);
</rich_text><rich_text foreground="#008080">204</rich_text><rich_text>     klist_iter_exit(&amp;i);
</rich_text><rich_text foreground="#008080">205</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text> error;
</rich_text><rich_text foreground="#008080">206</rich_text><rich_text> }
</rich_text><rich_text foreground="#008080">207</rich_text><rich_text> </rich_text><rich_text foreground="#008000">/*********************************
</rich_text><rich_text foreground="#008080">208</rich_text><rich_text> </rich_text><rich_text foreground="#008000">* 最后来看一下__device_attach这个函数
</rich_text><rich_text foreground="#008080">209</rich_text><rich_text> </rich_text><rich_text foreground="#008000">*********************************/</rich_text><rich_text>
</rich_text><rich_text foreground="#008080">210</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">static</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> __device_attach(</rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device_driver *drv, </rich_text><rich_text foreground="#0000ff">void</rich_text><rich_text> *data)
</rich_text><rich_text foreground="#008080">211</rich_text><rich_text> {
</rich_text><rich_text foreground="#008080">212</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device *dev = data;
</rich_text><rich_text foreground="#008080">213</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (!driver_match_device(drv, dev))    
</rich_text><rich_text foreground="#008080">214</rich_text><rich_text>         </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text> </rich_text><rich_text foreground="#800080">0</rich_text><rich_text>;
</rich_text><rich_text foreground="#008080">215</rich_text><rich_text>     </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text> driver_probe_device(drv, dev);
</rich_text><rich_text foreground="#008080">216</rich_text><rich_text> }
</rich_text><rich_text foreground="#008080">217</rich_text><rich_text> </rich_text><rich_text foreground="#008000">/*
</rich_text><rich_text foreground="#008080">218</rich_text><rich_text> </rich_text><rich_text foreground="#008000">  对比driver的注册最后调用的__driver_attach可以发现其实质是一样的，都最后归宿到了
</rich_text><rich_text foreground="#008080">219</rich_text><rich_text> </rich_text><rich_text foreground="#008000">  这driver_match_device，driver_probe_device两个函数,本质参数的和谐做到了通用
</rich_text><rich_text foreground="#008080">220</rich_text><rich_text> </rich_text><rich_text foreground="#008000">  性在这里就不继续分析了，不是很清楚的可以看前一篇文章driver最后一部分的分析  ^_^
</rich_text><rich_text foreground="#008080">221</rich_text><rich_text> </rich_text><rich_text foreground="#008000">*/</rich_text><rich_text>  </rich_text></node><node name="platform" prog_lang="custom-colors" readonly="False" tags="" unique_id="10"><rich_text>    platform可以说是内核抽象出来的一条虚拟总线平台，内核开发者原意是想把硬件层次上的结构关系用软件抽象模拟出来，但是对一些硬件，这样做 往往不太合适，例如对于片上soc，外围设备的控制器都集成在处理器上，如果过度的剥离抽象，使得原本物理上紧密的结构而在软件上变成的偏于独立，因此 有了platform，对于联系紧密的soc这往往再合适不过，另外对于从soc上直接引出的引脚，难于独立出来，都可以利用platform来表述。
      
    有了前面关于bus，driver，device的理解，platform平台的理解就比较简单，都是以前面为原型进行的再次封装，好了下面就让我们以具体代码为例进行分析。
一、platform的初始化
     platform的初始化代码位于driver/base目录下的platform.c
 
</rich_text><rich_text foreground="#993366">int __init platform_bus_init(void) </rich_text><rich_text>
{
    int error;

    early_platform_cleanup();                               </rich_text><rich_text foreground="#99cc00">// 清除platform设备链表 </rich_text><rich_text>

    error = device_register(&amp;platform_bus);           </rich_text><rich_text foreground="#99cc00">//将平台bus作为一个设备注册，出现在device目录 </rich_text><rich_text>
    if (error)
        return error;
    error =  bus_register(&amp;platform_bus_type);      </rich_text><rich_text foreground="#99cc00">//注册平台类型的bus，将出现在bus目录下
    </rich_text><rich_text foreground="#993366">if (error)</rich_text><rich_text> 
        device_unregister(&amp;platform_bus);
    return error;
} 
</rich_text><rich_text foreground="#003300">先</rich_text><rich_text> 来看一下 </rich_text><rich_text foreground="#000000">early_platform_cleanup() </rich_text><rich_text foreground="#003300">这个函数：</rich_text><rich_text> 
</rich_text><rich_text foreground="#993366">void __init early_platform_cleanup(void)
{
         struct platform_device *pd, *pd2;

        /* clean up the devres list used to chain devices */</rich_text><rich_text> 
</rich_text><rich_text foreground="#993366">   </rich_text><rich_text foreground="#339966">     </rich_text><rich_text foreground="#99cc00">/*</rich_text><rich_text> </rich_text><rich_text foreground="#99cc00">      遍历early_platform_device_list，把连接到此的所有节点清0， </rich_text><rich_text>
</rich_text><rich_text foreground="#99cc00">            平台设备都会挂到该节点，现在是平台设备的初始化阶段，自然不 </rich_text><rich_text>
</rich_text><rich_text foreground="#99cc00">            能有连接到此的设备                                                                */</rich_text><rich_text> </rich_text><rich_text foreground="#993366">
       </rich_text><rich_text> </rich_text><rich_text foreground="#993366">list_for_each_entry_safe(pd, pd2, &amp;early_platform_device_list,  
                 dev.devres_head) {                                                        
        list_del(&amp;pd-&gt;dev.devres_head);                                       
        memset(&amp;pd-&gt;dev.devres_head, 0, sizeof(pd-&gt;dev.devres_head));
       }</rich_text><rich_text> 
</rich_text><rich_text foreground="#993366">}</rich_text><rich_text> 
</rich_text><rich_text foreground="#000000">再来看一下另外两个结构体：</rich_text><rich_text> 
</rich_text><rich_text foreground="#993366">struct device platform_bus = {
    .init_name    = &quot;platform&quot;,
};</rich_text><rich_text> 
</rich_text><rich_text foreground="#000000">以及</rich_text><rich_text> 
</rich_text><rich_text foreground="#993366">struct bus_type platform_bus_type = {
    .name        = &quot;platform&quot;,
    .dev_attrs    = platform_dev_attrs,
    .match        = platform_match,
    .uevent        = platform_uevent,
    .pm        = &amp;platform_dev_pm_ops,
};</rich_text><rich_text> 

 
</rich_text><rich_text foreground="#003300" scale="h2" weight="heavy">二、platform_device的注册</rich_text><rich_text scale="h2" weight="heavy"> </rich_text><rich_text>
</rich_text><rich_text foreground="#003300">     platform_device无疑是device的封装，先给出该结构具体代码：</rich_text><rich_text> 
 
</rich_text><rich_text foreground="#003300">    </rich_text><rich_text foreground="#993366">struct platform_device {
               const char    * name;                              </rich_text><rich_text foreground="#99cc00">//名称</rich_text><rich_text> 
               int        id;                                             </rich_text><rich_text foreground="#99cc00">//id号</rich_text><rich_text> 
               struct device    dev;                                </rich_text><rich_text foreground="#99cc00">//内嵌的标准模型device</rich_text><rich_text> 
               u32        num_resources;                       </rich_text><rich_text foreground="#99cc00">//持有资源数</rich_text><rich_text> 
               struct resource    * resource;             </rich_text><rich_text foreground="#99cc00">    //指向具体资源</rich_text><rich_text> 

               const struct platform_device_id    *id_entry;           

               /* arch specific additions */
               struct pdev_archdata    archdata;
   };  </rich_text><rich_text foreground="#993366">  </rich_text><rich_text> 
</rich_text><rich_text foreground="#003300">    其中的资源结构体代码为：</rich_text><rich_text> 
</rich_text><rich_text foreground="#003300">    </rich_text><rich_text foreground="#993366">struct resource {
           resource_size_t start;                                       </rich_text><rich_text foreground="#00ff00">  </rich_text><rich_text foreground="#99cc00">//资源起始地址，可以是寄存器起始地址等等</rich_text><rich_text> 
           resource_size_t end;                                         </rich_text><rich_text foreground="#00ff00"> </rich_text><rich_text foreground="#99cc00">//结束地址</rich_text><rich_text> 
           const char *name;                                             </rich_text><rich_text foreground="#99cc00"> //名称</rich_text><rich_text> 
           unsigned long flags;                                            </rich_text><rich_text foreground="#99cc00">//标志</rich_text><rich_text> 
           struct resource *parent, *sibling, *child;             </rich_text><rich_text foreground="#00ff00">   </rich_text><rich_text foreground="#99cc00">//层次级联结构指针</rich_text><rich_text> 
    }; </rich_text><rich_text foreground="#993366">      </rich_text><rich_text>
</rich_text><rich_text foreground="#003300">   具体的注册函数为：</rich_text><rich_text> 
 
</rich_text><rich_text foreground="#003300">   </rich_text><rich_text foreground="#993366">  </rich_text><rich_text foreground="#ff00ff">  </rich_text><rich_text foreground="#993366">int platform_device_register(struct platform_device *pdev)
      {
                    device_initialize(&amp;pdev-&gt;dev);                         </rich_text><rich_text foreground="#99cc00"> //和标准设备注册时候初始化是一样，就不多说了，</rich_text><rich_text> </rich_text><rich_text foreground="#993366">
                    return platform_device_add(pdev);                  </rich_text><rich_text foreground="#99cc00">  //</rich_text><rich_text> </rich_text><rich_text foreground="#99cc00">不明白的可以看</rich_text><rich_text> </rich_text><rich_text foreground="#99cc00">前面一篇文章</rich_text><rich_text> </rich_text><rich_text foreground="#99cc00">具,体看一下这个</rich_text><rich_text> 
      } 
===================================================
   </rich_text><rich_text foreground="#993366">  int platform_device_add(struct platform_device *pdev)
    {
                   int i, ret = 0;
                   if (!pdev)
                               return -EINVAL;
                   if (!pdev-&gt;dev.parent)
                               pdev-&gt;dev.parent = &amp;platform_bus;             </rich_text><rich_text foreground="#99cc00">     //挂接到platform_bus下面</rich_text><rich_text> 
                   pdev-&gt;dev.bus = &amp;platform_bus_type;                        </rich_text><rich_text foreground="#99cc00">  //指定bus类型为platform_bus_type</rich_text><rich_text> 
                   if (pdev-&gt;id != -1)
                               dev_set_name(&amp;pdev-&gt;dev, &quot;%s.%d&quot;, 
</rich_text><rich_text foreground="#993366">                                                   pdev-&gt;name,  pdev-&gt;id);            </rich_text><rich_text foreground="#99cc00">  //设置名字，将platform下的名字传到内部device，最终会</rich_text><rich_text> 
                   else                                                                          </rich_text><rich_text foreground="#99cc00">//传到kobj</rich_text><rich_text> 
                               dev_set_name(&amp;pdev-&gt;dev, &quot;%s&quot;, pdev-&gt;name);
                    for (i = 0; i &lt; pdev-&gt;num_resources; i++) {                </rich_text><rich_text foreground="#99cc00">   //设置资源层次结构</rich_text><rich_text> 
                                struct resource *p, *r = &amp;pdev-&gt;resource[i];
                                if (r-&gt;name == NULL)                                     </rich_text><rich_text foreground="#99cc00">//资源名称为NULL则把设备名称设置给它</rich_text><rich_text> 
                                                   r-&gt;name = dev_name(&amp;pdev-&gt;dev);
                                p = r-&gt;parent;                                               </rich_text><rich_text foreground="#99cc00"> //取得资源的父节点，资源在内核中也是层次安排的，</rich_text><rich_text> 
                                if (!p) {                                                           </rich_text><rich_text foreground="#99cc00">//具有父节点，兄弟节点，子节点</rich_text><rich_text> 
                                                   if (resource_type(r) == IORESOURCE_MEM)      </rich_text><rich_text foreground="#99cc00"> //如果父节点为NULL，并且资源类型为</rich_text><rich_text> 
                                                                p = &amp;iomem_resource;                          </rich_text><rich_text foreground="#99cc00">//IORESOURCE_MEM，则把父节点设置</rich_text><rich_text> 
</rich_text><rich_text foreground="#993366">                                                                                                                           </rich_text><rich_text foreground="#99cc00">//为iomem_resource，否则如果类型为</rich_text><rich_text> 
                                                   else if (resource_type(r) == IORESOURCE_IO)     </rich_text><rich_text foreground="#99cc00">//IORESOURCE_IO，则把父节点设置为</rich_text><rich_text> 
</rich_text><rich_text foreground="#993366">                                                                p = &amp;ioport_resource;                            </rich_text><rich_text foreground="#99cc00">//IORESOURCE_IO，由此我们可以看出</rich_text><rich_text> 
                                }                                                                                          </rich_text><rich_text foreground="#99cc00">//内核数据之间的条理性之强</rich_text><rich_text> 
                               if (p &amp;&amp; insert_resource(p, r)) {                     </rich_text><rich_text foreground="#99cc00">  //将资源插入父节点，也就是出现在父节点目录层次下</rich_text><rich_text> 
                                                  printk(KERN_ERR&quot;%s: failed to claim resource %d/n&quot;,
                                                            dev_name(&amp;pdev-&gt;dev), i); 
 
</rich_text><rich_text foreground="#993366">                                                 ret = -EBUSY;
                                                 goto failed;
                               }
                      }
                      pr_debug(&quot;Registering platform device '%s'. Parent at %s/n&quot;,
                      dev_name(&amp;pdev-&gt;dev), dev_name(pdev-&gt;dev.parent));
                      ret = device_add(&amp;pdev-&gt;dev);                                </rich_text><rich_text foreground="#99cc00">//标准设备注册</rich_text><rich_text> 
                      if (ret == 0)
                               return ret;
    failed:
               while (--i &gt;= 0) {
                       struct resource *r = &amp;pdev-&gt;resource[i];
                       unsigned long type = resource_type(r);
                       if (type == IORESOURCE_MEM || type == IORESOURCE_IO)
                                release_resource(r);
               }
                return ret;
   } </rich_text><rich_text foreground="#993366"> </rich_text><rich_text> 

</rich_text><rich_text foreground="#003300" scale="h2" weight="heavy">三、platform_driver的注册</rich_text><rich_text scale="h2" weight="heavy"> </rich_text><rich_text>
</rich_text><rich_text foreground="#003300">      driver部分比较简单，其结构为：</rich_text><rich_text> 
</rich_text><rich_text foreground="#003300">            </rich_text><rich_text foreground="#993366">struct platform_driver {
                      int (*probe)(struct platform_device *);
                      int (*remove)(struct platform_device *);
                      void (*shutdown)(struct platform_device *);
                      int (*suspend)(struct platform_device *, pm_message_t state);
                      int (*resume)(struct platform_device *);
                      struct device_driver driver;                                             </rich_text><rich_text foreground="#99cc00">//内嵌的标准driver结构 </rich_text><rich_text>           
                      const struct platform_device_id *id_table;                      </rich_text><rich_text foreground="#99cc00"> //支持的设备id表</rich_text><rich_text> 
             }; 

</rich_text><rich_text foreground="#003300">  注册函数分析：</rich_text><rich_text> 
</rich_text><rich_text foreground="#993366">  int platform_driver_register(struct platform_driver *drv)
  {
                      drv-&gt;driver.bus = &amp;platform_bus_type;                          </rich_text><rich_text foreground="#99cc00">//设置bus</rich_text><rich_text> 
                      if (drv-&gt;probe)                                                             </rich_text><rich_text foreground="#99cc00">//如果platform_driver下的probe为真，就把内嵌</rich_text><rich_text> 
                                drv-&gt;driver.probe = platform_drv_probe;               </rich_text><rich_text foreground="#99cc00">//的标准driver的probe设置成platform_drv_probe</rich_text><rich_text> 
                      if (drv-&gt;remove)                                                           </rich_text><rich_text foreground="#99cc00">//可见外层的probe比内层的优先级别高</rich_text><rich_text> 
                                drv-&gt;driver.remove = platform_drv_remove;
                      if (drv-&gt;shutdown)
                                 drv-&gt;driver.shutdown = platform_drv_shutdown;

                      return driver_register(&amp;drv-&gt;driver);                               </rich_text><rich_text foreground="#99cc00">//注册标准driver</rich_text><rich_text> 
  } 
</rich_text><rich_text weight="heavy">
</rich_text><rich_text foreground="#000000" scale="h2" weight="heavy">四、总结 </rich_text></node><node name="device_create()详解 " prog_lang="custom-colors" readonly="False" tags="" unique_id="27"><rich_text scale="h2" weight="heavy">1.函数说明：</rich_text><rich_text>
</rich_text><rich_text weight="heavy">drivers/base/core.c</rich_text><rich_text>
</rich_text><rich_text foreground="#008000">//device_create的定义如下</rich_text><rich_text>
</rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device *device_create(</rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">class</rich_text><rich_text> *</rich_text><rich_text foreground="#0000ff">class</rich_text><rich_text>, </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device *</rich_text><rich_text foreground="#000000">parent,
                 dev_t devt, </rich_text><rich_text foreground="#0000ff">void</rich_text><rich_text> *drvdata, </rich_text><rich_text foreground="#0000ff">const</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">char</rich_text><rich_text> *</rich_text><rich_text foreground="#000000">fmt, ...)
{
    va_list vargs;
    </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device *</rich_text><rich_text foreground="#000000">dev;

    va_start(vargs, fmt);
    dev </rich_text><rich_text>= device_create_vargs(</rich_text><rich_text foreground="#0000ff">class</rich_text><rich_text foreground="#000000">, parent, devt, drvdata, fmt, vargs);
    va_end(vargs);
    </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text foreground="#000000"> dev;
}

static void device_create_release(struct device *dev)
{
	pr_debug(&quot;device: '%s': %s\n&quot;, dev_name(dev), __func__);
	kfree(dev);
}

</rich_text><rich_text foreground="#008000">//device_create_vargs的定义如下</rich_text><rich_text>
</rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device *device_create_vargs(</rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">class</rich_text><rich_text> *</rich_text><rich_text foreground="#0000ff">class</rich_text><rich_text>, </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device *</rich_text><rich_text foreground="#000000">parent,
                   dev_t devt, </rich_text><rich_text foreground="#0000ff">void</rich_text><rich_text> *drvdata, </rich_text><rich_text foreground="#0000ff">const</rich_text><rich_text> </rich_text><rich_text foreground="#0000ff">char</rich_text><rich_text> *</rich_text><rich_text foreground="#000000">fmt,
                   va_list args)
{
    </rich_text><rich_text foreground="#0000ff">struct</rich_text><rich_text> device *dev =</rich_text><rich_text foreground="#000000"> NULL;
    </rich_text><rich_text foreground="#0000ff">int</rich_text><rich_text> retval = -</rich_text><rich_text foreground="#000000">ENODEV;

    </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (</rich_text><rich_text foreground="#0000ff">class</rich_text><rich_text> == NULL || IS_ERR(</rich_text><rich_text foreground="#0000ff">class</rich_text><rich_text foreground="#000000">))
        </rich_text><rich_text foreground="#0000ff">goto</rich_text><rich_text foreground="#000000"> error;

    dev </rich_text><rich_text>= kzalloc(</rich_text><rich_text foreground="#0000ff">sizeof</rich_text><rich_text>(*</rich_text><rich_text foreground="#000000">dev), GFP_KERNEL);
    </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text> (!</rich_text><rich_text foreground="#000000">dev) {
        retval </rich_text><rich_text>= -</rich_text><rich_text foreground="#000000">ENOMEM;
        </rich_text><rich_text foreground="#0000ff">goto</rich_text><rich_text foreground="#000000"> error;
    }

    dev</rich_text><rich_text>-&gt;devt =</rich_text><rich_text foreground="#000000"> devt;
    dev</rich_text><rich_text>-&gt;</rich_text><rich_text foreground="#0000ff">class</rich_text><rich_text> = </rich_text><rich_text foreground="#0000ff">class</rich_text><rich_text foreground="#000000">;
    dev</rich_text><rich_text>-&gt;parent =</rich_text><rich_text foreground="#000000"> parent;
    dev</rich_text><rich_text>-&gt;release =</rich_text><rich_text foreground="#000000"> device_create_release;
    dev_set_drvdata(dev, drvdata);

    retval </rich_text><rich_text>= kobject_set_name_vargs(&amp;dev-&gt;</rich_text><rich_text foreground="#000000">kobj, fmt, args);
    </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text foreground="#000000"> (retval)
        </rich_text><rich_text foreground="#0000ff">goto</rich_text><rich_text foreground="#000000"> error;

    retval </rich_text><rich_text>=</rich_text><rich_text foreground="#000000"> device_register(dev);  </rich_text><rich_text foreground="#00000000ffff">//参考device register</rich_text><rich_text foreground="#000000">
    </rich_text><rich_text foreground="#0000ff">if</rich_text><rich_text foreground="#000000"> (retval)
        </rich_text><rich_text foreground="#0000ff">goto</rich_text><rich_text foreground="#000000"> error;

    </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text foreground="#000000"> dev;

error:
    put_device(dev);
    </rich_text><rich_text foreground="#0000ff">return</rich_text><rich_text foreground="#000000"> ERR_PTR(retval);
}</rich_text><rich_text>

</rich_text></node></node><node name="各种总线match匹配函数" prog_lang="custom-colors" readonly="False" tags="" unique_id="14"><rich_text>
</rich_text><rich_text scale="h1">一. 驱动和设备匹配过程常用数据结构</rich_text><rich_text>

</rich_text><rich_text scale="h2">1. of_device_id</rich_text><rich_text>

struct of_device_id
{
    charname[32];
    char type[32];
    char compatible[128];
#ifdef __KERNEL__
    void*data;
#else
    kernel_ulong_t data;
#endif
};

</rich_text><rich_text scale="h2">2. platform_device_id</rich_text><rich_text>
struct platform_device_id {
    char name[PLATFORM_NAME_SIZE];
    kernel_ulong_t driver_data   __attribute__((aligned(sizeof(kernel_ulong_t))));
};
 

</rich_text><rich_text scale="h1">二. 平台设备、驱动匹配platform_match</rich_text><rich_text>
向系统添加平台驱动或添加设备时会调用平台总线platform_bus_type中的platform_match函数来匹配平台驱动和平台设备。
static int platform_match(struct device *dev, struct device_driver *drv)
{
    struct platform_device *pdev = to_platform_device(dev);
    struct platform_driver *pdrv = to_platform_driver(drv);
    /*通过驱动里定义了of_device_id项，则通过这一项来比对；*
    if (of_driver_match_device(dev, drv))
        return 1;
        
    /*如果在平台驱动中定义了id_table项，则通过对比id_table来判断*/
    if (pdrv-&gt;id_table)
        return platform_match_id(pdrv-&gt;id_table, pdev) != NULL;
        
    /*通过对比平台设备名字和平台驱动名字来判断*/
    return (strcmp(pdev-&gt;name, drv-&gt;name) == 0);
}
 
由platform_match可以看出，驱动和设备是否匹配可以通过三种方式来进行判断，首先是通过of_device_id结构：
static inline int of_driver_match_device(struct device *dev, const struct device_driver *drv)
{
    return of_match_device(drv-&gt;of_match_table, dev) != NULL;
}
 
struct of_device_id *of_match_device(const struct of_device_id *matches, const struct device *dev)
{
    if ((!matches) || (!dev-&gt;of_node))
        return NULL;
    
    return of_match_node(matches, dev-&gt;of_node);
}
 
const struct of_device_id *of_match_node(const struct of_device_id *matches, const struct device_node *node)
{
    if (!matches)
        return NULL;

    while (matches-&gt;name[0] || matches-&gt;type[0] || matches-&gt;compatible[0])  {
        int match = 1;
        if (matches-&gt;name[0])
            match &amp;= node-&gt;name &amp;&amp; !strcmp(matches-&gt;name, node-&gt;name);
            
        if (matches-&gt;type[0])
            match &amp;= node-&gt;type &amp;&amp; !strcmp(matches-&gt;type, node-&gt;type);
            
        if (matches-&gt;compatible[0])
            match &amp;= of_device_is_compatible(node, matches-&gt;compatible);
            
        if (match)
            return matches;matches++;
    }
    
    return NULL;
}
 
如果driver中定义了of_device_id，则通过</rich_text><rich_text foreground="#666600">driver中的of_device_id和device中的device_node</rich_text><rich_text>内 容进行匹配判断，匹配工作由of_match_node来完成，该函数会遍历of_device_id列表，查找是否有成员与device_node相匹 配，
具体由matches的name,type和compatioble来进行对比，如果找到则返回相应的表项，否则返回null.如果没有定义 of_device_id,device_node或不能找到对应的匹配项，则通过第二种方式platform_device_id来进行对比匹配,
通过 platform_match_id来完成：
static const struct platform_device_id *platform_match_id( const struct platform_device_id *id, struct platform_device *pdev)
{
    while (id-&gt;name[0]) {
        if (strcmp(pdev-&gt;name, id-&gt;name) == 0) {
            pdev-&gt;id_entry = id;
            return id;
        }
        id++;
    }
    
    return NULL;
}

platform_match_id函数遍历platfrom_device_id列表，通过比对平台设备与id的name来确定是否有匹配项，如果找到 匹配的，则返回对应的id项，否则返回null。如果没有定义platform_device_id或没有找到匹配项，
则通过第三种方式进行匹配，第三种 方式通过比对平台设备和平台驱动的名字，如果相等，则匹配成功，否则失败。

</rich_text><rich_text scale="h1">三. i2c设备、驱动匹配i2c_device_match</rich_text><rich_text>
当向i2c总线添加驱动或设备时会调用i2c_device_match来进行匹配判断，i2c_device_match函数定义如下所示：
static int i2c_device_match(struct device *dev, struct device_driver *drv)
{
    struct i2c_client *client = i2c_verify_client(dev);
    struct i2c_driver *driver;
    
    if (!client)
        return 0;

    /* 通过of_device_id匹配 */
    if (of_driver_match_device(dev, drv))
        return 1;
        
    driver = to_i2c_driver(drv);
    /*如果I2C 驱动中定义了id_table，则通过id_table进行匹配；*/
    if (driver-&gt;id_table)
        return i2c_match_id(driver-&gt;id_table, client) != NULL;
    
    return 0;
}
 
如i2c_device_match所示，i2c通过两种方式进行匹配设备和驱动，一种是of_device_id，另一种是 i2c_device_id，i2c_device_id数据结构和platform_device_id一样。I2C里的两种匹配方式和之前的platform判断方式都是一样，
这里就不展开。

</rich_text><rich_text scale="h1">四. usb设备、驱动匹配usb_device_match</rich_text><rich_text>
当向usb总线上注册驱动或添加设备时，就会调用usb_match_device进行驱动和设备配对，函数如下：
static int usb_device_match(struct device *dev, struct device_driver *drv)
{
    if (is_usb_device(dev)) {
        if (!is_usb_device_driver(drv))
            return 0;
        return 1;
    } else if (is_usb_interface(dev)) {
        struct usb_interface *intf;
        struct usb_driver *usb_drv;
        const struct usb_device_id *id;
        
        if (is_usb_device_driver(drv))
            return 0;
            
        intf = to_usb_interface(dev);
        usb_drv = to_usb_driver(drv);
        id = usb_match_id(intf, usb_drv-&gt;id_table);
        if (id)
            return 1;
            
        id = usb_match_dynamic_id(intf, usb_drv);
        if (id)
            return 1;
    }
    
    return 0;
}
从函数可以看出，match分成两部分，一部分用于匹配usb设备，另一部分用于匹配usb接口，对于usb设备，在初始化时会设置成usb_device_type，而usb接口，则会设成usb_if_device_type。
而函数中的 is_usb_device和is_usb_interface就是通过这两个属性来判别的，如果为判定为设备，则进入到设备分支，否则进入到接口分支继续判断。
usb设备驱动通过usb_register_device_driver接口来注册到系统，而usb接口驱动则通过usb_register来注册到系 统，驱动工程师的工作基本上集中在接口驱动上，所以通常是通过usb_register来注册usb驱动的。 
不管是设备驱动usb_device_driver,还是接口驱动usb_driver数据结构中都包含了struct usbdrv_wrap项，其定义如下：
struct usbdrv_wrap {
    struct device_driver driver;
    int for_devices;
}

数据结构中的for_devices用来表示该驱动是设备驱动还是接口驱动，如果为设备驱动，则在用usb_register_device_driver注册时，会将该变量for_devices设置成1，而接口驱动则设为0.

usb_device_match中的is_usb_device_driver函数就是通过获取上而结构中的for_devices来进行判断是设备还是接口驱动的，函数定义如下：
static inline int is_usb_device_driver(struct device_driver *drv)
{ 
    return container_of(drv, struct usbdrv_wrap, driver)-&gt;for_devices;
}
当进入is_usb_device分支后，再通过is_usb_device_driver来判断是否为设备驱动，如果是则返回1，表示匹配成功，它接受所有usb设备。
当进入到接口分支后，也会先用is_usb_device_driver来进行判断，如果不是设备驱动则继续判断，否则退出；然后再通过 usb_match_id函数来判断设备和驱动中的usb_device_id是否匹配，usb_match_id定义如下：
const struct usb_device_id *usb_match_id(struct usb_interface *interface,  const struct usb_device_id *id)
 {
    if (id == NULL)
        return NULL;
    
    for (; id-&gt;idVendor || id-&gt;idProduct || id-&gt;bDeviceClass ||  id-&gt;bInterfaceClass || id-&gt;driver_info; id++) {
        if (usb_match_one_id(interface, id))
            return id;
    }
    
    return NULL;
}

遍历接口驱动中的usb_device_id列表项，只要usb_device_id结构中的 idVendor,idProduct,DeviceClass,binterfaceClass,driver_info项有效就调用 usb_match_one_id进行判断，如找到匹配项则函数返回1，否则返回0 。
int usb_match_one_id(struct usb_interface *interface,const struct usb_device_id *id)
{
    struct usb_host_interface *intf;
    struct usb_device *dev;
    
    if (id == NULL)
        return 0;
    
    intf = interface-&gt;cur_altsetting;
    dev = interface_to_usbdev(interface);
    if (!usb_match_device(dev, id))
        return 0;

    if (dev-&gt;descriptor.bDeviceClass == USB_CLASS_VENDOR_SPEC &amp;&amp; 
     !(id-&gt;match_flags &amp; USB_DEVICE_ID_MATCH_VENDOR) &amp;&amp;(id-&gt;match_flags &amp;  (USB_DEVICE_ID_MATCH_INT_CLASS | USB_DEVICE_ID_MATCH_INT_SUBCLASS  | USB_DEVICE_ID_MATCH_INT_PROTOCOL)))
        return 0;
    if ((id-&gt;match_flags &amp; USB_DEVICE_ID_MATCH_INT_CLASS) &amp;&amp; (id-&gt;bInterfaceClass != intf-&gt;desc.bInterfaceClass))
        return 0;
    if ((id-&gt;match_flags &amp; USB_DEVICE_ID_MATCH_INT_SUBCLASS) &amp;&amp; 
        (id-&gt;bInterfaceSubClass != intf-&gt;desc.bInterfaceSubClass))
        return 0;
    if ((id-&gt;match_flags &amp; USB_DEVICE_ID_MATCH_INT_PROTOCOL) &amp;&amp; 
        (id-&gt;bInterfaceProtocol != intf-&gt;desc.bInterfaceProtocol))
        return 0;
        
    return 1;
}
 
usb_match_one_id和函数中的usb_match_device都是围绕着usb_device_id进行匹配的，该结构定义如下：
struct usb_device_id {
    /* which fields to match against? */
    __u16  match_flags;
    /* Used for product specific matches; range is inclusive */
    __u16  idVendor;
    __u16  idProduct;
    __u16  bcdDevice_lo;
    __u16  bcdDevice_hi;
    /* Used for device class matches */
    __u8  bDeviceClass;
    __u8  bDeviceSubClass;
    __u8  bDeviceProtocol;
    /* Used for interface class matches */
    __u8  bInterfaceClass;
    __u8  bInterfaceSubClass;
    __u8  bInterfaceProtocol;
    /* not matched against */
    kernel_ulong_tdriver_info;
};
match_flags用来规定驱动匹配时的具体项，如match_flags包含USB_DEVICE_ID_MATCH_VENDOR，则是通过驱动中的usb_device_id和设备dev中的idVendor来判断。
</rich_text></node><node name="suspend" prog_lang="custom-colors" readonly="False" tags="" unique_id="16"><rich_text foreground="#ff0000" scale="h2">一、对于休眠(suspend)的简单介绍</rich_text><rich_text foreground="#ff0000">
 </rich_text><rich_text>   在Linux中,休眠主要分三个主要的步骤:
    1) 冻结用户态进程和内核态任务
    2) 调用注册的设备的suspend的回调函数, 顺序是按照注册顺序
    3) 休眠核心设备和使CPU进入休眠态, 冻结进程是内核把进程列表中所有的进程的状态都设置为停止,并且保存下所有进程的上下文. 当这些进程被解冻的时候,他们是不知道自己被冻结过的,只是简单的继续执行。
    如何让Linux进入休眠呢?用户可以通过读写sys文件/sys /power/state 是实现控制系统进入休眠. 比如
    # echo mem &gt; /sys/power/state
    命令系统进入休眠. 也可以使用
   # cat /sys/power/state
    来得到内核支持哪几种休眠方式.
    
</rich_text><rich_text foreground="#ff0000" scale="h2">二、Linux Suspend 的流程</rich_text><rich_text foreground="#ff0000">
 </rich_text><rich_text foreground="#000000">1. 相关代码</rich_text><rich_text>
     • kernel/kernel/power/main.c
     • kernel/arch/arm/mach-xxx/pm.c
     • kernel/driver/base/power/main.c
     接下来让我们详细的看一下Linux是怎么休眠/唤醒的:
      用户对于/sys/power/state 的读写会调用到  kernel/kernel/power/main.c中的state_store()， 用户可以写入 const char * const  pm_states[] 中定义的字符串， 比如&quot;mem&quot;, &quot;standby&quot;。
const char *const pm_states[PM_SUSPEND_MAX] = {
 #ifdef CONFIG_EARLYSUSPEND
  [PM_SUSPEND_ON]  = &quot;on&quot;,
 #endif
  [PM_SUSPEND_STANDBY] = &quot;standby&quot;,
  [PM_SUSPEND_MEM] = &quot;mem&quot;,
 };
       常见有standby(suspend to RAM)、mem(suspend to RAM)和disk(suspend to disk)，只是standby耗电更多，返回到正常工作状态的时间更短。     
     然后state_store()会调用enter_state()&lt;</rich_text><rich_text foreground="#3333ff">注：这是经典Linux调用流程， 在Android系统中，Kernel将调用request_suspend_state，而不是enter_state</rich_text><rich_text>&gt;，它首先会检查一些状态参数，然后同步文件系统。
  
1. /** 
2.  *  enter_state - Do common work of entering low-power state. 
3.  *  @state:     pm_state structure for state we're entering. 
4.  * 
5.  *  Make sure we're the only ones trying to enter a sleep state. Fail 
6.  *  if someone has beat us to it, since we don't want anything weird to 
7.  *  happen when we wake up. 
8.  *  Then, do the setup for suspend, enter the state, and cleaup (after 
9.  *  we've woken up). 
10.  */  
11. int enter_state(suspend_state_t state)  
12. {  
13.     int error;  
14.   
15.     if (!valid_state(state))  
16.         return -ENODEV;  
17.   
18.     if (!mutex_trylock(&amp;pm_mutex))  
19.         return -EBUSY;  
20.   
21. #ifdef CONFIG_SUSPEND_SYNC_WORKQUEUE  
22.     suspend_sys_sync_queue();  
23. #else  
24.     printk(KERN_INFO &quot;PM: Syncing filesystems ... &quot;);  
25.     sys_sync();  
26.     printk(&quot;done.\n&quot;);  
27. #endif  
28.   
29.     pr_debug(&quot;PM: Preparing system for %s sleep\n&quot;, pm_states[state]);  
30.     error = suspend_prepare();  
31.     if (error)  
32.         goto Unlock;  
33.   
34.     if (suspend_test(TEST_FREEZER))  
35.         goto Finish;  
36.   
37.     pr_debug(&quot;PM: Entering %s sleep\n&quot;, pm_states[state]);  
38.     pm_restrict_gfp_mask();  
39.     error = suspend_devices_and_enter(state);  
40.     pm_restore_gfp_mask();  
41.   
42.  Finish:  
43.     pr_debug(&quot;PM: Finishing wakeup.\n&quot;);  
44.     suspend_finish();  
45.  Unlock:  
46.     mutex_unlock(&amp;pm_mutex);  
47.     return error;  
48. }  

 2. 准备, 冻结进程
        当进入到suspend_prepare()中以后， 它会给suspend分配一个虚拟终端来输出信息，  然后广播一个系统要进入suspend的Notify， 关闭掉用户态的helper进程，  然后一次调用suspend_freeze_processes()冻结所有的进程， 这里会保存所有进程当前的状态，  也许有一些进程会拒绝进入冻结状态， 当有这样的进程存在的时候， 会导致冻结失败,此函数就会放弃冻结进程，并且解冻刚才冻结的所有进程。
 
1. /** 
2.  *  suspend_prepare - Do prep work before entering low-power state. 
3.  * 
4.  *  This is common code that is called for each state that we're entering. 
5.  *  Run suspend notifiers, allocate a console and stop all processes. 
6.  */  
7. static int suspend_prepare(void)  
8. {  
9.     int error;  
10.   
11.     if (!suspend_ops || !suspend_ops-&gt;enter)  
12.         return -EPERM;  
13.   
14.     pm_prepare_console();  
15.   
16.     error = pm_notifier_call_chain(PM_SUSPEND_PREPARE);  
17.     if (error)  
18.         goto Finish;  
19.   
20.     error = usermodehelper_disable();  
21.     if (error)  
22.         goto Finish;  
23.   
24.     error = suspend_freeze_processes();  
25.     if (!error)  
26.         return 0;  
27.   
28.     suspend_thaw_processes();  
29.     usermodehelper_enable();  
30.  Finish:  
31.     pm_notifier_call_chain(PM_POST_SUSPEND);  
32.     pm_restore_console();  
33.     return error;  
34. }  
3. 让外设进入休眠
         现在, 所有的进程(也包括workqueue/kthread)  都已经停止了，内核态人物有可能在停止的时候握有一些信号量，  所以如果这时候在外设里面去解锁这个信号量有可能会发生死锁，所以在外设的suspend()函数里面作lock/unlock锁要非常小心，这里建议设 计的时候就不要在suspend()里面等待锁。而且因为suspend的时候，有一些Log是无法输出的，所以一旦出现问题,非常难调试。
      然后kernel在这里会尝试释放一些内存。
      最后会调用suspend_devices_and_enter()来把所有的外设休眠， 在这个函数中， 如果平台注册了suspend_ops(通常是在板级定义中定义和注册，</rich_text><rich_text foreground="#3333ff">在kernel/arch/arm/mach-xx/pm.c中调用suspend_set_ops</rich_text><rich_text>)， 这里就会调用 suspend_ops-&gt;begin()； 然后调用</rich_text><rich_text foreground="#3333ff">dpm_suspend_start</rich_text><rich_text>，他们会依次调用驱动的suspend()  回调来休眠掉所有的设备。
     当所有的设备休眠以后，  suspend_ops-&gt;prepare()会被调用， 这个函数通常会作一些准备工作来让板机进入休眠。  接下来Linux，在多核的CPU中的非启动CPU会被关掉，通过注释看到是避免这些其他的CPU造成race  condition，接下来的以后只有一个CPU在运行了。
     suspend_ops 是板级的电源管理操作, 通常注册在文件 arch/arch/mach-xxx/pm.c 中.
     接下来， suspend_enter()会被调用，  这个函数会关闭arch irq， 调用 device_power_down()， 它会调用suspend_late()函数，  这个函数是系统真正进入休眠最后调用的函数，通常会在这个函数中作最后的检查。 如果检查没问题， 接下来休眠所有的系统设备和总线，并且调用  suspend_pos-&gt;enter() 来使CPU进入省电状态，这时就已经休眠了。代码的执行也就停在这里了。
 
1. /** 
2.  *  suspend_devices_and_enter - suspend devices and enter the desired system 
3.  *                  sleep state. 
4.  *  @state:       state to enter 
5.  */  
6. int suspend_devices_and_enter(suspend_state_t state)  
7. {  
8.     int error;  
9.   
10.     if (!suspend_ops)  
11.         return -ENOSYS;  
12.   
13.     trace_machine_suspend(state);  
14.   
15.          // 如果平台注册了suspend_ops(通常是在板级定义中定义和注册，  
16.            // 在kernel/arch/arm/mach-xx/pm.c中调用suspend_set_ops)，   
17.            // 这里就会调用 suspend_ops-&gt;begin()；  
18.     if (suspend_ops-&gt;begin) {  
19.         error = suspend_ops-&gt;begin(state);  
20.         if (error)  
21.             goto Close;  
22.     }  
23.     suspend_console();  
24.     suspend_test_start();  
25.   
26.          // 依次调用驱动的suspend() 回调来休眠掉所有的设备。  
27.     error = dpm_suspend_start(PMSG_SUSPEND);  
28.     if (error) {  
29.         printk(KERN_ERR &quot;PM: Some devices failed to suspend\n&quot;);  
30.         goto Recover_platform;  
31.     }  
32.     suspend_test_finish(&quot;suspend devices&quot;);  
33.     if (suspend_test(TEST_DEVICES))  
34.         goto Recover_platform;  
35.           
36.          // 这个函数会关闭arch irq， 调用 device_power_down()， 它会调用suspend_late()函数，   
37.           // 这个函数是系统真正进入休眠最后调用的函数，通常会在这个函数中作最后的检查。  
38.           // 如果检查没问题， 接下来休眠所有的系统设备和总线，并且调用 suspend_pos-&gt;enter()   
39.          // 来使CPU进入省电状态，这时就已经休眠了。代码的执行也就停在这里了。  
40.     error = suspend_enter(state);  
41.   
42.  Resume_devices:  
43.     suspend_test_start();  
44.     dpm_resume_end(PMSG_RESUME);  
45.     suspend_test_finish(&quot;resume devices&quot;);  
46.     resume_console();  
47.  Close:  
48.     if (suspend_ops-&gt;end)  
49.         suspend_ops-&gt;end();  
50.     trace_machine_suspend(PWR_EVENT_EXIT);  
51.     return error;  
52.   
53.  Recover_platform:  
54.     if (suspend_ops-&gt;recover)  
55.         suspend_ops-&gt;recover();  
56.     goto Resume_devices;  
57. }  
58. 

</rich_text><rich_text foreground="#ffff00000000" scale="h2">三、Linux Resume流程</rich_text><rich_text>
        如果在休眠中系统被中断或者其他事件唤醒，接下来的代码就会开始执行，这个唤醒的顺序是和休眠的循序相反的，所以系统设备和总线会首先唤醒，使能系统中 断，使能休眠时候停止掉的非启动CPU， 以及调用suspend_ops-&gt;finish()，  而且在suspend_devices_and_enter()函数中也会继续唤醒每个设备，使能虚拟终端， 最后调用  suspend_ops-&gt;end()。
      在返回到enter_state()函数中的，当  suspend_devices_and_enter() 返回以后，外设已经唤醒了，但是进程和任务都还是冻结状态，  这里会调用suspend_finish()来解冻这些进程和任务， 而且发出Notify来表示系统已经从suspend状态退出， 唤醒终端。
      到这里，所有的休眠和唤醒就已经完毕了，系统继续运行了。
      
      
###########################################################################################
###########################################################################################
</rich_text><rich_text foreground="#ffff00000000" scale="h2">一、简介</rich_text><rich_text>
      Android系统中定义了几种低功耗状态：earlysuspend、suspend、hibernation.
       1) earlysuspend: 是一种低功耗的状态,某些设备可以选择进入某种功耗较低的状态,比如 LCD可以降低亮度或灭掉;  
       2) suspend: 是指除电源管理以外的其他外围模块以及cpu均不工作,只有内存保持自刷新的状态;   
       3)  hibernation是指所有内存镜像都被写入磁盘中,然后系统关机,恢复后系统将能恢复到“关机”之前的状态。是最彻底的低功耗模式，它把所有内存镜 像都写入磁盘中，然后系统关机。该文件还在sysfs文件系统中创建了多个entry，分别是/sys/power/disk，/sys/power /resume和/sys/power/image_size，这样用户可以直接通过 sysfs  来控制系统进出hibernation状态。这块代码跟标准Linux内核没有什么区别。
       
       在打过android补丁的内核中，  state_store()函数会走另外一条路，会进入到request_suspend_state()中，  这个文件在earlysuspend.c中. 这些功能都是android系统加的，后面会对earlysuspend和late resume  进行介绍。
       
</rich_text><rich_text foreground="#ffff00000000" scale="h2">二、用户接口</rich_text><rich_text>
      电源管理内核层给应用层提供的接口就是sysfs 文件系统，所有的相关接口都通过sysfs实现。Android上层frameworks也是基于sysfs做了包装，最终提供给Android java应用程序的是java类的形式。 
 Android系统会在sysfs里面创建以entry：
      /sys/power/state 
      /sys/power/wake_lock 
      /sys/power/wake_unlock
     echo mem &gt; /sys/power/state或echo  standby &gt; /sys/power/state: 命令系统进入earlysuspend状态，那些注册了early suspend  handler的驱动将依次进入各自的earlysuspend 状态。
     echo on &gt; /sys/power/state: 将退出early suspend状态
     echo disk &gt; /sys/power/state: 命令系统进入hibernation状态
    echo lockname &gt; /sys/power/wake_lock: 加锁“lockname”
     echo lockname &gt; /sys/power/wake_unlock: 解锁“lockname”
     上述是分别加锁和解锁的命令，一旦系统中所有wakelock被解锁，系统就会进入suspend状态，可见Linux中原本使系统 suspend 的操作（echo mem &gt; /sys/power/state 等）在Android被替换成使系统进入early  suspend；而wake lock 机制成为用户命令系统进入suspend状态的唯一途径。
 
</rich_text><rich_text foreground="#ffff00000000" scale="h2">三、Android 休眠(suspend)</rich_text><rich_text>
</rich_text><rich_text scale="h3">1. 相关文件</rich_text><rich_text>
      • kernel/kernel/power/main.c
      • kernel/kernel/power/earlysuspend.c
      • kernel/kernel/power/wakelock.c
 
</rich_text><rich_text scale="h3">2. 特性介绍</rich_text><rich_text>
     1) Early Suspend
        Early suspend  是android 引进的一种机制，这种机制在上游备受争议，这里不做评论。  这个机制作用是在关闭显示的时候，一些和显示有关的设备，比如LCD背光、重力感应器、  触摸屏都会关掉，但是系统可能还是在运行状态(这时候还有wake lock)进行任务的处理，例如在扫描 SD卡上的文件等。  在嵌入式设备中，背光是一个很大的电源消耗，所以android会加入这样一种机制。

 </rich_text><rich_text foreground="#000099">     2) Late Resume
 </rich_text><rich_text>         Late Resume 是和suspend 配套的一种机制，是在内核唤醒完毕开始执行的。主要就是唤醒在Early Suspend时休眠的设备。

      </rich_text><rich_text foreground="#000099">3) Wake Lock
 </rich_text><rich_text>         wake_lock  在Android的电源管理系统中扮演一个核心的角色。wake_lock是一种锁的机制，只要有人拿着这个锁，系统就无法进入休眠，可以被用户态程序和 内核获得。这个锁可以是有超时的或者是没有超时的，超时的锁会在超时以后自动解锁。如果没有锁了或者超时了，内核就会启动休眠的那套机制来进入休眠。

</rich_text><rich_text scale="h3">3. Android Suspend</rich_text><rich_text>
        main.c文件是整个框架的入口。用户可以通过读写sys文件/sys/power/state实现控制系统进入低功耗状态。用户对于/sys /power/state的读写会调用到main.c中的state_store()，用户可以写入const char * const  pm_states[] 中定义的字符串， 比如“on”，“mem”，“standby”，“disk”。  
        state_store()首先判断用户写入的是否是“disk”字符串，如果是则调用hibernate()函数命令系统进入hibernation状 态。如果是其他字符串则调用request_suspend_state()（如果定义  CONFIG_EARLYSUSPEND）或者调用enter_state()（如果未定义CONFIG_EARLYSUSPEND）。   request_suspend_state()函数是android相对标准linux改动的地方，它实现在earlysuspend.c中。在标准 linux内核中，用户通过  sysfs 写入“mem”和“standby”时，会直接调用enter_state()进入suspend模式，但在android中则会调用</rich_text><rich_text foreground="#ff0000">request_suspend_state</rich_text><rich_text>()函数进入early suspend状态。request_suspend_state()函数代码如下：    
 
1. void request_suspend_state(suspend_state_t new_state)  
2. {  
3.     unsigned long irqflags;  
4.     int old_sleep;  
5.   
6. #ifdef CONFIG_PLAT_RK  
7.     if (system_state != SYSTEM_RUNNING)  
8.         return;  
9. #endif  
10.   
11.     spin_lock_irqsave(&amp;state_lock, irqflags);  
12.     old_sleep = state &amp; SUSPEND_REQUESTED;  
13.     if (debug_mask &amp; DEBUG_USER_STATE) {  
14.         struct timespec ts;  
15.         struct rtc_time tm;  
16.         getnstimeofday(&amp;ts);  
17.         rtc_time_to_tm(ts.tv_sec, &amp;tm);  
18.         pr_info(&quot;request_suspend_state: %s (%d-&gt;%d) at %lld &quot;  
19.             &quot;(%d-%02d-%02d %02d:%02d:%02d.%09lu UTC)\n&quot;,  
20.             new_state != PM_SUSPEND_ON ? &quot;sleep&quot; : &quot;wakeup&quot;,  
21.             requested_suspend_state, new_state,  
22.             ktime_to_ns(ktime_get()),  
23.             tm.tm_year + 1900, tm.tm_mon + 1, tm.tm_mday,  
24.             tm.tm_hour, tm.tm_min, tm.tm_sec, ts.tv_nsec);  
25.     }  
26.     if (!old_sleep &amp;&amp; new_state != PM_SUSPEND_ON) {  
27.         state |= SUSPEND_REQUESTED;  
28.                   //进入Early suspend处理，执行函数early_suspend  
29.         queue_work(suspend_work_queue, &amp;early_suspend_work);  
30.     } else if (old_sleep &amp;&amp; new_state == PM_SUSPEND_ON) {  
31.         state &amp;= ~SUSPEND_REQUESTED;  
32.         wake_lock(&amp;main_wake_lock);  
33.                   //进入Late resume处理,执行函数late_resume  
34.         queue_work(suspend_work_queue, &amp;late_resume_work);  
35.     }  
36.     requested_suspend_state = new_state;  
37.     spin_unlock_irqrestore(&amp;state_lock, irqflags);  
38. }  

</rich_text><rich_text scale="h3"> 4. Early Suspend</rich_text><rich_text>
        在early_suspend()函数中，首先会检查现在请求的状态还是否是suspend，  来防止suspend的请求会在这个时候取消掉(因为这个时候用户进程还在运行)，如果需要退出，就简单的退出了。如果没有，  这个函数就会把early_suspend_handlers中注册的一系列的回调(</rich_text><rich_text foreground="#000099">通过register_early_suspend注册</rich_text><rich_text>)都调用一次，然后同步文件系统， 然后放弃掉main_wake_lock，  这个wake lock是一个没有超时的锁，如果这个锁不释放，那么系统就无法进入休眠。
    注：fbearlysuspend.c和consoleearlysuspend.c这两个文件实现了针对lcd  framebuffer的earlysuspend支持和console的earlysuspend支持。实际上这两个文件就是利用上面 earlysuspend.c提供的接口注册了针对framebuffer和console的early suspend  handler，并提供相应的handler函数。
1. static void early_suspend(struct work_struct *work)  
2. {  
3.     struct early_suspend *pos;  
4.     unsigned long irqflags;  
5.     int abort = 0;  
6.   
7. #ifdef CONFIG_PLAT_RK  
8.     if (system_state != SYSTEM_RUNNING)  
9.         return;  
10. #endif  
11.   
12.     mutex_lock(&amp;early_suspend_lock);  
13.     spin_lock_irqsave(&amp;state_lock, irqflags);  
14.     if (state == SUSPEND_REQUESTED)  
15.         state |= SUSPENDED;  
16.     else  
17.         abort = 1;  
18.     spin_unlock_irqrestore(&amp;state_lock, irqflags);  
19.   
20.     if (abort) {  
21.         if (debug_mask &amp; DEBUG_SUSPEND)  
22.             pr_info(&quot;early_suspend: abort, state %d\n&quot;, state);  
23.         mutex_unlock(&amp;early_suspend_lock);  
24.         goto abort;  
25.     }  
26.   
27.     if (debug_mask &amp; DEBUG_SUSPEND)  
28.         pr_info(&quot;early_suspend: call handlers\n&quot;);  
29.     list_for_each_entry(pos, &amp;early_suspend_handlers, link) {  
30.         if (pos-&gt;suspend != NULL) {  
31.             if (debug_mask &amp; DEBUG_VERBOSE)  
32.                 pr_info(&quot;early_suspend: calling %pf\n&quot;, pos-&gt;suspend);  
33.             pos-&gt;suspend(pos);  
34.         }  
35.     }  
36.     mutex_unlock(&amp;early_suspend_lock);  
37.   
38. #ifdef CONFIG_SUSPEND_SYNC_WORKQUEUE  
39.     suspend_sys_sync_queue();  
40. #else  
41.     if (debug_mask &amp; DEBUG_SUSPEND)  
42.         pr_info(&quot;early_suspend: sync\n&quot;);  
43.   
44.     sys_sync();  
45. #endif  
46. abort:  
47.     spin_lock_irqsave(&amp;state_lock, irqflags);  
48.     if (state == SUSPEND_REQUESTED_AND_SUSPENDED)  
49.         wake_unlock(&amp;main_wake_lock);  
50.     spin_unlock_irqrestore(&amp;state_lock, irqflags);  
51. }  

</rich_text><rich_text scale="h3">5. Late Resume</rich_text><rich_text>
      当所有的唤醒已经结束以后，用户进程都已经开始运行了，唤醒通常会是以下的几种原因:
     • 来电
         如果是来电，那么Modem会通过发送命令给rild来让rild通知WindowManager有来电响应，这样就会远程调用 PowerManagerService来写&quot;on&quot; 到 /sys/power/state 来执行late resume的设备，比如点亮屏幕等。
    • 用户按键
      用户按键事件会送到WindowManager中，WindowManager会处理这些按键事件，按键分为几种情况，如果按键不是唤醒键(能够唤醒系统的按键) 那么WindowManager会主动放弃wakeLock来使系统再次进入休眠，如果按键是唤醒键，那么WindowManger就会调用PowerManagerService中的接口来执行Late  Resume。
   Late Resume 会依次唤醒前面调用了Early Suspend的设备。
1. static void late_resume(struct work_struct *work)  
2. {  
3.     struct early_suspend *pos;  
4.     unsigned long irqflags;  
5.     int abort = 0;  
6.   
7. #ifdef CONFIG_PLAT_RK  
8.     if (system_state != SYSTEM_RUNNING)  
9.         return;  
10. #endif  
11.   
12.     mutex_lock(&amp;early_suspend_lock);  
13.     spin_lock_irqsave(&amp;state_lock, irqflags);  
14.     if (state == SUSPENDED)  
15.         state &amp;= ~SUSPENDED;  
16.     else  
17.         abort = 1;  
18.     spin_unlock_irqrestore(&amp;state_lock, irqflags);  
19.   
20.     if (abort) {  
21.         if (debug_mask &amp; DEBUG_SUSPEND)  
22.             pr_info(&quot;late_resume: abort, state %d\n&quot;, state);  
23.         goto abort;  
24.     }  
25.     if (debug_mask &amp; DEBUG_SUSPEND)  
26.         pr_info(&quot;late_resume: call handlers\n&quot;);  
27.     list_for_each_entry_reverse(pos, &amp;early_suspend_handlers, link) {  
28.         if (pos-&gt;resume != NULL) {  
29.             if (debug_mask &amp; DEBUG_VERBOSE)  
30.                 pr_info(&quot;late_resume: calling %pf\n&quot;, pos-&gt;resume);  
31.   
32.             pos-&gt;resume(pos);  
33.         }  
34.     }  
35.     if (debug_mask &amp; DEBUG_SUSPEND)  
36.         pr_info(&quot;late_resume: done\n&quot;);  
37. abort:  
38.     mutex_unlock(&amp;early_suspend_lock);  
39. }  

</rich_text><rich_text scale="h3">6. Wake Lock</rich_text><rich_text>
     </rich_text><rich_text foreground="#ff0000">wake_lock防止正在运行的系统进入suspend或其它低功耗状态。</rich_text><rich_text>
</rich_text><rich_text foreground="#ff0000">     Android改动较大的另一处是增加了</rich_text><rich_text foreground="#3333ff">wakelock</rich_text><rich_text>机制。实现在wakelock.c和userwakelock.c中。wakelock可以阻止处于正常运行（active）或者空闲（idle）状态的系统进入睡眠等低功耗状态。直到所持有的wakelock全部被释放，系统才能进入睡眠等低功耗的状态。
    我们接下来看一看wake lock的机制是怎么运行和起作用的，主要关注 wakelock.c(wake_lock)文件就可以了。
    1) wake lock 有加锁和解锁两种状态，加锁的方式有两种：
     • 第一种是永久的锁住，这样的锁除非显示的放开，是不会解锁的，所以这种锁的使用是非常小心的。
     • 第二种是超时锁，这种锁会锁定系统唤醒一段时间，如果这个时间过去了，这个锁会自动解除。
    2) 锁有两种类型：
     • WAKE_LOCK_SUSPEND：这种锁会防止系统进入睡眠(suspend)。
     • WAKE_LOCK_IDLE：这种锁不会影响系统的休眠，用于阻止系统在持有锁的过程中进入低功耗状态。即直到wake_lock被释放，系统才会从idle状态进入低功耗状态，此低功耗状态将使中断延迟或禁用一组中断。
    3) 在wake lock中， 会有3个地方让系统直接开始</rich_text><rich_text foreground="#ff0000">suspend</rich_text><rich_text>()， 分别是:
     • 在wake_unlock()中， 如果发现解锁以后没有任何其他的wake lock了，就开始休眠
     • 在定时器都到时间以后，定时器的回调函数会查看是否有其他的wake lock，如果没有，就在这里让系统进入睡眠。
     • 在wake_lock() 中，对一个wake lock加锁以后，会再次检查一下有没有锁， 我想这里的检查是没有必要的， 更好的方法是使加锁的这个操作原子化，而不是繁冗的检查，而且这样的检查也有可能漏掉。 

</rich_text><rich_text scale="h3">7. Suspend</rich_text><rich_text>
    当wake_lock 运行 suspend()以后，  在wakelock.c的suspend()函数会被调用，这个函数首先sync文件系统，然后调用 pm_suspend(request_suspend_state)，接下来pm_suspend()就会调用enter_state()来进入 Linux的休眠流程...

1. static void suspend(struct work_struct *work)  
2. {  
3.     int ret;  
4.     int entry_event_num;  
5.     struct timespec ts_entry, ts_exit;  
6.   
7.     if (has_wake_lock(WAKE_LOCK_SUSPEND)) {  
8.         if (debug_mask &amp; DEBUG_SUSPEND)  
9.             pr_info(&quot;suspend: abort suspend\n&quot;);  
10.         return;  
11.     }  
12.   
13.     entry_event_num = current_event_num;  
14. #ifdef CONFIG_SUSPEND_SYNC_WORKQUEUE  
15.     suspend_sys_sync_queue();  
16. #else  
17.     sys_sync();  
18. #endif  
19.     if (debug_mask &amp; DEBUG_SUSPEND)  
20.         pr_info(&quot;suspend: enter suspend\n&quot;);  
21.     getnstimeofday(&amp;ts_entry);  
22.     ret = pm_suspend(requested_suspend_state);  
23.     getnstimeofday(&amp;ts_exit);  
24.   
25.     if (debug_mask &amp; DEBUG_EXIT_SUSPEND) {  
26.         struct rtc_time tm;  
27.         rtc_time_to_tm(ts_exit.tv_sec, &amp;tm);  
28.         pr_info(&quot;suspend: exit suspend, ret = %d &quot;  
29.             &quot;(%d-%02d-%02d %02d:%02d:%02d.%09lu UTC)\n&quot;, ret,  
30.             tm.tm_year + 1900, tm.tm_mon + 1, tm.tm_mday,  
31.             tm.tm_hour, tm.tm_min, tm.tm_sec, ts_exit.tv_nsec);  
32.     }  
33.   
34.     if (ts_exit.tv_sec - ts_entry.tv_sec &lt;= 1) {  
35.         ++suspend_short_count;  
36.   
37.         if (suspend_short_count == SUSPEND_BACKOFF_THRESHOLD) {  
38.             suspend_backoff();  
39.             suspend_short_count = 0;  
40.         }  
41.     } else {  
42.         suspend_short_count = 0;  
43.     }  
44.   
45.     if (current_event_num == entry_event_num) {  
46.         if (debug_mask &amp; DEBUG_SUSPEND)  
47.             pr_info(&quot;suspend: pm_suspend returned with no event\n&quot;);  
48.         wake_lock_timeout(&amp;unknown_wakeup, HZ / 2);  
49.     }  
50. }  

</rich_text><rich_text scale="h3">8. Android于标准Linux休眠的区别</rich_text><rich_text>
      pm_suspend() 虽然用enter_state()来进入标准的Linux休眠流程，但是还是有一些区别：
      当进入冻结进程的时候，android首先会检查有没有wake lock，如果没有，才会停止这些进程，因为在开始suspend和冻结进程期间有可能有人申请了wake lock，如果是这样，冻结进程会被中断。
      在suspend_late()中，会最后检查一次有没有wake  lock，这有可能是某种快速申请wake lock，并且快速释放这个锁的进程导致的，如果有这种情况， 这里会返回错误，  整个suspend就会全部放弃。如果pm_suspend()成功了，LOG的输出可以通过在kernel cmd里面增加 &quot;</rich_text><rich_text foreground="#ff0000">no_console_suspend</rich_text><rich_text>&quot; 来看到suspend和resume过程中的log输出。
      
</rich_text><node name="early_suspend" prog_lang="custom-colors" readonly="False" tags="" unique_id="17"><rich_text scale="h2">（1）添加头文件：</rich_text><rich_text>
#include &lt;linux/earlysuspend.h&gt;

</rich_text><rich_text scale="h2">（2）在特定驱动结构体中添加early_suspend结构：</rich_text><rich_text>
#ifdef CONFIG_HAS_EARLYSUSPEND
 struct early_suspend early_suspend;
 #endif
 
</rich_text><rich_text scale="h2">（3）在驱动probe函数中注册相关early_suspend结构体：</rich_text><rich_text>
#ifdef CONFIG_HAS_EARLYSUSPEND
 ftk_ts-&gt;early_suspend.level = EARLY_SUSPEND_LEVEL_BLANK_SCREEN + 1;
 ftk_ts-&gt;early_suspend.suspend = stm_ts_early_suspend;
 ftk_ts-&gt;early_suspend.resume =stm_ts_late_resume;
 register_early_suspend(&amp;ftk_ts-&gt;early_suspend);
 #endif
     所有注册到系统中的early_suspend结构都会按level值按顺序加入到全局链表early_suspend_handlers中。 
     希望执行early  suspend的设备，他的设备驱动程序需要向电源管理系统注册，该结构体用于向电源管理系统注册earlysuspend/lateresume，当电源管理系统启动suspend流程时，回调函数suspend会被调用，相反，resume的最后阶段，回调函数resume会被调用，level字段用 于调整该结构体在注册链表中的位置，suspend时，</rich_text><rich_text foreground="#ff0000">level的数值越小，回调函数的被调用的时间越早</rich_text><rich_text>，resume时则反过来。Android预先定义了3个level等级：
 
1. enum {  
2.     EARLY_SUSPEND_LEVEL_BLANK_SCREEN = 50,  
3.     EARLY_SUSPEND_LEVEL_STOP_DRAWING = 100,  
4.     EARLY_SUSPEND_LEVEL_DISABLE_FB = 150,  
5. };  
6. struct early_suspend {  
7. #ifdef CONFIG_HAS_EARLYSUSPEND  
8.     struct list_head link;  
9.     int level;  
10.     void (*suspend)(struct early_suspend *h);  
11.     void (*resume)(struct early_suspend *h);  
12. #endif  
13. };  
 
</rich_text><rich_text scale="h2">（4）在驱动remove函数取消early_suspend结构体的注册：</rich_text><rich_text>
#ifdef CONFIG_HAS_EARLYSUSPEND
 unregister_early_suspend(&amp;ts-&gt;early_suspend);
 #endif
 
</rich_text><rich_text scale="h2">（5）定义相关suspend和resume函数：</rich_text><rich_text>
#ifdef CONFIG_HAS_EARLYSUSPEND
 static void stm_ts_early_suspend(struct early_suspend *h)
 {
     struct ftk_ts *ts;
     ts = container_of(h, struct ftk_ts, early_suspend);
     stm_ts_suspend(ts-&gt;client, PMSG_SUSPEND);
 }
static void stm_ts_late_resume(struct early_suspend *h)
 {
     struct ftk_ts *ts;
     ts = container_of(h, struct ftk_ts, early_suspend);
     stm_ts_resume(ts-&gt;client);
 }
 #endif
 
</rich_text><rich_text scale="h2">（6）在系统驱动结构体中设置未使用earlysuspend的函数接口：</rich_text><rich_text>
#ifndef CONFIG_HAS_EARLYSUSPEND
 .suspend = stm_ts_suspend,
 .resume = stm_ts_resume,
 #endif
</rich_text></node><node name="wake lock" prog_lang="custom-colors" readonly="False" tags="" unique_id="18"><rich_text>    Android在标准的Linux休眠与唤醒机制上又加了一层，就是early_suspend /  late_resume。顾名思意，使用early_suspend（）进行休眠的设备，它休眠的时刻早于其他设备，使用late_resume（）唤醒 的设备，它被唤醒的时刻要晚于其他设备。这对函数通常成对出现，当内核打开了CONFIG_EARLY_SUSPEND(Android默认打开)后，就 可以使
用这组函数来代替驱动中标准的 suspend / resume接口。
        好了，讲到early_suspend和late_resume，似乎必须要扯到一种叫做wake_lock的锁定机制了。其实，单纯从某个设备的驱动程序上来讲，未必需要用到wake_lock机制，
比如我们的触摸屏驱动中使用了early_suspend，就没有使用wake_lock.
       目前，我了解到的，wake_lock的用途只有一个，那就是防止系统进入休眠（这里的休眠，指的是标准的Linux的休眠，不包含使用early_suspend（）进行休眠的设备，
使用early_suspend()的设备，在系统还有wake_lock锁的时候，也是要休眠的）。
       好吧，现在是时候分析下Android/Linux的休眠与唤醒了，虽然好多先人 都已经讲了这些，而且讲的还不错，这里我还是要提一下。
root@android:/ # ls /sys/power/                                                
 pm_async
 </rich_text><rich_text foreground="#ff0000">state</rich_text><rich_text>
 wait_for_fb_sleep
 wait_for_fb_wake
 wake_lock
 wake_unlock
 wakeup_count
       这里，我只关注state，当state 的值变化时，内核会调用

1. static ssize_t state_store(struct kobject *kobj, struct kobj_attribute *attr,  
2.                const char *buf, size_t n)  
3. {  
4. #ifdef CONFIG_SUSPEND  
5. #ifdef CONFIG_EARLYSUSPEND  
6.     suspend_state_t state = PM_SUSPEND_ON;  
7. #else  
8.     suspend_state_t state = PM_SUSPEND_STANDBY;  
9. #endif  
10.     const char * const *s;   
11. #endif  
12.     char *p;   
13.     int len;  
14.     int error = -EINVAL;  
15.   
16.     p = memchr(buf, '\n', n);   
17.     len = p ? p - buf : n;  
18.   
19.     /* First, check if we are requested to hibernate */  
20.     if (len == 4 &amp;&amp; !strncmp(buf, &quot;disk&quot;, len)) {  
21.         error = hibernate();  
22.   goto Exit;  
23.     }     
24.   
25. #ifdef CONFIG_SUSPEND  
26.     for (s = &amp;pm_states[state]; state &lt; PM_SUSPEND_MAX; s++, state++) {  
27.         if (*s &amp;&amp; len == strlen(*s) &amp;&amp; !strncmp(buf, *s, len))  
28.             break;  
29.     }     
30.     if (state &lt; PM_SUSPEND_MAX &amp;&amp; *s)   
31. #ifdef CONFIG_EARLYSUSPEND  
32.         if (state == PM_SUSPEND_ON || valid_state(state)) {  
33.             error = 0;  
34.             request_suspend_state(state);//这里，进入了Android的休眠与唤醒的处理函数  
35.         }  
36. #else  
37.         error = enter_state(state);  
38. #endif  
39. #endif  
40.   
41.  Exit:  
42.     return error ? error : n;  
43. }  
44.   
45. power_attr(state);  


 
看看1. request_suspend_state()都干了些什么事情  

1. void request_suspend_state(suspend_state_t new_state)  
2. {  
3.     unsigned long irqflags;  
4.     int old_sleep;  
5.   
6.     spin_lock_irqsave(&amp;state_lock, irqflags);  
7.     old_sleep = state &amp; SUSPEND_REQUESTED;  
8.     if (debug_mask &amp; DEBUG_USER_STATE) {  
9.         struct timespec ts;   
10.         struct rtc_time tm;   
11.         getnstimeofday(&amp;ts);  
12.         rtc_time_to_tm(ts.tv_sec, &amp;tm);  
13.         pr_info(&quot;request_suspend_state: %s (%d-&gt;%d) at %lld &quot;  
14.             &quot;(%d-%02d-%02d %02d:%02d:%02d.%09lu UTC)\n&quot;,  
15.             new_state != PM_SUSPEND_ON ? &quot;sleep&quot; : &quot;wakeup&quot;,  
16.             requested_suspend_state, new_state,  
17.             ktime_to_ns(ktime_get()),  
18.             tm.tm_year + 1900, tm.tm_mon + 1, tm.tm_mday,  
19.             tm.tm_hour, tm.tm_min, tm.tm_sec, ts.tv_nsec);  
20.     }     
21.     if (!old_sleep &amp;&amp; new_state != PM_SUSPEND_ON) {  
22.         state |= SUSPEND_REQUESTED;  
23.         queue_work(suspend_work_queue, &amp;early_suspend_work);//在休眠的时候，去遍历执行early_suspend_work这个队列  
24.     } else if (old_sleep &amp;&amp; new_state == PM_SUSPEND_ON) {  
25.         state &amp;= ~SUSPEND_REQUESTED;  
26.         wake_lock(&amp;main_wake_lock);  
27.         queue_work(suspend_work_queue, &amp;late_resume_work);//在唤醒的时候，去遍历执行late_resume_work这个队列  
28.     }     
29.     requested_suspend_state = new_state;  
30.     spin_unlock_irqrestore(&amp;state_lock, irqflags);  
31. }  

        怎么样，是不是很简单，根据用户/系统所请求的状态，去做相应的动作（休眠/唤醒）能用到的一些变量的声明在这里

1. static void early_suspend(struct work_struct *work);  
2. static void late_resume(struct work_struct *work);  
3. static DECLARE_WORK(early_suspend_work, early_suspend);  
4. static DECLARE_WORK(late_resume_work, late_resume);  
         看名字也知道了，early_suspend这个函数指针来处理early_suspend_work这条队列，late_resume 这个函数指针来处理late_resume_work这条队列。
         虽然函数early_suspend()和late_resume()的实现都非常易懂，这里还是要贴出来，因为还有些东西要分析一下。

1. static void early_suspend(struct work_struct *work)  
2. {  
3.     struct early_suspend *pos;  
4.     unsigned long irqflags;  
5.     int abort = 0;  
6.   
7.     mutex_lock(&amp;early_suspend_lock);  
8.     spin_lock_irqsave(&amp;state_lock, irqflags);  
9.     if (state == SUSPEND_REQUESTED)  
10.         state |= SUSPENDED;  
11.     else  
12.         abort = 1;  
13.     spin_unlock_irqrestore(&amp;state_lock, irqflags);  
14.   
15.     if (abort) {  
16.         if (debug_mask &amp; DEBUG_SUSPEND)  
17.             pr_info(&quot;early_suspend: abort, state %d\n&quot;, state);  
18.         mutex_unlock(&amp;early_suspend_lock);  
19.         goto abort;  
20.     }  
21.   
22.     if (debug_mask &amp; DEBUG_SUSPEND)  
23.         pr_info(&quot;early_suspend: call handlers\n&quot;);  
24.     list_for_each_entry(pos, &amp;early_suspend_handlers, link) {//这里就是关键了，遍历early_suspend_handler这条链表（在驱动中注册early_suspend的时候，都注册到这条链表上了）  
25.         if (pos-&gt;suspend != NULL) {  
26.             if (debug_mask &amp; DEBUG_VERBOSE)  
27.                 pr_info(&quot;early_suspend: calling %pf\n&quot;, pos-&gt;suspend);  
28.             pos-&gt;suspend(pos);//调用各个实现进行各设备的休眠  
29.         }  
30.     }  
31.     mutex_unlock(&amp;early_suspend_lock);  
32.   
33.     if (debug_mask &amp; DEBUG_SUSPEND)  
34.         pr_info(&quot;early_suspend: sync\n&quot;);  
35.   
36.     sys_sync();  
37. abort:  
38.     spin_lock_irqsave(&amp;state_lock, irqflags);  
39.     if (state == SUSPEND_REQUESTED_AND_SUSPENDED)  
40.         wake_unlock(&amp;main_wake_lock);// 这里很重要，别小看这个一个wake_unlock,起初我也以为这仅仅是一个释放main锁，其实里面有玄机呢。还记得wake_lock主要用来干嘛 么，用来防止系统休眠，也就是说，只要系统中其他地方还拥有wake_lock锁（类型WAKE_LOCK_SUSPEND），系统就没法进入休眠，如果 没有锁了，那就要接着走标准Linux的那一套休眠机制了  
41.     spin_unlock_irqrestore(&amp;state_lock, irqflags);  
42. }  
1.   
先跳过late_resume()。来看下wake_unlock()的实现吧

1. void wake_unlock(struct wake_lock *lock)  
2. {  
3.     int type;  
4.     unsigned long irqflags;  
5.     spin_lock_irqsave(&amp;list_lock, irqflags);  
6.     type = lock-&gt;flags &amp; WAKE_LOCK_TYPE_MASK;  
7. #ifdef CONFIG_WAKELOCK_STAT  
8.     wake_unlock_stat_locked(lock, 0);   
9. #endif  
10.     if (debug_mask &amp; DEBUG_WAKE_LOCK)  
11.         pr_info(&quot;wake_unlock: %s\n&quot;, lock-&gt;name);  
12.     lock-&gt;flags &amp;= ~(WAKE_LOCK_ACTIVE | WAKE_LOCK_AUTO_EXPIRE);  
13.     list_del(&amp;lock-&gt;link);  
14.     list_add(&amp;lock-&gt;link, &amp;inactive_locks);  
15.     if (type == WAKE_LOCK_SUSPEND) {//类型，驱动中一般只有这一种类型  
16.         long has_lock = has_wake_lock_locked(type);  
17.         if (has_lock &gt; 0) {  
18.             if (debug_mask &amp; DEBUG_EXPIRE)  
19.                 pr_info(&quot;wake_unlock: %s, start expire timer, &quot;  
20.                     &quot;%ld\n&quot;, lock-&gt;name, has_lock);  
21.             mod_timer(&amp;expire_timer, jiffies + has_lock);  
22.         } else {  
23.             if (del_timer(&amp;expire_timer))  
24.                 if (debug_mask &amp; DEBUG_EXPIRE)  
25.                     pr_info(&quot;wake_unlock: %s, stop expire &quot;  
26.                         &quot;timer\n&quot;, lock-&gt;name);  
27.             if (has_lock == 0)//如果没有锁了，要进入标准Linux的休眠机制了，咱们接着往下跟  
28.                 queue_work(suspend_work_queue, &amp;suspend_work);  
29.         }     
30.         if (lock == &amp;main_wake_lock) {  
31.             if (debug_mask &amp; DEBUG_SUSPEND)  
32.                 print_active_locks(WAKE_LOCK_SUSPEND);  
33. #ifdef CONFIG_WAKELOCK_STAT  
34.             update_sleep_wait_stats_locked(0);  
35. #endif  
36.         }     
37.     }     
38.     spin_unlock_irqrestore(&amp;list_lock, irqflags);  
39. }  
40. EXPORT_SYMBOL(wake_unlock);  


 
这里就是进入标准Linux的休眠的地方了
1. static void suspend(struct work_struct *work)  
2. {  
3.     int ret;  
4.     int entry_event_num;  
5.     struct timespec ts_entry, ts_exit;  
6.   
7.     if (has_wake_lock(WAKE_LOCK_SUSPEND)) {  
8.         if (debug_mask &amp; DEBUG_SUSPEND)  
9.             pr_info(&quot;suspend: abort suspend\n&quot;);  
10.         return;  
11.     }  
12.   
13.     entry_event_num = current_event_num;  
14.     sys_sync();  
15.     if (debug_mask &amp; DEBUG_SUSPEND)  
16.         pr_info(&quot;suspend: enter suspend\n&quot;);  
17.     getnstimeofday(&amp;ts_entry);  
18.     ret = pm_suspend(requested_suspend_state);//这里是关键点  
19.     getnstimeofday(&amp;ts_exit);  
20.   
21.     if (debug_mask &amp; DEBUG_EXIT_SUSPEND) {  
22.         struct rtc_time tm;  
23.         rtc_time_to_tm(ts_exit.tv_sec, &amp;tm);  
24.         pr_info(&quot;suspend: exit suspend, ret = %d &quot;  
25.             &quot;(%d-%02d-%02d %02d:%02d:%02d.%09lu UTC)\n&quot;, ret,  
26.             tm.tm_year + 1900, tm.tm_mon + 1, tm.tm_mday,  
27.             tm.tm_hour, tm.tm_min, tm.tm_sec, ts_exit.tv_nsec);  
28.     }  
29.   
30.     if (ts_exit.tv_sec - ts_entry.tv_sec &lt;= 1) {  
31.         ++suspend_short_count;  
32.   
33.         if (suspend_short_count == SUSPEND_BACKOFF_THRESHOLD) {  
34.             suspend_backoff();  
35.             suspend_short_count = 0;  
36.         }  
37.     } else {  
38.         suspend_short_count = 0;  
39.     }  
40.   
41.     if (current_event_num == entry_event_num) {  
42.         if (debug_mask &amp; DEBUG_SUSPEND)  
43.             pr_info(&quot;suspend: pm_suspend returned with no event\n&quot;);  
44.         wake_lock_timeout(&amp;unknown_wakeup, HZ / 2);  
45.     }  
46. }  
47. static DECLARE_WORK(suspend_work, suspend);  

1. int pm_suspend(suspend_state_t state)  
2. {  
3.     if (state &gt; PM_SUSPEND_ON &amp;&amp; state &lt; PM_SUSPEND_MAX)  
4.         return enter_state(state);//正如你所料，开始走Linux那套休眠的流程了  
5.     return -EINVAL;  
6. }  
7. EXPORT_SYMBOL(pm_suspend);  

       唤醒相关的代码就不贴 了，跟休眠类似的。下面讲下驱动中如何使用wake_lock和early_suspend，总的来说，还是挺简单的
比如在设备probe的时候做如下操作
struct early_suspend    early_suspend;
 
early_suspend.level = EARLY_SUSPEND_LEVEL_BLANK_SCREEN + 1; //等级，等级大小和suspend顺序一致，和resume顺序相反
 early_suspend.suspend = xxx_early_suspend;//指定函数指针，需自己实现
 early_suspend.resume = xxx_late_resume;
register_early_suspend(&amp;early_suspend);//注册进核心，也就是加入刚才early_suspend_handlers那个链表

 struct wake_lock    chrg_lock;
 wake_lock_init(&amp;chrg_lock, WAKE_LOCK_SUSPEND, &quot;xxx_wake_lock&quot;);//初始化类型为WAKE_LOCK_SUSPEND的wake_lock锁
#ifdef CONFIG_HAS_EARLYSUSPEND
 static void xxx_early_suspend(struct early_suspend *h)
 {
        ....
         wake_lock(&amp;chrg_lock);
       ....
 }
 
 
 static void xxx_late_resume(struct early_suspend *h)
 {
      .....
         wake_unlock(&amp;chrg_lock);
      ....
 }
 #endif
 
</rich_text></node><node name="Linux 关机和重启机制" prog_lang="custom-colors" readonly="False" tags="" unique_id="19"><rich_text>Linux 关机和重启机制
一．sys_reboot
二．apm capi
 
Linux下的关机和重启可能由两种行为引发，一是通过用户编程，另外一种是系统自己产生的信息。用户和系统进行交互的方式有两种，一种是系统调用sys_reboot，另外一个则是apm或者acpi的设备文件，通过对其操作也可以是系统关机或者重启。

</rich_text><rich_text scale="h2">一．sys_reboot</rich_text><rich_text>
    linux下关机和重启命令主要有，shutdown，reboot，halt, poweroff, telinit,和init。对于
    poweroff和reboot是halt的符号链接，不过最终都调用reboot系统调用来完成关机和重启操作，该部分代码在kernel/sys.c中。
    在调用sys_reboot时，应该注意一点，
reboot doesn't sync: do that yourself before calling this.
所以在使用之前应该手动sync命令同步磁盘。
该函数流程如下，
    i)                    检查调用者是否有合法调用reboot的权限。
    ii)                  通过魔数magic1和magic2，判断reboot系统调用是不是被偶然调用的。
    iii)                对不同的调用使用情况区分，如
        LINUX_REBOOT_CMD_RESTART, //restarting system
        LINUX_REBOOT_CMD_HATL,  // system halted 
        LINUX_REBOOT_CMD_POWER_OFF //power down
        LINUX_REBOOT_CMD_RESTART2 //接收命令字符 说明系统该如何关闭
        LINUX_REBOOT_CMD_CAD_ON/OFF //用于决定是否允许Ctrl+alt+del组合键用于关闭并重启系统。
    如果想禁止这个功能，可以在/etc/inittab文件的下面一行注释掉
    Ca:12345:ctrlatldel:/sbin/shutdown –tl –a –r now
    当然对于arm体系来说，用到的可能性较少

</rich_text><rich_text scale="h3">1.    restart</rich_text><rich_text>
    a) shutdown       对于restart而言，首先需要通过blocking_notifier_call_chain这一通知机制，将挂在reboot_notifier_list上，对于reboot操作需要通知的设备进行消息通知。
       接着通知所有的驱动总线（包括i2c,usb,spi,platform等bus），如果总线本身有shutdown操作，则先调用总线的shutdown操作，否则逐一调用总线上对应设备驱动的shutdown方法，接着清空sys文件系统（根据驱动模型思考,device_shutdown）
       然后与上述描述类似的，进行shut down all system device,同样调用的是shutdown方法。
       
       最后调用machine_start，也就是arm_pm_restart,即arm_machine_start进行重启操作。
    b) arm_machine_start       实际上最终调用的是arch_reset，对于不同的cpu，调用的arch_reset不同。
    对于x86而言，开始部分有一段SMP相关的代码，主要完成多CPU时，一个CPU完成重启，而其他CPU处于等待的状态。之后根据变量reboot_thru_bios的内容判断重启方式，这个参数是reboot_setup指定的。在通过bios重启的情况下，系统同样先设定重启模式，然后切换到实模式，通过ljmp $0xffff,$0x0完成重启。
       对于arm mx25而言，相对简单，arch_reset最后调用mxc_wd_reset函数，该函数中，通过使能wacht dog时钟，使能Wdog,并且设置watch dog ctrl reg的SRS位，即software reset signal ，让WDOG 产生一个reset signal，从而实现reset操作。（而接下来的就是arm启动流程）

</rich_text><rich_text scale="h3">2.power_off</rich_text><rich_text>
    Power_off准备操作与resetart类似，shutdown结束后，最后调用的pm_board_off,
该方法可以在板级初始化的时候进行指定。
      a) arm在machine_power_off中，如果定义了pm_board_off 方法则会调用该函数关机，根据体系不同设置，操作一般为拉低口线之类的操作。
      
      b) apm x86而如果在apm已经加载的情况下（在arm中没有，x86中实现），实际指向的是apm_power_off，在该函数里系统通过apm_info结构里的值，使用切换到实模式关机，或者使用apm_bios_call_simple函数调用保护模式下的apm接口关机两种方法。
              
    apm使用其注册的设备的ioctl接口完成apm的操作，在apm.c的do_ioctl函数中可以看见处理的分支。这里只有suspend和standby的代码，所以我们不能通过ioctl这种方法使用apm关机。 
    当用户按下POWER开关的时候，如果有apm模块，那么关机流程是由apm来处理的。apm驱动在初始化的时候启动了一个apm内核线程：apm_mainloop，系统会在这里检测到POWEROFF按键消息并且将其命名为APM_SYS_SUSPEND，以区别apm -s设置的APM_USER_SUSPEND模式。紧接着进入了apm_event_handler函数，又从apm_event_handler函数进入了check_events函数，处理函数对应的case分支上。系统同样使用了suspend函数进行关机，不过由于其它参数的原因，suspend最后调用的是关机的流程。
</rich_text></node><node name="android对休眠唤醒的实现" prog_lang="custom-colors" readonly="False" tags="" unique_id="20"><rich_text>
</rich_text><node name="(一)" prog_lang="custom-colors" readonly="False" tags="" unique_id="21"><rich_text scale="h2" weight="heavy">一、新增特性介绍</rich_text><rich_text>
 
实际上，android仍然是利用了标准linux的休眠唤醒系统，只不过添加了一些使用上的新特性，early suspend、late resume、wake lock。
 
Early suspend - 这个机制定义了在suspend的早期，关闭显示屏的时候，一些和显示屏相关的设备，比如背光、重力感应器和触摸屏等设备都应该被关掉，但是此时系统可能还有持有wake lock的任务在运行，如音乐播放，电话，或者扫描sd卡上的文件等，这个时候整个系统还不能进入真正睡眠，直到所有的wake lock都没释放。在嵌入式设备中，悲观是一个很大的电源消耗，所有android加入了这种机制。
 
Late resume - 这个机制定义了在resume的后期，也就是唤醒源已经将处理器唤醒，标准linux的唤醒流程已经走完了，在android上层系统识别出这个物理上的唤醒源是上层定义的，那么上层将会发出late resume的命令给下层，这个时候将会调用相关设备注册的late resume回调函数。
 
Wake lock - wakelock在android的电源管理系统中扮演一个核心的角色，wakelock是一种锁的机制, 只要有task拿着这个锁, 系统就无法进入休眠, 可以被用户态进程和内核线程获得。这个锁可以是有超时的或者是没有超时的, 超时的锁会在时间过去以后自动解锁。如果没有锁了或者超时了, 内核就会启动标准linux的那套休眠机制机制来进入休眠。
 
</rich_text><rich_text scale="h2" weight="heavy">二、kernel层源码解析 - early suspend 和 late resume实现</rich_text><rich_text>
相关源码：
kernel/kernel/power/main.c
kernel/kernel/power/earlysuspend.c
kernel/kernel/power/wakelock.c
kernel/kernel/power/userwakelock.c
kernel/kernel/power/suspend.c
 
之前标准的linux的sysfs的接口只需要一个state就够了，现在至少需要3个接口文件：state、wake_lock、wake_unlock。现在为了配合android为休眠唤醒添加的几种新特性，可以填入文件state的模式又多了一种：on, 标准android系统中只支持state的on和mem模式，其余的暂不支持。wake_lock和wake_unlock接口对应的读写函数在文件userwakelock.c中，对wakelock.c中的create wakelock或者release wakelock进行了封装，供用户空间来使用。
 
如果上层用户执行:echo xxx(on or mem) &gt; sys/power/state的话，将会调用到如下函数：
static ssize_t state_store(struct kobject *kobj, struct kobj_attribute *attr,
const char *buf, size_t n)
{
#ifdef CONFIG_SUSPEND // set
#ifdef CONFIG_EARLYSUSPEND    //set
       suspend_state_t state = PM_SUSPEND_ON;</rich_text><rich_text foreground="#969696">   </rich_text><rich_text>// for early suspend and late resume
#else
       suspend_state_t state = PM_SUSPEND_STANDBY;
#endif
       const char * const *s;
#endif
       char *p;
       int len;
       int error = -EINVAL;
 
       p = memchr(buf, '/n', n);
       len = p ? p - buf : n;
 
       /* First, check if we are requested to hibernate */
       if (len == 4 &amp;&amp; !strncmp(buf, &quot;disk&quot;, len)) {
              error = hibernate();  </rich_text><rich_text foreground="#969696">// </rich_text><rich_text>检查是否要求进入</rich_text><rich_text foreground="#969696">disk</rich_text><rich_text>省电模式，暂时不支持
  goto Exit;
       }
 
#ifdef CONFIG_SUSPEND        // def
       for (s = &amp;pm_states[state]; state &lt; PM_SUSPEND_MAX; s++, state++) {
              if (*s &amp;&amp; len == strlen(*s) &amp;&amp; !strncmp(buf, *s, len))
                     break;
       }
       if (state &lt; PM_SUSPEND_MAX &amp;&amp; *s)
#ifdef CONFIG_EARLYSUSPEND
              if (state == PM_SUSPEND_ON || valid_state(state)) {
</rich_text><rich_text foreground="#969696">// </rich_text><rich_text>需要经过平台</rich_text><rich_text foreground="#969696">pm.c</rich_text><rich_text>文件定义的模式支持检查函数，</rich_text><rich_text foreground="#969696">mtk</rich_text><rich_text>只支持</rich_text><rich_text foreground="#969696">mem</rich_text><rich_text>，同时如果是</rich_text><rich_text foreground="#969696">android</rich_text><rich_text>发送出来的</rich_text><rich_text foreground="#969696">late resume</rich_text><rich_text>命令</rich_text><rich_text foreground="#969696">(on)</rich_text><rich_text>，这里也会放行，往下执行
                     error = 0;
                     request_suspend_state(state);</rich_text><rich_text foreground="#969696">     </rich_text><rich_text>// android休眠唤醒的路线
              }
#else
              error = enter_state(state);</rich_text><rich_text foreground="#969696">// </rich_text><rich_text>标准</rich_text><rich_text foreground="#969696">linux</rich_text><rich_text>休眠唤醒的路线
#endif
#endif
 
 Exit:
       return error ? error : n;
}
 
@ kernel/kernel/power/earlysuspend.c
enum {
       DEBUG_USER_STATE = 1U &lt;&lt; 0,
       DEBUG_SUSPEND = 1U &lt;&lt; 2,
};
int Earlysuspend_debug_mask = DEBUG_USER_STATE;
module_param_named(Earlysuspend_debug_mask, Earlysuspend_debug_mask, int, S_IRUGO | S_IWUSR | S_IWGRP);
 
static DEFINE_MUTEX(early_suspend_lock);
static LIST_HEAD(early_suspend_handlers);
static void early_sys_sync(struct work_struct *work);
static void early_suspend(struct work_struct *work);
static void late_resume(struct work_struct *work);
static DECLARE_WORK(early_sys_sync_work, early_sys_sync);
static DECLARE_WORK(early_suspend_work, early_suspend);
static DECLARE_WORK(late_resume_work, late_resume);
static DEFINE_SPINLOCK(state_lock);
enum {
       SUSPEND_REQUESTED = 0x1,
       SUSPENDED = 0x2,
       SUSPEND_REQUESTED_AND_SUSPENDED = SUSPEND_REQUESTED | SUSPENDED,
};
static int state;             // 初始化为0
 
static DECLARE_COMPLETION(fb_drv_ready);
 
void request_suspend_state(suspend_state_t new_state)
{
       unsigned long irqflags;
       int old_sleep;
 
       spin_lock_irqsave(&amp;state_lock, irqflags);
       old_sleep = state &amp; SUSPEND_REQUESTED; </rich_text><rich_text foreground="#969696">// state = 1 or 3</rich_text><rich_text>
</rich_text><rich_text foreground="#969696">// state</rich_text><rich_text>的值会在</rich_text><rich_text foreground="#333399">0-&gt;1-&gt;3-&gt;2-&gt;0</rich_text><rich_text>循环变化，后面分析代码都可以看出这些值代表系统目前处于什么阶段，简单得说就是：正常</rich_text><rich_text foreground="#333399">-&gt;</rich_text><rich_text>准备进</rich_text><rich_text foreground="#969696">early suspend</rich_text><rich_text foreground="#333399">-&gt;</rich_text><rich_text>开始</rich_text><rich_text foreground="#969696">early suspend</rich_text><rich_text>并且对名为</rich_text><rich_text foreground="#969696">mian</rich_text><rich_text>的</rich_text><rich_text foreground="#969696">wakelock</rich_text><rich_text>解锁，如果此时没有其余</rich_text><rich_text foreground="#969696">wakelock</rich_text><rich_text>处于</rich_text><rich_text foreground="#969696">lock</rich_text><rich_text>状态，那么系统就走</rich_text><rich_text foreground="#969696">linux</rich_text><rich_text>的休眠唤醒路线让整个系统真正休眠，直到唤醒源发生，然后将处理器和</rich_text><rich_text foreground="#969696">linux</rich_text><rich_text>层唤醒。之后</rich_text><rich_text foreground="#969696">android</rich_text><rich_text>层判断本次底层醒来是由于我所定义的唤醒源引起的吗？如果不是，</rich_text><rich_text foreground="#969696">android</rich_text><rich_text>将不予理会，过段时间没有</rich_text><rich_text foreground="#969696">wakelock</rich_text><rich_text>锁，系统会再次走</rich_text><rich_text foreground="#969696">linux</rich_text><rich_text>的休眠路线进入休眠。如果是，那么</rich_text><rich_text foreground="#969696">android</rich_text><rich_text>上层就会写一个</rich_text><rich_text foreground="#969696">on</rich_text><rich_text>的指令到</rich_text><rich_text foreground="#969696">state</rich_text><rich_text>接口中，同样是会调用到函数</rich_text><rich_text foreground="#969696">request_suspend_state() </rich_text><rich_text foreground="#333399">-&gt;</rich_text><rich_text foreground="#969696"> </rich_text><rich_text>准备执行</rich_text><rich_text foreground="#969696">late resume </rich_text><rich_text foreground="#333399">-&gt; </rich_text><rich_text>开始执行</rich_text><rich_text foreground="#969696">late resume</rich_text><rich_text>，之后整个系统就这样被唤醒了。
       if (Earlysuspend_debug_mask &amp; DEBUG_USER_STATE) {
              struct timespec ts;        </rich_text><rich_text foreground="#969696">// </rich_text><rich_text>打印出</rich_text><rich_text foreground="#969696">debug</rich_text><rich_text>信息
              struct rtc_time tm;
              getnstimeofday(&amp;ts);
              rtc_time_to_tm(ts.tv_sec, &amp;tm);
              pr_info(&quot;[request_suspend_state]: %s (%d-&gt;%d) at %lld &quot;
                     &quot;(%d-%02d-%02d %02d:%02d:%02d.%09lu UTC)/n&quot;,
                     new_state != PM_SUSPEND_ON ? &quot;sleep&quot; : &quot;wakeup&quot;,
                     requested_suspend_state, new_state,
                     ktime_to_ns(ktime_get()),
                     tm.tm_year + 1900, tm.tm_mon + 1, tm.tm_mday,
                     tm.tm_hour, tm.tm_min, tm.tm_sec, ts.tv_nsec);
       }
</rich_text><rich_text foreground="#969696">// eg: [request_suspend_state]: sleep (0-&gt;3) at 97985478409 (2010-01-03 09:52:59.637902305 UTC)</rich_text><rich_text>，</rich_text><rich_text foreground="#969696"> </rich_text><rich_text>这里对时间的获取和处理，在其他地方可以参考
       </rich_text><rich_text foreground="#969696">// ready to enter earlysuspend</rich_text><rich_text>
       if (!old_sleep &amp;&amp; new_state != PM_SUSPEND_ON) { </rich_text><rich_text foreground="#969696">// susepnd</rich_text><rich_text>会进入这里
              state |= SUSPEND_REQUESTED;    </rich_text><rich_text foreground="#969696">// state = 1</rich_text><rich_text>
              pr_info(&quot;[request_suspend_state]: 
sys_sync_work_queue early_sys_sync_work/n&quot;);
              queue_work(sys_sync_work_queue, &amp;early_sys_sync_work);
              pr_info(&quot;[request_suspend_state]: suspend_work_queue early_suspend_work/n&quot;);
              queue_work(suspend_work_queue, &amp;early_suspend_work);
</rich_text><rich_text foreground="#969696">// </rich_text><rich_text>在</rich_text><rich_text foreground="#969696">wakelocks_init()</rich_text><rich_text>函数</rich_text><rich_text foreground="#969696">(wakelock.c)</rich_text><rich_text>中会创建这两个工作队列和工作者线程来专门负责处理</rich_text><rich_text foreground="#969696">sys_sync</rich_text><rich_text>和</rich_text><rich_text foreground="#969696">early suspend</rich_text><rich_text>的工作。关于工作队列的详情参考我工作队列的文章
       }
       </rich_text><rich_text foreground="#969696">// ready to enter lateresume</rich_text><rich_text>
       else if (old_sleep &amp;&amp; new_state == PM_SUSPEND_ON) {
              state &amp;= ~SUSPEND_REQUESTED; // state = 2
              wake_lock(&amp;main_wake_lock);         // 对main wakelock上锁
              pr_info(&quot;[request_suspend_state]: suspend_work_queue late_resume_work/n&quot; );
              if (queue_work(suspend_work_queue, &amp;late_resume_work)) { 
// 提交late resume的工作项
            //
            //  In order to synchronize the backlight turn on timing,
            //  block the thread and wait for fb driver late_resume()
                  //  callback function is completed
                  //
            wait_for_completion(&amp;fb_drv_ready);      
</rich_text><rich_text foreground="#969696">// </rich_text><rich_text>等待完成量</rich_text><rich_text foreground="#969696">fb_drv_ready</rich_text><rich_text>，他会在</rich_text><rich_text foreground="#969696">late resume</rich_text><rich_text>结束之后完成
        }
       }
       requested_suspend_state = new_state;      
</rich_text><rich_text foreground="#969696">// </rich_text><rich_text>存储本次休眠或者是唤醒的状态，供下次休眠或者唤醒使用
       spin_unlock_irqrestore(&amp;state_lock, irqflags);
}
 
在系统suspend的时候提交的两个工作项会陆续被执行到，那么下面就来看一下执行early suspend的关键函数。
static void early_sys_sync(struct work_struct *work)
{
       wake_lock(&amp;sys_sync_wake_lock);
       printk(&quot;[sys_sync work] start/n&quot;);
       sys_sync();    </rich_text><rich_text foreground="#969696">// </rich_text><rich_text>同步文件系统
       printk(&quot;[sys_sync wrok] done/n&quot;);
       wake_unlock(&amp;sys_sync_wake_lock);
}
 
static void early_suspend(struct work_struct *work)
{
       struct early_suspend *pos;
       unsigned long irqflags;
       int abort = 0;
 
       mutex_lock(&amp;early_suspend_lock);
       spin_lock_irqsave(&amp;state_lock, irqflags);
       if (state == SUSPEND_REQUESTED)
              state |= SUSPENDED; </rich_text><rich_text foreground="#969696">// state = 3</rich_text><rich_text>
       else
              abort = 1;
       spin_unlock_irqrestore(&amp;state_lock, irqflags);
 
       if (abort) {     </rich_text><rich_text foreground="#969696">// suspend </rich_text><rich_text>中止退出
              if (Earlysuspend_debug_mask &amp; DEBUG_SUSPEND)
                     pr_info(&quot;[early_suspend]: abort, state %d/n&quot;, state);
              mutex_unlock(&amp;early_suspend_lock);
              goto abort;
       }
 
       if (Earlysuspend_debug_mask &amp; DEBUG_SUSPEND)
              pr_info(&quot;[early_suspend]: call handlers/n&quot;);
       list_for_each_entry(pos, &amp;early_suspend_handlers, link) {
              if (pos-&gt;suspend != NULL)
                     pos-&gt;suspend(pos);
       }
// 函数register_early_suspend()会将每一个early suspend项以优先级大小注册到链表early_suspend_handlers中，这里就是一次取出，然后执行对应的early suspend回调函数
       mutex_unlock(&amp;early_suspend_lock);
 
       // Remove sys_sync from early_suspend, 
       // and use work queue to complete sys_sync
 
abort:
       spin_lock_irqsave(&amp;state_lock, irqflags);
       if (state == SUSPEND_REQUESTED_AND_SUSPENDED)
       {
              pr_info(&quot;[early_suspend]: wake_unlock(main)/n&quot;);
              wake_unlock(&amp;main_wake_lock);
</rich_text><rich_text foreground="#969696">// main wakelock </rich_text><rich_text>解锁。看到这里，好像系统执行了</rich_text><rich_text foreground="#969696">early suspend</rich_text><rich_text>之后就没有往下执行标准</rich_text><rich_text foreground="#969696">linux</rich_text><rich_text>的</rich_text><rich_text foreground="#969696">suspend</rich_text><rich_text>流程了，其实不是，</rich_text><rich_text foreground="#969696">android</rich_text><rich_text>的做法是，不是你执行完了</rich_text><rich_text foreground="#969696">early suspend  </rich_text><rich_text>的回调就可以马上走标准</rich_text><rich_text foreground="#969696">linux</rich_text><rich_text>的</rich_text><rich_text foreground="#969696">suspend</rich_text><rich_text>流程，而是会检查还有没有</rich_text><rich_text foreground="#969696">wakelock</rich_text><rich_text>被持有，如果所有</rich_text><rich_text foreground="#969696">wakelock</rich_text><rich_text>全是解锁状态，那么就会执行标准</rich_text><rich_text foreground="#969696">linux</rich_text><rich_text>的</rich_text><rich_text foreground="#969696">suspend</rich_text><rich_text>步骤。
}
       spin_unlock_irqrestore(&amp;state_lock, irqflags);
}
 
static void late_resume(struct work_struct *work)
{
       struct early_suspend *pos;
       unsigned long irqflags;
       int abort = 0;
    int completed = 0;
 
       mutex_lock(&amp;early_suspend_lock);
       spin_lock_irqsave(&amp;state_lock, irqflags);
 
    // return back from suspend
       if (state == SUSPENDED)
              state &amp;= ~SUSPENDED;    </rich_text><rich_text foreground="#969696">// state = 0</rich_text><rich_text>
       else
              abort = 1;
       spin_unlock_irqrestore(&amp;state_lock, irqflags);
 
       if (abort) {
              if (Earlysuspend_debug_mask &amp; DEBUG_SUSPEND)
                     pr_info(&quot;[late_resume]: abort, state %d/n&quot;, state);
              goto abort;
       }
       if (Earlysuspend_debug_mask &amp; DEBUG_SUSPEND)
              pr_info(&quot;[late_resume]: call handlers/n&quot;);
       list_for_each_entry_reverse(pos, &amp;early_suspend_handlers, link)
    {
        if (!completed &amp;&amp; pos-&gt;level &lt; EARLY_SUSPEND_LEVEL_DISABLE_FB) {
            complete(&amp;fb_drv_ready);
            completed = 1;
        }
              if (pos-&gt;resume != NULL)
                     pos-&gt;resume(pos);
    }
// 以和early suspend的逆序执行链表early_suspend_handlers上的late resume回调函数
if (Earlysuspend_debug_mask &amp; DEBUG_SUSPEND)
              pr_info(&quot;[late_resume]: done/n&quot;);
abort:
    if (!completed)
        complete(&amp;fb_drv_ready);   // 设置完成量ok
     mutex_unlock(&amp;early_suspend_lock);
}
 
</rich_text></node><node name="(二)" prog_lang="custom-colors" readonly="False" tags="" unique_id="22"><rich_text scale="h2" weight="heavy">三、kernel层源码解析 - wakelock的重要地位</rich_text><rich_text>
wakelock在android的休眠唤醒机制中扮演着及其重要的角色，主要源码位于文件:kernel/kernel/power/wakelock.c，kernel/include/linux/wakelock.h中。
 
wakelocks_init()函数所做的工作是整个wakelock可以工作起来的基础，所有这里先说说这个函数。
static int __init wakelocks_init(void)
{
       int ret;
       int i;
 
       for (i = 0; i &lt; ARRAY_SIZE(active_wake_locks); i++)
              INIT_LIST_HEAD(&amp;active_wake_locks[i]);
       // 初始化active_wake_locks数组中的两个类型锁链表: WAKE_LOCK_SUSPEND,WAKE_LOCK_IDLE
 
#ifdef CONFIG_WAKELOCK_STAT        // defined
       wake_lock_init(&amp;deleted_wake_locks, WAKE_LOCK_SUSPEND,
                     &quot;deleted_wake_locks&quot;);
       // 初始化wakelock deleted_wake_locks，同时将其加入到非活动锁链表中
#endif
       wake_lock_init(&amp;main_wake_lock, WAKE_LOCK_SUSPEND, &quot;main&quot;);
       wake_lock_init(&amp;sys_sync_wake_lock, WAKE_LOCK_SUSPEND, &quot;sys_sync&quot;);
       wake_lock(&amp;main_wake_lock);
       wake_lock_init(&amp;unknown_wakeup, WAKE_LOCK_SUSPEND, &quot;unknown_wakeups&quot;);
       // 初始化wakelock: main, sys_sync, unknown_wakeups, 同时将其加入到非活动锁链表中
       // 给 main_wake_lock 加锁
       
       ret = platform_device_register(&amp;power_device);
       if (ret) {
              pr_err(&quot;[wakelocks_init]: platform_device_register failed/n&quot;);
              goto err_platform_device_register;
       }
       ret = platform_driver_register(&amp;power_driver);
       if (ret) {
              pr_err(&quot;[wakelocks_init]: platform_driver_register failed/n&quot;);
              goto err_platform_driver_register;
       }
 
       // 新建工作队列和工作者内核线程: sys_sync_work_queue, fs_sync
       //                                                      suspend_work_queue, suspend
       sys_sync_work_queue = create_singlethread_workqueue(&quot;fs_sync&quot;);
       if (sys_sync_work_queue == NULL) {
              pr_err(&quot;[wakelocks_init] fs_sync workqueue create failed/n&quot;);
       }
 
       suspend_work_queue = create_singlethread_workqueue(&quot;suspend&quot;);
       if (suspend_work_queue == NULL) {
              ret = -ENOMEM;
              goto err_suspend_work_queue;
       }
 
#ifdef CONFIG_WAKELOCK_STAT
       proc_create(&quot;wakelocks&quot;, S_IRUGO, NULL, &amp;wakelock_stats_fops);
       // 创建proc接口
#endif
 
       return 0;
 
err_suspend_work_queue:
       platform_driver_unregister(&amp;power_driver);
err_platform_driver_register:
       platform_device_unregister(&amp;power_device);
err_platform_device_register:
       wake_lock_destroy(&amp;unknown_wakeup);
       wake_lock_destroy(&amp;main_wake_lock);
#ifdef CONFIG_WAKELOCK_STAT
       wake_lock_destroy(&amp;deleted_wake_locks);
#endif
       return ret;
}
 
可以看到该初始化函数中新建了几个wakelock: deleted_wake_locks、main_wake_lock、sys_sync_wake_lock、unknown_wakeup，他们全部都是WAKE_LOCK_SUSPEND类型的wakelock，说到这里不得不提到wakelock的两种类型了：
</rich_text><rich_text scale="h3" weight="heavy">1.WAKE_LOCK_SUSPEND – 这种锁如果被某个task持有，那么系统将无法进入休眠。
2.WAKE_LOCK_IDLE – 这种锁不会影响到系统进入休眠，但是如果这种锁被持有，那么系统将无法进入idle空闲模式。</rich_text><rich_text>
 
不过常用的所类型还是WAKE_LOCK_SUSPEND，包括userwakelock.c提供给用户空间的新建wakelock的接口，都是建立的第一种锁。另外系统为了分开管理这两种不同类型的锁，建立了两个链表来统一链接不同类型的锁：active_wake_locks[],这个是具有两个链表头的数组，元素0是挂接WAKE_LOCK_SUSPEND类型的锁，而元素1就是挂接WAKE_LOCK_IDLE类型的wakelock了。
 
       接着上面说，这个初始化函数新建这些锁之后，直接将主锁(main_wake_lock)给上锁了,其余都是非锁状态。新建wakelock使用函数wake_lock_init()，该函数设置锁的名字，类型，最后将新建的锁挂接到一个专门链接这些非锁状态的链表inactive_locks上(新建的wakelock初期都是出于非锁状态的，除非显示调用函数wake_lock来上锁)。接着如果使用函数wake_lock()来给特定的wakelock上锁的话，会将该锁从链表inactive_locks上移动到对应类型的专用链表上active_wake_locks[type]上。
       
       wakelock有两种形式的锁：超时锁和非超时锁，这两种形式的锁都是使用函数wake_lock_init()来初始化，只是在上锁的时候会有一点点差别，超时锁使用函数wake_lock_timeout(),而非超时锁使用函数wake_lock(), 这个两个函数会最终调用到同一个函数wake_lock_internal(),该函数依靠传入的不同参数来选择不同的路径来工作。值得注意的是，非超时锁必须手工解锁，否则系统永远不能进入睡眠。下面是wake_lock_internal()函数的片段：
       if (!(lock-&gt;flags &amp; WAKE_LOCK_ACTIVE)) 
              lock-&gt;flags |= WAKE_LOCK_ACTIVE;// wakelock状态为inactive，则更改为active
       …
       if (has_timeout) { // wake_lock_timeout()会传入1
              if (wakelock_debug_mask &amp; DEBUG_WAKE_LOCK)
                     pr_info(&quot;[wake_lock_internal]: %s, type %d, timeout %ld.%03lu/n&quot;,
                            lock-&gt;name, type, timeout / HZ,
                            (timeout % HZ) * MSEC_PER_SEC / HZ);
              lock-&gt;expires = jiffies + timeout;       // 设置超时时间
              lock-&gt;flags |= WAKE_LOCK_AUTO_EXPIRE;       // 超时锁标志
              list_add_tail(&amp;lock-&gt;link, &amp;active_wake_locks[type]);
       } 
    // acquire a non-timeout wakelock 添加一个非超时锁
       else {      // wake_lock ()会传入0
              if (wakelock_debug_mask &amp; DEBUG_WAKE_LOCK)
                     pr_info(&quot;[wake_lock_internal]: %s, type %d/n&quot;, lock-&gt;name, type);
              lock-&gt;expires = LONG_MAX;    // 设置成超时时间最大值
              lock-&gt;flags &amp;= ~WAKE_LOCK_AUTO_EXPIRE; // 非超时锁标志
              list_add(&amp;lock-&gt;link, &amp;active_wake_locks[type]);
              // 将刚刚设置的非超时锁加到对应类型的活动锁链表中
       }
       
       解锁的时候，这两种形式的锁所使用函数都是一样了：wake_unlock()，该函数中会首先作如下操作：
       lock-&gt;flags &amp;= ~(WAKE_LOCK_ACTIVE | WAKE_LOCK_AUTO_EXPIRE);
       // 清除锁活动标志和自动超时标志
       list_del(&amp;lock-&gt;link);   // 从锁对应的活动链表上摘除
       list_add(&amp;lock-&gt;link, &amp;inactive_locks);    
// 将unlock的锁挂接到非活动链表inactive_locks上
 
前面已经说了只有类型为WAKE_LOCK_SUSPEND的wakelock被上锁才会阻止系统进入suspend，那么也就是说只要链表active_wake_locks[WAKE_LOCK_SUSPEND]为NULL，那么系统就可以执行suspend的流程了。Android对linux的改造，让其可以在三种情况下进入linux的标准suspend的流程：

</rich_text><rich_text scale="h3" weight="heavy">1. wake_unlock()，</rich_text><rich_text>
    这个应该是最容易想到的，只要系统有对WAKE_LOCK_SUSPEND类型的wakelock解锁的动作，都有可能会进入suspend流程开始休眠，为什么是有可能呢？因为可能还有超时锁没有被超时解锁。下面看一下代码片段：
void wake_unlock(struct wake_lock *lock)
{
       …
       if (type == WAKE_LOCK_SUSPEND) // 貌似只在处理这个类型的wakelock
    {
              long has_lock = has_wake_lock_locked(type);
              // 这个函数蛮重要，它来检查type类型的链表上是否还有锁被上锁了。
        // 其返回值如果是0，说明没有该类型的锁被持有了；返回非0表明就是这个类型的活动链表上还存在超时锁但是没有非超时锁了，这个返回值就是当前时间距离最后超时的锁超时时间的jiffies值；如果返回-1，那表明还有该类型的非超时锁被持有。
        if (wakelock_debug_mask &amp; DEBUG_WAKE_LOCK)
            pr_info(&quot;[wake_unlock]: has_lock = 0x%x/n&quot; , has_lock);        
              if (has_lock &gt; 0) {
                     if (wakelock_debug_mask &amp; DEBUG_EXPIRE)
                            pr_info(&quot;[wake_unlock]: %s, start expire timer, &quot;
                                   &quot;%ld/n&quot;, lock-&gt;name, has_lock);
                     mod_timer(&amp;expire_timer, jiffies + has_lock);
// 修改定时器的超时值并add该定时器
              } 
              else // 已经没有超时锁了
              {
                     if (del_timer(&amp;expire_timer))            // 删除定时器
                            if (wakelock_debug_mask &amp; DEBUG_EXPIRE)
                                   pr_info(&quot;[wake_unlock]: %s, stop expire &quot;
                                          &quot;timer/n&quot;, lock-&gt;name);
                     if (has_lock == 0) 
// !=0,表明还有该类型的非超时锁被持有，现在还不能进入suspend
                     {
                      pr_info(&quot;[wake_unlock]: (%s) suspend_work_queue suspend_work/n&quot; , lock-&gt;name);
                            queue_work(suspend_work_queue, &amp;suspend_work);
                            // 提交suspend的工作项，开始执行标准linux的suspend流程
                     }     
              }
              …
       }
       spin_unlock_irqrestore(&amp;list_lock, irqflags);
}
 
</rich_text><rich_text scale="h3" weight="heavy">2.  超时锁超时之后，定时器的回调函数会执行会查看是否有其他的wakelock, 如果没有, 就在这里让系统进入睡眠。</rich_text><rich_text>
static void expire_wake_locks(unsigned long data)
{
       long has_lock;
       unsigned long irqflags;
       if (debug_mask &amp; DEBUG_EXPIRE)
              pr_info(&quot;expire_wake_locks: start/n&quot;);
       spin_lock_irqsave(&amp;list_lock, irqflags);
       if (debug_mask &amp; DEBUG_SUSPEND)
              print_active_locks(WAKE_LOCK_SUSPEND);
       has_lock = has_wake_lock_locked(WAKE_LOCK_SUSPEND);
       if (debug_mask &amp; DEBUG_EXPIRE)
              pr_info(&quot;expire_wake_locks: done, has_lock %ld/n&quot;, has_lock);
       if (has_lock == 0)
// 如果没有SUSPEND类型的wakelock处于active，那么将调用suspend
              queue_work(suspend_work_queue, &amp;suspend_work);
       spin_unlock_irqrestore(&amp;list_lock, irqflags);
}
       
static DEFINE_TIMER(expire_timer, expire_wake_locks, 0, 0);
列出以下一个重要的函数源码：
static long has_wake_lock_locked(int type)
{
       struct wake_lock *lock, *n;
       long max_timeout = 0;
 
       BUG_ON(type &gt;= WAKE_LOCK_TYPE_COUNT);
       list_for_each_entry_safe(lock, n, &amp;active_wake_locks[type], link) {
              if (lock-&gt;flags &amp; WAKE_LOCK_AUTO_EXPIRE) {
                     long timeout = lock-&gt;expires - jiffies;
                     if (timeout &lt;= 0)
                            expire_wake_lock(lock);
                     else if (timeout &gt; max_timeout)
                            max_timeout = timeout;
              } else
                     return -1;
       }
       return max_timeout;
}
 
</rich_text><rich_text scale="h3" weight="heavy">3. 这个可能有人觉得匪夷所思，就是在wake_lock{_ _timeout}()函数中，调用了内部函数wake_lock_internal()。</rich_text><rich_text>
    这里只有在对超时锁上锁的时候才有可能进入休眠，如果对一个费超时锁上锁的话，那么就没有必要去检查活动链表了。
static void wake_lock_internal(
       struct wake_lock *lock, long timeout, int has_timeout)
{
…
if (type == WAKE_LOCK_SUSPEND) {
              current_event_num++;
#ifdef CONFIG_WAKELOCK_STAT
              if (lock == &amp;main_wake_lock)
                     update_sleep_wait_stats_locked(1);
              else if (!wake_lock_active(&amp;main_wake_lock))
                     update_sleep_wait_stats_locked(0);
#endif
              if (has_timeout)   // 超时锁的时候传进来的是1
                     expire_in = has_wake_lock_locked(type);
                     // 检查当前锁类型链表上是否还有锁处于active的状态，无返回0
              else
                     expire_in = -1; 
// 如果是非超时锁的话，这里直接赋值-1，省去了活动链表检查步骤了
              if (expire_in &gt; 0) {
                     if (debug_mask &amp; DEBUG_EXPIRE)
                            pr_info(&quot;wake_lock: %s, start expire timer, &quot;
                                   &quot;%ld/n&quot;, lock-&gt;name, expire_in);
                     // modify the time wakelock is expired
                     mod_timer(&amp;expire_timer, jiffies + expire_in);
              } else {
                     if (del_timer(&amp;expire_timer))
                            if (debug_mask &amp; DEBUG_EXPIRE)
                                   pr_info(&quot;wake_lock: %s, stop expire timer/n&quot;,
                                          lock-&gt;name);
                     if (expire_in == 0) // 没有锁处于active状态后，准备调用suspend了
                     {
                      pr_info(&quot;[wake_lock]: suspend_work_queue suspend_work/n &quot;);
                            queue_work(suspend_work_queue, &amp;suspend_work);
                     }
              }
       }
       spin_unlock_irqrestore(&amp;list_lock, irqflags);
}
 
下面是suspend的工作项，经过上面三种情况的检查，ok之后将会提交该工作项给工作队列suspend_work_queue，如下：
static void suspend(struct work_struct *work)
{
       int ret;
       int entry_event_num;
 
    // there are still some wakelock
       if (has_wake_lock(WAKE_LOCK_SUSPEND)) {
              if (wakelock_debug_mask &amp; DEBUG_SUSPEND)
                     pr_info(&quot;[suspend]: abort suspend/n&quot;);
              return;
       }
 
       entry_event_num = current_event_num;
       sys_sync();
       if (debug_mask &amp; DEBUG_SUSPEND)
              pr_info(&quot;suspend: enter suspend/n&quot;);
       ret = pm_suspend(requested_suspend_state);
       // requested_suspend_state这个全局变量在函数request_suspend_state()中被设置，也就是执行了eraly suspend或者late resume之后，主要是为suspend保留请求的省电状态。
       if (debug_mask &amp; DEBUG_EXIT_SUSPEND) {
              struct timespec ts;
              struct rtc_time tm;
              getnstimeofday(&amp;ts);
              rtc_time_to_tm(ts.tv_sec, &amp;tm);
              pr_info(&quot;suspend: exit suspend, ret = %d &quot;
                     &quot;(%d-%02d-%02d %02d:%02d:%02d.%09lu UTC)/n&quot;, ret,
                     tm.tm_year + 1900, tm.tm_mon + 1, tm.tm_mday,
                     tm.tm_hour, tm.tm_min, tm.tm_sec, ts.tv_nsec);
       }
       if (current_event_num == entry_event_num) {
              if (debug_mask &amp; DEBUG_SUSPEND)
                     pr_info(&quot;suspend: pm_suspend returned with no event/n&quot;);
              wake_lock_timeout(&amp;unknown_wakeup, HZ / 2);
       }
}
static DECLARE_WORK(suspend_work, suspend);
 
@kernel/kernel/power/suspend.c
int pm_suspend(suspend_state_t state)
{
       if (state &gt; PM_SUSPEND_ON &amp;&amp; state &lt;= PM_SUSPEND_MAX)
              return enter_state(state);
              // 标准linux的suspend流程函数
return -EINVAL;
}
EXPORT_SYMBOL(pm_suspend);
 
Wakelock的机制被文件userwakelock.c中的code封装成了sys的接口sys/power/wake_lock和sys/power/wake_unlock文件，那么上层如果需要新建wakelock或者注销wakelock，或者是解锁wakelock，都是操作这两个sys接口文件。
</rich_text></node><node name="(三)" prog_lang="custom-colors" readonly="False" tags="" unique_id="23"><rich_text scale="h2" weight="heavy">四、android层源码解析</rich_text><rich_text>
    在linux之上经过android的软件堆层层封装,最终在上层的java应用程序中使用。休眠唤醒也是从最上层发出的命令，然后一层一层地将参数解析，往最底层传，最后走上标准linux的休眠唤醒之路。
    这一部分将会初略分析休眠唤醒机制上linux之上所走的路线。
       
    在linux之上，存在一个hal层，专门做和linux内核设备打交道的事情，这里也不例外。休眠唤醒机制的hal层源码位于：

@hardware/libhardware_legacy/power/power.c
该文件源码比较简单，下面列举重点片段：
enum {
    ACQUIRE_PARTIAL_WAKE_LOCK = 0,
    RELEASE_WAKE_LOCK,
    REQUEST_STATE,
    OUR_FD_COUNT
};
const char * const NEW_PATHS[] = {
    &quot;/sys/power/wake_lock&quot;,
    &quot;/sys/power/wake_unlock&quot;,
    &quot;/sys/power/state&quot;
};
static int g_initialized = 0;
static int g_fds[OUR_FD_COUNT];
static const char *off_state = &quot;mem&quot;;
static const char *on_state = &quot;on&quot;;
 
static int  open_file_descriptors(const char * const paths[])
{
    int i;
    for (i=0; i&lt;OUR_FD_COUNT; i++) {
        int fd = open(paths[i], O_RDWR);
        if (fd &lt; 0) {
            fprintf(stderr, &quot;fatal error opening /&quot;%s/&quot;/n&quot;, paths[i]);
            g_error = errno;
            return -1;
        }
        g_fds[i] = fd;
    }
 
    g_error = 0;
    return 0;
}
 
static inline void  initialize_fds(void)
{
    if (g_initialized == 0) {
        if(open_file_descriptors(NEW_PATHS) &lt; 0) {
            open_file_descriptors(OLD_PATHS);
            on_state = &quot;wake&quot;;
            off_state = &quot;standby&quot;;
        }
        g_initialized = 1;
    }
}
 
int  acquire_wake_lock(int lock, const char* id)
{
    initialize_fds();
    if (g_error) return g_error;
    int fd;
 
    if (lock == PARTIAL_WAKE_LOCK) {   // 上层传下来的lock type
        fd = g_fds[ACQUIRE_PARTIAL_WAKE_LOCK];
    }
    else {
        return EINVAL;
    }
 
    return write(fd, id, strlen(id));
}
 
int  release_wake_lock(const char* id)
{
    initialize_fds();
 
//    LOGI(&quot;release_wake_lock id='%s'/n&quot;, id);
 
    if (g_error) return g_error;
 
    ssize_t len = write(g_fds[RELEASE_WAKE_LOCK], id, strlen(id));
    return len &gt;= 0;
}
 
int set_screen_state(int on)
{
    QEMU_FALLBACK(set_screen_state(on));
    LOGI(&quot;*** set_screen_state %d&quot;, on);
 
    initialize_fds();
    if (g_error) return g_error;
 
    char buf[32];
    int len;
    if(on)
        len = sprintf(buf, on_state);
    else
        len = sprintf(buf, off_state);
    len = write(g_fds[REQUEST_STATE], buf, len);
    if(len &lt; 0) {
        LOGE(&quot;Failed setting last user activity: g_error=%d/n&quot;, g_error);
    }
    return 0;
}
 
Hal层的代码在jni层中被使用，源码位于：frameworks/base/core/jni/android_os_Power.cpp，代码片段如下：
static void  acquireWakeLock(JNIEnv *env, jobject clazz, jint lock, jstring idObj)
{
    if (idObj == NULL) {
        throw_NullPointerException(env, &quot;id is null&quot;);
        return ;
    }
 
    const char *id = env-&gt;GetStringUTFChars(idObj, NULL);
 
    acquire_wake_lock(lock, id);
 
    env-&gt;ReleaseStringUTFChars(idObj, id);
}// 对wakelock加锁函数
static void releaseWakeLock(JNIEnv *env, jobject clazz, jstring idObj)
{
    if (idObj == NULL) {
        throw_NullPointerException(env, &quot;id is null&quot;);
        return ;
    }
 
    const char *id = env-&gt;GetStringUTFChars(idObj, NULL);
 
    release_wake_lock(id);
 
    env-&gt;ReleaseStringUTFChars(idObj, id);
 
}// 对wakelock解锁函数
static int setScreenState(JNIEnv *env, jobject clazz, jboolean on)
{
    return set_screen_state(on);
}// 休眠唤醒的函数
 
Jni的方法需要注册到上层才可以使用，同时也需要在上层的对应java类中声明了native才可以使用。那么这里的方法在java中对应的声明在哪里呢？frameworks/base/core/java/android/os/Power.java，该文件定义一个java类，如下：
public class Power
{
    // can't instantiate this class
    private Power()
    {
    }
       
    /**
     * Wake lock that ensures that the CPU is running.  The screen might
     * not be on.
     */
    public static final int PARTIAL_WAKE_LOCK = 1;
       
    /**
     * Wake lock that ensures that the screen is on.
     */
    public static final int FULL_WAKE_LOCK = 2;
       
    public static native void acquireWakeLock(int lock, String id);
    public static native void releaseWakeLock(String id);
       … 
     /**
     * Turn the screen on or off
     *
     * @param on Whether you want the screen on or off
     */
    public static native int setScreenState(boolean on);
       
    …
}
              
       声明的jni接口应该是被java server在使用，这里就是专门的电源管理服务：PowerManagerService使用，具体源码位置在：frameworks/base/services/java/com/android/server/PowerManagerService.java。android在最上层还提供了现场的android.os.PowerManager类
(frameworks/base/core/java/android/os/PowerManager.java)来供app使用，PowerManager类会调用java服务PowerManagerService的方法来完成与wakelock相关的工作。
       
@ frameworks/base/core/java/android/os/PowerManager.java
类PowerManager中内嵌了一个WakeLock类，另外还定义了wakelock的类型，下面是代码片段：
public class PowerManager
{
           private static final String TAG = &quot;PowerManager&quot;;
       …
        /**
     * Wake lock that ensures that the CPU is running.  The screen might
     * not be on.
     */
    public static final int PARTIAL_WAKE_LOCK = WAKE_BIT_CPU_STRONG;
 
    /**
     * Wake lock that ensures that the screen and keyboard are on at
     * full brightness.
     */
    public static final int FULL_WAKE_LOCK = WAKE_BIT_CPU_WEAK | WAKE_BIT_SCREEN_BRIGHT | WAKE_BIT_KEYBOARD_BRIGHT;
       
    /**
     * Wake lock that ensures that the screen is on at full brightness;
     * the keyboard backlight will be allowed to go off.
     */
    public static final int SCREEN_BRIGHT_WAKE_LOCK = WAKE_BIT_CPU_WEAK | WAKE_BIT_SCREEN_BRIGHT;
 
    /**
     * Wake lock that ensures that the screen is on (but may be dimmed);
     * the keyboard backlight will be allowed to go off.
     */
    public static final int SCREEN_DIM_WAKE_LOCK = WAKE_BIT_CPU_WEAK | WAKE_BIT_SCREEN_DIM;
 
    /**
     * Wake lock that turns the screen off when the proximity sensor activates.
     * Since not all devices have proximity sensors, use
     * {@link #getSupportedWakeLockFlags() getSupportedWakeLockFlags()} to determine if
     * this wake lock mode is supported.
     *
     * {@hide}
     */
    public static final int PROXIMITY_SCREEN_OFF_WAKE_LOCK 
        = WAKE_BIT_PROXIMITY_SCREEN_OFF;
       …
    public class WakeLock
    {
       …
        WakeLock(int flags, String tag)
        {
            switch (flags &amp; LOCK_MASK) {
            case PARTIAL_WAKE_LOCK:
            case SCREEN_DIM_WAKE_LOCK:
            case SCREEN_BRIGHT_WAKE_LOCK:
            case FULL_WAKE_LOCK:
            case PROXIMITY_SCREEN_OFF_WAKE_LOCK:
                break;
            default:
                throw new IllegalArgumentException();
            }
 
            mFlags = flags;
            mTag = tag;
            mToken = new Binder();
        }
       public void acquire()
        {
            synchronized (mToken) {
                if (!mRefCounted || mCount++ == 0) {
                    try {
                        mService.acquireWakeLock(mFlags, mToken, mTag);
                    } catch (RemoteException e) {
                    }
                    mHeld = true;
                }
            }
        }
        public void release(int flags)
        {
            synchronized (mToken) {
                if (!mRefCounted || --mCount == 0) {
                    try {
                        mService.releaseWakeLock(mToken, flags);
                    } catch (RemoteException e) {
                    }
                    mHeld = false;
                }
                if (mCount &lt; 0) {
                    throw new RuntimeException(&quot;WakeLock under-locked &quot; + mTag);
                }
            }
        }
    …
    }
    …
    public WakeLock newWakeLock(int flags, String tag)
    {
        if (tag == null) {
            throw new NullPointerException(&quot;tag is 
                null in PowerManager.newWakeLock&quot;);
        }
        return new WakeLock(flags, tag);
    }
    public void goToSleep(long time) 
    {
        try {
            mService.goToSleep(time);
        } catch (RemoteException e) {
        }
    }
    …
    public PowerManager(IPowerManager service, Handler handler)
    {
        mService = service;
        mHandler = handler;
    }
 
    IPowerManager mService;
    Handler mHandler;
}

应用实例：
PowerManager pm = (PowerManager)getSystemService(Context.POWER_SERVICE);
PowerManager.WakeLock wl = 
pm.newWakeLock(PowerManager.SCREEN_DIM_WAKE_LOCK, &quot;Tag&quot;);
wl.acquire();  //申请锁这个里面会调用PowerManagerService里面acquireWakeLock()
…
wl.release(); //释放锁，显示的释放，如果申请的锁不在此释放系统就不会进入休眠。
 
接下来就会调用到java服务PowerManagerService中：
public void acquireWakeLock(int flags, IBinder lock, String tag) {
        int uid = Binder.getCallingUid();
        if (uid != Process.myUid()) {
          mContext.enforceCallingOrSelfPermission(android.Manifest.permission.WAKE_LOCK, null);
        }
        long ident = Binder.clearCallingIdentity();
        try {
            synchronized (mLocks) {
                acquireWakeLockLocked(flags, lock, uid, tag);       // 内部方法
            }
        } finally {
            Binder.restoreCallingIdentity(ident);
        }
}
 
acquireWakeLockLocked(flags, lock, uid, tag)会调用函数power类的方法：
Power.acquireWakeLock(Power.PARTIAL_WAKE_LOCK,PARTIAL_NAME)。
 
public void releaseWakeLock(IBinder lock, int flags) {
        int uid = Binder.getCallingUid();
        if (uid != Process.myUid()) {
            mContext.enforceCallingOrSelfPermission(android.Manifest.permission.WAKE_LOCK, null);
        }
 
        synchronized (mLocks) {
            releaseWakeLockLocked(lock, flags, false);
        }
}
releaseWakeLockLocked(lock, flags, false)函数会调用power类的方法：
       Power.releaseWakeLock(PARTIAL_NAME);
 
上层休眠唤醒都是调用PowerManagerService类的方法：
goToSleep()
       à goToSleepWithReason()
              à goToSleepLocked()
                     à setPowerState()
                            à setScreenStateLocked()
                                   à Power.setScreenState()
                                          à jni方法
Android层的代码分析得不是很详细，这里只关注框架和流程。下图是网上的一个框架,可以参考一下:
</rich_text><rich_text justification="left"></rich_text><rich_text>
</rich_text><encoded_png char_offset="9735"></encoded_png></node></node><node name="suspend过程分析" prog_lang="custom-colors" readonly="False" tags="" unique_id="24"><rich_text> 前面我们分析了休眠的第一个阶段即浅度休眠，现在我们继续看休眠的第二个阶段 — 深度休眠。在深度休眠的过程中系统会首先冻结所有可以冻结的进程，然后依次挂起所有设备的电源，挂起顺序与设备注册的顺序相反，这样保证了设备之间电源的依赖性；直至最后进入省电模式，等待用户或者RTC唤醒；在唤醒过程中则会按照设备注册的顺序依次恢复每个设备的电源进入正常工作状态，解冻相关的进程，然后再进行浅度休眠的唤醒流程。
</rich_text><rich_text scale="h2" weight="heavy"> 1、深度休眠入口</rich_text><rich_text>
 根据wake_lock一节的分析我们知道driver层进入深度休眠的入口有4个，分别为expire_timer、wake_lock、 wake_lock_timeout、wake_unlock，这几个入口函数将根据相应的条件启动suspend_work里面的 pm_suspend()函数进入深度休眠流程，代码在linux/kernel/power/suspend.c中：
 
1. // 进入深度休眠流程  
2. int enter_state(suspend_state_t state)  
3. {  
4.     int error;  
5.     // 判断平台是否支持该状态  
6.     if (!valid_state(state))  
7.         return -ENODEV;  
8.   
9.     if (!mutex_trylock(&amp;pm_mutex))  
10.         return -EBUSY;  
11.     // 同步缓存  
12.     printk(KERN_INFO &quot;PM: Syncing filesystems ... &quot;);  
13.     sys_sync();  
14.     printk(&quot;done.\n&quot;);  
15.   
16.     pr_debug(&quot;PM: Preparing system for %s sleep\n&quot;, pm_states[state]);  
17.     // 做好休眠准备  
18.     error = suspend_prepare();  
19.     if (error)  
20.         goto Unlock;  
21.     // suspend_test  
22.     if (suspend_test(TEST_FREEZER))  
23.         goto Finish;  
24.   
25.     pr_debug(&quot;PM: Entering %s sleep\n&quot;, pm_states[state]);  
26.     // 设备休眠  
27.     error = suspend_devices_and_enter(state);  
28.   
29.  Finish:  
30.     pr_debug(&quot;PM: Finishing wakeup.\n&quot;);  
31.     suspend_finish();  
32.  Unlock:  
33.     mutex_unlock(&amp;pm_mutex);  
34.     return error;  
35. }  
36.   
37. int pm_suspend(suspend_state_t state)  
38. {  
39.     if (state &gt; PM_SUSPEND_ON &amp;&amp; state &lt;= PM_SUSPEND_MAX)  
40.         return enter_state(state);  
41.     return -EINVAL;  
42. }  
43. EXPORT_SYMBOL(pm_suspend);  
 在enter_state()中首先进入状态的判断，根据平台的特性判断是否支持此状态；然后再同步缓存；接着调用suspend_prepare()冻结大部分进程；然后再通过suspend_devices_and_enter()开始挂起设备。
 
</rich_text><rich_text scale="h2" weight="heavy"> 2、冻结进程</rich_text><rich_text>

1. static int suspend_prepare(void)  
2. {  
3.     int error;  
4.   
5.     if (!suspend_ops || !suspend_ops-&gt;enter)  
6.         return -EPERM;  
7.   
8.     pm_prepare_console();  
9.   
10.     // 通知进行休眠准备  
11.     error = pm_notifier_call_chain(PM_SUSPEND_PREPARE);  
12.     if (error)  
13.         goto Finish;  
14.     // 禁止usermodehelper  
15.     error = usermodehelper_disable();  
16.     if (error)  
17.         goto Finish;  
18.     // 冻结所有可以冻结的进程  
19.     error = suspend_freeze_processes();  
20.     if (!error)  
21.         return 0;  
22.   
23.     // 解冻所有进程  
24.     suspend_thaw_processes();  
25.     // 使能usermodehelper  
26.     usermodehelper_enable();  
27.  Finish:  
28.     // 通知休眠结束  
29.     pm_notifier_call_chain(PM_POST_SUSPEND);  
30.     pm_restore_console();  
31.     return error;  
32. }  
 这里有一个notifier机制后面要专门分析下。
 
</rich_text><rich_text scale="h2" weight="heavy"> 3、挂起设备</rich_text><rich_text>
1. int suspend_devices_and_enter(suspend_state_t state)  
2. {  
3.     int error;  
4.   
5.     if (!suspend_ops)  
6.         return -ENOSYS;  
7.     // 处理器的休眠开始函数  
8.     if (suspend_ops-&gt;begin) {  
9.         error = suspend_ops-&gt;begin(state);  
10.         if (error)  
11.             goto Close;  
12.     }  
13.     // 休眠串口  
14.     suspend_console();  
15.     suspend_test_start();  
16.     // 设备休眠  
17.     error = dpm_suspend_start(PMSG_SUSPEND);  
18.     if (error) {  
19.         printk(KERN_ERR &quot;PM: Some devices failed to suspend\n&quot;);  
20.         goto Recover_platform;  
21.     }  
22.     suspend_test_finish(&quot;suspend devices&quot;);  
23.     if (suspend_test(TEST_DEVICES))  
24.         goto Recover_platform;  
25.     // 处理器休眠  
26.     suspend_enter(state);  
27.   
28.  Resume_devices:  
29.     suspend_test_start();  
30.     // 设备唤醒  
31.     dpm_resume_end(PMSG_RESUME);  
32.     suspend_test_finish(&quot;resume devices&quot;);  
33.     // 唤醒串口  
34.     resume_console();  
35.  Close:  
36.     // 处理器的休眠结束函数  
37.     if (suspend_ops-&gt;end)  
38.         suspend_ops-&gt;end();  
39.     return error;  
40.   
41.  Recover_platform:  
42.     if (suspend_ops-&gt;recover)  
43.         suspend_ops-&gt;recover();  
44.     goto Resume_devices;  
45. }  
可以看到设备挂起流程先从处理器自身开始，平台一般不需要做特殊的处理；接着关闭串口，然后调用dpm_suspend_start()开始挂起设备，如果成功挂起所有设备则调用suspend_enter()挂起处理器。挂起设备部分的代码在linux/driver/base/power/main.c中 
1. int dpm_suspend_start(pm_message_t state)  
2. {  
3.     int error;  
4.   
5.     might_sleep();  
6.     error = dpm_prepare(state);  
7.     if (!error)  
8.         error = dpm_suspend(state);  
9.     return error;  
10. }  
11. EXPORT_SYMBOL_GPL(dpm_suspend_start);  
挂起设备分为2个步骤，首先执行设备的prepare函数，然后再执行suspend函数。
1. // 函数将会调用所有的非sysdev设备的prepare()接口  
2. static int dpm_prepare(pm_message_t state)  
3. {  
4.     struct list_head list;  
5.     int error = 0;  
6.   
7.     INIT_LIST_HEAD(&amp;list);  
8.     mutex_lock(&amp;dpm_list_mtx);  
9.     transition_started = true;  
10.     // 遍历设备链表  
11.     while (!list_empty(&amp;dpm_list)) {  
12.         // 从最先初始化的节点开始遍历  
13.         struct device *dev = to_device(dpm_list.next);  
14.         // 获取设备  
15.         get_device(dev);  
16.         // 更新设备状态  
17.         dev-&gt;power.status = DPM_PREPARING;  
18.         mutex_unlock(&amp;dpm_list_mtx);  
19.   
20.         pm_runtime_get_noresume(dev);  
21.         // 在系统休眠期间有可能受到唤醒请求  
22.         if (pm_runtime_barrier(dev) &amp;&amp; device_may_wakeup(dev)) {  
23.             /* Wake-up requested during system sleep transition. */  
24.             pm_runtime_put_noidle(dev);  
25.             error = -EBUSY;  
26.         } else {  // 执行prepare()函数  
27.             error = device_prepare(dev, state);  
28.         }  
29.   
30.         mutex_lock(&amp;dpm_list_mtx);  
31.         // 如果出错则跳出循环  
32.         if (error) {  
33.             dev-&gt;power.status = DPM_ON;  
34.             if (error == -EAGAIN) {  
35.                 put_device(dev);  
36.                 error = 0;  
37.                 continue;  
38.             }  
39.             printk(KERN_ERR &quot;PM: Failed to prepare device %s &quot;  
40.                 &quot;for power transition: error %d\n&quot;,  
41.                 kobject_name(&amp;dev-&gt;kobj), error);  
42.             put_device(dev);  
43.             break;  
44.         }  
45.         // 更新状态  
46.         dev-&gt;power.status = DPM_SUSPENDING;  
47.         if (!list_empty(&amp;dev-&gt;power.entry))  
48.             // 将设备节点移动到list链表中  
49.             list_move_tail(&amp;dev-&gt;power.entry, &amp;list);  
50.         put_device(dev);  
51.     }  
52.     // 拼接链表  
53.     list_splice(&amp;list, &amp;dpm_list);  
54.     mutex_unlock(&amp;dpm_list_mtx);  
55.     return error;  
56. }  
可以看到函数将遍历dpm_list链表，并执行每个设备的prepare函数，内核规定prepare函数的实现不能改变硬件的状态；系统中每一个设备注册时都将被加入dpm_list链表的尾部，所以链表排序为设备注册的顺序。
1. static int dpm_suspend(pm_message_t state)  
2. {  
3.     struct list_head list;  
4.     int error = 0;  
5.   
6.     INIT_LIST_HEAD(&amp;list);  
7.     mutex_lock(&amp;dpm_list_mtx);  
8.     while (!list_empty(&amp;dpm_list)) {  
9.         // 逆序遍历链表,即先suspend后注册的设备,符合设备与父设备电源挂起的先后原则  
10.         struct device *dev = to_device(dpm_list.prev);  
11.   
12.         get_device(dev);  
13.         mutex_unlock(&amp;dpm_list_mtx);  
14.   
15.         dpm_drv_wdset(dev);  
16.         error = device_suspend(dev, state);  
17.         dpm_drv_wdclr(dev);  
18.   
19.         mutex_lock(&amp;dpm_list_mtx);  
20.         if (error) {  
21.             pm_dev_err(dev, state, &quot;&quot;, error);  
22.             put_device(dev);  
23.             break;  
24.         }  
25.         dev-&gt;power.status = DPM_OFF;  
26.         if (!list_empty(&amp;dev-&gt;power.entry))  
27.             list_move(&amp;dev-&gt;power.entry, &amp;list);  
28.         put_device(dev);  
29.     }  
30.     list_splice(&amp;list, dpm_list.prev);  
31.     mutex_unlock(&amp;dpm_list_mtx);  
32.     return error;  
33. }  
 函数将设备按照注册顺序反向挂起，挂起执行的流程如下：
1. static int device_suspend(struct device *dev, pm_message_t state)  
2. {  
3.     int error = 0;  
4.   
5.     down(&amp;dev-&gt;sem);  
6.   
7.     if (dev-&gt;class) {  // 类的suspend优先  
8.         if (dev-&gt;class-&gt;pm) {  
9.             pm_dev_dbg(dev, state, &quot;class &quot;);  
10.             error = pm_op(dev, dev-&gt;class-&gt;pm, state);  
11.         } else if (dev-&gt;class-&gt;suspend) {  
12.             pm_dev_dbg(dev, state, &quot;legacy class &quot;);  
13.             error = dev-&gt;class-&gt;suspend(dev, state);  
14.             suspend_report_result(dev-&gt;class-&gt;suspend, error);  
15.         }  
16.         if (error)  
17.             goto End;  
18.     }  
19.   
20.     if (dev-&gt;type) {  // device_type次之  
21.         if (dev-&gt;type-&gt;pm) {  
22.             pm_dev_dbg(dev, state, &quot;type &quot;);  
23.             error = pm_op(dev, dev-&gt;type-&gt;pm, state);  
24.         }  
25.         if (error)  
26.             goto End;  
27.     }  
28.   
29.     if (dev-&gt;bus) {  // bus优先级最低  
30.         if (dev-&gt;bus-&gt;pm) {  
31.             pm_dev_dbg(dev, state, &quot;&quot;);  
32.             error = pm_op(dev, dev-&gt;bus-&gt;pm, state);  
33.         } else if (dev-&gt;bus-&gt;suspend) {  
34.             pm_dev_dbg(dev, state, &quot;legacy &quot;);  
35.             error = dev-&gt;bus-&gt;suspend(dev, state);  
36.             suspend_report_result(dev-&gt;bus-&gt;suspend, error);  
37.         }  
38.     }  
39.  End:  
40.     up(&amp;dev-&gt;sem);  
41.   
42.     return error;  
43. }  
可以看到类中的suspend优先级最高，之后是device_type的，最后是bus的，大部分设备只注册了bus下的suspend。

</rich_text><rich_text scale="h2" weight="heavy">4、挂起处理器</rich_text><rich_text>
1. static int suspend_enter(suspend_state_t state)  
2. {  
3.     int error;  
4.     // 处理器的休眠准备函数  
5.     if (suspend_ops-&gt;prepare) {  
6.         error = suspend_ops-&gt;prepare();  
7.         if (error)  
8.             return error;  
9.     }  
10.     // 执行非sysdev的late suspend函数  
11.     error = dpm_suspend_noirq(PMSG_SUSPEND);  
12.     if (error) {  
13.         printk(KERN_ERR &quot;PM: Some devices failed to power down\n&quot;);  
14.         goto Platfrom_finish;  
15.     }  
16.     // 处理器休眠最后的准备  
17.     if (suspend_ops-&gt;prepare_late) {  
18.         error = suspend_ops-&gt;prepare_late();  
19.         if (error)  
20.             goto Power_up_devices;  
21.     }  
22.   
23.     if (suspend_test(TEST_PLATFORM))  
24.         goto Platform_wake;  
25.     // 关闭非启动cpu  
26.     error = disable_nonboot_cpus();  
27.     if (error || suspend_test(TEST_CPUS))  
28.         goto Enable_cpus;  
29.     // 挂起中断  
30.     arch_suspend_disable_irqs();  
31.     BUG_ON(!irqs_disabled());  
32.     // 挂起sysdev  
33.     error = sysdev_suspend(PMSG_SUSPEND);  
34.     if (!error) {  
35.         if (!suspend_test(TEST_CORE))  
36.             // 处理器的休眠进入函数,休眠流程运行至此  
37.             error = suspend_ops-&gt;enter(state);  
38.         // 唤醒sysdev  
39.         sysdev_resume();  
40.     }  
41.     // 使能中断  
42.     arch_suspend_enable_irqs();  
43.     BUG_ON(irqs_disabled());  
44.   
45.  Enable_cpus:  
46.     // 使能非启动cpu  
47.     enable_nonboot_cpus();  
48.   
49.  Platform_wake:  
50.     // 处理器开始唤醒  
51.     if (suspend_ops-&gt;wake)  
52.         suspend_ops-&gt;wake();  
53.   
54.  Power_up_devices:  
55.     // 执行非sysdev的early resume函数  
56.     dpm_resume_noirq(PMSG_RESUME);  
57.   
58.  Platfrom_finish:  
59.     // 处理器休眠结束  
60.     if (suspend_ops-&gt;finish)  
61.         suspend_ops-&gt;finish();  
62.   
63.     return error;  
64. }  
 在这个阶段首先看处理器是否需要做一些准备，接下来执行非sysdev的late suspend函数，然后处理器做休眠前最后的准备、关闭非启动cpu、挂起中断，再挂起sysdev，最后进入处理器的挂起函数，至此休眠流程结束，处理器等待用户或者RTC唤醒。
 
</rich_text><rich_text scale="h2"> </rich_text><rich_text scale="h2" weight="heavy">附1、late suspend</rich_text><rich_text>
 在这里我们看到了一种新的suspend机制 — late  suspend，是在所有的suspend执行完后再开始执行，接口为dev-&gt;bus-&gt;pm-&gt;suspend_noirq；这样 early_suspend、suspend以及late suspend构成了suspend的三部曲，late suspend是在中断关闭的情况下进行的；前面我们分析的wake_lock就有用到，用于检测在suspend阶段是否有锁被激活。late suspend的实现如下：
 
 
1. int dpm_suspend_noirq(pm_message_t state)  
2. {  
3.     struct device *dev;  
4.     int error = 0;  
5.   
6.     suspend_device_irqs();  // 关闭除唤醒系统以外的所有中断  
7.     mutex_lock(&amp;dpm_list_mtx);  
8.     list_for_each_entry_reverse(dev, &amp;dpm_list, power.entry) {  
9.         // 执行所有设备的late suspend函数  
10.         error = device_suspend_noirq(dev, state);  
11.         if (error) {  
12.             pm_dev_err(dev, state, &quot; late&quot;, error);  
13.             break;  
14.         }  
15.         dev-&gt;power.status = DPM_OFF_IRQ;  
16.     }  
17.     mutex_unlock(&amp;dpm_list_mtx);  
18.     if (error)  
19.         dpm_resume_noirq(resume_event(state));  
20.     return error;  
21. }  
22. EXPORT_SYMBOL_GPL(dpm_suspend_noirq);  
 
</rich_text><rich_text scale="h2" weight="heavy"> 附2、中断关闭流程</rich_text><rich_text>
在late suspend机制中我们看到了休眠流程中关闭系统中断的地方： 
1. void suspend_device_irqs(void)  
2. {  
3.     struct irq_desc *desc;  
4.     int irq;  
5.   
6.     for_each_irq_desc(irq, desc) {  // 遍历系统的中断  
7.         unsigned long flags;  
8.   
9.         spin_lock_irqsave(&amp;desc-&gt;lock, flags);  
10.         __disable_irq(desc, irq, true);  // 关闭中断  
11.         spin_unlock_irqrestore(&amp;desc-&gt;lock, flags);  
12.     }  
13.   
14.     for_each_irq_desc(irq, desc)  
15.         if (desc-&gt;status &amp; IRQ_SUSPENDED)  
16.             synchronize_irq(irq);  
17. }  
18. EXPORT_SYMBOL_GPL(suspend_device_irqs);  
函数调用了__disable_irq()来关闭中断，我们看一下这个函数的实现： 
 
1. void __disable_irq(struct irq_desc *desc, unsigned int irq, bool suspend)  
2. {  
3.     if (suspend) {  
4.         // 如果中断没有被激活或者中断的IRQF_TIMER标志被置位则不关闭中断  
5.         // 在以后的内核版本中这个标志位被换成了IRQF_NO_SUSPEND  
6.         // 新版的IRQF_TIMER = (__IRQF_TIMER | IRQF_NO_SUSPEND)  
7.         if (!desc-&gt;action || (desc-&gt;action-&gt;flags &amp; IRQF_TIMER))  
8.             return;  
9.         desc-&gt;status |= IRQ_SUSPENDED;  
10.     }  
11.     // 判断中断是否被打开  
12.     if (!desc-&gt;depth++) {  
13.         // 更新标志位  
14.         desc-&gt;status |= IRQ_DISABLED;  
15.         // 关闭中断  
16.         desc-&gt;chip-&gt;disable(irq);  
17.     }  
18. }  
可以看到如果该中断没有被激活或者中断的IRQF_TIMER标志被置位就不会关闭中断，在新的内核版本中增加了专门的 IRQF_NO_SUSPEND 标志位，用来置位在休眠状态下唤醒系统的中断，如RTC、按键等；如果是其他中断则将打开的中断关闭掉。 附3、dpm_list链表
 dpm_list是内核中用于设备电源管理的链表，设备注册时通过一系列的调用 device_register()  -&gt; device_add() -&gt; device_pm_add()  最后在device_pm_add()中将设备加入dpm_list链表中：
 
 
1. // 设备创建时都会调用的函数,将设备加入dpm_list链表  
2. void device_pm_add(struct device *dev)  
3. {  
4.     pr_debug(&quot;PM: Adding info for %s:%s\n&quot;,  
5.          dev-&gt;bus ? dev-&gt;bus-&gt;name : &quot;No Bus&quot;,  
6.          kobject_name(&amp;dev-&gt;kobj));  
7.     mutex_lock(&amp;dpm_list_mtx);  
8.     if (dev-&gt;parent) {  
9.         if (dev-&gt;parent-&gt;power.status &gt;= DPM_SUSPENDING)  
10.             dev_warn(dev, &quot;parent %s should not be sleeping\n&quot;,  
11.                  dev_name(dev-&gt;parent));  
12.     } else if (transition_started) {  
13.         /* 
14.          * We refuse to register parentless devices while a PM 
15.          * transition is in progress in order to avoid leaving them 
16.          * unhandled down the road 
17.          */  
18.         dev_WARN(dev, &quot;Parentless device registered during a PM transaction\n&quot;);  
19.     }  
20.     // 将设备节点添加到链表尾部,即设备按注册的先后顺序从链表头部到尾部  
21.     list_add_tail(&amp;dev-&gt;power.entry, &amp;dpm_list);  
22.     mutex_unlock(&amp;dpm_list_mtx);  
23. }  
而设备注销的时候会调用device_pm_remove()将设备从dpm_list链表中移除： 
 
1. // 设备注销时都会调用的函数,将设备从dpm_list链表中移除  
2. void device_pm_remove(struct device *dev)  
3. {  
4.     pr_debug(&quot;PM: Removing info for %s:%s\n&quot;,  
5.          dev-&gt;bus ? dev-&gt;bus-&gt;name : &quot;No Bus&quot;,  
6.          kobject_name(&amp;dev-&gt;kobj));  
7.     mutex_lock(&amp;dpm_list_mtx);  
8.     list_del_init(&amp;dev-&gt;power.entry);  
9.     mutex_unlock(&amp;dpm_list_mtx);  
10.     pm_runtime_remove(dev);  
11. }
</rich_text></node></node><node name="switch module" prog_lang="custom-colors" readonly="False" tags="" unique_id="25"><rich_text>
    switch是Android引进的一个新驱动，用于检测一些开关量。比如检测耳机插入和ＵＳＢ设备插入等。
 
</rich_text><rich_text scale="h2">Switch的构架原理</rich_text><rich_text>
    switch模块包含两部分内容：首先是switch class，它在Android中是作为一个module来实现的，可以进行动态加载；其次是 switch class中的一个具体的switch设备switch gpio，它表示针对gpio的一个switch设备，switch gpio  是基于platform device框架的，它们的实现分别位于下面两个源代码文件中：
 －　drivers\switch\switch_class.c
 －　drivers\swithc\switch_gpio.c
 switch的运作方式是在sysfs文件系统中创建相应的entry，用户可以通过sysfs与之交互，也可以通过uevent机制与之交互，从而检测switch的状态。
 
</rich_text><rich_text scale="h3">1.  Switch class的实现</rich_text><rich_text>
 switch class的实现对应于switch_class.c文件，首先需要分析switch设备的结构体，它位于include/linux/switch.h中，其结构体switch_dev的定义如下：
 struct switch_dev {
     const char *name;
     struct device *dev;
     int index;
     int state;
     ssize_t (*print_name)(struct switch_dev *sdev, char *buf);
     ssize_t (*print_state)(struct switch_dev *sdev, char *buf);
 };
 其中name表示设备的名称；dev表示具体的设备对象；由于系统中可能存在多个switch设备，index则表示该设备是index个被注册的 switch设备；state表示当前设备的状态；另外的两个函数指针都是用于操作sysfs文件系统的，其中print_name函数用于在sysfs 中显示设备名称不，而print_state函数则用于显示设备的状态。　该结构体非常简单，下面我们继续分析具体的实现机制。
 我们同样可以在switch_class.c中发现如下的初始化操作和退出操作：
 static int __init switch_class_init(void)
 {
    return create_switch_class();
 }
 
 static void __exit switch_clas_exit(void)
 {
    class_destroy(switch_class);
 }
 module_init(switch_class_init);
 module_exit(switch_class_exit);
 整个操作都非常简单，初始化函数switch_class_init会调用create_switch_class来创建一个设备类，其具体实现如下：
 static int craete_switch_class(void)
 {
     if (!switch_class) {
        switch_class =class_create(THIS_MODULE, &quot;switch&quot;);
        if (IS_ERR(switch_class))
            return PTR_ERR(switch_class);
            
        atomic_set(&amp;deivce_count, 0);
     }
     
     return 0;
 }
 该函数通过调用class_create函数来创建一个switch设备类文件，创建之后通过atomic_set函数来设备设备的计数。
 执行退出操作时，直接通过class_destroy函数来销毁初始化时创建的设备类。
 我们说过，switch_class只是一个供所有具体的switch设备使用的“基础类”，因此，它提供了switch设备注册和缷载的函数 switch_dev_register和switch_dev_unregister。这里首先来分析注册函数的实现，定义如下：
 int switch_dev_register(structswitch_dev *sdev)
 {
     int ret;
     
     //检测switch_class是否被创建
     if (!switch_class) {
         ret = create_switch_class();
         if (ret &lt; 0)
            return ret;
     }
     
     //保存索引
     sdev-&gt;index =atomic_inc_return(&amp;device_count);
     
     //创建设备
     sdev-&gt;dev =device_create(switch_class, NULL,MKDEV(0, sdev-&gt;index), NULL,sdev-&gt;name);
     if (IS_ERR(sdev-&gt;dev))
        return PTR_ERR(sdev-&gt;dev);
        
     //创建设备文件用于输出设备状态
     ret = device_create_file(sdev-&gt;dev,&amp;dev_attr_name);
     if (ret &lt; 0)
     goto err_create_file_2;
     
     //设置数据
     dev_set_drvdata(sdev-&gt;dev, sdev);
     sdev-&gt;state = 0;
     return 0;
     
     //出现错误，移除文件
err_create_file_2 :
     device_remove_file(sdev-&gt;dev,&amp;dev_attr_state);
     
     //出现错误，销毁switch_class
err_create_file_1:
     device_destroy(switch_class, MKDEV(0,sdev-&gt;index));
     printk(KERN_ERR &quot;switch: Failed toregister driver %s\n&quot;, sdev-&gt;name);
     
     return ret;
 }
 EXPORT_SYMBOL_GPL(switch_dev_register);
 
 该函数用于创建一个具体的switch设备，其流程是：首先，判断是否已经创建switch_class,如果没有，则创建switch_class；其 次，取得要创建的设备的索引，然后通过device_create创建设备；最后，通过device_create_file函数在sysfs中分别创建 两个entry，如果创建失败，则分别删除已经创建的文件或者switch_class，一个用于输出设备状态state；另一个用于输出设备名称 name。我们将详细介绍dev_set_drvdata，因为在linux内核中它也非常常见，它是一个内联函数，定义于include/linux /device.h中，代码如下：
 static inline void dev_set_drvdata(struct device *dev, void *data)
 {
    dev-&gt;driver_data = data;
 }
 所以，上面的switch_dev_register函数中使用它是表示sdev已经赋值到sdev-&gt;dev-&gt;driver_data中。分析完了注册函数，下面我们来看一下卸载函数switch_dev_unregister，其定义如下：
 void switch_dev_unregister(struct switch_dev *sdev)
 {
     device_remove_file(sdev-&gt;dev,&amp;dev_attr_name);
     device_remove_file(sdev-&gt;dev,&amp;dev_attr_state);
     device_destroy(switch_class, MKDEV(0,sdev-&gt;index));
     dev_set_drvdata(sdev-&gt;dev, NULL);
 }
 EXPORT_SYMBOL_GPL(switch_dev_unregister);
 该函数主要用于释放注册时所创建的设备和空间。首先，通过device_remove_file函数删除用于输出状态和名称的entry；然后，销毁 switch_class；最后，再次使用dev_set_drvdata将sdev-&gt;dev-&gt;driver_data设置为ＮＵＬＬ；
 在初始化时我们创建了输出设备状态和名称的文件，那么我们就需要实现显示名称和状态的两个函数state_show和name_show。当用户读取 sysfs中对应的switch entry(/sys/class/#dev_name/name和/sys/class/#dev_name /state)时，系统会自动调用这两个函数为用户返回switch设备的名称和状态，其函数定义如下：
 static ssize_t state_show(structdevice *dev, struct device_attribute *attr, char *buf)
 {
     //得到switch_dev设备数据
     struct switch_dev *sdev = (struct switch_dev *)dev_get_drvdata(dev);
     
     //安全性检查
     if (sdev-&gt;print_state) {
         //输出状态
         int ret = sdev-&gt;print_state(sdev,buf);
         if (ret &gt;= 0)
            return ret;
     }
     
     return sprintf(buf, &quot;%d\n&quot;,sdev-&gt;state);
 }
 
 static ssize_t name_show(struct device *dev, struct device_attribute *attr, char *buf)
 {
     struct switch_dev *sdev = (struct switch_dev *)dev_get_drvdata(dev);
     
     if (sdev-&gt;print_name) {
         //输出名字
         int ret = sdev-&gt;print_name(sdev,buf);
         if (ret &gt;= 0)
            return ret;
     }
     return sprintf(buf, &quot;%s\n&quot;, sdev-&gt;name);
 }
 static DEVICE_ATTR(state, S_IRUGO |S_IWUSR, state_show, NULL);
 static DEVICE_ATTR(name, S_IRUGO |S_IWUSR, name_show, NULL);
 
 这两个函数中都使用了dev_get_drvdata来取得switch设备数据，输出状态使用了print_state函数，输出名称使用了print_name函数。不知道大家是否还有印象，这两个函数是定义在switch_dev中的两个函数指针。
 既然switch设备有状态，那么就需要对状态进行操作，主要包括获取状态和设置状态。获取状态的操作很简单，它是switch.h中的一个内联函数，直接返回设备的状态，定义如下：
 static inline int switch_get_state(struct switch_dev *sdev)
 {
    return sdev-&gt;state;
 }
 
 设置状态的操作则稍微复杂一点，下面是设置设备状态的函数switch_set_state的实现：
 void switch_set_state(struct switch_dev *sdev, int state)
 {
     charname_buf[120];
     charstate_buf[120];
     char*prop_buf;
     char *envp[3];
     int env_offset= 0;
     int length;
     
     //判断当前状态
     if(sdev-&gt;state != state) {
         //改变状态
         sdev-&gt;state= state;
         prop_buf =(char *)get_zeroed_page(GFP_KERNEL);
         if (prop_buf) {
             //显示名称
             length =name_show(sdev-&gt;dev, NULL, prop_buf);
             if (length &gt;0) {
                 if (prop_buf[length – 1] == '\n')
                    prop_buf[length– 1] = 0;
                 sprintf(name_buf,sizeof(name_buf),&quot;SWITCH_NAME=%s&quot;, prop_buf);
                 envp[env_offset++]= name_buf;
             }
         
             //显示状态
             length =state_show(sdev-&gt;dev, NULL, prop_buf);
             if (length &gt;0) {
                 if (prop_buf[length – 1] == '\n')
                    prop_buf[length– 1] = 0;
                 snprintf(state_buf,sizeof(state_buf), &quot;SWITCH_STATE=%s&quot;, prop_buf);
                 envp[env_offset++]= state_buf;
             }
             envp[env_offset]= NULL;
             //触发uevent事件
             kobject_uevent_env(&amp;sdev-&gt;dev-&gt;kobj,KOBJ_CHANGE, envp);
             free_page((unsignedlong)prop_buf);
         } else {
             printk(KERN_ERR &quot;out of memory in switch_set_state\n&quot;);
             kobject_uevent(&amp;sdev-&gt;dev-&gt;kobj,KOBJ_CHANGE);
         }
    }
 }
 EXPORT_SYMBOL_GPL(switch_set_state);
 该函数用于设置当前设备的状态。开始之前，首先检测当前设备的状态是否与要设置的状态相同，如果相同，则不需要再次设置；否则，调用 get_zeroed_page()返回一片已经用０擦写过的内存页，并将其转化为指定的类型(char*)，用于显示状态和名称，并将其写入到 state_buf和name_buf缓冲区中一并作为uevent事件的信息，以用来通知用户的当前switch设备的名称和状态，最后通过 kobject_uevent_env和参数envp发送uevent事件。
 
</rich_text><rich_text scale="h3">1.  Gpio switch设备驱动</rich_text><rich_text>
 上面分析了switch模块中switch class的实现，下面就来分析一个具体的gpio的switch设备驱动的实现。首先，我们来看一下其设备信息的结构体，如下所示；
 struct gpio_switch_data {
     struct switch_dev sdev;
     unsigned gpio;
     const char *name_on;
     const char *name_off;
     const char *state_on;
     const char *state_off;
     int irq;
     struct work_struct work;
 };
 该结构体非常简单，这里需要说明的是其中４个char*的成员变量，它们是设备名称和状态的开关，判断是否需要输出设备的名称和状态。sdev表示一个 switch设备；gpio表示gpio电平；irq表示gpio终端指示；work用于表示gpio_switch_work工作，具体分析时我们还会介绍其细节。
 
 另外，还有一个结构体gpio_switch_platform_data用来储存gpio_switch设备的相关数据，其定义如下：
 struct gpio_switch_platform_data {
     const char *name; //设备名称
     unsigned gpio; //电平
     const char *name_on;
     const char *name_off;
     const char *state_on;
     const char *state_off;
 };
 该结构体的数据和gpio_switch_data中的数据所表达的意思几乎差不多，只是多了一个设备的名称，其实就是表示gpioswitch设备的platform_data数据。下面我们将分析其具体实现。　
 
 其初始化和退出过程就不详细介绍了，具体实现如下：
 static struct platform_driver gpio_switch_driver = {
     .probe = gpio_switch_probe,
     .remove =__devexit_p(gpio_switch_remove),
     .driver = {
        .name = “switch-gpio”,
        .owner = THIS_MODULE,
    },
 };
 static int __init gpio_switch_init(void)
 {
    return platform_driver_register(&amp;gpio_switch_driver);
 }
 
 static void __exit gpio_switch_exit(void)
 {
    platform_driver_unregister(&amp;gpio_switch_driver);
 }
 module_init(gpio_switch_init);
 module_exit(gpio_switch_exit);
 
 由于gpio_switch是基于platform device/driver框架的，因此初始化时会通过gpio_switch_init来调用 platform_driver_register，然后进入gpio_switch_driver所指定的gpio_switch_probe函数中完 成初始化过程。gpio_switch_driver中还指定了驱动的名称和owner，以及设备退出时需要处理gpio_switch_remove。 因为我们说过，switch class在Android中是作为一个module来实现的，所以”.owner”被指定为THIS_MODULE。
 我们主要来分析初始化函数gpio_switch_probe的实现，如下所示:
 static int gpio_switch_probe(struct platform_device *pdev)
 {
     //取得gpioswitch的platform_data数据的使用权
     struct gpio_switch_platform_data *pdata = pdev-&gt;dev.platform_data;
     struct gpio_switch_data *switch_data;
     int ret = 0;
     
     if (!pdata)
        return -EBUSY;
        
     //创建gpio_switch
     switch_data = kzalloc(sizeof(struct gpio_switch_data), GFP_KERNEL);
     if (switch_data)
        return -ENOMEM;
        
     //初始化gpio_switch
     switch_data-&gt;sdev.name =pdata-&gt;name;
     switch_data-&gt;gpio = pdata-&gt;gpio;
     switch_data-&gt;name_on =pdata-&gt;name_on;
     switch_data-&gt;name_off =pdata-&gt;name_off;
     switch_data-&gt;state_on =pdata-&gt;state_on;
     switch_data-&gt;state_off =pdata-&gt;state_off;
     switch_data-&gt;sdev.print_state =switch_gpio_print_state;
     //注册switch设备switch_dev
     ret =switch_dev_register(&amp;switch_data-&gt;sdev);
     if (ret &lt; 0)
        goto erro_request_gpio;
        
     //设置gpio方向为输入
     ret =gpio_direction_input(switch_data-&gt;gpio);
     if (ret &lt; 0)
        goto err_set_gpio_input;
        
     //指定gpio_switch_work
     INIT_WORK(&amp;switch_data-&gt;work,gpio_switch_work);
     //为gpio分配中断
     switch_data-&gt;irq =gpio_to_irq(switch_data-&gt;gpio);
     if (switch_data-&gt;irq &lt; 0) {
        ret = switch_data-&gt;irq;
        goto err_detect_irq_num_failed;
     }
     
     //指明中断服务程序
     ret = request_irq(switch_data-&gt;irq,gpio_irq_handle, IRQF_TRIGGER_LOW, pdev-&gt;name, switch_data);
     if (ret &lt; 0)
        goto err_request_irq;
        
     //初始化gpio_switch_work
     gpio_switch_work(&amp;switch_data-&gt;work);
     
     return 0;
     
     //错误处理
err_request_irq:
err_detect_irq_num_failed:
err_set_gpio_input:
     gpio_free(switch_data-&gt;gpio);
     
err_request_gpio:
     switch_dev_unregister(&amp;switch_data-&gt;sdev);
     
err_switch_dev_register:
     kfree(switch_data);
     
     return ret;
 }
 
 关于初始化函数的原理和要点，注解已经写得很清楚，这里就不再具体分析了。初始化的过程主要包括以下几个步骤：
 １）获取gpio数据使用权。
 ２）设置gpio方向为输入
 ３）注册switch_dev设备
 ４）为gpio分配中断，并指定中断服务程序；
 ５）初始化gpio_switch_work;
 ６）读取gpio初始状态。
 
 同理，退出函数也就很简单了，定义如下：
 static int __devexitgpio_switch_remove(struct platform_device *pdev)
 {
     struct gpio_switch_data *switch_data= platform_get_drvdata(pdev);
 
     //清除gpio_switch_work
     cancel_work_sync(&amp;switch_data-&gt;work);
     //释放gpio
     gpio_free(switch_data-&gt;gpio);
     //缷载gpio_switch_data
     switch_dev_unregister(&amp;switch_data-&gt;sdev);
     //释放空间
     kfree(switch_data);
 
     return 0;
 }
 初始化时我们指定了中断服务程序，当ＧＰＩＯ触发中断事件时，就会进入中断服务程序进行处理，其定义如下：
 
 static irqreturn_t gpio_irq_handler(int irq, void *dev_id)
 {
     struct gpio_switch_data *switch_data= (struct gpio_switch_data *)dev_id;
     schedule_work(&amp;switch_data-&gt;work);

     return IRQ_HANDLED;
 }
 该函数很简单，取得gpio_switch_data并执行work。这里的work就是我们在初始化时指定的gpio_switch_work，其处理方式如下：
 
 static void gpio_switch_work(structwork_struct *work)
 {
     int state;
     struct gpio_switch_data *data =container_of (work, struct gpio_switch_data, work);
     
     //读取gpio
     state = gpio_get_value(data-&gt;gpio);
     switch_set_state(&amp;data-&gt;sdev,state);
 }
 该函数的处理过程很简单，先直接读取gpio电平，取得状态；然后通过switch_set_state来设置和改变状态，这时便会调用我们实现的 switch_gpio_print_state和switch_gpio_print_name函数。但是我们发现，源代码中并没有实现 switch_gpio_print_name函数，因此，这里只关心设备的状态，名称在注册之后没有更改过，暂时也就不会去处理它了。从前面的 name_show函数的实现我们可以看到，如果没有实现switch_gpio_print_name函数，设备的名字则会被输出到name_show 函数的参数buf的缓冲区里，但这并不影响什么。
 
 switch_gpio_print_state的具体实现如下：
 static ssize_t switch_gpio_print_state(struct switch_dev *sdev, char *buf)
 {
     struct gpio_switch_data *switch_data=
     container_of (sdev, struct gpio_switch_data, sdev);
     const char *state;
     if (switch_get_state(sdev))
         state = switch_data-&gt;state_on;
     else
         state = switch_data-&gt;state_off;

     if (state)
         return sprintf(buf, “%s\n”,state);

     return – 1;
 }
 该函数通过状态开(state_on)关(state_off)来确定是否将GPIO状态输出到sysfs。大家应该明白状态开关的用处了吧，名称的状态开关的作用也是一样，只不过这里没有实现罢了。到这里，对switch模块的完整分析就结束了。
</rich_text><node name="android耳机插入检测 " prog_lang="custom-colors" readonly="False" tags="" unique_id="26"><rich_text>在Android 中其实并没有耳机系统这个称呼，只是我为了方便解释而加的。在整个android系统中，跟耳机相关的部分有： 
1.      Linux 驱动：主要完成耳机的插入的检测，hook键的检测，其中hook键包括长按和短按。 
2.      在frameworks 中的耳机的观察的文件（HeadsetObserver.java ），这个文件主要是检测耳机是否插入和名字，并把相关的内容通过Intent 广播出去。 
3.      跟音频相关，改变音频输出的路径（这边涉及到播放音乐和电话部分）。
4.      跟事件的处理相关，这部分主要体现 hook 的功能，主要是接听电话，挂断电话等。
事件的处理又分为linux 的事件处理和android上的事件处理。 
 
 我将分块叙述，由于各种原因，我在这不便把源代码公布，如果你需要的我的帮助，可以发邮件给我，也可以在我blog 上留言，谢谢! 
 
</rich_text><rich_text foreground="#ffff00000000" scale="h2">Linux 驱动</rich_text><rich_text scale="h2"> </rich_text><rich_text>
首先要定义一个switch_dev（structswitch_dev sdev; ）并把它初始化，如（sdev.name=  ……）；然后注册一个switch device ： 
      ret= switch_dev_register(&amp;switch_data-&gt;sdev); 
      if(ret &lt; 0) 
     { 
        goto err_switch_dev_register; 
     } 
switch_dev_register这个函数在 switch_class.c 中实现 
int switch_dev_register(struct switch_dev*sdev) 
{ 
     int ret; 
     
      if (!switch_class) { 
        ret = create_switch_class(); 
        if (ret &lt; 0) 
            return ret; 
     } 
     
     sdev-&gt;index = atomic_inc_return(&amp;device_count); 
     sdev-&gt;dev = device_create(switch_class, NULL, 
     MKDEV(0, sdev-&gt;index), NULL, sdev-&gt;name); 
     if (IS_ERR(sdev-&gt;dev)) 
        return PTR_ERR(sdev-&gt;dev); 
     ret= device_create_file(sdev-&gt;dev, &amp;dev_attr_state); 
     if (ret &lt; 0) 
        goto err_create_file_1; 
     ret= device_create_file(sdev-&gt;dev, &amp;dev_attr_name); 
     if (ret &lt; 0) 
        goto err_create_file_2; 
     
     dev_set_drvdata(sdev-&gt;dev, sdev); 
     sdev-&gt;state = 0; 
     
     return 0; 
     
err_create_file_2: 
     device_remove_file(sdev-&gt;dev,&amp;dev_attr_state); 
err_create_file_1: 
     device_destroy(switch_class, MKDEV(0, sdev-&gt;index)); 
     printk(KERN_ERR &quot;switch: Failed to register driver %s\n&quot;,sdev-&gt;name); 
     
     return ret; 
} 
 
这个函数中主要是以下几个函数
l  create_switch_class() 
l  device_create(switch_class, NULL, MKDEV(0, sdev-&gt;index), NULL,sdev-&gt;name); 
l  device_create_file(sdev-&gt;dev, &amp;dev_attr_state); 
l  device_create_file(sdev-&gt;dev, &amp;dev_attr_name); 
经过以上函数后将会生成路径和被用户空间访问的节点 
 
&quot;/sys/class/switch/h2w/name&quot;; 
&quot;/sys/class/switch/h2w/state&quot;; 
这两个供用户空间访问 
 
在这个函数中要注意到 
static DEVICE_ATTR(state, S_IRUGO |S_IWUSR, state_show, NULL); 
static DEVICE_ATTR(name, S_IRUGO | S_IWUSR,name_show, NULL); 
这两项中用于设置节点state和name的属性 
 
DEVICE_ATTR 有四个参数，分别为名称、权限位、读函数、写函数
有此可以知道state 和name，虽然有读写权限，但都只有读函数，没有写函数。 
其中state 对headsetobserver.java 区分有无 mic和耳机是否插入起作用 
static ssize_t state_show(struct device*dev, struct device_attribute *attr, 
 char *buf) 
{ 
 struct switch_dev *sdev = (struct switch_dev *) dev_get_drvdata(dev); 
 
  if (sdev-&gt;print_state) {    // 如果用户有定义print_state函数，将调用用户定义的 
    int ret = sdev-&gt;print_state(sdev, buf); 
    if (ret &gt;= 0) 
        return ret; 
 } 
 
 return sprintf(buf, &quot;% d\n&quot;, sdev-&gt;state);// 把sdev-&gt;state 以%d的格式装如 buf 中 
} 
 
在这个函数得注意：如果你想你的frameworks 能区别出有没有mic，并且你用的是switch_gpio.c这个文件的话，你需要把switch_gpio.c中的sdev-&gt;print_state 的定义去掉。 
我就在这卡了半天的时间。State原先出来一直是1 ，后来才发现原来是自己定义了sdev-&gt;print_state 并只返回 0 和1 ，没有其他值。 
 
现重新回到driver，接下来时 input 子系统的内容 input_allocate_device(); 分配内存给新的输入设备  接下去初始化input_dev 这个结构体，给输入设备命名dev-&gt;name， 设置input 支持的键值  input_set_capability，如： 
 input_set_capability(ipdev, EV_KEY,KEY_MEDIA); 
 input_set_capability(ipdev, EV_SW,SW_HEADPHONE_INSERT); 
 input_set_capability(ipdev, EV_KEY, KEY_END); 
  注册input 设备 input_register_device(ipdev); 
   在驱动中还涉及到工作队列等问题，就请各位自己去看一下吧。 
接下来是对于中断的处理，这个中断方式我是从HTC 的驱动中学的，有点巧妙，想到了叶
就不算巧妙了，呵呵。 
  先申请为高电平中断，我的板子是插入耳机检测脚我高电平，在进入中断后再申请为低
电平中断，这个相对于上升和下降有个好处——当设置为上升或下降沿触发中断时，开机之
前插入耳机，当开机后，将识别不到耳机。而当设置为电平触发可以解决这个问题。 
  我的观点是在耳机在插槽内时，检测引脚直接被拉倒插入耳机稳定后的电平，而不会产
生上升和下降沿。中断申请的代码如下： 
request_irq(gpio_to_irq(18),gpio_irq_handler,IRQF_TRIGGER_HIGH,pdev-&gt;name,switch_data);
中断处理的代码如下： 
set_irq_type(gpio_to_irq(18),gpio_get_value(18) ? IRQF_TRIGGER_LOW : 
IRQF_TRIGGER_HIGH); 
由上可以看到C 语言的问号表达式的好处了吧，呵呵。C 语言博大精深！还有很多精
髓的问题，以后用了，慢慢体会，如果你觉得你的C 非常好了，呵呵，找一个C 语言的笔
试题来做做，哈哈，你真会发现又学到一堆的东西。呵呵。继续我们的驱动。 
  接下来是有无mic的判断和设置state 的值了，有 HeadsetObserver.java 这个文件中可以
得出state 的值： 
  有mic：state 等于1 
  没有mic：state 等于 2 
扯点题外，我原先以为在&quot;/sys/class/switch/h2w/state&quot;;下的state 只有 0 和1 ，我再问了我
的一些同事，他们也跟我说是bool类型。但我看到headsetobserver.java中又有1 和2，
后面觉得有点可疑。再看源代码之前，真的不想看源代码，看了源代码后，发现源代码
真好。哈哈。通过一步步跟，后面发现时可以大于1 的，呵呵。 
这个将要用到switch_get_state(&amp;data-&gt;sdev)这个函数，它也是在switch_class.c中实现的。 
void switch_set_state(struct switch_dev*sdev, int state) 
{ 
    char name_buf[120]; 
    char state_buf[120]; 
    char *prop_buf; 
    char *envp[3]; 
    int env_offset = 0; 
    int length; 
 
    if (sdev-&gt;state != state) { 
        sdev-&gt;state = state;  //实现你要设置的值 
        prop_buf = (char *)get_zeroed_page(GFP_KERNEL); 
        if (prop_buf) { 
            length = name_show(sdev-&gt;dev, NULL, prop_buf); //给HeadsetObserver.java 读取名字 
            if(length &gt; 0) { 
                if (prop_buf[length - 1] == '\n') 
                    prop_buf[length - 1] = 0; 
                snprintf(name_buf, sizeof(name_buf), 
                    &quot;SWITCH_NAME=%s&quot;, prop_buf);
     
                envp[env_offset++] = name_buf; 
           } 
            length = state_show(sdev-&gt;dev, NULL, prop_buf); // 给HeadsetObserver.java 读取状态，这个函数我们在前面分析过了，这个函数比较重要，关系到区分有无mic。  
            if(length &gt; 0) { 
                if (prop_buf[length - 1] == '\n') 
                    prop_buf[length - 1] = 0; 
                snprintf(state_buf, sizeof(state_buf), 
                    &quot;SWITCH_STATE=%s&quot;, prop_buf); 
                envp[env_offset++] = state_buf; 
            } 
            envp[env_offset] = NULL; 
            kobject_uevent_env(&amp;sdev-&gt;dev-&gt;kobj, KOBJ_CHANGE, envp); 
            free_page((unsigned long)prop_buf); 
        } else { 
            printk(KERN_ERR &quot;out of memory in switch_set_state\n&quot;); 
            kobject_uevent(&amp;sdev-&gt;dev-&gt;kobj, KOBJ_CHANGE); 
        } 
    } 
} 
EXPORT_SYMBOL_GPL(switch_set_state); //供外部所使用。 
由于hook 键和检测 mic的有关联，故如果有mic则要申请hook 的中断。 
具体mic的检测可以参考我的blog 中转载别人的的一篇文章，链接地址如下 
 
http://blog.chinaunix.net/u3/106866/showart_2273977.html
 
接下来是HOOK 键功能的处理了，在google 论坛里有些说实现 hook 键接听和挂断电
话的问题。Hook键只有一个，要实现两个功能就得要用时间来区分了， 
  短按：代表接听。 
  长按：代表拒接。 
这样两种功能就实现了，呵呵。对于长短的检测最好用纳秒，用秒的准确性比较低。存在误
判性比较高，可以利用把时间转换成纳秒来计算，我用如下实现检测时间的长短： 
do_gettimeofday(&amp;time);  
timens=timeval_to_ns(&amp;time);  
while(gpio_get_value(123)==0){}; 
do_gettimeofday(&amp;time); 
(timeval_to_ns(&amp;time)-timens)由这个式子可以得到比较准确的时间。 
在利用这个时间，你确定一个判断长短的依据，就可以了如： 
if ((timeval_to_ns(&amp;time)-timens)&lt;1000000000l) {//短按 
    if ( (timeval_to_ns(&amp;time)-timens) &gt; 50000000) { // 为了取出噪音，而设置一定的最低值
        input_report_key(switch_data-&gt;ipdev,KEY_MEDIA,1); 
        input_sync(switch_data-&gt;ipdev); 
        msleep(100); 
        input_report_key(switch_data-&gt;ipdev,KEY_MEDIA,0); 
        input_sync(switch_data-&gt;ipdev); 
    } 
} else {//长按 
    input_report_key(switch_data-&gt;ipdev,KEY_END,1); 
    input_sync(switch_data-&gt;ipdev); 
    msleep(100); 
    input_report_key(switch_data-&gt;ipdev,KEY_END,0); 
    input_sync(switch_data-&gt;ipdev); 
} 
在这传上去的是KEY_MEDIA和KEY_END，然而这两个键值又如何对应上层的接听和挂
断呢？其中KEY_END 在frameworks 层已经映射成挂机键了，然而 KEY_MEDIA 却要你自
己映射成HEADSETHOOK键，在你android的根目录下在 
sdk\emulator\keymaps下qwerty.kl 中加入 
key 226  HEADSETHOOK       WAKE 
 
在这说明一下有些地方说是 
./development/emulator/keymaps/qwerty.kl 
我的是android2.1 的版本，我在我的版本下没发现 qwerty.kl 。我想这可能是版本的差异吧。 
 
到此，linux 驱动层算是大体结束了。 
 
</rich_text><rich_text foreground="#ffff00000000" scale="h2">Frameworks 层耳机相关 </rich_text><rich_text>
启动服务在systemserver.java中 
public class SystemServer 
{ 
     public static void main(String[] args) 
     { 
        …… 
        init1(args); 
        …… 
    } 
    
    public static final void init2() { 
       Log.i(TAG, &quot;Entered the Android system server!&quot;); 
       Thread thr = new ServerThread(); 
       thr.setName(&quot;android.server.ServerThread&quot;); 
       thr.start(); 
    }
 
} 
 
init1 将会调用到 android_server_SystemServer_init1.cpp 
extern &quot;C&quot; int system_init(); 
static voidandroid_server_SystemServer_init1(JNIEnv* en v, jobject clazz) 
{ 
   system_init(); 
} 
由上可以得到，将调用到System_init.cpp
extern &quot;C&quot; status _tsystem_init() 
{ 
    …… 
    runtime-&gt;callStatic(&quot;com/android/server/SystemServer&quot;, &quot;init2&quot;); 
    …… 
} 
 
由上可以看出，此时将调回到systemserver.java，并且调用 
public static final void init2() { 
    Log.i(TAG, &quot;Entered the Android systemserver!&quot;); 
           Thread th r = new ServerThread(); 
           thr.setName(&quot;android.server.ServerThread&quot;); 
           thr.start(); 
} 
新建线程 
class ServerThread  extends Thread 
{ 
    …… 
    public void run() 
    { 
        …… 
        try { 
            Log.i(TAG, &quot;Headset Observer&quot;); 
            // Listen for wired headset changes 
            headset = new HeadsetObserver(context); //new a thread to observer headset status 
        } catch (Throwable e) { 
            Log.e(TAG, &quot;Failu re starting HeadsetObserver&quot;, e); 
        } 
    } 
} 
开始服务：HeadsetObserver.java
class HeadsetObserver extendsUeventObserver 
{ 
    …… 
    public HeadsetObserver(Context context)  
    { 
        …… 
        startObserving(HEADSET_UEVENT_MATCH); 
        
        init();  // set initial status 
    } 
} 
 
运行以上程序后会一直监测HEADSET_UEVENT_MATCH路径的事件， 
HEADSET_UEVENT_MATCH =&quot;DEVPATH=/devices/virtual/switch/h2w&quot;; 
如果有事件的变化，则会调用 
public void onUEvent(UEventObserver.UEventevent)   
{ 
    if (LOG) Log.v(TAG, &quot;Headset UEVENT:&quot; + event.toString()); 
     
    try { 
        update(event.get(&quot;SWITCH_ NAME&quot;),Integer.parseInt(event.get(&quot;SWITCH_STATE&quot;))); 
    } catch (NumberFormatException e) { 
        Log.e(TAG, &quot;Could not parse switch state from event &quot; +event); 
    }
} 
     
private synchronized final void update(String newName, int newState)   
{ 
    …… 
     mHandler.sendMessageDelayed(mHandler.obtainMessage(0,mHeadsetState,
                                                        mPrevHeadsetState, 
                                                        mHeadsetName),//send message 
} 

一下一段没有考证：但我猜应该是由于这个原因会调用到sendIntents 
private final Handler mHandler = newHandler() 
{ 
    @Override 
    public void handleMessage(Message msg)   
    { 
        sendIntents(msg.arg1, msg.arg2,(String)msg.obj); 
        mWakeLock.release(); 
    } 
}; 
如果有新的事件，将会调用 
private synchronized final void sendIntents 
再调用到 
private final void sendIntent 
此处填充Intent 。 
private final void sendIntent(int headset,int headsetState, int prevHeadsetState, String 
headsetName) 
{ 
    …… 
    Intent intent = new Intent(Intent.ACTION_HEADSET_PLUG); 
    intent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY);
    …… 
    if ((headset &amp; HEADSETS_WITH_MIC) !=0) { 
        microphone = 1;//  是否有 mic 
    } 
    if ((headsetState &amp; headset) != 0) { 
        state = 1; 
    } 
    intent.putExtra(&quot;state&quot;, state); 
    intent.putExtra(&quot;name&quot;, headsetName); 
    intent.putExtra(&quot;microphone&quot;,microphone); 
    …… 
    ActivityManagerNative.broadcastStickyIntent(intent,null);    //broadcast intent 
} 
 
</rich_text><rich_text foreground="#00000000ffff" scale="h3">跟音频相关 </rich_text><rich_text>
此时在AudioService.java中将接收Broadcast 
private class AudioServiceBroadcastReceiverextends BroadcastReceiver 
{ 
    public void onReceive(Context context,Intent intent) 
    { 
        …… 
        else if (action.equals(Intent.ACTION_HEADSET_PLUG)) { 
            …… 
            //if you first insert headset, will implement fellow code 
            AudioSystem.setDeviceConnectionState(AudioSystem.DEVICE_OUT_WIRED_HEADSET,AudioSystem.DEVICE_STATE_AVAILABLE,&quot;&quot;);
        } 
    } 
} 
调用setDeviceConnectionState由在android_media_AudioSystem.cpp中可以得到 
static JNINativeMethod gMethods[] = {  
    &quot;setDeviceConnectionState&quot;,&quot;(IILjava/lang/String;)I&quot;,(void*)android_media_AudioSystem_setDeviceConnectionState},  
}; 
所以将调用到android_media_AudioSystem_setDeviceConnectionState
android_media_AudioSystem_setDeviceConnectionState(JNIEnv*env, jobject thiz, jint device, 
    jint state, jstring device_address) 
{ 
    …… 
    Intstatus =check_AudioSystem_Command(AudioSystem::setDeviceConnectionState(static_cast&lt;AudioSystem::audio_devices&gt;(device), 
        static_cast &lt;AudioSystem::device_connection_state&gt;(state),c_address)); 
    …… 
} 
由上段程序可以看出，将会调用到AudioSystem.cpp中的setDeviceConnectionState 
status_t AudioSystem::setDeviceConnectionState(audio_devicesdevice, 
                                                 device_connection_state state, 
                                                 const char *device_address) 
{ 
    const sp&lt;IAudioPolicyService&gt;&amp; aps =AudioSystem::get_audio_policy_service(); 
   
    if (aps == 0) return PERMISSION_DENIED; 
 
    return aps-&gt;setDeviceConnectionState(device, state, device_address); 
} 
get_audio_policy_service();这个函数具体做什么我现在还没弄清楚。 
一下这边我没找到具体的联系，我通过打印得知会调用到AudioPolicyManager.cpp 的
setDeviceConnectionState 函数，以下的函数很重要，关系到设置输出路径等 
status_tAudioPolicyManager::setDeviceConnectionState(AudioSystem::audio_devices device,
                                         AudioSystem::device_connection_state state, 
                                                 const char *device_address) 
{ 
      …… 
      //handle output devices 
    if(AudioSystem::isOutputDevice(device)) { 
        switch (state) { 
            case AudioSystem::DEVICE_STATE_AVAILABLE: 
                …… 
                if (AudioSystem::isBluetoothScoDevice(device)) { 
                    …… 
                } else if (device == AudioSyste m::DEVICE_OUT_WIRED_HEADSET || 
                        device == AudioSystem::DEVICE_OUT_WIRED_HEADPHONE) { 
                    if (getDeviceForStrategy(STRATEGY_PHONE) ==device &amp;&amp; 
                        (mPhoneState ==AudioSystem::MODE_IN_CALL || 
                        mOutputs.valueFor(mHardwareOutput)-&gt;isUsedByStrategy(STRATEGY_PHONE))) { 
                        newDevice = device; 
                    } else if ((getDeviceForStrategy(STRATEGY_SONIFICATION) &amp; device) &amp;&amp; 
                        mOutputs.valueFor(mHardwareOutput)-&gt;isUsedByStrategy(STRATEGY_SONIFICATION)) { 
                        newDevice =getDeviceForStrategy(STRATEGY_SONIFICATION); 
                    } else if ((getDeviceForStrategy(STRATEGY_MEDIA) == device) &amp;&amp;                          
                                mOutputs.valueFor(mHardwareOutput)-&gt;isUsedByStrategy(STRATEGY_MEDIA)) { 
                        newDevice = device; 
                    } else if (getDeviceForStrategy(STRATEGY_DTMF) == device &amp;&amp;           
                            mOutputs.valueFor(mHardwareOutput)-&gt;isUsedByStrategy(STRATEGY_DTMF)) { 
                        newDevice = device; 
                    } 
                } 
        }
    }   
} 
 
以上两个个主要函数是： 
getDeviceForStrategy ， 
mOutputs.valueFor(mHardwareOutput)-&gt;isUsedByStrategy(STRATEGY_PHONE)) 
存在以下疑问： 
1  ：getDeviceForStrategy 的作用是什么？ 
boolAudioPolicyManager::AudioOutputDescriptor::isUsedByStrategy(routing_strategystrategy) 
{ 
    for(int i = 0; i &lt; (int)Audio System::NUM_STREAM_TYPES; i++) { 
        if(AudioPolicyManager::getStrategy((AudioSystem::stream_type)i) == strategy&amp;&amp; 
           isUsedByStream((AudioSystem::stream_type)i)) { 
            return true; 
       } 
    } 
    
    return false; 
} 
这个函数很重要主要是为以后设置为耳机，蓝牙这类的输出. 
以上函数会调用到 
bool isUsedByStream(AudioSystem::stream_type stream) { 
    return mRefCount[stream] &gt;0 ? true : false; 
} 
 
这个函数也很重要. 这个函数用到mRefCount 这个数组， 
这个函数在voidAudioPolicyManager::AudioOutputDescriptor::changeRefCount 中改变 
然而changeRefCount将会在startOutput 调用。 
具体什么时候改变mRefCount这个数组，现不是非常的清楚。
 
上面的走完后将设置输出 
setOutputDevice(mHardw areOutput,newDevice); 
其中newDevice 决定什么样的输出。 
 
</rich_text><rich_text foreground="#00000000ffff" scale="h3">跟事件的处理相关 
文件流程流程 </rich_text><rich_text>
KeyinputQueue.java 
Com_android_server_KeyInputQueue.cpp 
Eventhub.cpp 
SystemService.java 
WindowManagerService.java 
 
从SystemService.java中启动服务： 
public class SystemServer 
{ 
    …… 
    native public static void init1(String[]args); 
     
    public static void main(String[] args) { 
        …… 
        init1(args); 
    }
     
    public static final void init2() { 
        Log.i(TAG, &quot;Entered the Android system server!&quot;); 
        Thread th r = new ServerThread(); 
        thr.setName(&quot;android.server.ServerThread&quot;); 
        thr.start(); 
    } 
} 
 
运行init1(args);  在com_android_server_SystemServer.cpp 中有 
static JNINativeMethod gMethods[] = { 
   /* name, signature, funcPtr */ 
    {&quot;init1&quot;, &quot;([Ljava/lang/String;)V&quot;, (void*)android_server_SystemServer_init1 }, 
}; 
 
而又有如下： 
extern &quot;C&quot; int system_init(); 
static voidandroid_server_SystemServer_init1(JNIEnv* en v, jobject clazz) 
{ 
    system_init(); 
} 
 
system_init()将调用在System_init.cpp  中 
extern &quot;C&quot; status _tsystem_init() 
{ 
    …… 
    runtime-&gt;callStatic(&quot;com/android/server/SystemServer&quot;,&quot;init2&quot;);// 这句后将跳会SystemService.java 中的 init2 。 
    ……  
} 
 
也即是如下代码 
public static final void init2()   
{ 
    Log.i(TAG, &quot;Entered the Android system server!&quot;); 
    Thread thr = new ServerThread(); //建立一个 service 的线程 
    thr.setName(&quot;android.server.ServerThread&quot;);
    thr.start(); 
} 
 
服务线程： 
class ServerThread  extends Thread 
{ 
    …… 
    public void run() { 
        …… 
        Log.i(TAG, &quot;Window Manager&quot;); 
        wm = WindowManagerService.main(context, power, 
                    factoryTest  != SystemServer.FACTORY_TEST_LOW_LEVEL); 
        ServiceManager.addService(Context.WINDOW_SERVICE, wm); 
        ((ActivityManagerService)ServiceManager.getService(&quot;activity&quot;)) 
                    .setWindowManager(wm); 
        …… 
    } 
    …… 
} 
 
将跳转到WindowManagerService.java的main 中 
public static WindowManagerServicemain(Context context, 
PowerManagerService pm, booleanhaveInputMethods)   
{ 
    WMThread thr = new WMThread(context, pm,haveInputMethods);//建立线程 
    thr.start(); 
    synchronized (thr) { 
         while (thr.mService == null) { 
          try { 
                thr.wait(); 
              } catch (InterruptedException e){} 
        } 
    }
    return thr.mService; 
} 

static class WMThread extends Thread 
{ 
    …… 
    public void run() { 
        …… 
        WindowManagerService s = newWindowManagerService(mContext, mPM, 
                        mHaveInputMethods); // 新建一个 WindowManagerService 的线程 
        …… 
    } 
} 
即将跳到WindowManagerService的构造函数 
private WindowManagerService(Contextcontext, PowerManagerService pm, 
           boolean haveInputMethods)  
{ 
    …… 
    mQueue = new KeyQ(); 
    …… 
} 
而 
private class KeyQ extends KeyInputQueue 
在KeyInputQueue的构造函数中 
KeyInputQueue(Context context,HapticFeedbackCallback   hapticFeedbackCallback) 
{ 
    …… 
    mThread.start(); 
} 
而 
Thread mThread = newThread(&quot;InputDeviceReader&quot;) 
{ 
    …… 
    readEvent(ev); 
    …… 
} 
private static native boolean readEvent(RawInputEventoutEvent);由这句可知readEvent在JNI
层 
在com_android_server_KeyInputQueue.cpp中有 
static JNINativeMethod gInputMethods[] = { 
   /* name, signature, funcPtr */ 
    {&quot;readEvent&quot;,      &quot;(Landroid/view/RawInputEvent;)Z&quot;,  (void*) android_server_KeyInputQueue_readEvent }, 
    …… 
} 
由以上可知在KeyInputQueue.java中调的 readEvent 将调用到
com_android_server_KeyInputQueue.cpp 的android_server_KeyInputQueue_readEvent。 
static jboolean   
android_server_KeyInputQueue_readEvent(JNIEnv*env, jobject clazz, jobject event) 
{ 
    …… 
    if (hub == NULL) { 
        hub = new EventHub; 
        gHub = hub; 
    } 
    …… 
    bool res = hub-&gt;getEvent(&amp;deviceId,&amp;type, &amp;scancode, &amp;keycode, 
               &amp;flags, &amp;value, &amp;when); 
    …… 
} 
hub-&gt;getEvent 将调用EventHub.cpp 的getEvent 函数 
bool EventHub::getEvent(int32_t*outDeviceId, int32_t* outType, 
       int32_t* outScancode, int32_t* outKeycode, uint32_t *outFlags, 
       int32_t* outValue, nsecs_t* outWhen) 
{ 
     …… 
     if (!mOpened) { 
           mError = openPlatformInput() ? NO_ERROR : UNKNOWN_ERROR; 
           mOpened = true; 
     }  
} 
 
openPlatformInput()将扫描/dev/input 下的所有 event并打开它 
/* 
  *Open the platform-specific input device. 
 */ 
bool EventHub::openPlatformInput(void) 
{ 
    …… 
    res= scan_dir(device_path);// 其中static const char *device_path = &quot;/dev/input&quot;; 
    …… 
} 

而 
int EventHub::scan_dir(const char *dirname)
{ 
    char devname[PATH_MAX]; 
    char *filename; 
    DIR *dir; 
    struct dirent *de; 
    dir = opendir(dirname); 
    if (dir == NULL) 
        return -1; 
    strcpy(devname, dirname); 
    filename = devname + strlen(devname); 
    *filename++ = '/'; 
    // 扫描/dev/input 下的所有event并打开它 
    while((de = readdir(dir))) { 
       if(de-&gt;d_name[0] == '.' &amp;&amp; 
          (de-&gt;d_name[1] == '\0' || 
           (de-&gt;d_name[1] == '.' &amp;&amp; de-&gt;d_name[2] == '\0'))) 
           continue; 
       strcpy(filename, de-&gt;d_name); 
       open_device(devname);//打开event设备 
    }
    
    closedir(dir); 
    return 0; 
} 
 
int EventHub::open_device(const char*deviceName) 
{ 
    …… 
    fd = open(deviceName, O_RDWR); 
    …… 
    if ((device-&gt;classes&amp;CLASS_KEYBOARD)!= 0) { 
        char tmpfn[sizeof(name)]; 
        char keylayoutFilename[300]; 
     
        // a more descriptive name 
        device-&gt;name = name; 
     
        // replace all the spaces with underscores 
        strcpy(tmpfn, name); 
        for (char *p = strchr(tmpfn, ' '); p &amp;&amp; *p; p = strchr(tmpfn, '')) 
               *p = '_'; 
     
        // find the .kl file we need for this device 
       const char* root = getenv(&quot;ANDROID_ROOT&quot;); 
       snprintf(keylayoutFilename, sizeof(keylayoutFilename), 
                    &quot;%s/usr/keylayout/%s.kl&quot;, root, tmpfn); 
       bool defaultKeymap = false; 
       if (access(keylayoutFilename, R_OK)) { 
            snprintf(keylayoutFilename, sizeof(keylayoutFilename), 
                    &quot;%s/usr/keylayout/%s&quot;, root, &quot;qwerty.kl&quot;); 
            defaultKeymap = true; 
        } 
        device-&gt;layoutMap-&gt;load(keylayoutFilename); 
    } 
如果上面的操作都成功则把所有设备都打开了，根据注册的 input 设备的名字查找对应的.kl
文件，如果有该设备就用该.kl把扫描码映射键码。文件现回到EventHub::getEvent。 

release_wake_lock(WAKE_LOCK_ID); 

pollres = poll(mFDs, mFDCount, -1); 
 
acquire_wake_lock(PARTIA L_WAKE_LOCK, WAKE_LOCK_ID); 
在这边poll ，如果没有新事件将在这等待，如果有则开始下面的读事件 
     res = read(mFDs[i].f d, &amp;iev, sizeof(iev)); 
 
到此整个从上面开始的读过程结束。 
现在回到 
Thread mThread = newThread(&quot;InputDeviceReader&quot;) 
{ 
    …… 
    readEvent(ev); 
    …… 
    else { 
        send = preprocessEvent(di, ev); 
    } 
} 
由这个abstractboolean preprocessEvent(InputDevice device, RawInputEvent event);可以看出上
面调用的preprocessEvent将调到windowmanagerservice.java中的 
boolean preprocessEvent(InputDevice device,RawInputEvent event) 
boolean preprocessEvent(InputDevice device,RawInputEvent event) 
{ 
    if (mPolicy.preprocessInputEventTq(event)) { 
         return true; 
    }
 
   switch (event.type) { 
        case RawInputEvent.EV_KEY:  
        { 
            …… 
            if ((actions &amp; WindowManagerPolicy.ACTION_PASS_TO_USER) != 0) { // 这段代码不是很清楚，做什么用的                        
                if (event.value != 0 &amp;&amp;mPolicy.isAppSwitchKeyTqTiLwLi(event.keycode)) { 
                    filterQueue(this); 
                    mKeyWaiter.appSwitchComing(); 
                }
                 
                return true; 
            } else {
 
                return false; 
            } 
往事件队列里放入事件 
 
在WindowManagerService.java的构造函数中又有 
mInputThread = new InputDispatcherThread();
InputDispatcherThread  线程实际上从   KeyQ  的事件队列中读取按键事件 
mInputThread.start(); 
又有如下 
private final class InputDispatcherThread extends Thread { 
    // Time to wait when there isnothing to do: 9999 seconds. 
    static final int LONG_WAIT=9999*1000; 
    public InputDispatcherThread() { 
        super(&quot;InputDispatcher&quot;); 
    } 
    @Override 
    public void run() { 
        while (true) { 
            try { 
                process(); 
            } catch (Exception e) { 
                Log.e(TAG, &quot;Exceptionin input dispatcher&quot;, e); 
            } 
        } 
    } 
    private void process() { 
        …… 
        while (true) { 
            // Retrieve next event, waiting only aslong as the next 
            // repeat timeout.    If theconfiguration has changed, then 
            // don't wait at all -- we'll report the change as soon as 
            // we have processed all events. 
            QueuedEvent ev = mQueue.getEvent( 
                    (int)((!configChanged&amp;&amp; curTime &lt; nextKeyTime) 
                            ?(nextKeyTime-curTime) : 0)); 
            …… 
            switch (ev.classType) { 
                case RawInputEvent.CLASS_KEYBOARD: 
                    if (ke.isDown()) { 
                        lastKey = ke; 
                        downTime = curTime; 
                        keyRepeatCount = 0; 
                        lastKeyTime = curTime; 
                        nextKeyTime = lastKeyTime+ ViewConfiguration.getLongPressTimeout(); 
                        if (DEBUG_INPUT) Log.v(TAG, &quot;Received key down: first repeat @&quot;+nextKeyTime); 
                    } else { 
                        lastKey = null; 
                        downTime = 0; 
                        // Arbitrary long timeout. 
                        lastKeyTime = curTime; 
                        nextKeyTime = curTime + LONG_WAIT; 
                        if (DEBUG_INPUT) Log.v(TAG, &quot;Received key up: ignore repeat @&quot;+nextKeyTime); 
                    } 
                    dispatchKey((KeyEvent)ev.event, 0, 0);    //发布事件 
                    mQueue.recycleEvent(ev); 
                    break; 
                …… 
            } 
 
 
    /** 
     * @return Returns true if event was dispatched, false if it was droppedfor any reason 
     */ 
    private int dispatchKey(KeyEvent event, int pid, int uid) { 
       if (DEBUG_INPUT) Log. v(TAG, &quot;Dispatch key: &quot; + event); 
 
       Object focusObj = mKeyWaiter.waitForNextEventTarget(event, null, 
                null, false, false, pid, uid); 
       if (focusObj == null) { 
                        Log.w(TAG, &quot;Nofocus window, dropping: &quot; + event); 
           return INJECT_FAILED; 
       } 
       if (focusObj == mKeyWaiter.CONSUMED_EVENT_TOKEN) { 
           return INJECT_SUCCEEDED; 
       } 
 
        // Okay we have finishedwaiting for the last event to be processed. 
        // First off, if this is a repeat event, check  to see if there is 
        // a corresponding up even t in the queue.    If there is, we will 
        // just drop the repeat, because it makes no sense to repeat after 
        // the user has released akey.    (This is especially important for
        // long presses.) 
        if (event.getRepeatCount() &gt; 0 &amp;&amp;mQueue.hasKeyUpEvent(event)) { 
            return INJECT_SUCCEEDED; 
        } 
        
       WindowState focus = (WindowState)focusObj;  
       if (DEBUG_INPUT) Log.v(TAG, &quot;Dispatchingto &quot; + focus + &quot;: &quot; + event);  
        if (uid != 0 &amp;&amp; uid !=focus.mSession.mUid) { 
           if (mContext.checkPermission(android.Manifest.permission.INJECT_EVENTS,pid, uid) 
                    !=PackageManager.PERMISSION_GRANTED) { 
                Log.w(TAG, &quot;Permissiondenied: injecting key event from pid &quot; 
                        + pid + &quot; uid&quot; + uid + &quot; to window &quot; + focus 
                        + &quot; owned by uid&quot; + focus.mSession.mUid); 
                return INJECT_NO_PERMISSION; 
           } 
       } 
 
       synchronized(mWindowMap) { 
           mKeyWaiter.bindTargetWindowLocked(focus); 
       } 
 
       // NOSHIP extra state logging 
       mKeyWaiter.recordDispatchState(event, focus); 
       // END NOSHIP 
 
       try { 
           if (DEBUG_INPUT || DEBUG_FOCUS) { 
                Log.v(TAG, &quot;Delivering key&quot; + event.getKeyCode() 
                       + &quot; to &quot;+ focus); 
           } 
           focus.mClient.dispatchKey(event); 
           return INJECT_SUCCEEDED; 
       } catch (android.os.RemoteException e) { 
                        Log.i(TAG, &quot;WINDOWDIED during key dispatch: &quot; + focus); 
           try { 
                removeWindow(focus.mSession,focus.mClient); 
           } catch (java.util.NoSuchElementException ex) { 
                // This will happen if thewindow has already been 
                // removed. 
            } 
       } 
 
       return INJECT_FAILED; 
} 
</rich_text></node></node></cherrytree>